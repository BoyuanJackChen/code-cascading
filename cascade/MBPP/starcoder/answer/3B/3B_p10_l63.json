[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set()\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.add(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            print(test_tup1[i])"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # get the unique elements from both lists\n    unique1 = list(set(test_tup1))\n    unique2 = list(set(test_tup2))\n\n    # find the shared elements\n    shared = set(unique1) & set(unique2)\n\n    # return the shared elements as a list\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common.append(element)\n    return common"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # create an empty set to store the common elements\n    common_elements = set()\n\n    # iterate over each element in both lists\n    for element in list1:\n        # check if the element is also in the second list\n        if element in list2:\n            # add the element to the set of common elements\n            common_elements.add(element)\n\n    # convert the set back to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If the loop completes without returning True, then the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If none of the above conditions are met, then the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is not a prime number or not.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\nprint(is_not_prime(2)) # Output: True\nprint(is_not_prime(5)) # Output: True\nprint(is_not_prime(10)) # Output: False\nprint(is_not_prime(15)) # Output: True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # check if the number is divisible by any number less than or equal to its square root\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap queue\n    heap = [nums[i] for i in range(n)]\n    hq.heapify(heap)\n\n    # remove the smallest integer from the heap and add it to the result list\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n        n -= 1\n\n        # add the new smallest integer to the heap\n        if n > 0:\n            heapq.heappush(heap, nums[n-1])\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for _ in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min-heap\n    min_heap = [(-num, i) for i, num in enumerate(nums)]\n    hq.heapify(min_heap)\n    # Remove the smallest n elements from the heap\n    for _ in range(n):\n        heapq.heappop(min_heap)\n    # Convert the min-heap back to a list of numbers\n    return [num for _, num in min_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns a list of the n largest integers in descending order.\n    '''\n    # convert the list to a heap\n    heap = hq.nlargest(n, nums)\n    # extract the largest n elements from the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, num)\n        # remove the smallest element if heap size is greater than n\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    # convert the min heap to a list and return it\n    return [hq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap from the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # iterate over the remaining elements of the list and add them to the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            # remove the smallest element from the heap\n            hq.heappop(heap)\n            # add the new element to the heap\n            hq.heappush(heap, nums[i])\n\n    # return the largest elements of the heap as a list in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    heap = [-x for x in nums[:n]]\n    hq.heapify(heap)\n\n    # Remove the smallest element from the heap and add the next smallest element to the heap\n    for _ in range(n, len(nums)):\n        # Remove the smallest element from the heap\n        smallest = -hq.heappop(heap)\n\n        # Add the next smallest element to the heap\n        hq.heappush(heap, -nums[_])\n\n    # Return the heap as a list of integers\n    return [(-x) for x in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n to store the n largest integers\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, -num)\n    \n    # Iterate through the remaining n-1 integers, pushing them into the max heap\n    for num in nums[n:]:\n        if -num > hq.heappop(max_heap):\n            hq.heappush(max_heap, -num)\n    \n    # Return the n largest integers in descending order\n    result = [hq.heappop(max_heap) for _ in range(n)]\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num) # convert to negative and put in max heap\n        \n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(max_heap)) # pop and convert to positive and append to result\n        \n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the two numbers to binary strings and compare them\n    binary_string_x = bin(x)[2:]\n    binary_string_y = bin(x)[2:]\n    \n    if binary_string_x == binary_string_y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0: \n        if x & 1!= 0: \n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # check if the input is a positive integer\n    if type(x)!= int or x < 1: \n        return False\n    \n    # check if the input is a power of 2\n    if x == 0 or x == 1: \n        return True\n    \n    # check if the input is a power of 2 using bitwise operators\n    while x > 1: \n        if x & 1!= 0: \n            return False\n        x = x >> 1\n    \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 1:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert binary representation of x to a list\n    x_list = list(bin(x)[2:])\n    # reverse the list\n    x_list.reverse()\n    # check if the list has only one element\n    if len(x_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # \\b matches word boundaries\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words which are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long in the string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # regular expression pattern to match words with length >= 4\n    words = re.findall(pattern, text) # find all matches of the pattern in the input string\n    return words # return the list of words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    pattern = r'\\b\\w{4,}\\b'  # matches any word that is at least 4 characters long\n    matches = re.findall(pattern, text)  # finds all matches using the pattern\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # loop through the list and calculate the squares of each element\n    for num in nums:\n        num_squared = num ** 2\n        # print the square of the element\n        print(num_squared)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    min_rotations = 0\n    for i in range(1, n):\n        if str[i:n] == str[:i] + str[i:n]:\n            min_rotations += 1\n            break\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n\n    # convert the string to a list of characters\n    str_list = list(str)\n\n    # initialize a variable to store the minimum number of rotations\n    min_rot = float('inf')\n\n    # loop through all possible rotations of the string\n    for i in range(len(str_list)):\n        # rotate the string by one character to the right\n        rotated_str = str_list[i:] + str_list[:i]\n\n        # check if the rotated string is equal to the original string\n        if rotated_str == str_list:\n            # if it is, update the minimum number of rotations to i\n            min_rot = i\n\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Calculate the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Find the first character that has a frequency greater than 1\n    first_char = None\n    for char in freq:\n        if freq[char] > 1:\n            first_char = char\n            break\n\n    # Initialize a set to store the characters that need to be swapped\n    swapped_chars = set()\n\n    # Find the second character that has a frequency greater than 1\n    for char in freq:\n        if char!= first_char and freq[char] > 1:\n            swapped_chars.add(char)\n\n    # Swap the characters in the set until we get the same string\n    while str(swapped_chars)!= str(freq):\n        for char in swapped_chars:\n            if str(char) in str(freq) and freq[str(char)] > 1:\n                swapped_chars.remove(char)\n                freq[char] -= 1\n                freq[str(char)] -= 1\n                break\n\n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for char in freq:\n        if freq[char] > 1:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    min_rotations = 0\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the minimum number of rotations required to get the same string\n    for count in range(1, len(str)+1):\n        for i in range(len(str)-count+1):\n            if char_count[str[i]] == count:\n                for j in range(i+count, len(str)):\n                    if char_count[str[j]] == count:\n                        min_rotations += 1\n                        break\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    # Initialize the result variable\n    result = 0\n    # Initialize two pointers, one at the beginning of the string and one at the end\n    left = 0\n    right = n - 1\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # If the characters at the left and right pointers are equal, increment the result variable and move the pointers towards each other\n        if str[left] == str[right]:\n            result += 1\n            left += 1\n            right -= 1\n        # If the characters at the left and right pointers are not equal, rotate the string and move the pointers towards each other\n        else:\n            # Find the middle of the string\n            mid = (left + right) // 2\n            # If the string is already symmetric, there is no rotation needed\n            if str[left:right+1] == str[right:left-1][::-1]:\n                return result\n            # Otherwise, rotate the string\n            else:\n                # Find the index of the first occurrence of the smallest character in the substring from left to mid\n                i = left\n                while i < mid and str[i] < str[mid]:\n                    i += 1\n                # Find the index of the first occurrence of the smallest character in the substring from mid to right\n                j = mid\n                while j < right and str[j] < str[right]:\n                    j += 1\n                # Swap the characters at the left and right pointers, the characters at the i-th and j-th pointers, and the characters at the mid-index pointer\n                str[left], str[right] = str[right], str[left]\n                str[i-1], str[j-1] = str[j-1], str[i-1]\n                str[mid], str[mid-1] = str[mid-1], str[mid]\n                # Move the pointers towards each other\n                left += 1\n                right -= 1\n    # Return the result variable\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    if len(str) == 1:\n        return 0\n\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                return 1\n\n    return 2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Initialize the rotation count to 0\n    rotationCount = 0\n    # Initialize the current string to the input string\n    currStr = str\n\n    # Loop until the current string is the same as the input string\n    while currStr!= str:\n        # Increment the rotation count\n        rotationCount += 1\n        # Create a new string by rotating the current string by 1 position\n        newStr = currStr[1:] + currStr[0]\n        # Update the current string to the new string\n        currStr = newStr\n\n    # Return the rotation count\n    return rotationCount"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Create a dictionary to store the count of characters in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Convert the dictionary to a list of tuples\n    char_count_list = list(char_count.items())\n    \n    # Sort the list in descending order of the count of characters\n    char_count_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    \n    # Initialize a variable to store the last character of the string\n    last_char = str[-1]\n    \n    # Loop through each character in the string and check if the next character is present in the dictionary\n    for i in range(len(str) - 1):\n        if last_char in char_count:\n            # If the character is present, decrement the count of the character in the dictionary\n            char_count[last_char] -= 1\n            \n            # If the count of the character becomes zero, remove the character from the dictionary\n            if char_count[last_char] == 0:\n                del char_count[last_char]\n            \n            # Check if the next character is present in the dictionary\n            if str[i + 1] in char_count:\n                # If the next character is present, increment the count of the character in the dictionary\n                char_count[str[i + 1]] += 1\n            \n            # If the count of the next character becomes zero, remove the character from the dictionary\n            if char_count[str[i + 1]] == 0:\n                del char_count[str[i + 1]]\n        \n        # If the loop has completed and the count of the last character is zero, increment the minimum number of rotations required\n        if char_count[last_char] == 0:\n            min_rotations += 1\n        \n        # Update the last character of the string\n        last_char = str[i]\n    \n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the count of rotations and the maximum length of the string \n    count = 0\n    max_length = len(str)\n    # Iterate through all possible rotations of the string \n    for i in range(max_length): \n        # Iterate through all possible rotations of the string \n        for j in range(max_length-1): \n            # If the two strings are equal, return the count of rotations \n            if str[j:j+i+1] == str[j+i+1:j+i+2]: \n                return count \n    # If the loop completes without returning, the strings are not equal \n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # Find length of string\n    n = len(str)\n\n    # Find all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(i+1, n):\n            rotations.append(str[i:j+1])\n\n    # Find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for rotation in rotations:\n        if str == rotation:\n            min_rotations = min(min_rotations, len(rotation) - 1)\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string\n    \"\"\"\n    # Check if the string is empty\n    if not s:\n        return s\n    # Check if the character is the first character of the string\n    elif s[0] == ch:\n        return s[1:]\n    # Check if the character is the last character of the string\n    elif s[-1] == ch:\n        return s[:-1]\n    # Check for all other cases\n    else:\n        for i in range(len(s)):\n            if s[i] == ch:\n                return s[:i] + s[i+1:]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    # Remove first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Remove last occurrence of character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    # Check if the character is present at the beginning of the string\n    if s[0] == ch:\n        # Remove the first occurrence of the character\n        s = s[1:]\n    else:\n        # If the character is not at the beginning, check if it is present at the end\n        if s[-1] == ch:\n            # Remove the last occurrence of the character\n            s = s[:-1]\n        else:\n            # If the character is not at the beginning nor at the end, do nothing\n            return s\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    # check if the character is present in the string\n    if ch in s:\n        # remove the first occurrence\n        s = s.replace(ch, '', 1)\n        # remove the last occurrence\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return s\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is at the beginning of the string\n    if s[0] == ch:\n        s = s[1:]\n    # check if the character is at the end of the string\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first = s.find(ch)\n    if first!= -1:\n        s = s[:first] + s[first+1:]\n\n    # Remove last occurrence\n    last = s.rfind(ch)\n    if last!= -1:\n        s = s[:last] + s[last+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string\n    \"\"\"\n    s = s.strip()\n    # remove first occurrence\n    s = s.replace(ch, '', 1)\n    # remove last occurrence\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum sum of the row\n        max_sum = max(M[i])\n\n        # Find the row index with the maximum sum\n        max_index = M[i].index(max_sum)\n\n        # Swap the row with the maximum sum with the first row\n        M[i], M[max_index] = M[max_index], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                # Swap rows\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # Sort the matrix according to the row sums\n    sorted_matrix = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] - M[i][i] > M[j][j] - M[j][i]:\n                M[i], M[j] = M[j], M[i]\n            elif M[i][j] - M[i][i] == M[j][j] - M[j][i]:\n                if M[i][j] - M[i][i] > 0:\n                    M[i][j], M[j][j] = M[j][j], M[i][j]\n                else:\n                    M[i][j], M[j][j] = M[i][j], M[j][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Helper function to calculate the sum of a row\n    def row_sum(row):\n        return sum(row)\n\n    # Helper function to sort a row of the matrix\n    def sort_row(row):\n        return sorted(row)\n\n    # Sort each row of the matrix\n    sorted_rows = [sort_row(row) for row in M]\n\n    # Sort the rows by the sum of their elements\n    sorted_rows.sort(key=row_sum)\n\n    # Return the sorted matrix\n    return [row for row in sorted_rows]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Check if the matrix is empty or not\n    if not M:\n        return []\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Find the minimum sum row and its index\n    min_sum_row_index = 0\n    min_sum_row = float('inf')\n    for i in range(len(M)):\n        sum_row = sum(M[i])\n        if sum_row < min_sum_row:\n            min_sum_row = sum_row\n            min_sum_row_index = i\n    \n    # Add the minimum sum row to the sorted matrix\n    sorted_M.append(M[min_sum_row_index])\n    \n    # Remove the minimum sum row from the matrix\n    del M[min_sum_row_index]\n    \n    # Recursively sort the rest of the matrix\n    sorted_M.extend(sort_matrix(M))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # initialize a list to store the indices of the sorted matrix\n    sorted_indices = []\n\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # initialize the sum of the row\n        row_sum = 0\n\n        # loop through each element of the row\n        for j in range(len(M[i])):\n            # add the element to the sum\n            row_sum += M[i][j]\n\n        # append the index of the row to the sorted_indices list\n        sorted_indices.append(i)\n\n    # loop through each column of the matrix\n    for j in range(len(M[0])):\n        # initialize the sum of the column\n        col_sum = 0\n\n        # loop through each element of the column\n        for i in range(len(M)):\n            # add the element to the sum\n            col_sum += M[i][j]\n\n        # sort the elements of the column in ascending order\n        col_sum_indices = sorted(range(len(M)), key=lambda k: M[k][j])\n\n        # loop through each element of the column again\n        for i in range(len(M)):\n            # swap the elements at the sorted indices with the original indices\n            M[i][j], M[col_sum_indices[i]][j] = M[col_sum_indices[i]][j], M[i][j]\n\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # iterate over all columns\n    for j in range(n):\n        # initialize minimum element and its index\n        min_val = M[0][j]\n        min_idx = 0\n        # iterate over all rows after the first row\n        for i in range(1, n):\n            # if current element is less than minimum element, update minimum element and index\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n                min_idx = i\n        # swap the minimum element with the first row\n        M[0][j], M[min_idx][j] = M[min_idx][j], M[0][j]\n    # print the sorted matrix\n    for i in range(n):\n        print(M[i])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize two empty lists to store the sorted matrix and the list of row sums\n    sorted_matrix = []\n    row_sums = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the sum to the list of row sums\n        row_sums.append(row_sum)\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Loop through each row of the matrix again\n    for row in M:\n        # Loop through each element of the row\n        for i in range(len(row)):\n            # Loop through each element of the row again\n            for j in range(len(row)):\n                # If the current element is greater than the row sum, swap it with the element in the sorted row\n                if row[i] > row_sums[j]:\n                    row[i], row[j] = row[j], row[i]\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # Sort rows\n    for i in range(n):\n        M[i] = sorted(M[i])\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows based on the row sums\n    for i in range(n):\n        for j in range(i + 1, n):\n            if row_sums[i] > row_sums[j]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the lengths of the base, height, and length of the triangle base.\n    It then calculates the volume of the prism using the formula: V = 1/2 * base * height * length\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    volume = l * b * h\n    \n    # return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculating the area of the prism\n    area = 0.5 * l * b \n    # calculating the volume of the prism\n    volume = area * h\n    # printing the result\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5 * l * b * h # formula for volume of triangular prism\n    print(\"The volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find the volume of a triangular prism\n    V = l * b * h / 6\n    \n    # Return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    print(\"The volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # Formula to find the volume of a triangular prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/2 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6  # formula for volume of a triangular prism\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.match(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"^[a-z_]+$\"\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])(\\w+)'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'(?<!_)([a-z]+)(?=_)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+[_]*)+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=[a-z])[A-Z]+(?=[a-z])|(?<=[A-Z])[a-z]+(?=[A-Z])')\n    return pattern.match(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define regex pattern to match lowercase letters\n    pattern = re.compile(r'([a-z])(\\w)')\n    \n    # Find all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Check if any matches were found\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n\nprint(square_perimeter(4)) # Output: 20"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, no_of_chars=256):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    if len(string) < no_of_chars:\n        return string\n    else:\n        for i in range(no_of_chars):\n            if string[i] not in string[no_of_chars:]:\n                return string[:no_of_chars] + string[no_of_chars+1:]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = list(string)\n    second_string = list(\"abcdefghijklmnopqrstuvwxyz\" * NO_OF_CHARS)\n    for char in first_string:\n        if char in second_string:\n            first_string.remove(char)\n    return \"\".join(first_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a new string where all characters from the first string \n    that are present in the second string have been removed.\n    '''\n    char_list = list(string)\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Define the list of characters to be removed\n    NO_OF_CHARS = 256\n    remove_chars = set(string.lower())\n\n    # Convert the string to list of characters\n    chars = list(string.lower())\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the characters in the string\n    for char in chars:\n        # If the character is not present in the list of characters to be removed, append it to the result list\n        if char not in remove_chars:\n            result.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list\n    lst = list(string)\n    \n    # Initialize an empty list to store characters to be removed\n    char_to_remove = []\n    \n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # Check if the character is present in the second string\n        if lst[i] in string:\n            # If it is, add it to the list of characters to be removed\n            char_to_remove.append(lst[i])\n    \n    # Remove the characters from the list\n    for i in range(len(char_to_remove)):\n        lst.remove(char_to_remove[i])\n    \n    # Convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    lst = list(string)\n\n    # Remove characters from the list which are present in the second string\n    for i in range(len(lst)):\n        if lst[i] in string:\n            lst.pop(i)\n            i -= 1\n    \n    # Convert the list of characters back to a string\n    result = ''.join(lst)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove all the characters from the string which are present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    \n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the second string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a new string with the characters from the first string which are not present in the second string\n    new_string = \"\"\n    for char in string:\n        if char not in freq_dict or freq_dict[char] == 0:\n            new_string += char\n        else:\n            freq_dict[char] -= 1\n    \n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.find(chr(i))!= -1:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Loop through the characters in the string\n    for i in range(len(string_list)):\n        # Check if the character is in the list of characters to remove\n        if string_list[i] in chars_to_remove:\n            # If it is, remove it from the list\n            string_list.pop(i)\n            # Reduce the length of the list\n            i -= 1\n\n    # Convert the list of characters back to a string\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the values and their indexes in the array\n    num_dict = {}\n    for i, num in enumerate(arraynums):\n        if num in num_dict:\n            return True\n        num_dict[num] = i\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        else:\n            duplicates.append(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in freq:\n            # if it is, return True as the array contains a duplicate element\n            return True\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the unique elements of the array\n    unique_dict = {}\n    # Loop through each element of the array\n    for num in arraynums:\n        # If the element is not already in the dictionary, add it\n        if num not in unique_dict:\n            unique_dict[num] = True\n        # If the element is already in the dictionary, return True\n        else:\n            return True\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a dictionary to store the elements of the array\n    count = {}\n    # Loop through the array and update the count of each element\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Loop through the count dictionary and check for duplicates\n    for num, count in count.items():\n        if count > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements\n    indices = {}\n\n    # iterate through the array and keep track of the indices of the elements\n    for i, num in enumerate(arraynums):\n        # check if the element has been seen before\n        if num in indices:\n            # if it has, return true because there is a duplicate\n            return True\n        else:\n            # otherwise, add the index to the dictionary\n            indices[num] = i\n\n    # if we get here, there are no duplicates\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the elements of the array\n    elements = {}\n    # Iterate over the array\n    for num in arraynums:\n        # Check if the element is already in the dictionary\n        if num in elements:\n            # If it is, return True (the array contains a duplicate)\n            return True\n        else:\n            # If not, add the element to the dictionary\n            elements[num] = True\n    # If we get to this point, the array does not contain a duplicate\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if there are any duplicates in the set\n    if len(arraynums)!= len(unique_nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x >= 10 and x <= 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    return x % 2!= 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    if x > 100 and x % 2 == 0:\n        return False\n    if x >= 100 and x % 2!= 0:\n        return True\n    if x >= 200 and x % 2 == 0:\n        return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x % 10 == 3 or x % 10 == 7 or x % 10 == 9:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x in [1, 2, 5, 10, 20]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: # if x is even, then it's not a woodball\n        return False\n    elif x % 3 == 0: # if x is divisible by 3, then it's not a woodball\n        return False\n    else: # if none of the above conditions are met, then it's a woodball\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to string\n    num = str(num)\n    # Reverse the string\n    reverse = num[::-1]\n    # Convert the reversed string back to integer\n    reverse = int(reverse)\n    # Check if the given number is one less than twice its reverse\n    if num < 2*reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    temp = num\n    \n    while temp > 0:\n        reverse_num = reverse_num * 10 + temp % 10\n        temp //= 10\n\n    if reverse_num == (num - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = abs(num) # convert the number to positive value\n    reverse = 0 # initialize the reverse variable\n    \n    # convert the number to integer and store it in reverse\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10 # divide the number by 10\n    \n    # check if the reverse is one less than twice the original number\n    if reverse - num < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    str_num = str(num)\n    \n    # Reverse the string and convert it back to an integer\n    rev_num = int(str_num[::-1])\n    \n    # Check if the original number is one less than twice its reverse\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Function to reverse a number\n    def reverse(num):\n        return int(str(num)[::-1])\n\n    # Reverse the given number\n    num = reverse(num)\n\n    # Check if the reverse of the given number is one less than twice the original number\n    if num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the number to a string\n    num_str = str(num)\n\n    # reverse the string\n    rev_str = num_str[::-1]\n\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # check if the original number is one less than twice its reverse\n    if num == rev_num + 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Convert the string to a list of digits\n    num_list = list(num_str)\n\n    # Reverse the list of digits\n    num_list.reverse()\n\n    # Convert the list of digits back to a string\n    reversed_num = ''.join(num_list)\n\n    # Convert the reversed number to an integer\n    reversed_num = int(reversed_num)\n\n    # Check if the reversed number is one less than twice its original number\n    if reversed_num < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # get the reverse of the given number\n    num_reverse = 0\n    while num > 0:\n        num_reverse = num_reverse * 10 + num % 10\n        num //= 10\n    # check if the reverse of the number is one less than twice the original number\n    if num_reverse == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Initialize the variable to store the maximum number\n    max_num = 0\n\n    # Iterate through the list of digits\n    for i in arr:\n        # Iterate through the digits and append the digit to the number variable\n        num = 0\n        for j in range(len(str(i))):\n            num += int(str(i)[j])\n\n        # Check if the current number is greater than the maximum number\n        if num > max_num:\n            max_num = num\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += (int(arr[i])*(10**(len(arr)-i-1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > max_num:\n                max_num = arr[i] + arr[j]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = int(''.join(str(x) for x in arr))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum possible number that can be formed by concatenating the digits.\n\n    Example:\n    >>> find_Max_Num([1, 4, 5])\n    451\n\n    \"\"\"\n    max_num = 0\n    for i in range(1, len(arr)+1):\n        max_num = max(max_num, sum([arr[j]*(10**(i-1+j)) for j in range(len(arr))]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the largest number that can be formed by the digits in the list.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through the list of digits and check if they can form the result\n    for i in arr:\n        # Check if the current digit can form the result\n        if i >= result:\n            # If it can form the result, update the result\n            result = i * (int(i) + 1) // 2\n\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n\n    # Initialize the largest number\n    largest = 0\n\n    # Iterate through the sorted list\n    for i in range(len(arr)):\n        # Calculate the product of the current digit and the maximum number that can be formed with the remaining digits\n        current_num = arr[i] * largest\n\n        # Update the largest number\n        largest = max(largest, current_num)\n\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    digits = sorted(list(set(arr)), reverse=True)\n    max_num = 0\n    for i in range(len(digits)):\n        num = 0\n        for j in range(i+1):\n            num += digits[j] ** i\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the maximum number that can be formed by the digits.\n    '''\n    # sort the list in descending order\n    arr.sort(reverse=True)\n    # initialize a variable to store the maximum number\n    max_num = 0\n    # iterate over the digits\n    for digit in arr:\n        # multiply the current digit with the previous maximum number and add it to max_num\n        max_num += digit * max_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if the signs of x and y are opposite\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as inputs and returns True if the two integers have opposite signs, else False.\n    '''\n    \n    # Check if the two integers have opposite signs\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(f\"{x} and {y} have opposite signs.\")\n    else:\n        print(f\"{x} and {y} have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(\"The given integers have opposite signs.\")\n    else:\n        print(\"The given integers have same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y < 0:\n        return \"The first number has an opposite sign to the second number.\"\n    elif x < 0 and y > 0:\n        return \"The second number has an opposite sign to the first number.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is less than 0\n    if n < 0:\n        return \"Please enter a positive integer\"\n\n    # Initialize variables\n    prev_num = 0\n    curr_num = 1\n    sum_of_prev_odd_squares = 0\n\n    # Loop through numbers up to n\n    for i in range(1, n+1):\n        # Check if current number is odd\n        if curr_num % 2!= 0:\n            # If it is odd, add it to sum of prev odd squares\n            sum_of_prev_odd_squares += curr_num\n\n        # Update variables\n        prev_num = curr_num\n        curr_num += 4\n\n    # Check if the sum of prev odd squares is equal to the nth octagonal number\n    if sum_of_prev_odd_squares == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 24\n    \n    if n <= 0:\n        return None\n    \n    while a <= n:\n        if (a**2 + b**2 == c**2):\n            return a\n        elif a**2 + b**2 < c**2:\n            a += 1\n        elif a**2 + b**2 > c**2:\n            b -= 1\n        c = a + b + 8\n        \n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    else:\n        return 12*is_octagonal(n-1) + 12*is_octagonal(n-2) + 4*n - 12"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return (n*(n-1)*(2*n-1))/6"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def nth_octagonal(n):\n        \"\"\"\n        Helper function to calculate the nth octagonal number.\n        \"\"\"\n        oct_sum = 0\n        for i in range(n):\n            oct_sum += (i*i + 4*i*i*i - i*i*i*i)\n        return oct_sum\n\n    if n <= 0:\n        return \"Invalid input.\"\n    else:\n        return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i**2*3)\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    oct_num = n * (2 * n - 1) ** 2\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    return sum(i*i + j*j for i in range(1, n//2+1) for j in range(1, i+1)) == n*n*n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n * n + 1) ** 0.5\n\nn = int(input(\"Enter a number: \"))\nprint(\"The octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # Initialize a defaultdict to store the count of substrings with each sum of digits\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Extract the substring from s and convert it to a set of digits\n            substring = set(str(s[i:j+1]))\n            # Calculate the sum of digits in the set\n            substring_sum = sum(substring)\n            # Store the count of substrings with the given sum in the defaultdict\n            count[substring_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(1 for count in count.values() if count > 1)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the sum of digits for each substring\n    substring_sum = defaultdict(int)\n\n    # loop through each substring of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            # add up the digits in the substring and store the sum\n            substring_sum[substring] += sum(int(digit) for digit in substring)\n\n    # count the number of substrings with sum equal to their length\n    count = 0\n    for substring, sum_ in substring_sum.items():\n        if sum_ == len(substring):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            substrings[(j - i + 1, sum(map(int, s[i:j+1])))] += 1\n\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with a given sum\n    count_dict = defaultdict(int)\n\n    # loop through the string s\n    for i in range(len(s)):\n        # loop through the string s from the current index i and find all possible substrings\n        for j in range(i, len(s)+1):\n            # extract the substring from the original string s\n            substring = s[i:j]\n            # check if the sum of digits in the substring is equal to the length of the substring\n            if sum(int(digit) for digit in substring) == len(substring):\n                # increment the count of substrings with the given sum in the dictionary\n                count_dict[len(substring)] += 1\n\n    # return the count of substrings with the given sum\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            if sum(digits) == len(digits):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    seen = defaultdict(set)\n\n    for i in range(len(s)):\n        substring = s[i:i+len(s)-i]\n        count += 1\n        if substring == substring[::-1]:\n            continue\n        digits = set(substring)\n        for digit in digits:\n            if digit!= 0:\n                digit_count = sum(1 for c in substring if c == digit)\n                if digit_count == len(digits):\n                    seen[digit].add(substring)\n                    count += len(seen[digit])\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count[s[i:j+1]] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    char_count = defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            if sum(digits) == len(digits):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with each sum of digits\n    digit_sum_count = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to the length of the substring\n            if sum(map(int, s[i:j])) == len(s[i:j]):\n                # Increment the count for this substring in the dictionary\n                digit_sum_count[len(s[i:j])] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(digit_sum_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n\n    # Iterate over the rest of the list\n    for i in range(1, len(xs)):\n        # If the current element is smaller than the smallest number, update the smallest number to that element\n        if xs[i] < smallest:\n            smallest = xs[i]\n\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if xs[0] < smallest:\n            return xs[0]\n        else:\n            return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize variables\n    max_diff = 0\n    pair = None\n\n    # loop through the list of tuples\n    for i in range(len(test_list)-1):\n        # check for the difference between the current pair and the next pair\n        diff = test_list[i][1] - test_list[i+1][0]\n\n        # update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            pair = (test_list[i][0], test_list[i+1][1])\n\n    # return the pair with the maximum difference\n    return pair"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    for i in range(len(pairs)):\n        diff = pairs[i][1] - pairs[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Find the minimum and maximum values in the list\n    min_value = min(test_list[0])\n    max_value = max(test_list[0])\n\n    # Calculate the maximum difference between pairs of numbers in the list\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list[i])):\n            current_difference = abs(test_list[i][j] - test_list[i][i])\n            if current_difference > max_difference:\n                max_difference = current_difference\n\n    # Return the maximum difference found\n    return max_difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # Loop through the list\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the current and next elements\n        diff = test_list[i+1][1] - test_list[i][1]\n\n        # Update the current difference if the new difference is greater\n        if diff > current_diff:\n            current_diff = diff\n\n        # Update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Create an empty dictionary to store the sum of each tuple\n    sum_dict = {}\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Calculate the sum of the tuple and add it to the dictionary\n        sum_dict[tup] = sum(tup)\n\n    # Initialize the maximum difference to be the difference between any two tuples\n    max_diff = max(sum_dict.values()) - min(sum_dict.values())\n\n    # Iterate through each tuple in the list again and calculate the difference between each pair\n    for tup1 in test_list:\n        for tup2 in test_list:\n            if tup1!= tup2:\n                diff = abs(sum_dict[tup1] - sum_dict[tup2])\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list in ascending order based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list, result_list=None):\n        if result_list is None:\n            result_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flatten_list(item, result_list)\n            else:\n                result_list.append(item)\n        return result_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        if isinstance(lst, list):\n            for item in lst:\n                flatten_list(item)\n        else:\n            yield lst\n\n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten_list(data_list):\n        '''\n        Flatten a list by recursively calling itself.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the head of the list to the sum of the tail of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(data_list):\n        \"\"\"\n        Recursively flatten a list by appending each element to a new list.\n        \"\"\"\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n        lst (list): The list to count the positive numbers in.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    pos = 0\n    for num in lst:\n        if num > 0:\n            pos += 1\n    return pos"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        bell_numbers = [1] * (n + 1)\n        bell_numbers[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    :param n: integer\n        The number of Bell numbers to partition.\n\n    :return: int\n        The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    # Initialize the count to 1\n    count = 1\n\n    # Iterate through all possible values of k\n    for k in range(2, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers with Bell numbers of value k\n        ways = 0\n        for j in range(1, k+1):\n            ways += j * (n - j + 1)\n        count *= ways\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n*bell_number(n-1) - bell_number(n-2))//2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                count += 1\n            else:\n                count += j\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_number(n/2)\n    else:\n        return 2 * (bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        bell = [1] * (n+1)\n        bell[0] = 0\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:]) and A[0] > A[-1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    elif A[0] <= A[1]: \n        return is_Monotonic(A[1:])\n    else: \n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    # Check if the array is empty or not\n    if len(A) <= 1:\n        return True\n    \n    # Initialize a variable to keep track of the last element of the array\n    last = A[-1]\n    \n    # Loop through the array from the second to the second-to-last element\n    for i in range(len(A)-2, -1, -1):\n        # If the current element is less than the last element, then the array is not monotonic\n        if A[i] < last:\n            return False\n        \n        # Update the last element with the current element\n        last = A[i]\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    if n < 3:\n        return True\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) <= 1:\n        return True\n\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n\n    if A[0] < A[-1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sublist in l:\n        if sublist == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists, l and s, and checks if s is a sublist of l.\n    '''\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if the given list is sublist of the main list\n    for sublist in s:\n        if sublist in l:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input and returns True if the first list contains the second list,\n    and False otherwise.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    while i <= len(l)-len(s):\n        if l[i:i+len(s)] == s:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length or False otherwise.\n    \"\"\"\n\n    # iterate through the list of tuples\n    for i in range(len(Input)):\n        # get the length of the current tuple\n        curr_len = len(Input[i])\n        # compare it with the length of all the previous tuples\n        for j in range(i):\n            if len(Input[j])!= curr_len:\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if the input is a list of tuples\n    if not all(isinstance(item, tuple) for item in Input):\n        return False\n\n    # Loop through the list of tuples and check if the length is equal\n    for item in Input:\n        if len(item)!= len(Input[0]):\n            return False\n\n    # If we reach this point, all tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    equal = True\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            equal = False\n            break\n    return equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple) == len(set(tuple)):\n            return True\n        else:\n            return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n\n    # sort the list using the Comb Sort algorithm\n    while swapped:\n        swapped = False\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        # decrease the gap until it reaches 1\n        gap = int(gap / 1.3)\n        i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Set the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n\n    # Set the gap size\n    gap = 1\n\n    # While the gap size is greater than 1\n    while gap < max_val - min_val:\n\n        # Set the new gap size\n        gap = 3 * gap + 1\n\n        # While the gap size is greater than 1\n        while gap < max_val - min_val:\n\n            # Check if the current gap size is in the correct range\n            if nums[0] >= nums[gap] and nums[gap] >= nums[2 * gap] and nums[2 * gap] >= nums[3 * gap]:\n                # If it is, update the gap size\n                gap = 3 * gap + 1\n            else:\n                # If not, reset the gap size to the minimum value\n                gap = min_val\n\n    # Iterate through the sorted list and swap adjacent elements if they are out of order\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    i = 0\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        gap = int(gap / 1.3)\n        i += 1\n\n        if gap < 1:\n            gap = 1\n\n        if i == 10:\n            print(\"No convergence for the given list.\")\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    max_iter = 1000\n    min_num = min(nums)\n    gap = max(1, int(min_num / 1.3))\n\n    while gap > 1:\n        swapped = False\n\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        max_iter = max(max_iter // 2, 1)\n        gap = int(gap * 1.1)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > temp:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = temp\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    min_num = min(nums)\n\n    while min_num > 0:\n        swapped = False\n        for i in range(1, n):\n            if nums[i - 1] > nums[i]:\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n                swapped = True\n        if not swapped:\n            break\n        min_num = min(nums)\n        n -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = min(gap // 2, n)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = gap // 10  # Decrease gap by 10%\n\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is divisible by 4\n    if n % 4 == 0: \n        return False\n\n    # Check if the given number is divisible by 8\n    if n % 8 == 0: \n        return False\n\n    # Check if the given number is divisible by 16\n    if n % 16 == 0: \n        return False\n\n    # Check if the given number is divisible by 32\n    if n % 32 == 0: \n        return False\n\n    # If none of the above conditions are true, then the given number can be represented as the difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = 1\n    y = 1\n    while x * x < n:\n        y += 1\n        x += 1\n    if x * x == n:\n        return \"The number is a difference of two squares.\"\n    else:\n        return \"The number is not a difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        sqrt_n = int(n**0.5)\n        for i in range(sqrt_n, 0, -1):\n            if i**2 + n == i**2:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the given number is even or odd\n    if n % 2 == 0:\n        print(n, \"is not a difference of two squares\")\n    else:\n        # check if the given number can be represented as the difference of two squares\n        if n % 5 == 0:\n            print(n, \"can be represented as the difference of two squares\")\n        else:\n            # check if the difference of two squares is a perfect square\n            if (n-1)**2 == 2*n**2:\n                print(n, \"can be represented as the difference of two squares\")\n            else:\n                print(n, \"is not a difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root_n = int(n ** 0.5)\n    root_n_plus_one = root_n + 1\n    \n    if root_n_plus_one ** 2 == n:\n        print(True, root_n, root_n_plus_one)\n    else:\n        print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    def is_square(num): \n        \"\"\"\n        Helper function to check whether the given number is a square or not.\n        \"\"\"\n        return num * num == num\n        \n    def gcd(a, b): \n        \"\"\"\n        Helper function to find the greatest common divisor of two numbers.\n        \"\"\"\n        while b: \n            a, b = b, a % b \n        return a\n        \n    def is_difference_of_squares(num): \n        \"\"\"\n        Main function to check whether the given number can be represented as the difference of two squares or not.\n        \"\"\"\n        if is_square(num): \n            return False\n        \n        a, b = 0, num \n        while b: \n            a, b = b, a % b \n        a = a + 1\n        \n        if not is_square(a): \n            return False\n        \n        return gcd(a, num) == 1\n        \n    if is_difference_of_squares(n): \n        print(f\"{n} is a difference of squares\")\n    else: \n        print(f\"{n} is not a difference of squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Function to check whether the given number can be represented as the difference of two squares or not\n    def is_dif_square(num):\n        # Convert the given number to a string to avoid integer division\n        num_str = str(num)\n\n        # Calculate the square of each digit in the string\n        square_list = [int(digit) ** 2 for digit in num_str]\n\n        # Calculate the difference of the squares of the digits\n        square_diff = square_list[0] - square_list[1]\n\n        # Check whether the difference is a square number or not\n        return square_diff ** 2 == num\n\n    # Check if the given number can be represented as the difference of two squares or not\n    if is_dif_square(n):\n        print(\"The number can be represented as the difference of two squares.\")\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(x):\n        return x == int(x**0.5)**2\n\n    # check if n can be expressed as the difference of two squares\n    if is_square(n) and is_square(n-2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = int(num ** 0.5)\n    for i in range(2, sqrt_num + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_difference_of_squares(num):\n    if is_Square(num):\n        return True\n    sqrt_num = int(num ** 0.5)\n    for i in range(2, sqrt_num + 1):\n        if num % i == 0:\n            return is_Square(num - i ** 2) or is_Square(num + i ** 2)\n    return False\n\nn = int(input(\"Enter a number: \"))\n\nif is_difference_of_squares(n):\n    print(\"Yes, the number can be represented as the difference of two squares.\")\nelse:\n    print(\"No, the number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Create a list of the same colors repeated as many times as the patterns array\n    same_colors = [colors[i] for i in range(len(patterns))]\n    \n    # Create a list of tuples containing the index of each pattern and its colors\n    pattern_list = [(i, patterns[i]) for i in range(len(patterns))]\n    \n    # Check if each color in the colors list is present in the same_colors list and the same number of times as in the patterns list\n    for i in range(len(colors)):\n        if colors[i] not in same_colors or same_colors.count(colors[i])!= pattern_list[i][1]:\n            return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize variables\n    current_pattern = 0\n    current_color = colors[0]\n\n    # Check if the first color in the colors list matches the first pattern in the patterns list\n    if current_color == patterns[0]:\n        current_pattern += 1\n\n    # Loop through the remaining colors in the colors list\n    for i in range(1, len(colors)):\n        # If the current color matches the next pattern in the patterns list, increment the current pattern\n        if current_color == patterns[current_pattern]:\n            current_pattern += 1\n\n        # If the current color does not match the next pattern, return False\n        if current_color!= patterns[current_pattern]:\n            return False\n\n        # Update the current color\n        current_color = colors[i]\n\n    # If we have gone through the entire colors list and found all patterns in the patterns list, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(colors) and j < len(patterns):\n        if colors[i] == patterns[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    return j == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists as input: colors and patterns. \n    Colors is a list of colors, patterns is a list of patterns, where patterns[i] represents the sequence of colors for the i-th color. \n    The function returns True if the colors follow the sequence given in patterns, and False otherwise.\n    '''\n    # Convert the patterns to sets to remove duplicates and keep the order of the patterns\n    patterns = set(patterns)\n    # Check if the length of the colors and patterns lists are the same\n    if len(colors)!= len(patterns):\n        return False\n    # Initialize a variable to keep track of the current index in the colors list\n    current_index = 0\n    # Iterate over the patterns list\n    for pattern in patterns:\n        # Check if the pattern is a valid sequence of colors\n        if not all(color in colors for color in pattern):\n            return False\n        # Check if the current index matches the index in the pattern\n        if current_index!= pattern.index(colors[current_index]):\n            return False\n        # Increment the current index\n        current_index += 1\n    # If the loop completes, it means that the colors follow the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if all the colors in the list of patterns are present in the list of colors\n    if all(color in colors for pattern in patterns for color in pattern):\n\n        # check if each pattern matches the sequence in its corresponding color\n        for pattern in patterns:\n            if pattern[0] not in colors:\n                return False\n            if pattern[1] not in colors:\n                return False\n            if pattern[2] not in colors:\n                return False\n            if pattern[3] not in colors:\n                return False\n            if pattern[4] not in colors:\n                return False\n\n        # check if each color appears only once in the list of patterns\n        colors_set = set(colors)\n        for pattern in patterns:\n            if len(pattern)!= len(colors_set):\n                return False\n\n        return True\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a dictionary to store the frequency of each color in the given list of colors\n    freq_dict = {}\n    for color in colors:\n        if color in freq_dict:\n            freq_dict[color] += 1\n        else:\n            freq_dict[color] = 1\n    \n    # Check whether the color frequencies in the patterns list match the color frequencies in the dictionary\n    if len(freq_dict)!= len(patterns):\n        return False\n    \n    for i in range(len(freq_dict)):\n        if freq_dict.get(patterns[i])!= freq_dict.get(colors[i]):\n            return False\n    \n    # Check whether the sequence of colors in the patterns list matches the sequence of colors in the dictionary\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - len(patterns) + 1):\n        current_pattern = []\n        for j in range(len(patterns)):\n            current_pattern.append(colors[i + j])\n        if current_pattern == patterns:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    color_set = set(colors)\n    pattern_set = set(patterns)\n\n    for pattern in pattern_set:\n        if len(pattern)!= 3:\n            return False\n        if pattern not in color_set:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    # create a dictionary to store the number of elements in each tuple\n    count = {}\n    for t in test_list:\n        for e in t:\n            if e in count:\n                count[e] += 1\n            else:\n                count[e] = 1\n    \n    # find the tuples with all elements divisible by K\n    result = []\n    for t in test_list:\n        if all(e % K == 0 for e in t):\n            result.append(t)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        divisible_count = 0\n        for i in t:\n            if i % K == 0:\n                divisible_count += 1\n                if divisible_count == len(t):\n                    result.append(t)\n                    break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    # create a set of all possible tuples of size K from the input list of tuples\n    possible_tuples = set(tuple(test_list[i:i+K]) for i in range(len(test_list)-K+1))\n    # iterate over the set and check if each tuple has all elements divisible by K\n    result = [t for t in possible_tuples if all(x % K == 0 for x in t)]\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store tuples\n    result = []\n    \n    # loop through the list of tuples\n    for i in test_list:\n        # if all elements in the tuple are divisible by k, add it to the result list\n        if all(x % K == 0 for x in i):\n            result.append(i)\n            \n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number k as inputs and returns a list of tuples that have all elements divisible by k from the input list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns a list of tuples that have all elements divisible by K from the input list.\n    '''\n\n    # Create an empty list to store the tuples\n    result_list = []\n\n    # Loop through the list of tuples\n    for tup in test_list:\n\n        # Check if all elements of the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result_list.append(tup)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        tuple_i = test_list[i]\n        for j in range(i+1, len(test_list)):\n            tuple_j = test_list[j]\n            if all(x % K == 0 for x in tuple_i) and all(x % K == 0 for x in tuple_j):\n                divisible_tuples.append(tuple_i + tuple_j)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns a list of tuples that have all elements divisible by K from the input list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create an empty list to store the results\n    result = []\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Create a set to store the elements of the current tuple\n        set_tup = set(tup)\n        # Check if all elements of the set are divisible by K\n        if all(elem % K == 0 for elem in set_tup):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tup)\n    # Return the list of tuples that meet the criteria\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        print(str(n) + \" is divisible by 11\")\n    else:\n        print(str(n) + \" is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    # split the sentence into words\n    words = s.split()\n\n    # iterate through each word in the list\n    for word in words:\n        # check if the length of the word is odd or even\n        if len(word) % 2 == 1:\n            # if the length is odd, return True\n            return True\n        # if the length is even, continue to the next word in the list\n        else:\n            continue\n\n    # if all the words in the list have even length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split() # split the sentence into a list of words\n    for word in words:\n        if len(word) % 2 == 0: # if the length of the word is even\n            return word, \"even\"\n        elif len(word) % 2 == 1: # if the length of the word is odd\n            return word, \"odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate through each word and check its length\n    for word in words:\n        if len(word) % 2 == 1: # If the length is odd, print the word\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split(): \n        if len(word) % 2 == 1: \n            print(word, \"is odd\")\n        else: \n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    # Split the string into words using the space as a delimiter\n    words = s.split()\n    # Initialize a counter variable to keep track of the length of the words\n    count = 0\n    # Iterate over each word in the list and update the count variable\n    for word in words:\n        count += len(word)\n    # Check if the count is odd or even and return the result\n    if count % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    longest_word = max(words, key=len)\n    return len(longest_word) % 2 == 1"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.split()\n    for word in s:\n        if len(word) % 2 == 1:\n            print(word + \" is odd.\")\n        else:\n            print(word + \" is even.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Find the sum of the series: S = n(n+1)(n+2)(n+3)\n    S = n * (n+1) * (n+2) * (n+3)\n    \n    # Find the factorial of n-1\n    fact_n_minus_1 = 1\n    for i in range(1, n):\n        fact_n_minus_1 *= i\n    \n    # Find the factorial of n\n    fact_n = 1\n    for i in range(1, n+1):\n        fact_n *= i\n    \n    # Find the product of the factorials\n    prod_fact = fact_n_minus_1 * fact_n\n    \n    # Divide S by the product of the factorials to get the nth tetrahedral number\n    return S / prod_fact"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tet_num = 0\n    for i in range(1, n+1):\n        tet_num = tet_num + i*(3*i-1)\n    return tet_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    k = 1\n    num = 0\n\n    # Loop through each k-th element of the sequence\n    while k <= n:\n        # Compute the next element of the sequence\n        num += 4 * (k ** 2) - 2 * k + 1\n        k += 1\n\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function finds the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 12\n    else:\n        return 4 * tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 20\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize the sum and the number of terms in the series\n    sum = 0\n    term_count = 1\n\n    # Loop through the terms in the series\n    for i in range(1, n+1):\n        # Add the current term to the sum\n        sum += i\n\n        # Increment the term count\n        term_count += 1\n\n        # If the term count is greater than the number of terms,\n        # update the series\n        if term_count > n:\n            break\n\n    return sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the first tetrahedron\n    T1 = 1\n    T2 = 2\n    T3 = 3\n\n    # Define the second tetrahedron\n    T4 = 4\n    T5 = 5\n    T6 = 6\n\n    # Define the third tetrahedron\n    T7 = 7\n    T8 = 8\n    T9 = 9\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the range of n\n    for i in range(n):\n\n        # Increment the result by T1^2\n        result += T1**2\n\n        # Calculate T1\n        T1 += 1\n\n        # Calculate T2\n        T2 += 1\n\n        # Calculate T3\n        T3 += 1\n\n        # Calculate T4\n        T4 += 2\n\n        # Calculate T5\n        T5 += 2\n\n        # Calculate T6\n        T6 += 2\n\n        # Calculate T7\n        T7 += 2\n\n        # Calculate T8\n        T8 += 2\n\n        # Calculate T9\n        T9 += 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 20\n    else:\n        for i in range(3, n+1):\n            if n%i == 0:\n                return 0\n            else:\n                return i*i*i + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 2\n    d = 4\n    for i in range(n): \n        a, b, c, d = b, c, a + b + c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * tetrahedral_number(n-1) - tetrahedral_number(n-2)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n\n    # Calculate the volume of the sphere\n    volume = (4/3) * math.pi * (r ** 3)\n\n    # Return the volume of the sphere\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r ** 3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n\n    Parameters:\n    r: float - the radius of the sphere\n\n    Returns:\n    float - the volume of the sphere\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    char_sum = 0\n\n    for char in strr:\n        char_sum += ord(char)\n\n    return chr((char_sum % 26) + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to lowercase to make the function case-insensitive\n    strr = strr.lower()\n    \n    # Initialize an empty string to store the characters\n    result = \"\"\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value to the result\n        result += str(ascii_value)\n        \n        # Add a space to separate the ASCII values\n        result += \" \"\n    \n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        ascii_value = ord(char)\n        result = (result + ascii_value) % 26\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i]) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return result % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(strr)\n    # Initialize the sum of ASCII values\n    sum_ascii = 0\n    # Loop through the list of characters\n    for char in lst:\n        # Get the ASCII value of the character\n        ascii_value = ord(char)\n        # Add the ASCII value to the sum\n        sum_ascii += ascii_value\n    # Calculate the character made by adding the ASCII values modulo 26\n    char_made = chr((sum_ascii % 26) + ord('a'))\n    # Return the character made\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # Adding 65 to ASCII value of 'A' to convert it to lowercase\n    char = chr((ascii_sum % 26) + 65)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(((sum_ascii % 26) + 65))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    count = 1\n    \n    while count < n:\n        new_sequence = [sequence[i-1] + sequence[i] for i in range(1, len(sequence))]\n        sequence = new_sequence\n        count += 1\n        \n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(1, n+1):\n        sequence.append(sum(sequence[-i:]))\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(n):\n        sequence.append(sequence[i] + sequence[i+1])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * 256\n    sequence[0] = 1\n    sequence[1] = 1\n    sequence[2] = 1\n    \n    for i in range(3, 256):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n    \n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # Initialize the sequence with 0 and 1\n    sequence = [0, 1]\n\n    # Loop through the sequence n times\n    for i in range(2, n + 1):\n        # Generate the next number in the sequence\n        next_number = sum(sequence[-2:])\n\n        # Append the next number to the sequence\n        sequence.append(next_number)\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        print(\"Please enter a positive integer\")\n    elif n == 1:\n        print(\"The first number in the newman conway sequence is 1\")\n    else:\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    print(i)\n                else:\n                    print(i, end=\" \")\n            else:\n                if i % 5 == 0:\n                    print(i)\n                else:\n                    print(i, end=\" \")"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    # Initialize variables\n    sequence = [1]\n    current = 1\n    next = 2\n\n    # Generate the sequence up to n\n    for i in range(n):\n        if next > n:\n            break\n        sequence.append(next)\n        current, next = next, current + next\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r ** 2\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the area of a circle with radius r\n    area_circle = math.pi * r * r\n    # Calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r * r * r\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere.\n\n    Returns:\n    float: surface area of the sphere.\n    '''\n\n    # surface area of a sphere is 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n):\n        if n == 0:\n            return 1\n        else:\n            return centered_hexagonal_number_helper(n-1) // 2 + centered_hexagonal_number_helper(n-1) // 2 + n\n    \n    return centered_hexagonal_number_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n) * (3 ** 0.5) - (3 * n ** 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return centered_hexagonal_number(n // 2) + centered_hexagonal_number(n // 2 + 1)\n    else:\n        return centered_hexagonal_number(n // 2) + centered_hexagonal_number(n // 2 - 1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function returns the n-th centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    # Initialize a variable to store the centered hexagonal number\n    centered_hexagonal = 0\n    # Calculate the number of rows and columns in the hexagonal grid\n    rows = n // 2\n    columns = n - rows * 2\n    # Loop through each row of the grid and add the centered hexagonal number to it\n    for i in range(rows):\n        centered_hexagonal += (columns - i) * 6 * (i + 1)\n    # Add the remaining centered hexagonal number to the first row of the grid\n    centered_hexagonal += columns * 6 * rows\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Base case: if n is 1 or 0, return n\n    if n == 1 or n == 0:\n        return n\n\n    # Calculate the sum of the centered hexagonal numbers up to n\n    sum_hex = (n**2 + 2*n - 1) / 6\n\n    # Return the sum of the centered hexagonal numbers up to n\n    return sum_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the number of rows and columns in the grid\n    num_rows = 1\n    num_cols = 1\n    \n    # Initialize the total number of centered hexagonal numbers\n    centered_count = 0\n    \n    # Loop until we have found the nth centered hexagonal number\n    while centered_count!= n:\n        # Calculate the number of cells in each row and column\n        num_cells = num_rows * 2 - 1\n        \n        # Add the number of cells to the total number of centered hexagonal numbers\n        centered_count += num_cells\n        \n        # Increment the number of rows and columns\n        num_rows += 1\n        num_cols += 1\n    \n    # Return the centered hexagonal number\n    return centered_count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655, 48278,"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the sum of centered hexagonal numbers\n    sum_centered = 0\n    \n    # Check if n is valid\n    if n <= 0:\n        return 'Invalid input'\n    \n    # Loop n times\n    for i in range(n):\n        # Calculate the centered hexagonal number\n        hex_num = (i+1) * (2*i+1)\n        \n        # Add the centered hexagonal number to the sum\n        sum_centered += hex_num\n    \n    # Return the sum of centered hexagonal numbers\n    return sum_centered"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): Dictionary 1.\n        dict2 (dict): Dictionary 2.\n        dict3 (dict): Dictionary 3.\n\n    Returns:\n        dict: Merged dictionary.\n\n    \"\"\"\n    # Initialize an empty dictionary to store the merged dictionary.\n    merged_dict = {}\n    \n    # Loop through the three dictionaries and merge their values into the merged dictionary.\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = max(dict1[key], dict2[key], dict3[key])\n    \n    # Return the merged dictionary.\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [value]\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [value]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to hold the merged dictionaries\n    merged_dict = {}\n    \n    # loop through each key in the first dictionary\n    for key in dict1:\n        # if the key exists in the second and third dictionaries,\n        # add their values to the merged dictionary as a list\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        # if the key only exists in the first dictionary, add its value to the merged dictionary as a list\n        elif key in dict1:\n            merged_dict[key] = [dict1[key]]\n        # if the key only exists in the second or third dictionary, add its value to the merged dictionary as a list\n        elif key in dict2 or key in dict3:\n            merged_dict[key] = [dict2[key], dict3[key]]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    :param dict1: First dictionary to be merged.\n    :type dict1: dict\n    :param dict2: Second dictionary to be merged.\n    :type dict2: dict\n    :param dict3: Third dictionary to be merged.\n    :type dict3: dict\n    :return: Merged dictionary.\n    :rtype: dict\n    \"\"\"\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Use a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if element in freq:\n            freq[element] += 1\n        # if the element is not in the dictionary, add it with frequency 1\n        else:\n            freq[element] = 1\n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function returns a dictionary where the keys are the elements of the list and the values are the counts of those elements.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    while True:\n        if n-1 < 0:\n            return n\n        if n-1 == 0:\n            return 0\n        n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [i for i in range(1, N+1)]\n    closest = min(nums)\n    for num in nums:\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    closest_num = N\n    for i in range(1, N+1):\n        if abs(i - N) < abs(closest_num - N):\n            closest_num = i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    if n == 0:\n        return 0\n    min_diff = float('inf')\n    smallest = float('inf')\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small_nums = []\n    for i in range(1, N+1):\n        if i < N:\n            small_nums.append(i)\n        elif i > N:\n            small_nums.append(i-1)\n    closest = min(small_nums)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # find the smallest number in the range [1, N]\n    smallest = 1\n    for i in range(2, N):\n        if i % 2 == 0:\n            smallest = i\n    \n    # find the smallest number in the range [N/2, N]\n    smallest_half = N // 2\n    for i in range(smallest_half, N):\n        if i % 2 == 0:\n            smallest_half = i\n    \n    # find the smallest number in the range [N//2, N]\n    smallest_third = N // 3\n    for i in range(smallest_third, N):\n        if i % 2 == 0:\n            smallest_third = i\n    \n    # calculate the sum of the smallest numbers in the range [1, N]\n    sum_range = smallest + smallest_half + smallest_third\n    \n    # calculate the difference between the sum and N\n    diff = N - sum_range\n    \n    # if the difference is positive, return the smallest number in the range [1, N]\n    if diff > 0:\n        return smallest\n    # if the difference is negative, return the smallest number in the range [N/2, N]\n    elif diff < 0:\n        return smallest_half\n    # if the difference is zero, return the middle number in the range [N/2, N]\n    else:\n        return smallest_third"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # Initialize the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Iterate through the numbers from 1 to N\n    for num in range(1, N+1):\n        # If the current number is smaller than the current smallest number\n        if num < smallest:\n            # Update the smallest number to the current number\n            smallest = num\n        # If the current number is larger than the current largest number\n        elif num > largest:\n            # Update the largest number to the current number\n            largest = num\n\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    else:\n        return closest_num(N-1) + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        for i in range(N-1, -1, -1):\n            if i < 10**(len(str(N)))-1:\n                return i\n        return 0"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    # initialize the minimum distance to infinity\n    min_dist = float('inf')\n\n    # loop through each number between 1 and N (inclusive)\n    for num in range(1, N + 1):\n        # calculate the absolute difference between the current number and N\n        dist = abs(N - num)\n\n        # update the minimum distance if the current distance is less than the minimum distance\n        if dist < min_dist:\n            min_dist = dist\n\n    # return the smallest number greater than or equal to N that is less than N + min_dist\n    return N + min_dist"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initializing variables\n    max_length = 0\n    \n    # iterating through the list of words\n    for word in list1:\n        # finding the length of the current word\n        length = len(word)\n        \n        # updating the maximum length if the current word is longer than the previous maximum\n        if length > max_length:\n            max_length = length\n            \n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize max_length to 0\n    max_length = 0\n\n    # Iterate through each item in the list1\n    for item in list1:\n\n        # Find the length of the current word by counting its characters\n        word_length = len(item.split())\n\n        # If the length of the current word is greater than the max_length, update max_length\n        if word_length > max_length:\n            max_length = word_length\n\n    # Return the value of max_length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_length = 0\n\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initializing variable to store the length of the longest word\n    max_len = 0\n\n    # Looping through the list of words\n    for word in list1:\n        # Checking the length of the word\n        if len(word) > max_len:\n            # Updating the length of the longest word if the current word is longer\n            max_len = len(word)\n\n    # Returning the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for item in list1:\n        word_list.append(item.split())\n    max_len = 0\n    for word in word_list:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the string is present in the list\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the string.\")\n    else:\n        print(f\"{sub_str} is not present in the string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found in the given string\")\n    else:\n        print(\"Substring not found in the given string\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the given string is present in the list\n    if sub_str in str1:\n        # If it is, return True\n        return True\n    else:\n        # If it's not, return False\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str_list:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in str_list)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        return \"Please provide a valid input.\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return \"This number is even.\"\n    else:\n        return \"This number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    if n < 1 or n > 1000:\n        return False\n    total = 0\n    for i in range(2, n+1):\n        total += i\n        if total > n:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether a given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    if n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        # Check if the number is divisible by 4 or 6\n        if n % 4 == 0 or n % 6 == 0:\n            return True\n        else:\n            # Check if the number is divisible by 1, 3, 5, or 7\n            if n % 1 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n                return True\n            else:\n                # Check if the number is divisible by 2, 4, 6, 8, 10, or 12\n                if n % 2 == 0 or n % 4 == 0 or n % 6 == 0 or n % 8 == 0 or n % 10 == 0 or n % 12 == 0:\n                    return True\n                else:\n                    # If none of the above conditions are met, it's an undulating number\n                    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"The number is undulating.\"\n    elif n % 2 == 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables\n    odd_count = 0\n    even_count = 0\n\n    # Iterate through the number\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if the number is undulating\n    if odd_count > even_count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple with the smallest second element\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value (using the itemgetter function from the operator module)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first tuple that has the smallest second value.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The index of the first tuple that has the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple (assuming the list is not empty)\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(0, 1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples in ascending order based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the minimum length to be infinity\n    min_length = float('inf')\n\n    # loop through each list in the list of lists\n    for sublist in lst:\n        # find the length of each sublist\n        sublist_length = len(sublist)\n\n        # update the minimum length if the current sublist length is smaller\n        if sublist_length < min_length:\n            min_length = sublist_length\n\n    # return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000   # initialize min_len to a very large number  \n    for i in lst:  \n        if len(i) < min_len:  \n            min_len = len(i)  \n    return min_len  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize a variable to store the length of the smallest list found so far\n    min_length = float('inf')\n\n    # loop through the list of lists and find the length of the smallest list\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # return the length of the smallest list found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize a variable to store the minimum length found so far\n    for sub_lst in lst:  # iterate over each sub-list in the main list\n        length = len(sub_lst)  # find the length of the sub-list\n        if length < min_length:  # if the length is smaller than the current minimum, update the minimum\n            min_length = length\n    return min_length  # return the minimum length found"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for i in range(len(lst)):\n        if min_len is None or len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n // 2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    if n < 2:\n        return 0\n    else:\n        count = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # create a list of all numbers from 1 to n\n    numbers = list(range(1, n+1))\n    \n    # initialize a boolean array of size n to True\n    prime = [True] * (n+1)\n    \n    # use the Sieve of Eratosthenes algorithm to mark non-prime numbers\n    p = 2\n    while p*p <= n:\n        if prime[p]:\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # count the number of prime divisors of n\n    count = 0\n    for i in numbers:\n        if prime[i]:\n            count += 1\n            if i*i > n:\n                break\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count + 1"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(lst):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Use a loop to iterate through each element in the flattened list\n    for element in list1:\n        # If the element is not already in the dictionary, add it with a value of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            freq_dict[element] += 1\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each item in the list\n    for item in list1:\n        # if the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            # concatenate the sublist to a flattened list\n            flattened_list = [subitem for sublist in item for subitem in sublist]\n            # call the function recursively on the flattened list\n            frequency_lists(flattened_list)\n        # if the item is not a list, add it to the dictionary with a count of 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item in freq_dict:\n                freq_dict[sub_item] += 1\n            else:\n                freq_dict[sub_item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to hold the binary representation\n    binary = ''\n    # loop through each digit of the decimal number\n    while n > 0:\n        # extract the last digit of the decimal number\n        digit = n % 2\n        # convert the digit to a binary digit and append it to the binary string\n        binary = str(digit) + binary\n        # remove the last digit of the decimal number\n        n //= 2\n    # return the binary string with no leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_representation = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n //= 2\n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Define the function to check if a number is a palindrome\n    def is_palindrome(n):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n        \"\"\"\n        # Convert the number to a string and reverse it\n        reverse_num = str(n)[::-1]\n        # Compare the original number with its reversed version\n        return reverse_num == str(n)\n\n    # Define the function to generate the next smallest palindrome\n    def generate_next_palindrome(n):\n        \"\"\"\n        Helper function to generate the next smallest palindrome of a specified number.\n        \"\"\"\n        # Initialize the counter for number of palindromes\n        count = 0\n        # Generate palindromes starting from n + 1\n        while True:\n            # Generate a number by concatenating n and the count\n            new_num = str(n) + str(count)\n            # Check if the new number is a palindrome\n            if is_palindrome(int(new_num)):\n                # If it is, return it as an integer\n                return int(new_num)\n            # Increment the count and try again\n            count += 1\n\n    # Find the next smallest palindrome\n    smallest_palindrome = generate_next_palindrome(num)\n\n    # Return the next smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = [int(d) for d in str(num)]\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            if digits[i] > digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n            else:\n                break\n        if digits[i] < 10:\n            digits[i] = 10\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the given integer to string\n    num_str = str(num)\n\n    # initialize the largest palindrome less than or equal to the given integer\n    largest_palindrome = int(num_str[::-1])\n\n    # check if the largest palindrome is less than or equal to the given integer\n    if largest_palindrome <= num:\n        # return the next largest palindrome greater than the largest palindrome less than or equal to the given integer\n        return next_smallest_palindrome(largest_palindrome + 1)\n    else:\n        # return the largest palindrome less than or equal to the given integer\n        return largest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # check if the number is a palindrome\n    if num == int(str(num)[::-1]):\n        # if it is, return the next smallest palindrome\n        return num + 1\n    else:\n        # otherwise, find the smallest integer that is greater than the number and is a palindrome\n        for i in range(num + 1, sys.maxsize + 1):\n            if i == int(str(i)[::-1]):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num):\n            return next_num\n        num += 1\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = next_smallest_palindrome(num)\n    print(f\"The next smallest palindrome of {num} is {result}.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is palindrome or not\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n\n    # Check for numbers from 100 to 999\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            if i * j == num:\n                return i * 1000 + j * 100 + 1\n\n    # If none of the above numbers match, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Define a function to check if a number is a palindrome\n    def is_palindrome(num):\n        '''\n        Define a function to check if a number is a palindrome.\n        '''\n        # Convert the number to a string and reverse it\n        reversed_num = str(num)[::-1]\n        # Compare the original and reversed number\n        return num == int(reversed_num)\n\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # Return the number as is\n        return num\n\n    # Find the smallest number that is not a palindrome\n    for i in range(num, 10**9, -1):\n        if not is_palindrome(i):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def is_even(num):\n        return num % 2 == 0\n    \n    def largest_palindrome(num):\n        palindrome = 0\n        for i in range(num, 0, -1):\n            if is_palindrome(i):\n                palindrome = i\n                break\n        return palindrome\n    \n    def next_largest_palindrome(num):\n        if is_even(num):\n            num += 1\n        else:\n            num += 2\n        \n        while not is_palindrome(num):\n            if is_even(num):\n                num += 1\n            else:\n                num += 2\n        \n        return num\n    \n    def next_smallest_palindrome(num):\n        if is_even(num):\n            num += 1\n        else:\n            num += 2\n        \n        while not is_palindrome(num):\n            if is_even(num):\n                num += 1\n            else:\n                num += 2\n        \n        return num\n    \n    if is_even(num):\n        num += 1\n    else:\n        num += 2\n        \n    while not is_palindrome(num):\n        if is_even(num):\n            num += 1\n        else:\n            num += 2\n    \n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Find the smallest palindrome greater than the input number\n    min_palindrome = int(num_str[::-1])\n    \n    # Find the largest palindrome that is less than or equal to the input number\n    max_palindrome = int(num_str) - 1\n    \n    # Check if the smallest palindrome is greater than or equal to the maximum palindrome\n    if min_palindrome >= max_palindrome:\n        # If it is, then the next smallest palindrome is the minimum palindrome\n        return min_palindrome\n    \n    # Find the smallest palindrome greater than the smallest palindrome found\n    while min_palindrome > max_palindrome:\n        # Increment the smallest palindrome\n        min_palindrome += 1\n        \n        # Check if the smallest palindrome is a palindrome\n        is_palindrome = True\n        for i in range(len(num_str)):\n            if num_str[i]!= str(min_palindrome)[i]:\n                is_palindrome = False\n                break\n        \n        # If the smallest palindrome is a palindrome, return it\n        if is_palindrome:\n            return min_palindrome\n    \n    # If no palindrome is found, return the minimum palindrome\n    return min_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Find the largest palindrome that can be formed with the first digits of reversed_num\n    largest_palindrome = 0\n    for i in range(len(reversed_num)):\n        for j in range(i+1, len(reversed_num)+1):\n            current_palindrome = int(reversed_num[:i]+reversed_num[j:])\n            if current_palindrome > largest_palindrome:\n                largest_palindrome = current_palindrome\n\n    # Find the smallest palindrome that can be formed with the first digits of reversed_num\n    smallest_palindrome = 0\n    for i in range(len(reversed_num)):\n        for j in range(i+1, len(reversed_num)+1):\n            current_palindrome = int(reversed_num[:i]+reversed_num[j:])\n            if current_palindrome < smallest_palindrome:\n                smallest_palindrome = current_palindrome\n\n    # Return the smallest palindrome that can be formed with the first digits of reversed_num\n    return smallest_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return 'Invalid input. Please enter a positive integer less than or equal to the length of the array.'\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if k == mid:\n                return arr[mid - 1]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid (i.e., within range of the array length)\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize a counter and an index variable\n    counter = 0\n    index = 0\n    \n    # Loop through the array and update the counter and index variables as needed\n    while counter < k:\n        index += 1\n        if index == len(arr):\n            index = 0\n        counter += 1\n    \n    # Return the kth element\n    return arr[index]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid-1] < arr[mid]:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k should be between 1 and the length of the array.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    camel = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel += letter.lower()\n        elif letter.isupper():\n            camel += '_' + letter.lower()\n        else:\n            camel += letter\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with camel case\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    camel_case = [words[0]]\n    for word in words[1:]:\n        camel_case.append(word.capitalize())\n\n    # Join the words into a single string with the first letter in lowercase\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert snake_case to camelCase\n    camel_case = \"\"\n    capitalize_next = True\n    for char in word:\n        if char == \"_\":\n            capitalize_next = True\n        elif capitalize_next:\n            camel_case += char.upper()\n            capitalize_next = False\n        else:\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            if word[i].isupper():\n                camel_case += \"_\" + word[i].lower()\n            else:\n                camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into individual words using the '_' as the delimiter\n    words = word.split('_')\n    # capitalize the first letter of each word and join them using an underscore\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase and the rest to lowercase\n    camel_case = [words[0].upper() + word[1:].lower() for word in words[1:]]\n    # Join the words into a camel case string\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i == 0 or (word[i]!= '_' and word[i-1].islower()):\n            camel_case_word += word[i].upper()\n        else:\n            camel_case_word += word[i].lower()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i]\n            camel_word = camel_word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i > 0 and word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    count = 1\n    x = 1\n    y = 0\n\n    # Loop until count becomes m\n    while count!= m:\n        # Update x and y\n        if x * x + y * y <= n:\n            y = -y\n        else:\n            x = -x\n\n        # Increment count\n        count += 1\n\n    # Return count\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return (n + m) * eulerian_num(n - 1, m) / (n - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 2\n    elif m == 0:\n        return 1\n    else:\n        if n > m:\n            n, m = m, n\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Find the gcd of n and m\n    gcd = 1\n    while gcd!= 0:\n        if n % gcd == 0 and m % gcd == 0:\n            break\n        else:\n            gcd -= 1\n    else:\n        # There is no common factor for n and m\n        return \"No common factor\"\n    \n    # Calculate the value of a(n, m)\n    a = (n * m) // gcd\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # fill the matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1 or i == n or j == m:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1] - matrix[i-1][j-1]\n\n    # calculate the Eulerian number\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is a positive integer satisfying the following conditions:\n\n    a(1, m) = 1\n    a(n, 1) = 1\n    a(n, m) = a(m, n)\n\n    n and m are positive integers.\n\n    The Eulerian numbers a(n, m) are called Eulerian if they have the following properties:\n\n    a(1, m) is the smallest positive integer greater than 1 that satisfies a(n, m) = a(m, n).\n\n    The number of Eulerian numbers less than or equal to a(n, m) is n! / (m! * (n - m)!)\n\n    Examples:\n\n    >>> eulerian_num(4, 3)\n    11\n    >>> eulerian_num(5, 4)\n    80\n    >>> eulerian_num(6, 5)\n    1810\n    \"\"\"\n\n    if n == 1 and m == 1:\n        return 1\n\n    if n == 1:\n        return 1\n\n    if m == 1:\n        return 1\n\n    if m == n:\n        return a(m, m)\n\n    if m < n:\n        return 1\n\n    numerator = factorial(n) // factorial(m) * factorial(n - m)\n    denominator = factorial(m) * factorial(n - m)\n\n    return numerator // denominator\n\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a number using a loop.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize matrix of size (n+1) x (m+1)\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    # fill the matrix with values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = 1 if i+j == n else 0\n    \n    # find the sum of the first row\n    first_row_sum = sum(matrix[0])\n    \n    # find the sum of the first column\n    first_col_sum = sum(matrix[i][0] for i in range(1, n+1))\n    \n    # calculate the Eulerian number a(n, m)\n    eulerian_num = first_row_sum - first_col_sum\n    \n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the factorials for n and m\n    n_fact = 1\n    for i in range(1, n+1):\n        n_fact *= i\n    \n    m_fact = 1\n    for i in range(1, m+1):\n        m_fact *= i\n\n    # Calculate the Eulerian number\n    a = n_fact // m_fact\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    row = 1\n    col = 1\n    a = 0\n    b = 0\n\n    # Iterate until the (n, m) matrix is filled\n    while row <= n and col <= m:\n        # Add the product of the current row and column to a and b\n        a += row * col\n        b += (row - 1) * col\n\n        # Move to the next row and column\n        row += 1\n        col += 1\n\n    # Return the final result\n    return a, b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = n - m\n    while b > 0:\n        a *= b\n        b -= 1\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Use the sort() method to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # use sorted() function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist alphabetically\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sorted` function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if isinstance(num, bool) and num:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new list to append the given list to the given tuples\n    appended_list = test_list + test_tup\n    return appended_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = tuple(test_tup)\n        test_tup += (item,)\n        test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # First, append the list to the tuple\n    test_tup += test_list\n    \n    # Now, return the new tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup += (test_list,)\n\n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the list to the tuples\n    test_tup.extend(test_list)\n    \n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Merge two sorted lists\n    merged_list = []\n    i, j = 0, 0\n\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n\n    # Add the remaining elements of num1\n    merged_list += num1[i:]\n\n    # Add the remaining elements of num2\n    merged_list += num2[j:]\n\n    # Merge the three lists into one sorted list\n    sorted_list = []\n    i, j, k = 0, 0, 0\n\n    while i < len(merged_list) and j < len(num3) and k < len(num2):\n        if merged_list[i] < num3[k]:\n            sorted_list.append(merged_list[i])\n            i += 1\n        elif merged_list[i] > num3[k]:\n            sorted_list.append(num3[k])\n            k += 1\n        else:\n            sorted_list.append(merged_list[i])\n            i += 1\n            k += 1\n\n    # Add the remaining elements of num3\n    sorted_list += num3[k:]\n\n    # Add the remaining elements of merged_list\n    sorted_list += merged_list[i:]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            sorted_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            sorted_list.append(heapq.heappop(num2))\n        else:\n            sorted_list.append(heapq.heappop(num3))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Convert the combined list into a min heap\n    heap = [combined_list[0]]\n    heapq.heapify(heap)\n    \n    # Iterate through the remaining elements of the list\n    for i in range(1, len(combined_list)):\n        # If the current element is less than or equal to the minimum element in the heap, add it to the heap\n        if combined_list[i] <= heap[0]:\n            heapq.heappush(heap, combined_list[i])\n        # If the current element is greater than the minimum element in the heap, pop the minimum element from the heap and add the current element to the heap\n        else:\n            heapq.heappop(heap)\n            heapq.heappush(heap, combined_list[i])\n    \n    # Return the sorted list\n    return sorted(heap)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    merged_list = sorted(num1 + num2)\n    \n    # Merge the merged list and the third list\n    merged_list = heapq.merge(merged_list, num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the first two lists into a single sorted list\n    merge_list = sorted(num1 + num2)\n    \n    # Merge the merged list with the third list\n    merged_list = merge_list + num3\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # use heapq to sort the merged list\n    heapq.heapify(merged_list)\n\n    # return the sorted list\n    return sorted(heapq.heappop(merged_list) for i in range(len(merged_list)))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the first two lists using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    merged = []\n    while num1 and num2:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged, heapq.heappop(num2))\n    # Merge the remaining lists using heapq\n    while num1:\n        heapq.heappush(merged, heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged, heapq.heappop(num2))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Define the two smallest numbers from each list\n    smallest_1 = min(num1)\n    smallest_2 = min(num2)\n    \n    # Merge the two smallest numbers from each list into a single list\n    merged_list = [smallest_1] + num1[num1.index(smallest_1):] + [smallest_2] + num2[num2.index(smallest_2):]\n    \n    # Merge the remaining numbers from num3 into the merged list\n    merged_list += num3\n    \n    # Sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 1:\n        return 0\n    else:\n        s_new = s[1:] + s[0]\n        return n * odd_Equivalent(s_new, n-1) + (not s_new[0] and s_new[-1])"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1] + s[1:]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        # Convert the binary string into a list of bits\n        bits = [int(bit) for bit in s]\n        # Reverse the list of bits\n        bits.reverse()\n        # Convert the reversed list of bits back into a binary string\n        rev_s = ''.join(str(bit) for bit in bits)\n        # If the length of the binary string is odd, increment the count\n        if len(rev_s) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    def rotate(s, n):\n        \"\"\"\n        Rotate the binary string s n positions to the left.\n        \"\"\"\n        return s[-n:] + s[:-n]\n\n    def count_odd_numbers(s):\n        \"\"\"\n        Count the number of odd numbers in the binary string s.\n        \"\"\"\n        count = 0\n        for c in s:\n            if c == '1':\n                count += 1\n        return count\n\n    rotated_s = rotate(s, n)\n    return count_odd_numbers(rotated_s)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for the count and string\n    count = 0\n    rotated_s = \"\"\n\n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        rotated_s = rotated_s + s[len(s) - 1] + s[:len(s) - 1]\n\n    # Loop through the rotated binary string and count the odd values\n    for bit in rotated_s:\n        if bit == \"1\":\n            count += 1\n\n    # Return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    s = ''.join(sorted(s))\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[0] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to an integer\n    binary_str = int(s,2)\n\n    # Initialize variables to keep track of the number of odd values and the number of rotations\n    odd_count = 0\n    rotation_count = 0\n\n    # Iterate through the rotations\n    while rotation_count < n:\n        # Keep track of the previous value of the binary string\n        prev_val = binary_str\n\n        # Rotate the binary string by left shifting each bit and adding the carry to the next bit\n        binary_str = (binary_str >> 1) + (binary_str & 1)\n\n        # Increment the rotation counter\n        rotation_count += 1\n\n        # If the rotated binary string has an odd value, increment the odd counter\n        if binary_str % 2!= prev_val % 2:\n            odd_count += 1\n\n    # Return the number of odd values after rotating the binary string the given number of times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.lstrip('0')\n    if s[0] == '1':\n        return 0\n    s = '0'*(n-len(s))+s\n    return sum(1 for i in s if i == '1')"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += int(s[-1],2)\n        s = s[1:]\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    count = 0\n    length = len(s)\n    # loop over n rotations\n    for i in range(n):\n        # reverse the binary string\n        s = s[::-1]\n        # count the number of odd values in the rotated string\n        count += sum(int(bit) for bit in s if bit == '1')\n    # return the count of odd values\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through each nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # If the element is not already in the common set, add it\n            if element not in common:\n                common.add(element)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common_set = set()\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n        # If the element is not a list, ignore it\n        if not isinstance(element, list):\n            continue\n\n        # Loop through each element in the nested list\n        for nested_element in element:\n            # If the element is not a list, ignore it\n            if not isinstance(nested_element, list):\n                continue\n\n            # Check if the nested element is in the common set\n            if nested_element in common_set:\n                # If it is, ignore it\n                continue\n\n            # Add the nested element to the common set\n            common_set.add(nested_element)\n\n    # Return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common:\n                continue\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set for common elements\n    common = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # If the element is already in the common set, add it to the output set\n            if element in common:\n                common.add(element)\n\n            # If the element is not in the common set, add it to the set\n            else:\n                common.add(element)\n\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j] or nestedlist[j] in nestedlist[i]:\n                common_elements.append(nestedlist[i])\n                common_elements.append(nestedlist[j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Loop through each list in the nested list\n    for inner_list in nestedlist:\n        # Loop through each element in the inner list\n        for element in inner_list:\n            # Check if the element is already in the common set\n            if element in common_set:\n                # If it is, skip it\n                continue\n            # If the element is not in the common set, add it to it\n            common_set.add(element)\n\n    # Return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Iterate through the nested list and check if each element is in the common set\n    for item in nestedlist:\n        if item in common:\n            common.remove(item)\n        else:\n            common.add(item)\n    \n    # Return the common set as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set()\n\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n        # If the element is a list, call the function recursively on that list\n        if isinstance(element, list):\n            common_elements = common_in_nested_lists(element)\n        # Otherwise, add the element to the set of unique elements\n        else:\n            unique_elements.add(element)\n\n    # Convert the set of unique elements to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if it represents an integer, and False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # check if the string only contains digits and a sign (- or +)\n    if not (text.isdigit() or text.startswith('-') or text.startswith('+')):\n        return False\n\n    # check if the string starts with a sign (- or +)\n    if text.startswith('-'):\n        # check if the string contains any non-digit characters after the sign\n        if any(char not in '0123456789' for char in text[1:]):\n            return False\n        # check if the length of the string is greater than 1 (to avoid a sign)\n        elif len(text) == 1:\n            return False\n    elif text.startswith('+'):\n        # check if the string contains any non-digit characters after the sign\n        if any(char not in '0123456789' for char in text[1:]):\n            return False\n        # check if the length of the string is greater than 1 (to avoid a sign)\n        elif len(text) == 1:\n            return False\n\n    # if we reach this point, the string represents an integer\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # iterate over all dictionaries in the list\n    for item in list1:\n        # check if the dictionary is empty\n        if len(item) == 0:\n            # if empty, return True\n            return True\n    # if all dictionaries are not empty, return False\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # create an empty list to store the output\n    output = []\n    \n    # loop through each dictionary in the list\n    for dic in list1:\n        # check if the dictionary is empty\n        if dic == {}:\n            # add \"empty\" to the output list\n            output.append(\"empty\")\n        else:\n            # check if the dictionary contains any non-empty keys\n            if any(key for key in dic):\n                # add \"not empty\" to the output list\n                output.append(\"not empty\")\n            else:\n                # add \"not empty\" to the output list\n                output.append(\"empty\")\n    \n    # return the output list\n    return output"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n\n    # Initialize the result variable with 0\n    result = 0\n\n    # Iterate over the list of numbers\n    for num in nums:\n        # Multiply the current number by 2 raised to the power of its index\n        result += num * 2**len(nums) - 2**(len(nums)-1)\n\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to hold the result\n    result = 0\n    # Loop through each number in the tuple\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Add the number to the result variable\n            result += num\n        # If the number is negative, add the absolute value to the result variable\n        else:\n            result += abs(num)\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize a variable to store the sum of the numbers in the tuple\n    total = 0\n\n    # iterate through the tuple and add each number to the total\n    for num in nums:\n        total += num\n\n    # return the total\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if element.isnumeric():\n                sublist[sublist.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                if isinstance(item, (int, float)):\n                    item = float(item)\n                elif isinstance(item, str):\n                    item = float(item.replace(',', ''))\n            except ValueError:\n                pass\n            row[row.index(item)] = item\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                element = float(element)\n            else:\n                element = None\n            sublist[test_list.index(sublist)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        if isinstance(item, (int, float)):\n            float_list.append(item)\n        elif isinstance(item, list):\n            float_list.extend(list_to_float(item))\n        else:\n            float_list.append(float(item))\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list of strings using split() function\n    lst = string.split()\n    # Return the list of strings\n    return lst"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    This function takes a string as input and returns a list of strings.\n    The list is created by splitting the input string on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    words = string.split()\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    n = len(arr)\n    # Initialize two variables to keep track of the first and last element that appears only once\n    first = None\n    last = None\n\n    # Traverse the array starting from the second element\n    for i in range(1, n):\n        # If the current element is equal to the previous element, it means that the element\n        # appears only once and we need to update the first and last variables accordingly\n        if arr[i] == arr[i-1]:\n            if first is None:\n                first = i\n            last = i\n\n    # Return the element that appears only once\n    if first is None:\n        return None\n    else:\n        return arr[first]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    n = len(arr)\n    # Initialize count array to store count of elements in arr\n    count = [0] * n\n\n    # Traverse the array and increment the count of each element\n    for i in range(n):\n        count[arr[i]] += 1\n\n    # Initialize a set to store unique elements\n    unique = set()\n\n    # Traverse the count array and check if the count is 1 for any element\n    for i in range(n):\n        if count[i] == 1:\n            # If the count is 1, add the element to the set\n            unique.add(i)\n\n    # Check if there is only one unique element\n    if len(unique) == 1:\n        return unique.pop()\n    else:\n        return \"No unique element found\"\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the indices of the elements that appear only once\n    indices = {}\n    \n    # Iterate over the array and count the number of occurrences of each element\n    for i, elem in enumerate(arr):\n        if elem not in indices:\n            indices[elem] = [i]\n        else:\n            indices[elem].append(i)\n    \n    # Find the element that appears only once and return its value\n    for elem, indices in indices.items():\n        if len(indices) == 1:\n            return elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    element = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] == element:\n            count += 1\n        else:\n            count = 1\n            element = arr[i]\n    \n    if count == 1:\n        return element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and increment the count in the count_dict for each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Loop through the count_dict to find the element that appears only once\n    for num in count_dict:\n        if count_dict[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables\n    max_count = 0\n    max_element = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        count = 1  # Initialize count to 1\n        prev_element = arr[i]  # Initialize previous element to current element\n\n        # Loop through the array from index i+1\n        for j in range(i+1, len(arr)):\n            # Check if the current element is equal to previous element\n            if arr[j] == prev_element:\n                # If yes, increment count\n                count += 1\n            else:\n                # If not, reset count to 1 and update max count and max element\n                if count > max_count:\n                    max_count = count\n                    max_element = prev_element\n                # Reset count and previous element to current element\n                count = 1\n                prev_element = arr[j]\n\n    # Return max element\n    return max_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in count:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_abs_product = -1\n    current_product = 1\n    max_product_tuple = None\n\n    # Iterate over each tuple in the list\n    for i in range(len(list1)):\n        # Get the current tuple\n        current_tuple = list1[i]\n\n        # Calculate the absolute difference between the two numbers in the tuple\n        abs_diff = abs(current_tuple[0] - current_tuple[1])\n\n        # Update the maximum absolute product\n        if abs_diff > max_abs_product:\n            max_abs_product = abs_diff\n            max_product_tuple = current_tuple\n\n        # Update the current product\n        current_product = current_tuple[0] * current_tuple[1]\n\n        # Check if the current product is greater than the maximum product\n        if current_product > max_product_tuple[0] * max_product_tuple[1]:\n            max_product_tuple = current_tuple\n\n    # Return the maximum product tuple\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples.\n    \n    Args:\n        lst: A list of tuples.\n        \n    Returns:\n        A tuple containing the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][0] * lst[i][1]*lst[j][1]\n            if product > max_product:\n                max_product = product\n    return (max_product)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    def max_product_pair(lst):\n        '''\n        Helper function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n\n        def absolute_diff(a, b):\n            '''\n            Helper function to find the absolute difference between two numbers.\n            '''\n            return abs(a - b)\n\n        max_product = -float('inf')\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if absolute_diff(lst[i][0], lst[j][0]) > max_product:\n                    max_product = absolute_diff(lst[i][0], lst[j][0])\n        return max_product\n\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pair_product = max_product_pair(list1[i:j+1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i] * lst[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize max_product to a negative value\n    max_product = -1\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the numbers in the tuple\n            product = abs(list1[i][0]*list1[j][1])\n            # update max_product if the current product is greater\n            max_product = max(max_product, product)\n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs\n    of tuples within the list.\n    '''\n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Compute the product of the two numbers in each pair and take the absolute value\n            product = abs(list1[i][0]*list1[j][1])\n            # Update the maximum product if the new product is greater\n            if product > max_product:\n                max_product = product\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    product = 1\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n                product = list1[i][0]*list1[j][1]\n    return max_product, product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i!= 1:\n            if i == sum_of_its_divisors(i):\n                amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\ndef sum_of_its_divisors(n):\n    '''\n    Write a function to sum of divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    limit = int(input(\"Enter the limit: \"))\n    result = sum_amicable_numbers(limit)\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    '''\n    A helper function to check if a number is amicable or not.\n    '''\n    for i in range(1, num):\n        if (num % i == 0) and (num / i == i):\n            return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers from 1 to the specified limit\n    numbers = [x for x in range(1, limit+1)]\n\n    # iterate over the list and check if the number is amicable\n    amicable_numbers = []\n    for num in numbers:\n        if num in amicable_numbers:\n            continue\n        # check if num is divisible by any of the previous numbers in the list\n        for other_num in numbers:\n            if other_num > num and (num % other_num == 0 or other_num % num == 0):\n                amicable_numbers.append(num)\n                break\n\n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize variables\n    amicable_sum = 0\n    count = 0\n    \n    # Check for factors of 2 and 3\n    for num in range(1, limit):\n        if num % 2 == 0 and (num % 3 == 0 or num % 3 == 2):\n            amicable_sum += num\n            count += 1\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(2, limit):\n        if i not in amicable_numbers:\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    break\n                j += 1\n            if j == i:\n                amicable_numbers.add(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    amicable_sum = 0\n    num = 0\n    # Iterate through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if number is amicable\n        if is_amicable(i):\n            # Add amicable number to sum\n            amicable_sum += i\n    # Return sum of amicable numbers\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    # Check if number is less than 2\n    if num < 2:\n        return False\n    # Check for any number between 2 and number/2\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    # If number is found to be amicable, return True\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to keep track of amicable numbers\n    sum_of_amicable = 0\n    amicable_set = set()\n\n    # Loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num in amicable_set:\n            continue\n        is_amicable = True\n        # Loop through all numbers from 1 to limit-1 to check if the sum is equal to the number\n        for other_num in range(1, limit):\n            if num + other_num == limit and num!= other_num:\n                amicable_set.add(num)\n                amicable_set.add(other_num)\n                sum_of_amicable += num + other_num\n                break\n        if is_amicable:\n            continue\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable by checking if it is divisible by any number in the range of 1 to the square root of the number\n        for div in range(1, num):\n            if num % div == 0:\n                if div == num // div:\n                    # The number is amicable\n                    amicable_numbers.add(num)\n                else:\n                    # The number is not amicable, as it's not divisible by both div and num // div\n                    break\n\n    # Calculate the sum of all amicable numbers and return it\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit):\n        if num == sum_amicable or num == sum_amicable + 2:\n            continue\n        elif sum_amicable == 0 or num == sum_amicable - 2:\n            sum_amicable += num\n        else:\n            a, b = 0, 0\n            for i in range(1, num):\n                if num % i == 0:\n                    a = i\n                    b = num // i\n            if a == b:\n                sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a list to store all amicable numbers\n    amicable_numbers = []\n    \n    # Loop through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num in amicable_numbers:\n            continue\n        elif sum([x for x in range(1, num)]) == num:\n            amicable_numbers.append(num)\n    \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the modulus and argument of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    argument = cmath.phase(complex(a,b))\n\n    # convert the argument to degrees and return it\n    return (argument * 180.0 / cmath.pi)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle*180/cmath.pi,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # find the magnitude and angle of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    angle = cmath.phase(a + b*1j)\n    \n    # convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle.\n\n    Args:\n    a (complex): First complex number.\n    b (complex): Second complex number.\n\n    Returns:\n    float: Angle of the two complex numbers in radians.\n    \"\"\"\n    # Taking the modulus of the two complex numbers\n    modulus = cmath.sqrt(a.real**2 + a.imag**2)\n    \n    # Taking the angle of the complex numbers\n    angle = cmath.phase(a/modulus)\n    \n    # Returning the angle\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    dp = [[0] * (length + 1) for _ in range(length + 1)]\n\n    for i in range(1, length + 1):\n        for j in range(1, length + 1):\n            if string[i - 1] == '0':\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\n    return dp[length][length]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length-1):\n        if string[i:i+2] == '00':\n            diff = 2\n        elif string[i:i+2] == '11':\n            diff = 1\n        else:\n            diff = 0\n        max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    num_0s = 0\n    num_1s = 0\n    max_diff = 0\n\n    for bit in string:\n        if bit == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n        diff = abs(num_0s - num_1s)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    length = 0\n    num_0s = 0\n    num_1s = 0\n\n    for char in string:\n        if char == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n\n        if num_0s == 0:\n            length = max(length, num_1s)\n        else:\n            length = max(length, num_1s - num_0s)\n\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    current_count = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            current_count += 1\n        else:\n            current_count = 1\n        \n        diff = abs(prev_count - current_count)\n        if diff > max_diff:\n            max_diff = diff\n        \n        prev_count = current_count\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        zeros = string.count('0', i, n)\n        ones = string.count('1', i, n)\n        \n        if zeros > ones:\n            max_diff = max(max_diff, ones - zeros)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count = [0] * 2\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n        diff = abs(count[0] - count[1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    max_start = 0\n    max_end = 0\n    for i in range(n):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n            max_start = i\n            max_end = i\n        elif diff == max_diff:\n            if i < max_start:\n                max_start = i\n            elif i > max_end:\n                max_end = i\n    return max_diff, max_start, max_end"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        if count_zeroes == 0 or count_ones == 0:\n            max_diff = max(max_diff, count_zeroes - count_ones)\n            count_zeroes = 0\n            count_ones = 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    prev_0_count = 0\n    prev_1_count = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_1_count += 1\n        else:\n            prev_0_count += 1\n\n        if prev_0_count > prev_1_count:\n            max_diff = max(max_diff, prev_0_count - prev_1_count)\n\n        prev_0_count = prev_0_count % 2\n        prev_1_count = prev_1_count % 2\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a,b):\n    '''\n    This function takes two numbers as input and finds their common divisors.\n    It then finds the sum of those common divisors.\n    '''\n    divisors_set = set()\n    \n    # Finding the divisors of a and b\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_set.add(i)\n    \n    # Finding the sum of common divisors\n    sum_divisors = sum(divisors_set)\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Function to find the GCD of two numbers\n    def gcd(a, b):\n        \"\"\"\n        Function to find the GCD of two numbers using Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Function to find the sum of common divisors of two numbers\n    def common_divisors_sum(a, b):\n        \"\"\"\n        Function to find the sum of common divisors of two numbers using the sum of GCDs.\n        \"\"\"\n        # Find the GCD of two numbers\n        gcd_ab = gcd(a, b)\n\n        # Find the GCD of the GCD of two numbers and the given number\n        gcd_abc = gcd(gcd_ab, a)\n\n        # Find the sum of common divisors of the GCD and the given number\n        common_divisors_sum = (gcd_abc - gcd_ab + a) % gcd_abc\n\n        return common_divisors_sum\n\n    # Find the sum of common divisors of the two numbers\n    result = common_divisors_sum(a, b)\n\n    # Return the sum of common divisors\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def gcd(a, b):\n    '''\n    This function calculates the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    '''\n    This function calculates the least common multiple of two numbers.\n    '''\n    return (a * b) // gcd(a, b)\n\n\ndef common_divisors(a, b):\n    '''\n    This function finds the common divisors of two given numbers.\n    '''\n    return [x for x in range(1, min(a, b) + 1) if a % x == 0 and b % x == 0]\n\n\ndef sum_of_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    common = common_divisors(a, b)\n    return sum(common)\n\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\nresult = sum_of_common_divisors(a, b)\nprint(\"The sum of common divisors of\", a, \"and\", b, \"is:\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_set = set()\n\n    # Finding the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Finding the sum of common divisors\n    sum_of_divisors = sum(common_divisors)\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the common divisors of two numbers using Euclid's algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the sum of common divisors of two numbers\n    def sum_of_common_divisors(a, b):\n        divisors = [1]\n        for i in range(2, min(a, b) + 1):\n            if gcd(i, a) == 1 and gcd(i, b) == 1:\n                divisors.append(i)\n        return sum(divisors)\n\n    # Finding the sum of common divisors of a and b using the above function\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Define a function to check if a number is a common divisor of two numbers\n    def is_common_divisor(num1, num2):\n        if num1 % num2 == 0:\n            return True\n        else:\n            return False\n\n    # Find the common divisors of the two given numbers\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if is_common_divisor(i, a) and is_common_divisor(i, b):\n            common_divisors.append(i)\n\n    # Find the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    # Return the sum of the common divisors\n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the Euclidean algorithm.\n\n    :param num1: the first number\n    :param num2: the second number\n    :return: the sum of common divisors\n    \"\"\"\n    # Convert the numbers to lists of prime numbers\n    prime_list1 = get_primes(num1)\n    prime_list2 = get_primes(num2)\n\n    # Find the intersection of the two lists of primes\n    common_primes = [x for x in prime_list1 if x in prime_list2]\n\n    # Calculate the sum of common divisors using the Euclidean algorithm\n    sum_common = 1\n    for prime in common_primes:\n        divisor = prime\n        dividend = num1\n        while dividend % divisor == 0:\n            sum_common *= divisor\n            dividend //= divisor\n\n    return sum_common\n\ndef get_primes(n):\n    \"\"\"\n    This function generates a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n\n    :param n: the upper limit of the prime numbers\n    :return: a list of prime numbers\n    \"\"\"\n    # Create a list of boolean values indicating if each number is prime or not\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    # Iterate through the list of numbers starting from 2 and mark them as composite\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i**2, n + 1, i):\n                is_prime[j] = False\n\n    # Return the list of prime numbers\n    return [i for i in range(2, n + 1) if is_prime[i]]"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the set of common divisors of a and b\n    common_divisors = set(a//i for i in range(1, b+1) if a % i == 0)\n\n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    # Returning the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    i = 1\n    divisors_sum = 0\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n        i += 1\n    return divisors_sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(5, 10)) # Output: 50"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the input string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the word to the long_words_list\n            long_words_list.append(word)\n\n    # Return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the longer words\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n\n            # Add the word to the list of longer words\n            long_words.append(word)\n\n    # Return the list of longer words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of the sum of the rows and columns\n    row_sum = 0\n    col_sum = 0\n    \n    # Loop through each row and column of the matrix\n    for i in range(len(my_matrix)):\n        # Add the sum of the current row to the row_sum variable\n        row_sum += my_matrix[i][i]\n        \n        # Add the sum of the current column to the col_sum variable\n        col_sum += my_matrix[i][len(my_matrix)-i-1]\n        \n        # Check if the sum of the current row and column is equal to the sum of the matrix\n        if row_sum!= col_sum:\n            return False\n    \n    # If all the sums match, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Error: The matrix is not a square matrix.\")\n        return False\n    \n    # Check the rows of the matrix\n    for row in my_matrix:\n        for i in range(len(row)):\n            if row[i]!= i + 1:\n                print(\"Error: The matrix is not a magic square.\")\n                return False\n\n    # Check the columns of the matrix\n    for i in range(len(my_matrix)):\n        col = [my_matrix[j][i] for j in range(len(my_matrix))]\n        if col!= list(range(1, len(my_matrix) + 1)):\n            print(\"Error: The matrix is not a magic square.\")\n            return False\n\n    # Check the diagonals of the matrix\n    diag1 = [my_matrix[i][i] for i in range(len(my_matrix))]\n    diag2 = [my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]\n    if diag1!= diag2:\n        print(\"Error: The matrix is not a magic square.\")\n        return False\n\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function checks whether a given matrix is a magic square or not.\n    It checks if all the rows and all the columns are all equal,\n    and if there are no repeated elements in the matrix.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if all the rows are equal\n    for i in range(rows):\n        if my_matrix[i]!= my_matrix[0]:\n            return False\n\n    # Check if all the columns are equal\n    for j in range(cols):\n        col = []\n        for i in range(rows):\n            col.append(my_matrix[i][j])\n        if col!= col[0]:\n            return False\n\n    # Check if there are no repeated elements in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in col or my_matrix[i][j] in my_matrix[0]:\n                return False\n\n    # If all the tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # Check if all elements in the matrix are unique\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[i][:j] + my_matrix[i][j+1:] + my_matrix[:i][j] + my_matrix[i+1:][j]:\n                return False\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if sum(my_matrix[i][j]) == sum(my_matrix[j][i]) == sum(my_matrix[i][j])**2:\n                return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is of size n x n\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return \"Matrix must be of size n x n\"\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return \"Matrix must contain only integers\"\n    \n    # Check if the matrix is a magic square\n    magic_number = n**2\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum!= col_sum or row_sum!= magic_number or col_sum!= magic_number:\n            return \"Matrix is not a magic square\"\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if the matrix has only non-zero integers\n    for row in my_matrix:\n        for num in row:\n            if num == 0:\n                return False\n    \n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= i+1 or my_matrix[i][len(my_matrix)-i-1]!= i+1:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a size of n x n\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if row_sums!= [sum(row_sums)] * len(my_matrix):\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = [sum(my_matrix[j]) for j in range(len(my_matrix))]\n    if col_sums!= [sum(col_sums)] * len(my_matrix):\n        return False\n    \n    # Check if all diagonals have the same sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if diag1_sum!= diag2_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only unique values\n    unique = set(my_matrix[0])\n    for row in my_matrix[1:]:\n        if set(row)!= unique:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the value at (i, j) is the sum of the values at (i+1, j), (i-1, j), (i, j+1), and (i, j-1)\n            if my_matrix[i][j]!= (my_matrix[i+1][j] + my_matrix[i-1][j] + my_matrix[j] + my_matrix[j]):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = []\n    col_sums = []\n    for i in range(len(my_matrix)):\n        row_sums.append(sum(my_matrix[i]))\n        col_sums.append(sum(my_matrix[:, i]))\n\n    # Check if the row and column sums are equal\n    if row_sums!= col_sums:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix) - 2):\n        for j in range(len(my_matrix) - 2):\n            if my_matrix[i][j] + my_matrix[i+1][j+1] + my_matrix[i+2][j] + my_matrix[i][j+2] + my_matrix[i+2][j+1] + my_matrix[i+1][j] + my_matrix[i][j] + my_matrix[i][j+1]!= 0:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the sum of each row is equal to the sum of the diagonal\n        if sum(my_matrix[i]) == sum(my_matrix[j] for j in range(n)) and \\\n           sum(my_matrix[i]) == sum(my_matrix[k] for k in range(n-i-1, -1, -1)) and \\\n           sum(my_matrix[i]) == sum(my_matrix[l] for l in range(n-i-1, n-i, -1)):\n            return True\n\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    \n    # iterate over the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with the maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    return max(num for num, freq in freq_dict.items() if freq == max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Iterate over the list and count the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n        \n        # If the frequency is greater than the current max frequency, update the max item and max frequency\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    # Return the max item with its frequency\n    return (max_item, max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    result = []\n    for num, count in freq.items():\n        if count == max_freq:\n            result.append(num)\n    return result"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return max(counts, key=counts.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq_dict = defaultdict(int)\n    \n    # Iterate over the list of numbers and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    # Return the item with the maximum frequency\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_reverse = []\n    for letter in str1:\n        if letter in vowels:\n            vowel_reverse.append(letter)\n    vowel_reverse.reverse()\n    return ''.join(vowel_reverse)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    new_str = ''.join(vowels_list)\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            if len(result) == 0 or char!= result[-1]:\n                result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowel_set:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = []\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str.append(char)\n    reversed_str = ''.join(reversed_str)\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string = str(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Define the hexagonal formula: 2^n + n - 1\n    hex_formula = 2**(n-1) + n - 1\n\n    # Convert the hexagonal formula to decimal and return the result\n    return hex_formula"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the formula for nth hexagonal number\n    formula = 2 * n * (n + 1) + 1\n    # Convert the formula to hex and return the result\n    return hex(formula)[2:].zfill(12)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (3 * n - 1) // 2\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 0\n    i = 1\n    \n    # loop through n-1 times\n    while i < n:\n        # print the current number\n        print(a)\n        \n        # calculate the next number\n        d = a + b\n        e = a + c\n        f = b + c\n        \n        # update the variables for the next iteration\n        a = b\n        b = c\n        c = d\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the base case for the function\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 75\n    elif n == 5:\n        return 286\n    elif n == 6:\n        return 1094\n    elif n == 7:\n        return 3770\n    elif n == 8:\n        return 14340\n    elif n == 9:\n        return 52300\n    elif n == 10:\n        return 203970\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        print(a, end=' ')\n        c = (a**2 + b**2)**0.5\n        b = a\n        a = c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num = (3*num**2) - 1\n    return num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    num_zeros = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n    zero_ratio = num_zeros / num_ones\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an empty array to store the number of non-zeroes\n    non_zero_count = array('i', [0]*len(nums))\n\n    # Iterate over the array and increment the corresponding non-zero count\n    for num in nums:\n        if num!= 0:\n            non_zero_count[nums.index(num)] += 1\n\n    # Calculate the ratio of non-zeroes to all the numbers in the array\n    ratio = sum(non_zero_count) / len(nums)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    if nonzeros == 0:\n        return float('inf')\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n\n    ratio = non_zeroes / zeroes if zeroes!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Create an array to store the count of non-zero and zero values\n    counts = array('i', [0] * (max(nums)+1))\n    \n    # Loop through the array and increment the counts for non-zero and zero values\n    for num in nums:\n        if num!= 0:\n            counts[num] += 1\n            \n    # Calculate the ratio of non-zero and zero counts\n    non_zero = sum(counts[1:])\n    zero_count = sum(counts)\n    ratio = non_zero / zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Convert the array to a list so that we can access the elements easily\n    nums_list = list(nums)\n    \n    # Initialize two counters to keep track of the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate over the elements of the list and increment the counters accordingly\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes and return it\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n\n    zero_ratio = count_zeros / count_non_zeros\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    zero_ratio = zero_count / non_zero_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # initialize count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # iterate through the array and count zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes and return the result\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n\n    # Iterate over all possible sums of two non-zero powers of 2 from 1 to 2^n\n    for i in range(1, 1 << n):\n        # Check if the sum is equal to n\n        if (i ^ (i >> 1)) == n:\n            return True\n    \n    # If we have iterated over all possible sums and none of them equal to n, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the number to binary string and split it into list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    \n    # Initialize a boolean variable to keep track of whether a power of 2 is present in the binary string or not\n    power_of_two_present = False\n    \n    # Loop through each bit of the binary string and check if it is a power of 2 or not\n    for bit in bits:\n        if bit == 1:\n            power_of_two_present = True\n            break\n    \n    # If no power of 2 is present in the binary string, return False\n    if not power_of_two_present:\n        return False\n    \n    # Initialize a counter variable to keep track of the number of bits that are powers of 2\n    power_of_two_count = 0\n    \n    # Loop through each bit of the binary string and count the number of powers of 2\n    for bit in bits:\n        if bit == 1:\n            power_of_two_count += 1\n    \n    # If there are more than one power of 2 present in the binary string, return False\n    if power_of_two_count > 1:\n        return False\n    \n    # Initialize a variable to keep track of the current sum of powers of 2\n    current_sum = 0\n    \n    # Loop through each bit of the binary string and add the power of 2 to the current sum\n    for bit in bits:\n        if bit == 1:\n            current_sum += 2 ** power_of_two_count\n            power_of_two_count -= 1\n    \n    # If the current sum is equal to the input number, return True\n    if current_sum == n:\n        return True\n    \n    # If the current sum is less than the input number, return False\n    if current_sum < n:\n        return False\n    \n    # If the current sum is greater than the input number, return True\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n == i**2:\n            return True\n        elif n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(x):\n        \"\"\"\n        Helper function to check if a number is a power of two.\n        \"\"\"\n        return x!= 0 and (x & (x - 1)) == 0\n    \n    def is_sum_of_powers_of_two(num):\n        \"\"\"\n        Helper function to check if a number can be represented as sum of non-zero powers of 2 or not.\n        \"\"\"\n        for i in range(1, 32):\n            if num & (1 << i):\n                if (num & ((1 << i) - 1))!= 0:\n                    return False\n        return True\n    \n    # Check if the number is a power of two.\n    if is_power_of_two(n):\n        return True\n    \n    # Check if the number can be represented as sum of non-zero powers of 2.\n    if is_sum_of_powers_of_two(n):\n        return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Create a set to store the powers of 2\n    powers_of_two = set()\n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if i is a power of 2\n        if i == 1 << i:\n            # If it is, add it to the set\n            powers_of_two.add(i)\n    # Check if n can be represented as sum of non-zero powers of 2\n    return n == sum(powers_of_two)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n\n    power = 0\n    while n > 0:\n        power += 1\n        n >>= 1\n\n    while power > 0:\n        if n & 1 == 0:\n            return False\n        power -= 1\n        n >>= 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is even\n    if n % 2 == 0: \n        return False\n\n    # Initialize the variable to store the powers of 2\n    powers_of_two = 0\n\n    # Iterate over the bits of the number\n    for bit in bin(n)[2:]: \n        # If the bit is 1, add the power of 2 to the variable\n        if bit == '1': \n            powers_of_two += 2 ** powers_of_two\n\n    # If the number is not divisible by 2^powers_of_two, it cannot be represented as sum of powers of 2\n    if n % (2 ** powers_of_two)!= 0: \n        return False\n\n    # If we reach this point, the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \n    :param n: the number to be checked\n    :type n: int\n    :return: True if the number can be represented as sum of non-zero powers of 2, False otherwise\n    :rtype: bool\n    \"\"\"\n    # Iterate over all possible powers of 2\n    for i in range(1, n+1):\n        # Check if the sum of all powers of 2 equals n\n        if i*(2**i) == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def count_bits(n):\n        count = 0\n        while n > 0:\n            n &= (n - 1)\n            count += 1\n        return count\n\n    def power_of_two(n):\n        return (1 << (count_bits(n) - 1))\n\n    def check_sum(n):\n        power_of_two_sum = 0\n        for i in range(count_bits(n)):\n            if (n & (1 << i)):\n                power_of_two_sum += power_of_two(i)\n        return power_of_two_sum\n\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n & (n - 1) == 0:\n        return False\n    return n == check_sum(n)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # approximation for the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # convert radius to meters and multiply by 2 to get circumference in meters\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        for j in i:\n            flattened_list.append(j)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # create an empty set\n    result = set()\n\n    # loop through the list\n    for sublist in test_list:\n        # loop through the sublist and add each element to the result set\n        for element in sublist:\n            result.add(element)\n\n    # convert the result set to a list and return it\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened = set()\n    for sublist in test_list:\n        flattened.update(sublist)\n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    unique_set = set(flattened_list)\n    return unique_set"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def sort_pancakes(nums, k):\n        n = len(nums)\n        # iterate over each pancake\n        for i in range(n - k):\n            # find the largest number in the unsorted part of the list\n            max_index = i\n            for j in range(i + 1, i + k + 1):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            # swap the largest number with the first number in the unsorted part\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # print the sorted part of the list\n            print(\"Sorted part:\", end=\" \")\n            print(nums[:i + 1])\n            # print the unsorted part of the list\n            print(\"Unsorted part:\", end=\" \")\n            print(nums[i + 1:])\n\n    # use the divide-and-conquer algorithm to sort the pancakes\n    def divide_and_conquer(nums, k):\n        if k == 1:\n            # if k is 1, it's already sorted, so return the list as-is\n            return nums\n        mid = len(nums) // 2\n        left = divide_and_conquer(nums[:mid], k)\n        right = divide_and_conquer(nums[mid:], k)\n        return merge(left, right, k)\n\n    def merge(left, right, k):\n        i = 0\n        j = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += k\n            else:\n                result.append(right[j])\n                j += k\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    # sort the pancakes recursively\n    sort_pancakes(nums, 1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n    \n    # Use a pancake sort algorithm to sort the list\n    for i in range(n):\n        # Find the index of the smallest element in the remaining unsorted portion of the list\n        smallest = i\n        for j in range(i+1, n):\n            if nums[j] < nums[smallest]:\n                smallest = j\n        \n        # Swap the smallest element with the element at the current index\n        nums[i], nums[smallest] = nums[smallest], nums[i]\n        \n        # Print the sorted list each time a swap is made\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # Helper function to swap elements in the list\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Helper function to reverse the entire list\n    def reverse(arr):\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            swap(arr, start, end)\n            start += 1\n            end -= 1\n    \n    # Helper function to generate the pancake sequence\n    def generate_pancake_sequence(n):\n        sequence = [0] * (n + 1)\n        sequence[n] = 1\n        for i in range(n - 1, 0, -1):\n            sequence[i] = i + 1\n        return sequence\n    \n    # Helper function to reverse the pancake sequence\n    def reverse_pancake_sequence(sequence):\n        n = len(sequence)\n        for i in range(n // 2):\n            j = n - i - 1\n            sequence[i], sequence[j] = sequence[j], sequence[i]\n    \n    # Helper function to generate the sorted list\n    def generate_sorted_list(n, sequence):\n        sorted_list = [0] * n\n        for i in range(n):\n            index = sequence[i]\n            sorted_list[index - 1] = nums[i]\n        return sorted_list\n    \n    # Main function to sort the list using the pancake sort algorithm\n    def sort(arr):\n        n = len(arr)\n        sequence = generate_pancake_sequence(n)\n        reverse_pancake_sequence(sequence)\n        sorted_list = generate_sorted_list(n, sequence)\n        arr[:] = sorted_list\n    \n    # Test the function\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    sort(arr)\n    print(\"Sorted array is:\", arr)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2*i + 1\n        r = 2*i + 2\n        \n        if l < n and arr[l] > arr[largest]:\n            largest = l\n        \n        if r < n and arr[r] > arr[largest]:\n            largest = r\n        \n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    def build_max_heap(arr):\n        n = len(arr)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n            \n    def sort_pancake(arr):\n        build_max_heap(arr)\n        n = len(arr)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n            \n    return sort_pancake(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the sub-array to be sorted\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # check if the list is empty\n    if len(nums) < 2:\n        return nums\n    \n    # sort the first half of the list using the pancake sort algorithm\n    first_half = pancake_sort(nums[:len(nums)//2])\n    \n    # sort the second half of the list using the pancake sort algorithm\n    second_half = pancake_sort(nums[len(nums)//2:])\n    \n    # merge the two sorted halves using the pancake sort algorithm\n    return merge_halves(first_half, second_half)\n\n\ndef merge_halves(first_half, second_half):\n    '''\n    Merge two sorted lists.\n    '''\n    \n    # check if either list is empty\n    if len(first_half) == 0:\n        return second_half\n    elif len(second_half) == 0:\n        return first_half\n    \n    # compare the first elements of both halves\n    if first_half[0] < second_half[0]:\n        # move the smaller element to the end of the list\n        return first_half + [second_half[0]] + second_half[1:]\n    else:\n        # move the smaller element to the end of the list\n        return second_half + [first_half[0]] + first_half[1:]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Starting from the end of the list, swapping adjacent elements that are in the wrong order\n    for i in range(n - 1, 0, -1):\n        # Find the maximum element in the remaining part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # Initialize variables for pancake sort\n    swapped = True\n    i = 0\n\n    # Iterate through the list of elements\n    while swapped:\n        swapped = False\n\n        # Find the maximum element and its index\n        max_val = nums[0]\n        max_idx = 0\n        for j in range(1, n):\n            if nums[j] > max_val:\n                max_val = nums[j]\n                max_idx = j\n\n        # Swap the maximum element with the first element\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n\n        # Decrement the swapped count and move to the next element\n        swapped = True\n        i += 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n\n    def quick_sort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quick_sort(arr, low, pi-1)\n            quick_sort(arr, pi+1, high)\n\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        p = partition(nums, 0, i)\n        if p == 0:\n            break\n        else:\n            quick_sort(nums, 0, p-1)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n            if count == 2:\n                return count\n            elif count > 2:\n                return \"Too many pairs found\"\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if isinstance(i, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n\n    Args:\n    arr: a list or tuple of integers\n\n    Returns:\n    max_diff: the maximum absolute difference between any two elements in the array\n    \"\"\"\n\n    # initialize variables\n    max_diff = arr[1] - arr[0]\n    current_diff = 0\n\n    # loop through the array and compare adjacent elements\n    for i in range(1, len(arr)):\n        current_diff = max(abs(arr[i] - arr[i-1]), current_diff)\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize max_diff to the smallest possible number\n    max_diff = float('-inf')\n    # iterate through the array\n    for i in range(len(arr)):\n        # iterate through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            # update the max_diff if the current difference is greater\n            max_diff = max(max_diff, diff)\n    # return the max_diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Initialize a variable to store the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate over the array and calculate the absolute difference between adjacent elements\n    for i in range(len(arr)):\n        diff = abs(arr[i] - arr[i+1])\n        \n        # Update the maximum absolute difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return None\n    \n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if abs(diff) > abs(max_diff):\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b / (2 * a)\n    y1 = x1 * a + b\n    x2 = -y1 / b\n    y2 = x2 * b + y1\n    if x1 == x2:\n        return (x1, y1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both nonzero\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize x and y variables\n    x = 0\n    y = 0\n\n    # Find the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if there is a solution\n    if d < 0:\n        return None\n\n    # If there is a solution, return the solution as a tuple\n    else:\n        # Calculate the first solution\n        x1 = (-b + d**0.5) / (2*a)\n        y1 = (-b - d**0.5) / (2*a)\n\n        # Calculate the second solution\n        x2 = (-b - d**0.5) / (2*a)\n        y2 = (-b + d**0.5) / (2*a)\n\n        # Return the solution as a tuple\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if ax + by = n for all positive integers x and y\n    for x in range(1, n//a):\n        for y in range(1, n//b):\n            if a*x + b*y == n:\n                return (x, y)\n\n    # Check if ax + by = n for all negative integers x and y\n    for x in range(-n//a, 0):\n        for y in range(-n//b, 0):\n            if a*x + b*y == n:\n                return (x, y)\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is solvable\n    if b == 0:\n        return None\n    # Compute the discriminant\n    disc = b**2 - 4*a*n\n    # Check if the equation has real roots\n    if disc > 0:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return (x1, x2)\n    elif disc == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the Gaussian elimination method to find a solution\n    for i in range(len(a)):\n        # Find the pivot row\n        pivot = abs(a[i][i])\n        j = i\n        while j < len(a) and abs(a[j][i]) > pivot:\n            j += 1\n        if j == len(a) or i == j:\n            # No pivot row found, no solution exists\n            return None\n        # Swap the pivot row with the current row\n        a[i], a[j] = a[j], a[i]\n        b[i], b[j] = b[j], b[i]\n        # Divide the remaining rows by the pivot row\n        for k in range(i+1, len(a)):\n            # Calculate the multiplier and shift\n            multiplier = a[k][i] / a[i][i]\n            shift = b[k] - multiplier * b[i]\n            # Subtract the shift from the other rows\n            for l in range(i, len(a[0])):\n                a[k][l] -= multiplier * a[i][l]\n                b[k] -= multiplier * a[i][l] + shift\n    # Check if the solution is valid\n    x = b[len(a) - 1] / a[len(a) - 1][len(a) - 1]\n    y = b[len(a) - 2] / a[len(a) - 2][len(a) - 2]\n    if x == y:\n        # Two distinct solutions\n        return None\n    if x**2 + y**2 == n:\n        # One unique solution\n        return (x, y)\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n    \n    # check if a, b, and n are all integers\n    if not all(isinstance(x, int) for x in [a, b, n]):\n        return None\n    \n    # initialize x and y as None\n    x = y = None\n    \n    # loop through all possible values of x and y\n    for i in range(n-b, n+1):\n        for j in range(n-a, n+1):\n            # check if a*x + b*y = n\n            if i*a + j*b == n:\n                # if so, update x and y if they are None\n                if x is None:\n                    x = i\n                if y is None:\n                    y = j\n    \n    # if x and y have been updated, return them as a tuple\n    if x is not None and y is not None:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has two solutions\n    d = b**2 - 4*a*n\n    if d > 0:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (int(x1), int(x2))\n    elif d == 0:\n        x1 = -b/(2*a)\n        return (int(x1), int(x1))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # compute the discriminant\n    d = b**2 - 4*a*n\n    \n    # check if the discriminant is greater than zero\n    if d > 0:\n        # compute the two solutions\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        \n        # check if both solutions exist and satisfy the given condition\n        if x1**2 + x2**2 == n:\n            return (x1, x2)\n        else:\n            return None\n    \n    elif d == 0:\n        # there is only one solution\n        return (-b/(2*a))\n    \n    else:\n        # there are no solutions\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a):\n        y = n // a * x - b\n        if a*x + b*y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y variables\n    x = None\n    y = None\n    # Loop through all values of x and y\n    for i in range(0, n):\n        for j in range(0, n):\n            # Check if the current value of x and y satisfies the given equation\n            if a*i + b*j == n:\n                # If so, return the values as a tuple\n                return (i, j)\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the remaining elements in the first list.\n    result = []\n    # Loop through each element in the first list.\n    for element in list1:\n        # Check if the element is not present in the second list.\n        if element not in list2:\n            # If the element is not present in the second list, add it to the result list.\n            result.append(element)\n    # Return the result list.\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list without elements present in list2\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list2 to remove all elements from list1\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list2.pop(i)\n            i = i - 1\n    \n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1\n    for i in range(len(list1)):\n        # Check if the element is present in list2\n        if list1[i] in list2:\n            # Remove the element from list1\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the remaining elements\n    result = []\n    \n    # loop through each element in list1\n    for element in list1:\n        # check if the element is not present in list2\n        if element not in list2:\n            # if it's not, add it to the result list\n            result.append(element)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # creating a set of elements present in the second list\n    set2 = set(list2)\n    # creating an empty list to store the elements from the first list\n    result = []\n    # iterating through the elements in the first list\n    for i in list1:\n        # if the element is not present in the set, it will be added to the result list\n        if i not in set2:\n            result.append(i)\n    # returning the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)...\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n//2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += n - 2*i\n    return s\n\nn = int(input(\"Enter the value of n: \"))\nresult = sum_series(n)\nprint(\"The sum of the series up to n:\", result)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum\n    sum = 0\n    \n    # Iterate through the range from 0 to n // 2\n    for i in range(n // 2):\n        # Add the sum of n - 2*i\n        sum += n - 2 * i\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    # Iterate from 0 to n // 2\n    for i in range(n // 2):\n        # Add (n - 2*i) to sum\n        sum += n - 2 * i\n    # Return the final sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return \"Invalid input. n should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 0\n        i = 0\n        while n - 2*i >= 0:\n            sum += n - 2*i\n            i += 1\n        return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    angle = 2 * pi / l\n    for i in range(l):\n        area += s * tan(angle * i)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = s * l\n\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * tan(pi / l)\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * (tan(pi / l) ** i))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of a regular polygon using Heron's formula\n    area = 0.5 * s * (l * tan(pi/l) + tan(pi/l))\n    \n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * pi * i) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) * tan(pi / l)\n        s -= 2 * s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n == 1:\n        return True\n    if n < 2:\n        return False\n    divisors_sum = 1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_sum += i\n            if n // i!= i:\n                divisors_sum += n // i\n    divisors_sum += n\n    return divisors_sum == n * (n + 1) // 2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n    divisor_sum = sum(divisors)\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(range(1, int(math.sqrt(n)) + 1)) & set(range(1, n + 1)))\n\n    # Return True if the sum of the divisors of n is equal to n, else False\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the sum of the divisors of n using the formula for the sum of divisors\n    # of a positive integer n: n/sum(i=1 to n, i)\n    div_sum = sum(range(1, n+1)) // n\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    sum_div = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    \n    # find the sum of the divisors of n-1\n    sum_div_n1 = sum(i for i in range(1, n-1))\n    \n    # check if sum_div and sum_div_n1 are equal\n    if sum_div == sum_div_n1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = sum(map(int, str(n)))\n    div2 = sum(map(int, str(n)))\n    return div1 == div2 "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    if sum(divisors) == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    \n    # Calculate the sum of the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n            div2 += n//i\n    \n    # Check if the sum of the divisors is equal to n\n    if div1 + div2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        '''\n        Helper function to calculate the sum of the divisors of a given number.\n        '''\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    # calculate the sum of the divisors of n\n    div1 = sum_of_divisors(n)\n\n    # calculate the sum of the divisors of n+1\n    div2 = sum_of_divisors(n+1)\n\n    # compare the sums\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the sum of the divisors of n using the sieve of Eratosthenes algorithm\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n    # Check if the sum of the divisors is equal to n\n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the character and its position in the English alphabet (case insensitive)\n    alpha_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    # initialize a variable to store the count of characters at the same position in the English alphabet\n    count = 0\n    \n    # iterate over each character in the input string\n    for char in str1:\n        # convert the character to lowercase for case insensitivity\n        char = char.lower()\n        \n        # check if the character exists in the dictionary and its position is equal to the current index in the string\n        if char in alpha_dict and alpha_dict[char] == str1.index(char):\n            # increment the count of characters at the same position in the English alphabet\n            count += 1\n    \n    # return the count of characters at the same position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    char_counts = {}\n    \n    # convert all characters in the string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is a letter in the English alphabet\n        if 'a' <= char <= 'z':\n            # check if the character has already been seen before\n            if char in char_counts:\n                # increment the count for the character\n                char_counts[char] += 1\n            else:\n                # add the character to the dictionary with a count of 1\n                char_counts[char] = 1\n    \n    # iterate through the dictionary and count the number of times each character occurs at the same position in the English alphabet\n    total_count = 0\n    for char in char_counts:\n        # check if the character is a letter in the English alphabet\n        if 'a' <= char <= 'z':\n            # check if the character occurs at the same position in the English alphabet as the previous character\n            if char == str1[char_counts[char] - 1]:\n                # increment the total count\n                total_count += char_counts[char]\n    \n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # iterate over the string\n    for char in str1:\n        # if the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in char_count:\n        # check if the character is in the English alphabet\n        if char.isalpha():\n            # check if the character is at the same position in the English alphabet as the current character\n            if char_count[char] == 1:\n                # increment the count if the character is at the same position in the English alphabet\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the character counts\n    char_count = {}\n    # Loop through the string and count the character counts at the same position in the English alphabet\n    for i in range(26):\n        char_count[chr(65+i)] = str1.count(chr(65+i))\n    # Return the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # Increment the count of the character by 1\n            char_count[char] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # Initialize a variable to store the count of characters at each position in the English alphabet\n    english_count = [0] * 26\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n        # Get the index of the character in the English alphabet\n        index = ord(char) - ord('a')\n        # Increment the count of the character in the English alphabet by 1\n        english_count[index] += 1\n    \n    # Iterate over each position in the English alphabet\n    for i in range(26):\n        # Check if the count of characters at the current position is greater than 0\n        if english_count[i] > 0:\n            # Add the count of characters at the current position to the count of characters at the same position in the English alphabet\n            char_count[chr(i+ord('a'))] += english_count[i]\n    \n    # Return the count of characters at each position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(ord('a'), ord('z')+1):\n            if str1[i].lower() == chr(j).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in alphabet:\n        if str1.lower().count(char.lower()) > 0:\n            count += str1.lower().count(char.lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to ignore case sensitivity\n        char = char.lower()\n        # If the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # Return the dictionary containing the counts of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the character positions in the alphabet\n    char_positions = {}\n\n    # Loop through the string and add each character to the dictionary with its position\n    for i, char in enumerate(str1.lower()):\n        if char in char_positions:\n            char_positions[char].append(i)\n        else:\n            char_positions[char] = [i]\n\n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for positions in char_positions.values():\n        count += len(positions)\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # create a dictionary to store the counts of each character in the string\n    char_count = {}\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # loop through each character in the string\n    for char in str1:\n        # if the character is in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through each character in the English alphabet\n    for i in range(97, 123):\n        # if the character has a count in the dictionary, increment its count by 1\n        if chr(i) in char_count:\n            char_count[chr(i)] += 1\n    # calculate the total number of characters in the string\n    total_chars = len(str1)\n    # loop through each character in the dictionary and print the counts if they occur at the same position in the string as in the English alphabet\n    for char, count in char_count.items():\n        if char == chr(i):\n            print(f\"Character '{char}' occurs {count} times at the same position in the string as in the English alphabet.\")\n    # print the total number of characters in the string\n    print(f\"Total number of characters in the string: {total_chars}\")"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    :param A: A list of integers\n    :return: The number of pairs that xor to an even number\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Find the power of 2 that is less than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the binary representation of n\n    binary_str = bin(n)[2:]\n\n    # Count the number of 1's in the binary representation\n    count = binary_str.count('1')\n\n    # If the binary representation contains a 0 in the least significant bit,\n    # add 1 to the count to get the correct power of 2\n    if binary_str[0] == '0':\n        count += 1\n\n    # Calculate the power of 2 by raising 2 to the power of count\n    power_of_2 = 2**count\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable result with the value of n\n    result = n\n    # Loop until the value of result is a power of 2\n    while result & (result - 1)!= 0:\n        result = result + 1\n    # Return the value of result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a number as input and returns the smallest power of 2 greater than or equal to the input number.\n    \"\"\"\n    n = 1 if n < 1 else n\n    while n < 2**31:\n        if (2**31) % n == 0:\n            return 2**31\n        else:\n            n *= 2\n    return 2**31 - 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Initialize a flag variable to keep track of the existence of a power of 2\n    is_power_of_2 = False\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n + 1):\n\n        # If the number is a power of 2, set the flag variable to True\n        if i == 2 ** (i - 1):\n            is_power_of_2 = True\n            break\n\n    # If no power of 2 was found, return n as it is already the next power of 2\n    if not is_power_of_2:\n        return n\n\n    # Loop through all the numbers from n to 2\n    for i in range(n, -1, -1):\n\n        # If the number is a power of 2, return it as the next power of 2\n        if i == 2 ** (i - 1):\n            return i\n\n    # If no power of 2 was found after looping through all the numbers, return n as it is already the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # if n is already a power of 2, return n\n    if n > 0 and (n & (n-1)) == 0:\n        return n\n    \n    # if n is negative, return None\n    if n < 0:\n        return None\n    \n    # find the smallest power of 2 greater than or equal to n\n    i = 1\n    while i < n:\n        i <<= 1\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**int(n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize the result variable to the input integer\n    result = n\n\n    # loop until the result is a power of 2\n    while result & (result-1)!= 0:\n        # increase the result by 1\n        result += 1\n\n    # return the result\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments, a list a and a number x, and returns the count of the number x in the list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, x):\n    '''\n    This function takes a list and a number x as input and returns the frequency of x in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, x):\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments, a list and a number x.\n    It returns a dictionary with the counts of each occurrence of x in the list.\n    '''\n    counts = {}\n    for i in a:\n        if i == x:\n            if x in counts:\n                counts[x] += 1\n            else:\n                counts[x] = 1\n    return counts"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m > n or m < 0 or n > len(list1) - 1:\n        print(\"Invalid range indices.\")\n        return None\n    \n    # Calculate the sum of numbers in the specified range\n    sum_range = sum(list1[m:n+1])\n    \n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the length of the sides of the pentagon\n    sides = [3*a/5, math.sqrt(3)*a/5, a, math.sqrt(3)*a/5, 3*a/5]\n\n    # Calculate the perimeter of the pentagon\n    perimeter = sum(sides)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for perimeter of a regular pentagon\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes a positive floating-point number 'a' as input and returns the perimeter of a regular pentagon.\n    \"\"\"\n    # calculate the semi-perimeter of the pentagon using the formula:\n    # 1/5 * a^2\n    semi_perimeter = 0.2 * a ** 2\n    # calculate the perimeter of the pentagon using the formula:\n    # 5 * (a^2 + semi_perimeter)\n    perimeter = 5 * (a ** 2 + semi_perimeter)\n    # return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a\n    return circumference * 5 / 2"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = s.count('std')\n    count += std_count\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std ':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '')\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(t, type(test_tuple[0])) for t in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # loop through all the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the current element has same data type as the first element\n        if type(element)!= first_element:\n            # return False as the data types are not same\n            return False\n    \n    # return True as all the elements have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for elem in test_tuple:\n        types.append(type(elem))\n    return all(elem == types[0] for elem in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    first_elem = type(test_tuple[0])\n    \n    for elem in test_tuple[1:]:\n        if type(elem)!= first_elem:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in the tuple have same data type or not.\n    If all the elements have same data type, the function returns True, otherwise it returns False.\n    '''\n    # check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return True\n    \n    # get the data type of the first element of the tuple\n    first_elem_type = type(test_tuple[0])\n    \n    # iterate through the tuple and check if all the elements have same data type\n    for elem in test_tuple:\n        if type(elem)!= first_elem_type:\n            return False\n    \n    # if all the elements have same data type, the function returns True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Convert the tuple to a list so that we can iterate over its elements\n    test_list = list(test_tuple)\n    # Get the first element of the list\n    first_element = test_list[0]\n    # Check if all the elements of the list have the same data type or not\n    for element in test_list:\n        if type(element)!= type(first_element):\n            return False\n    # If all the elements have the same data type, then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of first element\n    data_type = type(test_tuple[0])\n    # loop through the tuple elements\n    for element in test_tuple:\n        # check if each element has the same data type as the first element\n        if type(element)!= data_type:\n            return False\n    # if the loop completes without returning False, all elements have the same data type\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # initialize count and count of x to 0\n    count = 0\n    count_x = 0\n\n    # iterate through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n\n        # if count_x is greater than n/2, return True\n        if count_x > n//2:\n            return True\n\n        # if count is equal to n, reset count to 0 and count_x to 0\n        if i == n-1:\n            count = 0\n            count_x = 0\n\n    # if no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # Convert the given number to binary format\n    bin_n = bin(n)[2:]\n\n    # Count the number of set bits\n    count = 0\n    for bit in bin_n:\n        if bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n % 2 == 1: \n            count += 1 \n        n = n // 2 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number n.\n    \n    Args:\n        n (int): The number to count set bits for.\n    \n    Returns:\n        int: The number of set bits in n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n: \n        if n % 2 == 1: \n            count += 1 \n        n = n // 2 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters with odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str)\n    # Create an empty string to store the new string\n    new_str = \"\"\n    # Iterate over the list of characters\n    for i in range(len(lst)):\n        # If the index is even, add the character to the new string\n        if i % 2 == 0:\n            new_str += lst[i]\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = 1\n    result = \"\"\n    for char in str:\n        if odd_index % 2 == 1:\n            result += char\n        odd_index += 1\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The string from which the odd characters will be removed.\n\n    Returns:\n    str: The string with odd characters removed.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for i, char in enumerate(str):\n        # If the index of the character is odd, append it to the result\n        if i % 2!= 0:\n            result += char\n    \n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda x: x % 2 == 1, str))\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i, c in enumerate(str):\n        if i % 2 == 1:\n            odd_values.append(c)\n    return \"\".join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes the characters from the given string with odd index values.\n\n    :param string: The string from which the odd characters will be removed.\n    :type string: str\n    :return: A new string with odd index values removed.\n    :rtype: str\n    \"\"\"\n    odd_values = [string[i] for i in range(len(string)) if i % 2!= 0]\n    return \"\".join(odd_values)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns their minimum.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Check if all three numbers are non-negative integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        print(\"Error: All three numbers must be non-negative integers\")\n        return\n    \n    # If all three numbers are non-negative integers, find the minimum of the three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 1:\n        l -= 1\n    if r == 1:\n        r -= 1\n    mask = 1 << (r - l + 1) - 1\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1<<i)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    all_set_in_range = True\n    for i in range(l, r + 1):\n        if n & (1 << i) == 0:  # checking if the i-th bit is unset or not\n            all_set_in_range = False  # if it is unset, then we cannot make it set in the range\n            break  # break the loop since we cannot make it set in the range\n    return all_set_in_range\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments: n, the integer which contains the bits, l and r,\n    the range of integers where the bits must be unset.\n\n    The function returns True if all the bits are unset in the given range, and False otherwise.\n\n    Example:\n    n = 100100\n    l = 1\n    r = 5\n\n    Output: True\n\n    n = 100100\n    l = 6\n    r = 10\n\n    Output: False\n\n    \"\"\"\n    # Convert the given range into a list of bits\n    bit_list = bin(n)[2:].zfill(8*abs(r-l))\n\n    # Check if all the bits are set or not\n    for i in range(abs(r-l)):\n        if bit_list[l+i] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & (1 << i)).count('1')!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to keep track of whether all bits are set or not\n    all_set = True\n    \n    # Loop through all bits in the range [l,r]\n    for i in range(l, r+1):\n        # Check if the i-th bit is unset or set\n        if n & (1 << i)!= 0:\n            # If the i-th bit is set, we know that all bits before it are also set\n            all_set = False\n            break\n    \n    # Return the value of all_set\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        for j in range(1, 32):\n            count += (n & (1 << j))\n\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if n is a power of 2\n    if n & (n-1):\n        return False\n\n    # Calculate the number of bits required to represent n\n    bits_required = 0\n    while n:\n        bits_required += 1\n        n = n // 2\n\n    # Calculate the number of set bits in the range\n    set_bits = 0\n    for i in range(l, r+1):\n        set_bits += bin(i).count('1')\n\n    # Return True if all bits are set in the range, else return False\n    return set_bits == (1 << bits_required) - 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable to store the sum of unset bits\n    unset_bits = 0\n\n    # Iterate over all bits from left to right in the given range\n    for i in range(l, r+1):\n        # If the bit at the current index is set, increment the unset_bits counter\n        if n & (1 << i):\n            unset_bits += 1\n            # If the unset_bits counter reaches 32, break the loop as all unset bits have been found\n            if unset_bits == 32:\n                break\n\n    # Check whether all unset bits have been found or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the integers to binary strings\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    # check if all bits are unset in the given range\n    if n == '0' * len(n) or l == '0' * len(l) or r == '0' * len(r):\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize three pointers - i, j, and k\n    i = 0\n    j = n\n    k = n+1\n\n    # iterate through the array\n    while i < j:\n\n        # if the current element is negative, swap it with the element pointed to by k\n        if arr[i] < 0:\n            arr[i], arr[k] = arr[k], arr[i]\n\n            # move the k pointer to the right\n            k += 1\n\n        # if the current element is positive, increment i and decrement j\n        elif arr[i] > 0:\n            i += 1\n            j -= 1\n\n        # if the current element is zero, increment i and decrement j\n        else:\n            i += 1\n            j -= 1\n\n    # print the modified array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for negative and one for positive elements\n    neg_ptr = 0\n    pos_ptr = 0\n\n    # Swap elements if they meet the condition\n    while pos_ptr < n:\n        if arr[neg_ptr] < 0 and arr[pos_ptr] > 0:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n        pos_ptr += 1\n\n    # Sort the negative elements\n    for i in range(neg_ptr, n):\n        for j in range(i + 1, neg_ptr, -1):\n            if arr[j] > arr[j - 1]:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Loop through the array and add the elements to the corresponding lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Combine the two lists into one and sort it in ascending order\n    sorted_list = neg_list + pos_list\n    sorted_list.sort()\n\n    # Remove the first n elements from the sorted list and return them\n    return sorted_list[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n - 1\n\n    # Iterate through the array from left to right\n    while left < right:\n        # If the element at the left pointer is negative, swap it with the element at the right pointer\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        # Move the left pointer to the right\n        left += 1\n        # Move the right pointer to the left\n        right -= 1\n\n    # Iterate through the array from right to left\n    while left < right:\n        # If the element at the right pointer is negative, swap it with the element at the left pointer\n        if arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        # Move the left pointer to the right\n        left += 1\n        # Move the right pointer to the left\n        right -= 1\n\n    # Iterate through the array from left to right again\n    for i in range(n):\n        # If the element at the current index is negative, swap it with the element at the current index minus n\n        if arr[i] < 0:\n            arr[i], arr[i-n] = arr[i-n], arr[i]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[n:] if x > 0]\n    zero = [x for x in arr[n:] if x == 0]\n\n    return negative + positive + zero"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, left and right, to the beginning of the array\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array and swap elements if necessary\n    while left < right:\n        if arr[left] < 0 and arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n        \n    # Iterate through the remaining elements and swap them with the first n negative elements\n    count = 0\n    while count < n:\n        if arr[left] < 0:\n            arr[left], arr[count] = arr[count], arr[left]\n            count += 1\n        left += 1\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[count], arr[i] = arr[i], arr[count]\n            count += 1\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            arr[count], arr[i] = arr[i], arr[count]\n            count += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sorting the array in ascending order\n    arr.sort()\n\n    # Separating negative and positive elements\n    neg = [x for x in arr if x < 0]\n    pos = [x for x in arr if x >= 0]\n\n    # Re-arranging the array\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    for i in range(len(neg), len(arr)):\n        arr[i] = pos[i-len(neg)]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n    # Loop through the array and add elements to the appropriate list\n    for num in arr:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    # Loop through the first n elements of the array and swap them with the corresponding elements in the positive list and negative list\n    for i in range(n):\n        pos[i], neg[i] = neg[i], pos[i]\n    # Join the positive and negative lists and return the result\n    return pos + neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for element in arr[:n]:\n        if element < 0:\n            count_dict[element] = count_dict.get(element, 0) + 1\n        else:\n            count_dict[element] = count_dict.get(element, 0) - 1\n    \n    # Sort the dictionary by the absolute value of the keys\n    sorted_dict = {k: v for k, v in sorted(count_dict.items(), key=lambda item: abs(item[0]))}\n    \n    # Create a new array to store the re-arranged elements\n    new_arr = []\n    for key, value in sorted_dict.items():\n        for _ in range(value):\n            new_arr.append(key)\n    \n    # Append the remaining elements to the new array\n    for element in arr[n:]:\n        new_arr.append(element)\n    \n    return new_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\" \"+char+\" \")\n    return str1.strip()"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Loop through the list of words and replace any blank spaces with the specified character\n    for i in range(len(words)):\n        if words[i] == '':\n            words[i] = char\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        else:\n            new_str += char.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\" \"+char+\" \")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Convert list to a set to remove duplicates\n    list1 = set(list1)\n    \n    # Create a list of tuples containing (value, index)\n    lst = [(num, index) for index, num in enumerate(list1)]\n    \n    # Sort the list by value in descending order\n    heapq.heapify(lst)\n    heapq.heapify(lst, n)\n    \n    # Return the n largest items\n    return [value for value, index in lst][:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize the max heap with the first n elements of the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # iterate through the remaining elements of the list and add them to the heap\n    for num in list1[n:]:\n        heapq.heappush(heap, num)\n        # if the heap size exceeds n, remove the smallest element from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a max heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    # extract the n largest items from the heap\n    for i in range(n, len(list1)):\n        if list1[i] > -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -list1[i])\n    # convert the heap to a list\n    result = []\n    for item in heap:\n        result.append(item)\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n\n    heap = [0] * n\n    for i in range(len(list1)):\n        # Insert each element into the heap\n        if len(heap) == n:\n            if list1[i] > heap[0]:\n                heap[0] = list1[i]\n                heapq.heapify(heap)\n        else:\n            heapq.heappush(heap, list1[i])\n    # Return the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > -heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -list1[i])\n    return [x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return []\n    else:\n        heap = []\n        for i in list1:\n            heapq.heappush(heap,i)\n        return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to sort the list in descending order and take the first n elements\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # use heapq to sort the list in descending order\n    heapq.heapify(list1)\n    # return the n largest items\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Formula for lateral surface area of a cylinder\n    # Surface area = 1/2 * pi * r^2 * h\n    area = 0.5 * 3.14 * r ** 2 * h\n\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * (r**2) + h * (r**2) + 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area\n    lateral_surface_area = math.pi * r**2 * h\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h # formula for lateral surface area of a cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*3.14159*r**2 # surface area of the cylinder\n    sl = 2*3.14159*r*h # lateral surface area of the bottom\n    sh = 2*3.14159*r*h # lateral surface area of the top\n    return s + sl + sh"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Using the formula for the lateral surface area of a cylinder\n    area = 2*r*h\n    \n    # Returning the area of the cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the area of the cylinder\n    area = 2*3.14159*(r**2+h**2)\n    # calculate the lateral surface area\n    lateral_area = area - 2*3.14159*r*h\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0: # if the bit at position 0 is 0\n            n = n ^ 1 # set the bit at position 0 to 1\n        n = n >> 1 # shift the number to the right by 1 position\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # create a list of the even bits of n\n    even_bits = [i for i in bin(n)[2:] if int(i) == 0]\n\n    # loop through the even bits and set each one to 1\n    for bit in even_bits:\n        n = n | (1 << int(bit))\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if n & (1 << i):\n            n |= 1 << i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit in the number\n    for i in range(32):\n        # if the i-th bit is an even number, set the result to the i-th bit of n\n        if n & (1 << i) == 0:\n            result |= (n & (1 << i)) << i\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a counter variable to keep track of the number of even bits\n    count = 0\n    # initialize a variable to store the result of the operation\n    result = 0\n    # iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # check if the bit is even\n        if int(bit) % 2 == 0:\n            # if it is even, set the corresponding bit in the result to 1\n            result += 2 ** count\n        # increment the counter by 1\n        count += 1\n    # return the result of the operation\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable with 0\n    result = 0\n    \n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the bit is even, set it in the result variable\n        if n & (1 << i):\n            result |= (1 << i)\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to hold the even bits of n\n    even_bits = 0\n    # loop through each bit of n\n    for i in range(8): \n        # if the current bit is even\n        if n & 1 == 0: \n            # set the corresponding bit in even_bits to 1\n            even_bits |= 1 << i\n    # return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the input number\n    for i in range(32): \n        # Check if the i-th bit is even\n        if n & (1 << i) == 0: \n            # If it's not even, set the i-th bit in the result to 1\n            result |= 1 << i\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string and split into list of digits\n    binary_str = bin(n)[2:]\n    binary_list = [int(x) for x in binary_str]\n    \n    # Iterate over each bit in the binary list and set it to 1 if it's even\n    for i in range(len(binary_list)):\n        if binary_list[i] % 2 == 0:\n            binary_list[i] = 1\n    \n    # Convert the binary list back to an integer and return\n    return int(''.join(map(str, binary_list)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number of set bits\n    set_bits = 0\n    \n    # Loop through all the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set it to 1 and increment the count of set bits\n        if int(bit) == 0:\n            continue\n        else:\n            set_bits += 1\n    \n    # Set all the even bits of the given number to 1\n    even_bits = (1 << set_bits) - 1\n    \n    # Return the modified number with all even bits set to 1\n    return n & even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    counter = Counter(test_list)\n    result = {}\n\n    for item, count in counter.items():\n        result[item] = count\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the test_list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple in the list\n    counts = Counter(test_list)\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter function from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # create a dictionary to store the count of occurrences\n    count_dict = {}\n\n    # iterate through the test list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n    \n    # Iterate through the test_list\n    for item in test_list:\n        # Convert the item to a tuple and check if it's already in the count_dict\n        if tuple(item) in count_dict:\n            # If it is, increment the count for that tuple\n            count_dict[tuple(item)] += 1\n        else:\n            # If not, add the tuple to the count_dict with a count of 1\n            count_dict[tuple(item)] = 1\n    \n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    # Initialize an empty dictionary to store the count of each substring\n    substring_count = {}\n    \n    # Iterate over all possible substrings of the given string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            \n            # If the substring is non-empty, increment the count in the dictionary\n            if substring:\n                substring_count[substring] = substring_count.get(substring, 0) + 1\n    \n    # Return the total count of all non-empty substrings\n    return sum(count for substring, count in substring_count.items() if count > 0)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize the count variable\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each possible substring of the current character\n        for j in range(i+1, len(str)+1):\n            # add 1 to the count variable if the substring is non-empty\n            if str[i:j]!= '':\n                count += 1\n                \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    # Initialize variables for count and current substring\n    count = 0\n    current_substring = ''\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is a vowel, add the current substring to the count\n        if str[i] in 'aeiouAEIOU':\n            count += 1\n            \n            # If the current character is a consonant, reset the current substring\n            current_substring = ''\n            \n    # If the current substring is non-empty, add it to the count\n    if current_substring!= '':\n        count += 1\n        \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    total = 0\n    prev_num = 0\n    for i in range(n): \n        curr_num = i+2*prev_num \n        if curr_num <= m: \n            total += 1\n        prev_num = curr_num\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    prev_element = 0\n    count = 0\n    total_count = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(2, m+1):\n        if prev_element + 2 <= m and prev_element + 2 <= i <= m:\n            count += 1\n        else:\n            count = 1\n        total_count += count\n        prev_element = i\n        \n    return total_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n, and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    >>> get_total_number_of_sequences(10, 3)\n    75\n    \"\"\"\n\n    total_sequences = 0\n    for i in range(2, m+1):\n        j = i + n - 2\n        while j <= m:\n            total_sequences += 1\n            j += n\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables for the total number of sequences and the number of sequences so far\n    total_sequences = 0\n    sequences_so_far = 0\n    \n    # Initialize a list to hold the previous elements in the sequence\n    previous_elements = []\n    \n    # Loop through the range from m to n\n    for i in range(m, n+1):\n        # Check if the current element is within the required range\n        if i >= 2 * previous_elements[-1] <= m:\n            # If it is, increment the total number of sequences\n            total_sequences += 1\n            \n            # If this is the first element in the sequence, add it to the list of previous elements\n            if len(previous_elements) == 0:\n                previous_elements.append(i)\n            \n            # If it is not the first element in the sequence, check if the difference between the current and previous elements is within the required range\n            else:\n                if i - previous_elements[-1] >= 2 * previous_elements[-1] <= m:\n                    # If it is, add the current element to the list of previous elements\n                    previous_elements.append(i)\n                    \n                    # If the length of the list of previous elements is equal to n, increment the total number of sequences so far\n                    if len(previous_elements) == n:\n                        sequences_so_far += 1\n                        \n                        # Reset the list of previous elements\n                        previous_elements = []\n                        \n        # Reset the list of previous elements if the current element is not within the required range\n        else:\n            previous_elements = []\n            \n    # Return the total number of sequences\n    return total_sequences, sequences_so_far"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the variables to keep track of the number of possible sequences\n    count = 0\n    # Initialize a list to keep track of the previous numbers\n    prev_numbers = []\n    # Initialize the previous number to be 1\n    prev_number = 1\n    # Loop through the range of numbers between 1 and m\n    for i in range(1, m+1):\n        # Check if the current number is greater than or equal to twice the previous number but less than or equal to m\n        if i >= 2*prev_number <= m:\n            # If the current number is greater than or equal to twice the previous number, add it to the list of previous numbers\n            if i >= 2*prev_number:\n                prev_numbers.append(i)\n            # Increment the count of possible sequences\n            count += 1\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = [2]\n    prev_element = 2\n\n    # Generate all possible sequences\n    while len(current_sequence) < n:\n        # Check if the current element is valid\n        if current_sequence[-1] < prev_element * 2 and current_sequence[-1] <= m:\n            # If it is, add it to the sequence and increment total_sequences\n            current_sequence.append(current_sequence[-1] + 1)\n            total_sequences += 1\n        else:\n            # If not, backtrack and generate a new sequence\n            current_sequence.pop()\n            prev_element = current_sequence[-1]\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2*i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 1:\n        return m\n    \n    def count_sequences(n, m):\n        if n == 1:\n            return m\n        \n        if n % 2 == 0:\n            return count_sequences(n//2, m) + count_sequences((n-1)//2, m) + 1\n        \n        return count_sequences(n//2, m) + count_sequences(n//2, m) + 1\n        \n    return count_sequences(n, m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def get_number_of_sequences(a, b, c, n):\n        if n == 0:\n            return 1\n        if a >= c:\n            return 0\n        return get_number_of_sequences(a + 2, b, c, n - 1) + get_number_of_sequences(a, b + 1, c, n - 1)\n\n    def get_total_number_of_sequences_helper(a, b, c):\n        if a > c:\n            return 0\n        return get_number_of_sequences(a, b, c, n) + get_total_number_of_sequences_helper(a + 1, b, c)\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if m < 2 * n:\n        raise ValueError(\"m must be at least 2n\")\n\n    return get_total_number_of_sequences_helper(2 * n, 1, m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    for i in range(1, m + 1):\n        if i >= 2*n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # The first list is modified in place using the slice notation to replace the last element with the elements of the second list\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Remove the last element from the first list\n    list1.pop()\n    # Concatenate the first list and the second list\n    combined_list = list1 + list2\n    # Assign the first element of the combined list to the last element of the first list\n    list1[-1] = combined_list[0]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = len(str1)\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Use binary search to find the largest perfect square less than or equal to N\n    left, right = 1, N\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if mid is a perfect square\n        if mid * mid == mid:\n            # Check if mid is greater than N\n            if mid > N:\n                return mid\n\n            # Check if mid + 1 is a perfect square\n            if (mid + 1) * (mid + 1) > N:\n                return mid + 1\n\n            # If mid + 1 is less than N, find the next perfect square greater than mid\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If N is already a perfect square, return N + 1\n    return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    if math.isqrt(N) ** 2 == N:\n        return int(math.sqrt(N))\n    else:\n        sqrt_N = math.sqrt(N)\n        if sqrt_N * sqrt_N > N:\n            return int(sqrt_N ** 2)\n        else:\n            return int(sqrt_N - 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrt_N = int(math.sqrt(N))\n    if N == sqrt_N*sqrt_N:\n        return sqrt_N*sqrt_N + 1\n    else:\n        return int(sqrt_N + 1)*int(sqrt_N + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # define a function to check if a given number is a perfect square\n    def is_perfect_square(num):\n        root = math.sqrt(num)\n        return int(root) ** 2 == num\n    \n    # initialize the current square number\n    curr_num = N\n    \n    # iterate through all possible square numbers greater than N\n    for i in range(int(math.sqrt(N))+1, 1, -1):\n        # check if i is a perfect square and greater than N\n        if is_perfect_square(i) and i > N:\n            # if it is, return i\n            return i\n    \n    # if no perfect square greater than N is found, return N\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    while True:\n        n *= 2\n        n = int(n)\n        if n > N:\n            return n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N):\n    while True:\n        N = int(math.sqrt(N+1))\n        if N*(N+1) == 2*N+1:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the given number is a perfect square\n    if math.isqrt(N) ** 2 == N:\n        # Find the previous perfect square\n        prev_ps = math.floor(N ** (1/2)) ** 2\n        # Find the previous perfect square greater than prev_ps\n        while prev_ps < N:\n            prev_ps += 1\n        # Find the next perfect square greater than the previous one\n        next_ps = math.ceil(prev_ps) ** 2\n        # Check if the next perfect square is greater than the given number\n        if next_ps > N:\n            return next_ps\n        else:\n            return None\n    else:\n        # The given number is not a perfect square\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is already a perfect square\n    if N % 4 == 1:\n        return next_Perfect_Square(N + 1)\n    \n    # Find the square root of the given number\n    root = int(math.sqrt(N))\n    \n    # Check if the square root is already a perfect square\n    if root % 4 == 1:\n        return root * root\n    \n    # Find the next perfect square greater than the square root\n    while root % 4 == 0:\n        root += 1\n    \n    return root * root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    sqrtN = int(math.sqrt(N))\n    while True:\n        N += 1\n        sqrtN = int(math.sqrt(N))\n        if (sqrtN**2 == N):\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n\n    If N is already a perfect square, the function will return N.\n\n    If N is less than 2, the function will return 1.\n\n    If N is already greater than the square root of 10^10, the function will return None.\n\n    '''\n    sqrt_10_10 = int(math.sqrt(10**10))\n    if N <= sqrt_10_10:\n        return N\n\n    i = sqrt_10_10\n    while True:\n        i += 1\n        square = i*i\n        if square > N:\n            return square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    prev_diff = 0\n    max_sum = float('-inf')\n\n    # Check if array is bitonic\n    if (arr[1] - arr[0])*(arr[n-1] - arr[n-2]) >= 0:\n        # Find maximum sum of subarrays\n        for i in range(1, n-1):\n            if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n                curr_diff = arr[i+1] - arr[i-1]\n            else:\n                curr_diff = arr[i+1] - arr[i]\n            if curr_diff > prev_diff:\n                prev_diff = curr_diff\n                max_sum = max(max_sum, prev_diff)\n\n    # Return maximum sum of bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize variables to keep track of the maximum sum and the index of the first and last increasing elements\n    max_sum = float('-inf')\n    first_increasing = -1\n    last_increasing = -1\n    \n    # Traverse through the array and update the maximum sum and first and last increasing elements\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            if arr[i] > arr[i+1]:\n                if i > last_increasing:\n                    last_increasing = i\n                if i < first_increasing or first_increasing == -1:\n                    first_increasing = i\n        else:\n            if arr[i] < arr[i+1]:\n                if i > last_increasing:\n                    last_increasing = i\n                if i < first_increasing or first_increasing == -1:\n                    first_increasing = i\n                    \n    # Calculate the maximum sum of a bitonic subsequence\n    if last_increasing!= -1 and first_increasing!= -1:\n        max_sum = arr[first_increasing] + arr[last_increasing]\n        for i in range(first_increasing+1, last_increasing):\n            max_sum += arr[i]\n    elif last_increasing!= -1:\n        max_sum = arr[last_increasing]\n    elif first_increasing!= -1:\n        max_sum = arr[first_increasing]\n    else:\n        max_sum = 0\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    prev = float('-inf')\n    curr_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] < prev:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n            \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        prev = arr[i]\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n\n    # First, find the maximum subarray that ends with an increasing element\n    inc_sum = [0] * (n + 1)\n    inc_sum[1] = arr[0]\n    for i in range(1, n):\n        inc_sum[i + 1] = max(arr[i], inc_sum[i])\n\n    # Then, find the maximum subarray that ends with a decreasing element\n    dec_sum = [0] * (n + 1)\n    dec_sum[1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec_sum[i + 1] = max(arr[i], dec_sum[i])\n\n    # Find the maximum sum of both subarrays\n    max_sum_inc = max(inc_sum[2:], dec_sum[1:-1])\n    max_sum_dec = max(dec_sum[1:-1], inc_sum[1:])\n\n    return max(max_sum_inc, max_sum_dec)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    def is_bitonic(arr):\n        if len(arr) <= 1:\n            return True\n        if arr[0] < arr[1]:\n            return True\n        if arr[0] > arr[1]:\n            if arr[1] < arr[2]:\n                return False\n            else:\n                return is_bitonic(arr[1:])\n        if arr[1] > arr[2]:\n            if arr[2] < arr[0]:\n                return False\n            else:\n                return is_bitonic(arr[2:])\n        return True\n    \n    def find_bitonic_subsequence(arr):\n        max_sum = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                if arr[i] > max_sum:\n                    max_sum = arr[i]\n        return max_sum\n    \n    if is_bitonic(arr):\n        return find_bitonic_subsequence(arr)\n    else:\n        return None"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # create a list of sums of bitonic subsequences\n    sums = []\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            # increasing subsequence\n            sums.append(arr[i] + arr[i-1])\n        else:\n            # decreasing subsequence\n            sums.append(arr[i] - arr[i-1])\n\n    # find the maximum sum\n    max_sum = max(sums)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_sum1 = max_sum2 = float('-inf')\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum1 = max(max_sum1, arr[i])\n        else:\n            max_sum2 = max(max_sum2, arr[i])\n\n    return max(max_sum1, max_sum2)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_left = arr[0]\n    max_right = max(arr[0], arr[1])\n    max_sum = max_right\n    \n    for i in range(2, n):\n        left_sum = max_left - arr[i-1]\n        right_sum = max_right - arr[i]\n        \n        if left_sum > right_sum:\n            max_left = arr[i]\n        elif left_sum < right_sum:\n            max_right = arr[i]\n        else:\n            max_left = max(arr[i-1], max_left)\n            max_right = max(arr[i], max_right)\n        \n        max_sum = max(max_sum, max_left + max_right)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    max_sum = float('-inf')\n    max_bitonic_subseq = []\n\n    # Check if the array is empty\n    if n == 0:\n        return 0\n\n    # Check if the array is a single element\n    if n == 1:\n        return arr[0]\n\n    # Check if the array has a single bitonic subsequence\n    for i in range(n):\n        if i == 0:\n            if arr[i] > arr[i+1]:\n                max_bitonic_subseq.append(arr[i])\n        elif i == n-1:\n            if arr[i] > arr[i-1]:\n                max_bitonic_subseq.append(arr[i])\n        else:\n            if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n                max_bitonic_subseq.append(arr[i])\n\n    # If the array has multiple bitonic subsequences, find the maximum sum\n    if len(max_bitonic_subseq) > 1:\n        for i in range(len(max_bitonic_subseq)-1):\n            curr_sum = max_bitonic_subseq[i] + max_bitonic_subseq[i+1]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i):\n            dp[i][j] = arr[i] - arr[j] if arr[i] >= arr[j] else arr[j] - arr[i]\n            if i - j > 1:\n                dp[i][j] += dp[i - 1][j - 1]\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Calculate the number of iterations required to find the square root\n    iterations = 0\n    guess = 1\n    while guess**2 > number:\n        iterations += 1\n        guess = (guess + number/guess)/2\n\n    # Print the number of iterations and the square root\n    print(f'Number of iterations: {iterations}')\n    print(f'Square root: {guess}')"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters:\n    -----------\n    number: float\n        The number whose square root we want to compute.\n\n    Returns:\n    --------\n    float\n        The square root of the input number.\n    '''\n\n    # Check if the input is a float\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"Input must be a float.\")\n\n    # Check if the input is negative\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative float.\")\n\n    # Compute the square root using the babylonian method\n    x = 0.5 * (number + number ** 0.5)\n    while abs(x ** 2 - number) > 0.00001:\n        x = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Start with a guess of the square root\n    guess = number / 2\n    # Initialize the previous and current values of the guess\n    previous_guess = guess\n    # Initialize the iteration count\n    iteration = 0\n    # Initialize the maximum iteration count allowed\n    max_iterations = 1000\n    # While the difference between the guess and the square of the previous guess is greater than epsilon\n    while abs(guess * guess - number) > 1e-10 and iteration < max_iterations:\n        # Update the previous guess and the iteration count\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n        iteration += 1\n    # If the maximum iteration count is reached, raise an exception\n    if iteration == max_iterations:\n        raise ValueError(\"Maximum iteration count reached.\")\n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = x / 2\n    i = 0\n    while abs(x - y) >= 0.00001:\n        x = y\n        y = (x + number/x) / 2\n        i += 1\n    return (x, i)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # find the number of iterations needed to get within 0.001 error\n    iterations = 0\n    x = number\n    while abs(x*x - number) >= 0.001:\n        x = 0.5 * (x + (number/x))\n        iterations += 1\n    return iterations, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (number / y) + y / x\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = number/2\n    previous_guess = 0\n    tolerance = 0.0001\n\n    # loop until the difference between the guess and the previous guess is less than the tolerance\n    while abs(guess - previous_guess) > tolerance:\n        previous_guess = guess\n        guess = (guess + number/guess)/2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    upper_bound = number * 1.1\n    lower_bound = number / 1.1\n    epsilon = 1e-10\n\n    # initialize loop counter\n    count = 0\n\n    # loop until the difference between the upper and lower bounds is less than the epsilon value\n    while abs(upper_bound - lower_bound) >= epsilon:\n        # compute the square of the guess\n        guess_square = guess**2\n\n        # update the upper and lower bounds based on the square of the guess\n        if guess_square < number:\n            upper_bound = guess\n        else:\n            lower_bound = guess\n\n        # update the guess based on the difference between the upper and lower bounds\n        guess = (upper_bound + lower_bound) / 2\n\n        # increment the loop counter\n        count += 1\n\n    # return the guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    x = guess\n    y = (guess * guess) + (number / 2)\n    while y < number:\n        guess = (x + y) / 2\n        x = guess\n        y = (guess * guess) + (number / 2)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2\n    while True:\n        x1 = (x0 + number / x0) / 2\n        if abs(x1 - x0) < 0.0001:\n            return x1\n        x0 = x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence of substring in the original string\n    table = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Base case: If the string is of length 1, then its longest palindromic subsequence is of length 1\n    for i in range(1, n+1):\n        table[i][i] = 1\n    \n    # Fill the table in bottom-up manner\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if str[j-1] == str[i-1]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[j][i])\n    \n    # Return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    n = len(string)\n    table = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j] and (i - j <= 2 or table[j + 1][i - 1]):\n                table[i][j] = table[j][i - 1] + 2\n                if table[i][j] > max_len:\n                    max_len = table[i][j]\n                    start = i - table[i][j]\n            elif table[j][i - 1] > table[i][j]:\n                table[i][j] = table[j][i - 1]\n        if string[i] == string[i - 1]:\n            table[i][i - 1] = 1\n        else:\n            table[i][i - 1] = 0\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def longest_palindrome(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a 2D array to store the length of the longest palindromic subsequence for all prefixes of the string\n    palindrome = [[0 for _ in range(n)] for _ in range(n)]\n    # Initialize the base cases\n    for i in range(n):\n        palindrome[i][i] = 1\n    # Fill the array using dynamic programming approach\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                palindrome[i][j] = palindrome[i+1][j-1] + 2\n            else:\n                palindrome[i][j] = max(palindrome[i+1][j], palindrome[i][j-1])\n    return palindrome[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Creating a 2D table to store the lengths of subsequences\n    table = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n    # Finding the lengths of subsequences using the above table\n    for length in range(3, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    # Creating a 2D array to store LPS values\n    L = [[0] * n for i in range(n)]\n    # Initializing the first row and the first column\n    L[0][0] = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            L[i][i] = L[i-1][i-1] + 1\n        else:\n            L[i][i] = max(L[i-1][j] for j in range(i))\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    # create a 2D table to store the length of longest palindromic subsequence ending at each position in the string\n    table = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)] \n\n    # fill the table\n    for i in range(1, len(str)+1): \n        for j in range(1, len(str)+1): \n            if str[i-1] == str[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last position\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Create a 2D table to store the lengths of longest palindromic subsequences\n        dp = [[0] * n for _ in range(n)]\n\n        # Initialize the first row and first column\n        for i in range(n):\n            dp[i][i] = 1\n\n        # Fill the table in bottom-up fashion\n        for i in range(2, n):\n            for j in range(n-i):\n                if s[j] == s[j+i]:\n                    dp[j][j+i] = dp[j+1][j+i-1] + 2\n                else:\n                    dp[j][j+i] = max(dp[j][j+i-1], dp[j+1][j+i])\n\n        return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence for substrings \n    # of length 1 to n\n    lps_table = [[0 for j in range(n)] for i in range(n)]\n    \n    # Initialize the LPS values for all substrings of length 1 to n\n    for i in range(n):\n        lps_table[i][i] = 1\n        \n    # Find the LPS values for all substrings of length 2 to n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n    \n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D table to store the length of the longest palindromic subsequence for all prefixes of the given string\n    lps_table = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and first column of the table with 1\n    for i in range(len(str)):\n        lps_table[i][i] = 1\n\n    # Iterate over all prefixes of the given string\n    for i in range(len(str) - 1):\n        # If the characters at the current indices are same, update the length of the longest palindromic subsequence for that prefix\n        if str[i] == str[i + 1]:\n            lps_table[i][i + 1] = lps_table[i + 1][i] + 2\n\n        # If the characters at the current indices are different, check if the subsequence ending at the previous index is a palindrome\n        elif lps_table[i + 1][i] > 0:\n            # Update the length of the longest palindromic subsequence for that prefix by taking the maximum of the lengths of the longest palindromic subsequence for the previous row and the longest palindromic subsequence for the previous row but excluding the current character\n            lps_table[i][i + 1] = max(lps_table[i + 1][i], lps_table[i][i - 1])\n\n    # Return the length of the longest palindromic subsequence for the entire string\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    table = [[0]*n for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, i+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[j-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[j][i-1])\n    return table[n-1][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_lst = [1]\n    for i in range(1, n):\n        sum_lst.append(1/i)\n    harmonic_sum = sum(sum_lst)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * harmonic_sum(n-1) / (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1, using the formula:\n    H(n) = 1/n * (1/2 + 1/3 +... + 1/n)\n    \"\"\"\n    # Calculate the sum of 1/n for each integer between 1 and n\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1.0/i\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through the range of 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum of i\n        harmonic_sum = 1/i + 1/i +... + 1/i\n        # add the harmonic sum to the sum\n        sum += harmonic_sum\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0 / (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += 1 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return harmonic_sum(n-1) + harmonic_sum(n-2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + (harmonic_sum(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the second array to make it easier to find common elements\n    set_nums2 = set(array_nums2)\n    # Iterate through the first array\n    result = []\n    for num in array_nums1:\n        # If the number is in the second array, add it to the result\n        if num in set_nums2:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create a list to store the elements that appear in both arrays\n    common_nums = []\n    \n    # iterate over each element in array_nums2 and check if it appears in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            # if it does, add it to common_nums and decrement its frequency in freq_dict\n            common_nums.append(num)\n            freq_dict[num] -= 1\n    \n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two sets to store unique elements of array_nums1 and array_nums2\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersect_set = set_nums1.intersection(set_nums2)\n\n    # Convert the set to a list and return it\n    return list(intersect_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of elements in the first array to find the intersection\n    set1 = set(array_nums1)\n    # Create a set of elements in the second array to find the intersection\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(set1.intersection(set2))\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n\n    Args:\n    array_nums1: A list of integers.\n    array_nums2: A list of integers.\n\n    Returns:\n    A list of integers representing the intersection of the two arrays.\n    \"\"\"\n    # Initialize an empty set to store the unique elements from array1\n    set1 = set()\n\n    # Iterate through the elements of array1 and add each element to the set1\n    for num in array_nums1:\n        set1.add(num)\n\n    # Initialize an empty set to store the intersection of the two sets\n    intersection = set()\n\n    # Iterate through the elements of array2 and add each element to the intersection set if it exists in set1\n    for num in array_nums2:\n        if num in set1:\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it as output\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element x and counts the number of times x appears in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i,element)\n    # Return the modified list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # copy the list to avoid modifying the original list\n    new_lst = lst.copy()\n    # iterate over the list and insert the element before each element\n    for i in range(len(new_lst)):\n        new_lst.insert(i, elem)\n    # return the modified list\n    return new_lst"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        print(f'{number} in polar coordinates is ({magnitude:.2f}, {angle:.2f} radians)')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real = cmath.rect(number.real)\n        imag = cmath.rect(number.imag)\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_complex = complex(magnitude * cmath.cos(angle), magnitude * cmath.sin(angle))\n        print(polar_complex)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns the corresponding list of polar coordinates.\n\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        try:\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            phi = cmath.phase(num)\n        except ValueError:\n            r = 0\n            phi = 0\n        result.append([r, phi])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(f'({r:.2f}, {theta:.2f})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # print polar coordinates\n        print(\"r = {:.2f}, theta = {:.2f}\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            angle = cmath.phase(num)\n            r = abs(num)\n            print(f\"({r}, {angle})\")\n        else:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the same list of complex numbers with their \n    polar coordinates converted to Cartesian coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Convert the polar coordinates to Cartesian coordinates\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n        \n        # Create a complex number with the converted Cartesian coordinates\n        new_number = complex(x, y)\n        \n        # Append the new complex number to the list of polar coordinates\n        polar_coordinates.append(new_number)\n        \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        if isinstance(num, complex):\n            angle = cmath.phase(num)\n            mag = abs(num)\n            polar.append((angle, mag))\n        else:\n            polar.append(num)\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function counts the number of integer elements in a given list.\n\n    Args:\n        list1 (list): The list to be counted.\n\n    Returns:\n        int: The number of integer elements in the given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l, n):\n            color_combinations.append(tuple(combo))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green']\n    result = []\n    \n    for combo in combinations_with_replacement(l, n):\n        result.append(tuple(colors[x] for x in combo))\n    \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0  # initialize a count variable\n    for i in range(2, n):  # iterate over all numbers from 2 to n-1\n        is_prime = True  # initialize a boolean flag for prime status\n        for j in range(2, int(i**0.5)+1):  # iterate over all multiples of i from 2 to sqrt(i)\n            if i % j == 0:  # if i is divisible by j, it's not prime\n                is_prime = False\n                break\n        if is_prime:  # if i is prime, increment the count variable\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, num)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function that returns True if a number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize count variable to zero\n    count = 0\n\n    # Loop through all numbers from 2 to n-1\n    for num in range(2, n):\n\n        # Check if num is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(max(test_tup1), max(test_tup2))\n    if max_val == max(test_tup1):\n        return (max(test_tup1), max(test_tup2))\n    else:\n        return (max(test_tup2), max(test_tup1))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max_element = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n        max_index = test_tup1.index(max_element)\n        max_value = test_tup1[max_index]\n        for i, element in enumerate(test_tup1):\n            if element == max_value:\n                min_index = i\n                break\n        test_tup1[min_index] = max_element\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the maximum values from the two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        max_tuple = test_tup1\n    else:\n        max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples are same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have same length!\")\n        return\n\n    # Find the maximum element in each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Compare the maximum elements and return the tuple with maximum elements\n    if max_tup1 >= max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = max(test_tup1, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # if both tuples have the same length, compare the elements of the first tuple\n    if len(test_tup1) == len(test_tup2):\n        max_element = max(test_tup1[0], test_tup2[0])\n        print('The maximum element in both tuples is:', max_element)\n    # if one tuple has a longer length, compare the elements of the longer tuple\n    else:\n        max_element = max(test_tup1[0], test_tup2[0])\n        if len(test_tup1) > len(test_tup2):\n            print('The maximum element in the longer tuple is:', max_element)\n        else:\n            print('The maximum element in the shorter tuple is:', max_element)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize a variable to store the maximum value\n    max_val = 0\n    \n    # loop through the tuples and compare the values\n    for val1, val2 in zip(test_tup1, test_tup2):\n        if val1 > val2:\n            max_val = val1\n        else:\n            max_val = val2\n    \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    max_val = max(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return max_val, test_tup1, test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a list to store the prime numbers found\n    prime_list = []\n\n    # loop through the numbers 2 to n-2\n    for i in range(2, n-2):\n        # if the number is prime, append it to the list\n        if is_prime(i):\n            prime_list.append(i)\n            # check if the prime number is the nth newman\u2013shanks\u2013williams prime number\n            if len(prime_list) == n:\n                return prime_list[-1]\n\n    # if the function reaches here, there is no nth newman\u2013shanks\u2013williams prime number\n    return None\n\ndef is_prime(n):\n    '''\n    A function to check if a number is prime.\n    '''\n    # if the number is less than 2, it is not prime\n    if n < 2:\n        return False\n\n    # loop through the numbers 2 to n-1\n    for i in range(2, int(n**0.5)+1):\n        # if the number is divisible by i, it is not prime\n        if n % i == 0:\n            return False\n\n    # if the function reaches here, the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the starting number of the sequence\n    a = 2\n    \n    # Keep track of the sequence\n    sequence = []\n    \n    # Loop until we have enough primes in the sequence\n    while len(sequence) < n:\n        # Check if a is a newman-shanks-williams prime\n        if is_newman_prime(a):\n            # Add a to the sequence and continue\n            sequence.append(a)\n            a += 1\n        else:\n            # Move to the next number in the sequence\n            a += 1\n    \n    # Return the nth prime number in the sequence\n    return sequence[n-1]\n\n\ndef is_newman_prime(n):\n    '''\n    Determine whether a number is a newman-shanks-williams prime.\n    '''\n    # Check for the base cases\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    # Loop from 3 up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        if i == 2:\n            i += 1\n        elif i % 2 == 0:\n            i += 1\n        else:\n            j = 3\n            while i**j - i - 2 < n:\n                j += 2\n            if i**j - i - 2 == n:\n                return i\n            i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        \"\"\"\n        A helper function to generate the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        i = 2\n        while True:\n            if is_prime(i) and is_prime(i**2) and is_prime(i**3):\n                yield i\n            i += 1\n            if len(list(newman_shanks_williams_prime(n - 1))) == n:\n                return i - 1\n\n    return next(newman_shanks_williams_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize two variables to keep track of the smallest and largest prime number found so far\n    smallest_prime = 2\n    largest_prime = 1\n\n    # Loop through the even numbers from 3 to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n\n        # Check if i is a prime number\n        if is_prime(i):\n\n            # If i is a newman\u2013shanks\u2013williams prime number, check if it is larger than the current largest prime number\n            if i > largest_prime:\n                largest_prime = i\n\n                # If it is larger than the current smallest prime number, update the smallest prime number\n                if i < smallest_prime:\n                    smallest_prime = i\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return smallest_prime + (n - largest_prime - 1)\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n\n    # Check if n is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if n is divisible by any number from 2 to n-2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If none of the divisors are found, n is a prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 1\n    prime = 2\n    \n    # loop until count reaches n\n    while count < n:\n        # check if prime number\n        for i in range(2, prime):\n            if prime % i == 0:\n                break\n        else:\n            # prime number found, print it\n            print(prime)\n            # increment count and reset prime number\n            count += 1\n            prime = 2\n        # increment prime number\n        prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n\n    # List of prime numbers less than or equal to n\n    primes = [2]\n\n    # Keep adding new primes to the list until we reach n\n    while len(primes) < n:\n        # Check if the next prime number is divisible by any previous prime number\n        for i in range(len(primes)):\n            if primes[i] * primes[i] > n:\n                break\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n            n += 1\n\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in prime:\n        count += 1\n        if count == n:\n            return i\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th newman-shanks-williams prime number is:\", newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return None\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return None\n            i += 2\n        return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the first and second newman prime numbers\n    prime1 = 2\n    prime2 = 3\n\n    # Initialize the count of prime numbers\n    count = 0\n\n    # Check if the first two primes are equal\n    if prime1 == prime2:\n        count += 1\n        prime2 += 1\n\n    # Loop n-1 times\n    for i in range(n-2):\n        # Find the next newman prime number\n        next_prime = prime1 + prime2\n\n        # Check if the next newman prime number is prime\n        if is_prime(next_prime):\n            count += 1\n            prime2 = next_prime\n\n    # Return the nth newman prime number\n    return prime2"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Divide the elements of the tuples element-wise\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    \n    # Return the modified tuples\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same number of elements')\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))  # use infinity for division by zero\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == int and type(test_tup2[i]) == int:\n            result.append(test_tup1[i] // test_tup2[i])\n        elif type(test_tup1[i]) == float and type(test_tup2[i]) == float:\n            result.append(test_tup1[i] / test_tup2[i])\n        else:\n            result.append(\"Type mismatch\")\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be equal\")\n        return\n    \n    # perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero encountered\")\n            return\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Number of elements in the input tuples do not match.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            print(f\"{test_tup1[i]} / {test_tup2[i]} = {test_tup1[i] / test_tup2[i]}\")\n        else:\n            print(f\"{test_tup1[i]} / {test_tup2[i]} = {test_tup1[i] / test_tup2[i]} (error!)\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        return None, None\n    # Check if the length of list1 is greater than L\n    elif len(list1) <= L:\n        return list1, []\n    else:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    mid = n // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L >= n:\n        return (list1, [])\n    else:\n        return ([x for i, x in enumerate(list1) if i < L], [x for i, x in enumerate(list1) if i >= L])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts where the length of the first part is L\n    half = len(list1) // 2\n    part1 = list1[:half]\n    part2 = list1[half:]\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(lst)//2\n    return (lst[:half], lst[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list `lst` and an integer `L` and splits the list into two parts where the length of the first part of the list is `L`. It then returns the two resulting lists in a tuple.\n    '''\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List length is less than L\")\n    mid = len(list1) // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (2 * h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12\n    return dog_years * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age/7)\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    total_years = (h_age * dog_years) + 1\n    return total_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = 12 * h_age\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate dog's years based on his height in inches\n    dog_years = h_age / 39.37\n    \n    # Return the dog's years as an integer\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate dog's years based on their height in inches\n    years = 7 * h_age\n\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age in hours to dog age in years\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 1:\n        return [S]\n\n    if step == 2:\n        return [[S[i], S[i+1]] for i in range(0, len(S)-1, 2)]\n\n    if step == 3:\n        return [[S[i], S[i+1], S[i+2]] for i in range(0, len(S)-2, 3)]\n\n    if step == 4:\n        return [[S[i], S[i+1], S[i+2], S[i+3]] for i in range(0, len(S)-3, 4)]\n\n    if step == 5:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4]] for i in range(0, len(S)-4, 5)]\n\n    if step == 6:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4], S[i+5]] for i in range(0, len(S)-5, 6)]\n\n    if step == 7:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4], S[i+5], S[i+6]] for i in range(0, len(S)-6, 7)]\n\n    if step == 8:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4], S[i+5], S[i+6], S[i+7]] for i in range(0, len(S)-7, 8)]\n\n    if step == 9:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4], S[i+5], S[i+6], S[i+7], S[i+8]] for i in range(0, len(S)-8, 9)]\n\n    if step == 10:\n        return [[S[i], S[i+1], S[i+2], S[i+3], S[i+4], S[i+5], S[i+6], S[i+7], S[i+8], S[i+9]] for i in range(0, len(S)-9, 10)]\n\n    return []"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)[:-1]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    n = step\n    results = []\n    while len(S) >= step:\n        results.append(S[:step])\n        S = S[step:]\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the input list\n    for i in range(len(S)):\n        # If we have reached the nth element, append the current list to the result list and reset the counter\n        if count == step:\n            result.append(S[i:i+step])\n            count = 0\n        # Otherwise, increment the counter\n        else:\n            count += 1\n    \n    # If there are any remaining elements in the input list, append them to the result list\n    if count > 0:\n        result.append(S[i:])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Define an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list until there's only one element left\n    while len(S) > 1:\n        # Split the list for every nth element\n        S = S[::step]\n        \n        # Append the resulting list to the result list\n        result.append(S)\n        \n    # Append the remaining element to the result list\n    result.append(S[0])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # lateral surface area = 6 * l^2\n    surface_area = 6 * l**2\n    \n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the cube's surface area using Heron's formula\n    surface_area = (l ** 2) * 6\n    \n    # calculate the lateral surface area\n    lateral_area = l * l\n    \n    # return the total lateral surface area\n    return lateral_area + surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (6 * l ** 2) + (6 * l ** 2) + (6 * l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (1/3) * l ** 2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        total += count**2\n        count += 1\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    #initialize the sum of squares to zero\n    square_sum = 0\n    #loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        #add the square of the current odd natural number to the sum of squares\n        square_sum += i*i\n    #return the sum of squares\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count * count\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize the sum to zero\n    sum = 0\n\n    # iterate over the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # square the odd number and add it to the sum\n        sum += i**2\n\n    # return the sum of squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    count = 1  \n    num = 1  \n    while count <= n:  \n        if num % 2!= 0:  \n            sum += num**2  \n        count += 1  \n        num += 2  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    # initialize the sum variable to zero\n    total_sum = 0\n    \n    # loop from 1 to n-1\n    for i in range(1, n):\n        # add the square of the current number to the total sum\n        total_sum += i*i\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of each odd natural number to the sum\n        sum += i*i\n\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Define a list of star numbers\n    star_nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n\n    # Check if the input number is less than or equal to 0\n    if n <= 0:\n        return None\n\n    # Check if the input number is greater than 1000000000\n    elif n > 1000000000:\n        return None\n\n    # Find the index of the input number in the list\n    index = star_nums.index(n)\n\n    # Return then'th star number\n    return star_nums[index]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    # Initialize the count variable to 1\n    count = 1\n    # Initialize the string variable to an empty string\n    result = \"\"\n    # Loop through each digit in the input number\n    for digit in str(n):\n        # If the digit is a 1, append a star to the result string\n        if digit == \"1\":\n            result += \"*\"\n        # Increment the count variable by 1\n        count += 1\n    # If the count variable is less than or equal to 5, append more stars to the result string\n    for i in range(count-5):\n        result += \"*\"\n    # Return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n+1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n % 2 == 0:\n        return \"*\" + find_star_num(n//2)\n    else:\n        return find_star_num(n//2) + \"*\"\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the count of stars to 0\n    count = 0\n    \n    # loop through each row of stars and add 1 to the count for each row\n    for i in range(1, n+1):\n        # loop through each column of the row and add 1 to the count for each column\n        for j in range(1, i+1):\n            count += 1\n    \n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n\n    # initialize variables for loop and counter\n    count = 1\n    star_num = 1\n\n    # loop through n times to find the nth star number\n    while count <= n:\n        # multiply the counter by 2 and add 1 to get the next star number\n        star_num = 2 * star_num + 1\n        count += 1\n\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Base case: n = 1\n    if n == 1:\n        return \"*\"\n    \n    # Recursive case: n > 1\n    return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1*2\"\n    else:\n        return str(n) + \"*\" + str(find_star_num(n-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the value of the sum to 0\n    sum_of_stars = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the number of stars (i) to the sum\n        sum_of_stars += i\n    \n    # return the sum of the stars\n    return sum_of_stars"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n\n    # Initialize the sum of even numbers at even positions to zero\n    even_sum = 0\n\n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # If it is, add it to the even sum\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    for i in range(2, n+1, 2):\n        sum_even_powers += i**5\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize variables to keep track of the sum and index\n    sum_of_powers = 0\n    index = 0\n\n    # Loop through the first n even natural numbers\n    while index < n:\n        # Check if the current natural number is even\n        if index % 2 == 0:\n            # Raise it to the fifth power and add to the sum\n            sum_of_powers += index ** 5\n            # Increment the index\n            index += 1\n\n    # Return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_evens = 0\n    for i in range(1, n+1):\n        sum_of_evens += i**5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i ** 5\n        i += 1\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [2*i for i in range(1, n+1, 2)]\n    result = 0\n    for num in even_numbers:\n        result += num ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i * i * i * i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        rear = i[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear for front, rear in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check that the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    \n    # Iterate through the two tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction_result = []\n    for i in range(len(test_tup1)):\n        subtraction_result.append(test_tup1[i] - test_tup2[i])\n    return subtraction_result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    subtraction_result = []\n    for i in range(len(test_tup1)):\n        subtraction_result.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtraction_result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize a new list to store the results\n    result_list = []\n    # loop through the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the index exists in the second tuple\n        if i < len(test_tup2):\n            # subtract the element of the first tuple from the element of the second tuple with the same index and append the result to the result list\n            result_list.append(test_tup1[i] - test_tup2[i])\n        else:\n            # if the index does not exist in the second tuple, append the first tuple's element to the result list\n            result_list.append(test_tup1[i])\n    # return the result list\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths!\")\n        return\n\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same number of elements.')\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element of the second tuple with the same index from the element of the first tuple\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples must be the same.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): positive integer\n\n    Returns:\n    float: sum of even index binomial coefficients\n    \"\"\"\n    sum_even_binomial_coefficients = 0\n    for i in range(1, n+1):\n        sum_even_binomial_coefficients += math.comb(n, i)\n    return sum_even_binomial_coefficients"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum of even binomial coefficients to zero\n    sum = 0\n    \n    # Initialize a variable to store the value of i\n    i = 0\n    \n    # Loop through all values of i up to the value of n\n    while i <= n:\n        # Calculate the value of binomial coefficient for i\n        b = math.comb(n, i)\n        \n        # Check if the index of the coefficient is even\n        if i % 2 == 0:\n            # If the index is even, add the coefficient to the sum\n            sum += b\n        \n        # Increment i by 1\n        i += 1\n    \n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(n+1):\n        for j in range(i):\n            if j % 2 == 0:\n                sum_even_coeffs += math.comb(n, j)\n    return sum_even_coeffs\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    # Calculate the sum of even index binomial coefficients using formula\n    sum_even_index_binomial_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_index_binomial_coeffs += math.comb(n, i)\n    \n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1):\n        for j in range(0, i, 2):\n            sum_even_coeffs += math.comb(i, j)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through from 0 to n-2\n    for i in range(0, n-2):\n        # calculate binomial coefficient\n        coeff = math.comb(n, i)\n        # if the coefficient is even, add it to the sum\n        if i % 2 == 0:\n            sum += coeff\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    even_sum = 0\n    # Loop through the even indices from 0 to n-1\n    for i in range(2, n+1, 2):\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, i-1)\n        # Add the even index binomial coefficient to the even_sum\n        even_sum += coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += binomial_coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum of even index binomial coefficients\n    even_sum = 0\n    # Calculate the sum of even index binomial coefficients\n    for i in range(2, n+1):\n        for j in range(0, i, 2):\n            even_sum += math.comb(i, j)\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * (r**3) + h * r\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r * r * h  # formula for volume of a cylinder\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r ** 2) * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*3.14159*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return (1/3) * 3.14 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup):\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number, False otherwise.\n    A decagonal number is a number that can be expressed as the sum of two consecutive positive integers. \n    For example, 6 is a decagonal number because 2 + 4 = 6.\n    \n    Examples:\n    is_num_decagonal(1)   # True, 1 is a decagonal number\n    is_num_decagonal(6)   # True, 6 is a decagonal number\n    is_num_decagonal(10)  # False, 10 is not a decagonal number\n    '''\n    if n < 0:\n        return False\n    else:\n        total = 0\n        for i in range(1, n+1):\n            total += i\n        if total == 2*n - 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Decagonal numbers have the pattern 1^2 + 2^2 +... + n^2 = n(n+1)(2n+1)/6\n    # Let n = 10 and find the 10th decagonal number.\n    # 1^2 + 2^2 +... + 10^2 = 10(11)(21)/6\n    # n(n+1)(2n+1)/6 = 10(11)(21)/6\n    # n(n+1)(2n+1) = 660\n    # n(n+1) = 66\n    # n = 6\n    # The 6th decagonal number is 6.\n    if n == 1:\n        return 1\n    else:\n        decagonal_num = (n*(n+1)*(2*n+1))//6\n        return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Helper function to find the nth catalan number\n    def find_nth_catalan(n):\n        if n == 1:\n            return 1\n        else:\n            return 4 * find_nth_catalan(n-1) - find_nth_catalan(n-2)\n\n    # Find the nth catalan number\n    nth_catalan = find_nth_catalan(n)\n\n    # Find the decagonal number by subtracting the nth catalan number from 24\n    decagonal_num = n * n * 24 - nth_catalan\n\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    num = 1\n    count = 1\n    last_num = 1\n\n    # Check if n is greater than 0\n    if n <= 0:\n        return \"Error: n must be a positive integer.\"\n\n    # Calculate the nth decagonal number\n    while count <= n:\n        if count % 2 == 0:\n            num = last_num + num\n        else:\n            num = 2 * last_num + num\n        last_num = num\n        count += 1\n\n    # Return the nth decagonal number\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables for the first two decagonal numbers\n    dec_num_1 = 1\n    dec_num_2 = 1\n    \n    # Loop through the remaining decagonal numbers\n    for i in range(3, n+1):\n        # Calculate the next decagonal number\n        dec_num_i = dec_num_1 + dec_num_2\n        \n        # Check if the current number is a decagonal number\n        if dec_num_i == n:\n            return True\n        \n        # Update the previous decagonal numbers\n        dec_num_1 = dec_num_2\n        dec_num_2 = dec_num_i\n    \n    # If the loop completes without finding a decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to find the nth decagonal number\n    def nth_decagonal(n):\n        return (n * (3 * n - 1) + n) // 2\n    \n    # Check if the input n is a positive integer\n    if isinstance(n, int) and n > 0:\n        # Call the nth_decagonal function and return its value\n        return nth_decagonal(n)\n    else:\n        # Raise a TypeError if the input is not a positive integer\n        raise TypeError(\"Input must be a positive integer.\")"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # Initialize variables\n    decagonal_num = 0\n    counter = 1\n\n    # Calculate the decagonal number\n    while counter <= n:\n        decagonal_num += counter\n        counter += 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal += i ** 2\n        i += 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a decagonal number, and False otherwise.\n    A decagonal number is a positive integer that can be expressed as the sum of two consecutive integers.\n    \"\"\"\n    for i in range(1, n+1):\n        if i == 1:\n            decagonal_num = i\n        else:\n            decagonal_num = decagonal_num + i\n    if decagonal_num == 2 * n:\n        return True\n    else:\n        return False\n\ndef nth_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth decagonal number.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if is_num_decagonal(i):\n            count += 1\n        if count == n:\n            return i\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", nth_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 1 + 5 * n + 10 * n**2 + 5 * n**3\n\nn = int(input(\"Enter the value of n: \"))\n\nif is_num_decagonal(n) % 2 == 0:\n    print(f\"The {n}th decagonal number is: {is_num_decagonal(n)}\")\nelse:\n    print(f\"The {n}th decagonal number is: {is_num_decagonal(n) - 2}\")"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a given list are unique or not.\n\n    :param test_list: a list of elements to check if they are unique or not.\n    :type test_list: list\n    :return: a boolean value indicating whether all elements in the list are unique or not.\n    :rtype: bool\n    \"\"\"\n    # create a set of the elements in the list and check if its size is equal to the length of the set\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= len(test_list):\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element in unique_elements:\n            return False\n        unique_elements.append(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of equal length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts the elements of two lists element-wise and returns the result.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    # Subtract each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length\")\n        return\n    subtraction = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return subtraction"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # create a list to store the frequency of each digit in the number\n    freq = [0] * 10  # assuming there are 10 digits\n\n    # loop through each digit in the number\n    for digit in str(n):\n        # check if the digit is already in the frequency list\n        if digit in freq:\n            # if it is, increment its frequency by 1\n            freq[freq.index(digit)] += 1\n        else:\n            # otherwise, append the digit and frequency of 1 to the list\n            freq.append(digit)\n            freq.append(1)\n\n    # loop through the frequency list and check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(len(freq)):\n        if freq[i] > freq[i] or freq[i] > n % 10:\n            return False\n\n    # if all digits pass, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0]*10\n    \n    for digit in digits:\n        freq[digit] += 1\n    \n    for digit in freq:\n        if digit > 1:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # initialize frequency array with 0 for each digit 0-9\n    \n    # loop through each digit in the integer and increment the corresponding frequency array index\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # loop through each frequency array index and check if the frequency is greater than or equal to the digit itself\n    for i in range(10):\n        if freq[i] >= i:\n            print(f\"Digit {i} is valid.\")\n        else:\n            print(f\"Digit {i} is invalid.\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = str(n)\n    freq = {}\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    while n:\n        freq[n % 10] += 1\n        n //= 10\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    frequency = {}\n\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # Convert the integer to a string\n    num_str = str(n)\n    # Iterate through each character in the string\n    for char in num_str:\n        # Check if the character is already in the dictionary\n        if char in freq:\n            # Increment the frequency of the character by 1\n            freq[char] += 1\n        else:\n            # Add the character to the dictionary with a frequency of 1\n            freq[char] = 1\n    # Iterate through each character in the string again\n    for char in num_str:\n        # Check if the frequency of the character is greater than the character itself\n        if freq[char] > int(char):\n            # Return False as the frequency of the character is greater than the character itself\n            return False\n    # If the loop completes without returning False, return True as the frequency of each digit in the integer is less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    freq = {}\n\n    # Count the frequency of each digit in the number\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > 1:\n            if int(digit) > int(digit) ** count:\n                return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0]*10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > freq[i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = str(n)\n    freq = {}\n    for digit in num:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    else:\n        if lst[0] == elem:\n            return check_element(lst[1:], elem)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element and False otherwise.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 1:\n        return list[0] == element\n    elif all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=a)b{2,3}')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3}){0,1}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a([bB]){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\b(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print('The string contains the pattern.')\n    else:\n        print('The string does not contain the pattern.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    result = re.search(pattern, text)\n    if result:\n        print(\"The text contains the pattern 'a.*b{2,3}'\")\n    else:\n        print(\"The text does not contain the pattern 'a.*b{2,3}'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b(?=.{2,3}b)')\n    match = pattern.match(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = a * k\n    max_sum = max_subarray(modified_array, n)\n    return max_sum\n\ndef max_subarray(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array by repeating the given array k times\n    mod_array = a * k\n    \n    # calculate the sum of the modified array\n    mod_array_sum = sum(mod_array)\n    \n    # find the maximum sum of a contiguous subarray in the original array\n    max_sum = max(a)\n    \n    # iterate through the modified array\n    for i in range(n-k+1):\n        # calculate the sum of the current subarray\n        sub_array_sum = sum(mod_array[i:i+k])\n        \n        # update the maximum sum if the current subarray sum is greater than the maximum sum\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(k):\n            a[i*k+j] = a[i]\n    a = a[:n*k]\n    for i in range(1, n*k):\n        a[i] = max(a[i], a[i-1])\n    max_sum = max(max_sum, a[-1])\n    return max_sum\n\na = [1, 2, 3, 4, 5]\nn = len(a)\nk = 3\nprint(max_sub_array_sum_repeated(a, n, k))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the original array k times\n    modified_array = []\n    for i in range(k):\n        modified_array += a\n    # Sort the modified array in descending order\n    modified_array.sort(reverse=True)\n    # Initialize the maximum sum and its corresponding index\n    max_sum = 0\n    max_index = -1\n    # Iterate through the modified array\n    for i in range(n):\n        # Calculate the sum of the current element and the next elements\n        current_sum = a[i] + modified_array[i+1]\n        # If the sum is greater than the maximum sum found so far, update the maximum sum and its corresponding index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n    # Return the maximum sum and its corresponding index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        a.extend(a)\n    for i in range(len(a)):\n        curr_sum = sum(a[i:i+n])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the sum array to store the sum of each subarray\n    sum_arr = [0] * (k+1)\n    # initialize the max sum to be negative infinity\n    max_sum = float('-inf')\n    # loop through each index of the array\n    for i in range(n):\n        # update the sum of the current subarray\n        sum_arr[i+1] = sum_arr[i] + a[i]\n        # update the max sum if necessary\n        max_sum = max(max_sum, sum_arr[i+1])\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = [0] * (2 * n)\n    for i in range(n):\n        modified_array[i] = a[i]\n        modified_array[i+n] = a[i]\n    \n    for i in range(n, 2 * n):\n        modified_array[i] = a[i % n] + modified_array[(i-n) % (2 * n)]\n    \n    max_sum = max(modified_array)\n    max_sum_index = modified_array.index(max_sum)\n    \n    start = max_sum_index - k\n    end = max_sum_index + k + 1\n    \n    return max_sum, modified_array[start:end]"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the array to perform operations on it\n    arr = a.copy()\n\n    # Initialize a variable to keep track of the largest sum\n    max_sum = float('-inf')\n\n    # Loop through the array k times\n    for _ in range(k):\n        # Calculate the sum of the array\n        total_sum = sum(arr)\n\n        # Find the maximum subarray sum and its starting index\n        max_subarray = max(arr)\n        start_index = arr.index(max_subarray)\n\n        # Update the maximum sum\n        if max_subarray > max_sum:\n            max_sum = max_subarray\n\n        # Remove the first element of the array\n        arr.pop(0)\n\n        # Add the first element of the array to the end of the array\n        arr.append(arr[0])\n\n        # Remove the last element of the array\n        arr.pop(-1)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array with the given array repeated k times\n    new_arr = a * k\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = max_sum_without_k = sum(new_arr)\n    current_sum = sum(a)\n    \n    # Traverse through the array and find the maximum sum of a contiguous sub-array\n    for i in range(n):\n        current_sum = current_sum - a[i] + new_arr[i]\n        max_sum_without_k = max(max_sum_without_k, current_sum)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Traverse through the array again and find the maximum sum of a contiguous sub-array formed by repeating the array k times\n    for i in range(k):\n        current_sum = sum(a)\n        max_sum = max(max_sum, current_sum)\n        current_sum = sum(new_arr)\n        max_sum_without_k = max(max_sum_without_k, current_sum)\n    \n    return max_sum_without_k"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the first k elements in the given array\n    first_k_sum = sum(a[:k])\n\n    # Find the maximum sum of any subarray of length n\n    max_sum = first_k_sum\n    for i in range(k, n):\n        # Repeat the first k elements k times to form a subarray of length n\n        subarray = a[:k]*k\n        # Calculate the sum of the subarray\n        subarray_sum = sum(subarray)\n        # Update the maximum sum\n        max_sum = max(max_sum, subarray_sum)\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += i*i\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_of_squares += count**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i**2\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # iterate from 0 to n-1 (inclusive)\n    for i in range(0, n):\n        # if the number is even, square it and add to sum\n        if i % 2 == 0:\n            sum += i**2\n\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total += i**2\n    return total"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length_sublist = max(sublist)\n        max_lengths.append(max_length_sublist)\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or max_lengths == []:\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Base case: if the input list is empty, return an empty list\n    if not list1:\n        return []\n\n    # Recursive case: find the maximum length of each sublist\n    sublists = max_length(list1[1:])\n    max_sublist_length = max(len(sublist) for sublist in sublists)\n    return [max_sublist_length] + sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D list to store the count of ways\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Initialize the first row and column\n    for i in range(1, k+1):\n        ways[0][i] = 1\n    \n    # Fill the rest of the rows and columns\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if ways[i-1][j] == 1:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    \n    # Return the value in the last row and column\n    return ways[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    #initializing the count variable\n    count = 0\n    \n    #initializing a 2D array to store the possible ways to paint the fence\n    dp = [[0]*(k+1) for i in range(n+1)]\n    \n    #base case where n is 0, there are no ways to paint the fence\n    if n == 0:\n        return 0\n    \n    #base case where k is 0, all the colors can be used\n    if k == 0:\n        return 1\n    \n    #filling the 2D array\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            #if the current color is the same as the previous color and the next post is not already painted, then we can paint the current post\n            if j == k or (i-1>=0 and j-1>=0 and dp[i-1][j-1] == 1):\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n    \n    #returning the count of possible ways to paint the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(left, right, colors, memo):\n        if (left, right, colors) in memo:\n            return memo[(left, right, colors)]\n\n        if left == right:\n            memo[(left, right, colors)] = 1\n            return 1\n\n        if left < right:\n            memo[(left, right, colors)] = 0\n\n        for color in colors:\n            if colors.count(color) == 1:\n                memo[(left, right, colors)] += count_ways(left + 1, right, colors, memo)\n            elif colors.count(color) == 2:\n                memo[(left, right, colors)] += count_ways(left + 1, right - 1, colors, memo)\n\n        return memo[(left, right, colors)]\n\n    return count_ways(0, n - 1, [i for i in range(k)], {})"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a 2D list of size n x k to store the number of ways to paint the fence\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the first row and first column of the 2D list to 1\n    for i in range(1, k+1):\n        dp[0][i] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the current post is black, the number of ways to paint the fence is equal to the number of ways to paint the fence with the previous post and the next post having the opposite color\n            if j == 1:\n                dp[i][j] = dp[i-1][j]\n            # If the current post is white, the number of ways to paint the fence is equal to the number of ways to paint the fence with the previous post and the next post having the same color\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create an empty dictionary to store the number of ways of painting the fence\n    ways = {}\n    # Add the base case, i.e., the number of ways of painting the fence with 0 and 1 colors is 1\n    ways[0] = 1\n    ways[1] = 1\n    # Loop through all possible values of i from 2 to n-1\n    for i in range(2, n+1):\n        # Loop through all possible values of j from 0 to i-1\n        for j in range(i):\n            # Calculate the number of ways of painting the fence with i colors and j colors by adding the number of ways of painting the fence with i-j colors and k-i colors\n            ways[i] += ways[i-j] * ways[k-i]\n    # Return the number of ways of painting the fence with n colors\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the fence has only one post, there is only one way to paint it\n    if n == 1:\n        return 1\n    \n    # If the fence has two posts, there are two ways to paint it\n    if n == 2:\n        return 2\n    \n    # Initialize a dictionary to store the number of ways for each number of colors\n    ways = {0: 1}\n    \n    # Loop through the number of colors k from 1 to k\n    for i in range(1, k+1):\n        # Initialize a variable to store the number of ways for the remaining posts\n        ways_remaining = 0\n        \n        # Loop through the number of ways for the remaining posts i-1\n        for j in range(1, i+1):\n            # If the adjacent posts have the same color, add 2 to the number of ways for the remaining posts\n            if ways.get(j-1, 0) == 1:\n                ways_remaining += ways.get(i-j, 0)\n        \n        # Add the number of ways for the remaining posts to the dictionary\n        ways[i] = ways_remaining\n    \n    # Return the number of ways for the final post, which is the total number of ways minus the number of ways for the other remaining posts\n    return ways.get(n, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # If the number of colors is less than 2, there are no ways to paint the fence\n    if k < 2:\n        return 0\n\n    # Create a 2D array to store the count of ways to paint the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the array with 1\n    ways[0][0] = 1\n    ways[0][1] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i > 1:\n                ways[i][j] += ways[i - 2][j]\n            if j > 1:\n                ways[i][j] += ways[i][j - 2]\n\n    # Return the count of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize count of ways to 0\n    count = 0\n\n    # Loop through all possible color combinations\n    for i in range(k):\n        # Initialize count of ways to 1 for each color\n        ways = 1\n\n        # Loop through all possible adjacent pairs\n        for j in range(i+1, k):\n            # Check if adjacent colors are the same\n            if j == i+1 or j == i-1:\n                # If yes, increment count of ways\n                ways *= (n-i-j)\n                # If not, decrement count of ways\n                else:\n                    ways *= (n-i)\n\n        # Multiply count of ways by factorial of number of colors\n        count *= ways\n\n    # Return final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if n == 0, there is only one way to paint the fence\n    if n == 0:\n        return 1\n    # base case: if k == 0, there is no way to paint the fence\n    elif k == 0:\n        return 0\n    # recursive case: count all possible ways of painting the fence with n-1 posts and k-1 colors\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if (n % m)!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate the quotient using integer division\n    quotient = n // m\n    \n    # If the remainder is not 0, add 1 to the quotient to get the correct quotient\n    if n % m!= 0:\n        quotient += 1\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # check if n is zero, return zero\n    if n == 0:\n        return 0\n\n    # calculate the number of bits required to represent n and m\n    bits_n = 0\n    while n:\n        n = n // 2\n        bits_n += 1\n\n    bits_m = 0\n    while m:\n        m = m // 2\n        bits_m += 1\n\n    # calculate the difference between the number of bits required to represent n and m\n    diff = bits_n - bits_m\n\n    # perform the division algorithm with the given diff and round down\n    quotient = (n << diff) // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return float('inf')\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:  \n        return \"Cannot divide by zero\"\n    else:  \n        quotient = n // m  \n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(w ** 2 + h ** 2)\n    side2 = math.sqrt(w ** 2 + side1 ** 2)\n    side3 = math.sqrt(h ** 2 + side1 ** 2)\n    \n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the third side\n    side = math.sqrt(s * (s - w) * (s - h))\n    \n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third_side = area / 2\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2) + (h**2))\n    return round(s, 2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    # Iterate over each value in the list\n    for value in listval:\n        # If the current value is greater than the stored maximum value, update the maximum value\n        if value > max_val:\n            max_val = value\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize max_val with the first value in the list\n    max_val = listval[0]\n\n    # Loop through each value in the list\n    for val in listval:\n\n        # If the value is greater than max_val, update max_val\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(listval) == 0:\n        raise ValueError(\"List must not be empty.\")\n\n    max_val = listval[0]\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = lst[0]  # initialize the maximum value to the first element of the list\n    for num in lst[1:]:  # iterate over the remaining elements of the list\n        if num > max_val:  # check if the current number is greater than the current maximum value\n            max_val = num  # update the maximum value if necessary\n    return max_val  # return the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize the sum to 0\n    sum_div = 0\n\n    # loop through all the numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n\n        # check if the number is divisible by the current number in the loop\n        if number % i == 0:\n\n            # add the current number to the sum\n            sum_div += i\n\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = [1]  # initialize list with 1 as divisor\n    for i in range(2, number+1):\n        if number % i == 0:  # check if i is a divisor of number\n            divisors.append(i)  # add i to the list of divisors\n            number //= i  # reduce number by i to eliminate multiples of i\n    return sum(divisors)  # return the sum of all divisors"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # Counting inversions using merge sort \n    merge_sort(arr, 0, n-1) \n    return inv_count \n\ndef merge_sort(arr, l, r): \n    if l < r: \n        # Finding the middle of the array \n        mid = (l + r) // 2 \n  \n        # Dividing the array into two halves \n        merge_sort(arr, l, mid) \n        merge_sort(arr, mid+1, r) \n  \n        # Merging the two halves \n        i = l \n        j = mid + 1 \n        inv_count = 0 \n  \n        # Initializing two pointers i and j \n        while i <= mid and j <= r: \n            if arr[i] <= arr[j]: \n                i += 1 \n            else: \n                # Swapping elements and count of inversions \n                arr[i], arr[j] = arr[j], arr[i] \n                inv_count += mid - i + 1 \n                j += 1 \n  \n        # Copy remaining elements of left half to right half \n        while i <= mid: \n            arr[j] = arr[i] \n            i += 1 \n            j += 1 \n  \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Sort the array\n    arr.sort()\n    \n    # Calculate the count of inversions\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += n - i - j\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Sort the array from the first element to the ith element\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to count inversions\n    inv_count = 0\n\n    # Iterate through the sorted array\n    for i in range(len(arr)):\n        # Check if there is any inversion in the unsorted part of the array\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Function to swap two elements in an array\n    def swap(arr, i, j): \n        arr[i], arr[j] = arr[j], arr[i] \n        \n    # Function to find the partition index\n    def partition(arr, low, high): \n        pivot = arr[high] \n        i = low - 1 \n        for j in range(low, high): \n            if arr[j] <= pivot: \n                i += 1 \n                swap(arr, i, j) \n        swap(arr, i+1, high) \n        return i+1 \n        \n    # Function to count inversions in a subarray\n    def count_inversions(arr, low, high): \n        if low < high: \n            pi = partition(arr, low, high) \n            count_inversions(arr, low, pi-1) \n            count_inversions(arr, pi+1, high) \n            return (count_inv_rec(arr, low, pi-1) + count_inv_rec(arr, pi+1, high)) \n        \n    # Function to count inversions in an array\n    def count_inv_rec(arr, low, high): \n        if low < high: \n            pi = partition(arr, low, high) \n            return (count_inv_rec(arr, low, pi-1) + count_inv_rec(arr, pi+1, high) + count_inversions(arr, low, high)) \n        else: \n            return 0 \n        \n    # Call the function to count inversions in the array\n    return count_inv_rec(arr, 0, len(arr)-1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # loop through the array\n    for i in range(n):\n        # loop through the sub-array with elements less than arr[i]\n        for j in range(i+1, n):\n            # if the element at index j is greater than arr[i]\n            if arr[j] > arr[i]:\n                # increment the inversion count\n                inv_count += n-j-i\n\n    # return the inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Sort the array in O(nlogn) time using merge sort\n    merge_sort(arr, 0, n - 1)\n\n    # Count the number of inversions in the array\n    inv_count = 0\n    for i in range(1, n):\n        inv_count += count_inversions(arr, 0, i - 1)\n\n    return inv_count\n\n\ndef merge_sort(arr, l, r):\n    if l < r:\n        m = (l + r) // 2\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        merge(arr, l, m, r)\n\n\ndef merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n    L = [0] * n1\n    R = [0] * n2\n\n    for i in range(n1):\n        L[i] = arr[l + i]\n    for j in range(n2):\n        R[j] = arr[m + 1 + j]\n\n    i = 0\n    j = 0\n    k = l\n\n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            inv_count += n1 - i\n            j += 1\n        k += 1\n\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\n\ndef count_inversions(arr, l, r):\n    n1 = r - l + 1\n    n2 = len(arr) - r\n\n    i = 0\n    j = 0\n\n    inv_count = 0\n\n    while i < n1 and j < n2:\n        if arr[l + i] <= arr[r]:\n            i += 1\n        elif arr[l + i] > arr[r]:\n            inv_count += n1 - i\n            i = 0\n            j += 1\n        else:\n            j += 1\n\n    inv_count += n1 - i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n): \n        # Use two pointers i and j to find inversions\n        for j in range(i+1, n): \n            # If the element at i is greater than the element at j, \n            # then swap them and count an inversion\n            if arr[i] > arr[j]: \n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize variables to count inversions\n    i = 0\n    j = n-1\n    inv_count = 0\n    while i < j:\n        # Check if the element at i is greater than the element at j\n        if arr[i] > arr[j]:\n            # Increment the count of inversions\n            inv_count += (j-i)\n            # Move i to the next element in the array\n            i += 1\n        else:\n            # Move j to the next element in the array\n            j -= 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(lst, list):\n        return lst\n    else:\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten_list(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    :param lst: the nested list to flatten\n    :type lst: list\n    :return: the flattened list\n    :rtype: list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # initialize an empty list to store the flattened elements\n    flattened_list = []\n    # loop over each element in the input list\n    for element in list1:\n        # if the element is a list, flatten it recursively\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            # otherwise, add the element to the flattened list\n            flattened_list.append(element)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for amount, product in stdata:\n        max_agg[product] = max(max_agg[product], amount)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for num, price in stdata:\n        d[num] += price\n    max_num = max(d, key=d.get)\n    max_price = d[max_num]\n    return max_num, max_price"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for item in stdata:\n        if item[1] not in max_sum:\n            max_sum[item[1]] = item[0]\n        else:\n            max_sum[item[1]] = max(max_sum[item[1]], item[0])\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the aggregate of each transaction\n    trans_agg = defaultdict(int)\n    \n    for trans in stdata:\n        # calculate the aggregate of the transaction\n        trans_agg[trans] += trans[2]\n    \n    # find the maximum aggregate\n    max_agg = max(trans_agg.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples containing student IDs and their final grades as input.\n    It then calculates the maximum aggregate of all students in the list.\n    The function returns the maximum aggregate as a single float.\n    '''\n    max_dict = defaultdict(float)\n    for student_id, grade in stdata:\n        max_dict[student_id] = max(max_dict[student_id], grade)\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n\n    for x, y in stdata:\n        max_dict[x] += y\n        max_sum = max(max_sum, max_dict[x])\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i, (name, salary, age) in enumerate(stdata):\n        max_agg[name] = max(max_agg[name], salary)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each team\n    max_dict = defaultdict(int)\n    for st, ag in stdata:\n        # check if the team is already in the dictionary\n        if st in max_dict:\n            # if the team is already in the dictionary, add the aggregate to the maximum aggregate of that team\n            max_dict[st] += ag\n        # if the team is not in the dictionary, add it with the initial maximum aggregate value\n        else:\n            max_dict[st] = ag\n    # get the maximum aggregate for each team\n    max_agg = max(max_dict.values())\n    # create a new list of tuples with the team names and their maximum aggregates\n    max_list = []\n    for team, agg in max_dict.items():\n        max_list.append((team, agg))\n    # sort the list in descending order of maximum aggregate\n    max_list.sort(key=lambda x: x[1], reverse=True)\n    # return the maximum aggregate and the sorted list of tuples\n    return max_agg, max_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    This function takes a list of tuples of the form (date, amount) and returns the maximum aggregate.\n    \"\"\"\n    max_agg = defaultdict(float)\n    for date, amount in stdata:\n        max_agg[date] += amount\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggs = defaultdict(int)\n    for i, (name, age, salary) in enumerate(stdata):\n        max_aggs[name] += salary\n        if max_aggs[name] > max_aggs['max_agg']:\n            max_aggs['max_agg'] = max_aggs[name]\n            max_aggs['max_agg_name'] = name\n    return max_aggs\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        first_half = bin(i)[2:]\n        last_half = bin(i)[-2:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in binary_seq) == sum(int(bit) for bit in binary_seq[::-1]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the length of the binary sequence: \"))\nprint(\"Count of all binary sequences of length 2\", n, \"such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count and sum\n    count = 0\n    sum_left = 0\n    sum_right = 0\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n): \n        # Extract first n bits and last n bits\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i)[-n:].zfill(n)\n\n        # Calculate sum of first and last bits\n        first_sum = sum(int(bit) for bit in first_n_bits)\n        last_sum = sum(int(bit) for bit in last_n_bits)\n\n        # Check if sum of first and last bits are same\n        if first_sum == last_sum: \n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:].zfill(n)\n        total = sum(int(digit) for digit in binary)\n        if total == sum(int(digit) for digit in binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        sum1 = sum(int(digit) for digit in bin(i)[2:]) % 2\n        sum2 = sum(int(digit) for digit in bin(i)[-n:]) % 2\n        if sum1 == sum2:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n+1)):\n        if i%2**(n+1)!=0:\n            num = i\n            while num%2==0:\n                num = num//2\n            first_sum = sum(int(digit) for digit in bin(num)[2:].zfill(n))\n            last_sum = sum(int(digit) for digit in bin(num)[-n:].zfill(n))\n            if first_sum == last_sum:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Initialize two variables to store the sum of first and last n bits of each binary sequence\n    sum_first = 0\n    sum_last = 0\n\n    # Check all possible binary sequences of length 2n\n    for i in range(2**n):\n\n        # Extract the first n bits\n        first_n_bits = bin(i)[2:].zfill(n)\n\n        # Extract the last n bits\n        last_n_bits = bin(i)[-2:].zfill(n)\n\n        # Calculate the sum of first n bits\n        sum_first = sum_first + int(first_n_bits, 2)\n\n        # Calculate the sum of last n bits\n        sum_last = sum_last + int(last_n_bits, 2)\n\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum_first == sum_last:\n            count = count + 1\n\n    # Return the count of all such binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if str(i)[0:n] == str(i)[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:].zfill(n)\n        sum1 = sum(int(binary[j]) for j in range(n))\n        sum2 = sum(int(binary[j]) for j in range(n, n + n))\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:]\n        if num[n-1:0] == num[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for k,v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        if current_depth > max_depth:\n            max_depth = current_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        value = d[key]\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while len(d) > 0:\n        depth += 1\n        d = d.values()[0]\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_dict = d\n    while current_dict:\n        depth += 1\n        current_dict = current_dict.values()[0] if isinstance(current_dict.values(), list) else current_dict.items()[0][1]\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n                else:\n                    depth += 1\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the total number of rotations\n    total_rotations = sum(rotations)\n\n    # Initialize variables to store the current element and its corresponding index\n    current_element = arr[index]\n    current_index = index\n\n    # Loop for number of rotations\n    for i in range(total_rotations):\n        # Calculate the new index after rotation\n        new_index = (current_index - rotations[i]) % len(arr)\n\n        # Check if the new index is within the given range\n        if new_index < ranges[i][0]:\n            new_index = len(arr) - 1\n        elif new_index > ranges[i][1]:\n            new_index = 0\n\n        # Update current_element and current_index\n        current_element = arr[new_index]\n        current_index = new_index\n\n    # Return the current element\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the result variable to None\n    result = None\n    \n    # Loop through the rotations and find the element at the given index\n    for rotation in rotations:\n        # Initialize the current index to the starting index of the rotation\n        current_index = index\n        \n        # Loop through the rotation number of times\n        for i in range(rotation):\n            # Find the next element to the current index\n            current_index = (current_index + ranges[current_index]) % len(arr)\n        \n        # Check if the current index is the index we are looking for\n        if current_index == index:\n            # If it is, return the element at that index\n            result = arr[current_index]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Finding the index of the first rotation\n    first_rotation_index = rotations[0]\n\n    # If the index is less than the first rotation index, then we need to rotate the array first\n    if index < first_rotation_index:\n        # Finding the number of rotations required to reach the index\n        number_of_rotations = 1\n        count = first_rotation_index - index\n        while count > 0:\n            number_of_rotations += 1\n            count -= rotations[number_of_rotations - 1]\n\n        # Rotating the array\n        for i in range(number_of_rotations):\n            # Finding the rotation steps\n            rot_steps = rotations[i]\n            # Finding the range of rotations\n            rot_range = ranges[i]\n\n            # Rotating the array\n            temp = arr[rot_range[0]:rot_range[1]]\n            arr[rot_range[0]:rot_range[1]] = arr[rot_range[rot_steps-1]:rot_range[rot_steps]]\n            arr[rot_range[rot_steps-1]:rot_range[rot_steps]] = temp\n\n    # Finding the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    start = 0\n    end = len(arr) - 1\n\n    for i in range(len(ranges)):\n        start = end - ranges[i] + 1\n        end = end\n\n        for j in range(rotations[i]):\n            arr = arr[start:end+1] + arr[:start]\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given array, range of rotations, and index of the element to be found as input.\n    It then rotates the array by the given number of rotations and returns the element at the given index.\n\n    Args:\n    arr (list): the array to be rotated\n    ranges (list): the list of ranges for each element in the array\n    rotations (int): the number of rotations to be performed\n    index (int): the index of the element to be found\n\n    Returns:\n    The element at the given index after the given number of rotations.\n    \"\"\"\n    # Function to perform rotations of the array\n    def rotate(arr, n):\n        \"\"\"\n        This function rotates the given array by the given number of rotations.\n        \"\"\"\n        return arr[-n:] + arr[:-n]\n\n    # Perform rotations of the array\n    for i in range(rotations):\n        arr = rotate(arr, ranges[i])\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize variables\n    rotated_arr = arr\n    rotation_count = 0\n    current_range = ranges[0]\n\n    # Iterate over each rotation and apply it to the rotated array\n    for rotation in rotations:\n        for _ in range(rotation):\n            rotated_arr = rotate(rotated_arr, current_range)\n        current_range = ranges[rotation_count % len(ranges)]\n        rotation_count += 1\n\n    # Find the element at the given index after number of rotations\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a list of rotations,\n    along with the index of the element to find. It finds the element at the given\n    index after performing the specified number of rotations.\n    \"\"\"\n    # get the length of the array\n    n = len(arr)\n\n    # initialize the current index\n    current = index\n\n    # initialize the element to be returned\n    result = None\n\n    # iterate through the rotations and find the element at the given index\n    for rotation in rotations:\n        # get the length of the range\n        range_length = ranges[rotation]\n\n        # get the rotation steps\n        steps = range_length // 2\n\n        # rotate the current index\n        current = (current + steps) % n\n\n        # if the current index is within the range, return the element\n        if current >= ranges[rotation]:\n            result = arr[current]\n            break\n\n    # return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, a number of rotations, and an index.\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize variables\n    rotated_arr = arr.copy()\n\n    # Perform rotations\n    for i in range(rotations):\n        temp = rotated_arr[0]\n        for j in range(len(rotated_arr) - 1):\n            rotated_arr[j] = rotated_arr[j + 1]\n        rotated_arr[len(rotated_arr) - 1] = temp\n\n    # Get the element at the given index after rotations\n    element = rotated_arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize variables\n    n = len(arr)\n    rotated_arr = []\n    rotated_index = -1\n    \n    # loop for each range\n    for i in range(len(ranges)):\n        # get the start and end indices of the range\n        start = ranges[i][0]\n        end = ranges[i][1]\n        \n        # loop for each rotation\n        for j in range(rotations):\n            # rotate the array\n            rotated_arr = arr[start:end+1]\n            rotated_arr.rotate(-j)\n            \n            # check if the index is within the range\n            if index >= start and index <= end:\n                rotated_index = index - start\n                \n                # break the loop if the index is found\n                break\n                \n        # break the loop if the index is found\n        if rotated_index!= -1:\n            break\n    \n    # check if the index is within the range of the array\n    if rotated_index == index:\n        return arr[index]\n    else:\n        return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after number of rotations.\n\n    Args:\n    arr: A list of integers, representing the array.\n    ranges: A list of tuples of the form (start, end), where start and end are integers, representing the indices of the array where the element should be found.\n    rotations: An integer, representing the number of rotations needed to find the element.\n    index: An integer, representing the index of the element that needs to be found.\n\n    Returns:\n    The element at the given index after the specified number of rotations.\n\n    Example:\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> ranges = [(0, 2), (3, 4)]\n    >>> rotations = 3\n    >>> index = 2\n    >>> find_Element(arr, ranges, rotations, index)\n    4\n    \"\"\"\n\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Invalid index.\")\n\n    for start, end in ranges:\n        if start > index or end < index:\n            continue\n\n        if rotations % 2 == 0:\n            return arr[start]\n        else:\n            return arr[end - 1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use a regular expression to find the words starting with letter 'p'\n    pattern = r'p\\w+'\n    matches = re.findall(pattern,''.join(words))\n    # return the two matches\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to find words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # Find the first two words in the list that match the pattern\n    result = re.findall(pattern, words)\n    # Check if there are two words starting with letter 'p' in the list\n    if len(result) == 2:\n        # Return the two words\n        return result\n    # If there are not two words starting with letter 'p', return an error message\n    else:\n        return \"Error: No two words starting with letter 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n\n    if len(matches) == 0:\n        return \"There are no words starting with 'p' in the list.\"\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^\\p{L}+')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p') # Regular expression to match words starting with letter 'p'\n    result = re.findall(pattern, words) # Find all words matching the pattern in the list of words\n    if len(result) < 2: # If there are less than 2 words starting with 'p', return None\n        return None\n    else: # If there are more than 1 word starting with 'p', return them as a tuple\n        return tuple(result)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b(p)\\w+'\n    matches = re.findall(pattern,''.join(words))\n    if len(matches) == 0:\n        return None, None\n    else:\n        return matches[0][1:], matches[1][1:]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Create a list to store the sum of increasing subsequence for each index\n    sum_list = [0] * (n+1)\n\n    # Initialize the sum_list with the initial value 0\n    for i in range(1, n+1):\n        sum_list[i] = a[i-1]\n\n    # Initialize the max_sum with the initial value 0\n    max_sum = 0\n\n    # Loop through the indices from 1 to k\n    for i in range(k, n+1):\n\n        # Loop through the indices from i to n\n        for j in range(i, n+1):\n\n            # Check if the value at j is less than or equal to the current value at index i-1\n            if j > i and a[j-1] <= a[i-1]:\n\n                # Calculate the sum of the increasing subsequence from index i-1 to j-1\n                subseq_sum = 0\n                for l in range(i, j):\n                    subseq_sum += a[l]\n\n                # Check if the calculated sum is greater than the max_sum\n                if subseq_sum > max_sum:\n                    max_sum = subseq_sum\n\n            # Check if the value at j is greater than the current value at index i-1\n            if j < i and a[j] > a[i-1]:\n\n                # Calculate the sum of the increasing subsequence from index i-1 to j-1\n                subseq_sum = 0\n                for l in range(i, j):\n                    subseq_sum += a[l]\n\n                # Check if the calculated sum is greater than the max_sum\n                if subseq_sum > max_sum:\n                    max_sum = subseq_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index], index\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index] + a[i])\n        else:\n            dp[i] = dp[index]\n\n    for i in range(k, n):\n        if dp[i] > dp[k-1]:\n            dp[k] = dp[i]\n\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = a[index]\n\n    for i in range(index + 1, n):\n        if k > i:\n            dp[i] = max(dp[i - 1], a[i] + dp[i - 1])\n        else:\n            dp[i] = a[i]\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize dp[i] to the maximum sum of increasing subsequence ending at index i, where kth element is not present\n    dp = [0] * n\n    \n    # Initialize max_sum to the maximum sum of increasing subsequence starting from index 0\n    max_sum = 0\n    \n    # Iterate through all elements of the array\n    for i in range(n):\n        \n        # If the current element is greater than k or the next element is k, update the maximum sum\n        if i >= k or (i+1 < n and a[i+1] > k):\n            dp[i] = max(a[i] + dp[i-1], dp[i])\n        \n        # Update the maximum sum of increasing subsequence starting from index i\n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize variables\n    dp = [0] * n\n    curr_sum = 0\n    max_sum = float('-inf')\n\n    # Calculate the sum of increasing subsequence until i-1\n    for i in range(1, index):\n        dp[i] = max(dp[i-1] + a[i], 0)\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Calculate the sum of increasing subsequence until i-1\n    for i in range(index, n):\n        dp[i] = max(dp[i-1] + a[i], 0)\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Calculate the sum of increasing subsequence from index+1 to n\n    dp[index] = max(dp[index-1] + a[index], 0)\n\n    # Calculate the sum of increasing subsequence until k-1\n    k_sum = 0\n    for i in range(index+1, k):\n        k_sum += a[i]\n\n    # Find the maximum sum of increasing subsequence including kth element\n    max_sum = max(max_sum, k_sum)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize an array dp of size n+1 and fill it with 0\n    dp = [0] * (n+1)\n    dp[0] = 0\n    \n    # Calculate the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    for i in range(1, n):\n        if a[i-1] < a[i] and dp[i-1] + a[i] < dp[i]:\n            dp[i] = dp[i-1] + a[i]\n        elif a[i-1] >= a[i] and dp[i-1] + a[i] < dp[i]:\n            dp[i] = dp[i-1]\n        elif a[i-1] < a[i] and dp[i-1] + a[i] == dp[i-1] + a[i]:\n            dp[i] = dp[i-1] + a[i]\n    \n    # Initialize a variable max_sum with the maximum value of dp\n    max_sum = max(dp)\n    \n    # Initialize a variable start with the index of the first element of the maximum sum increasing subsequence\n    start = 0\n    for i in range(1, n+1):\n        if dp[i] == max_sum:\n            start = i\n            break\n    \n    # Initialize a variable end with the index of the last element of the maximum sum increasing subsequence\n    end = 0\n    for i in range(n, 0, -1):\n        if dp[i] == max_sum:\n            end = i\n            break\n    \n    # Initialize a variable max_sum_index with the index of the maximum sum increasing subsequence\n    max_sum_index = 0\n    for i in range(start, end+1):\n        if dp[i] == max_sum:\n            max_sum_index = i\n            break\n    \n    # Create a list max_sum_list of indices of the maximum sum increasing subsequence\n    max_sum_list = []\n    for i in range(start, end+1):\n        max_"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Given an array a of length n, and an integer k, find the maximum sum of increasing subsequence from prefix until index ith index and including a given kth element which is after i, i.e., k > i.\n\n    :param a: List of integers\n    :param n: Length of the array\n    :param index: Index of the current element being considered\n    :param k: Given element which is after index\n    :return: Maximum sum of increasing subsequence from prefix until index ith index and including a given kth element which is after i.\n    \"\"\"\n\n    if k > index:\n        return 0\n\n    dp = [0] * n\n\n    # Fill dp array using the bottom up approach\n    for i in range(n):\n        if i == index:\n            dp[i] = max(a[i], a[i] + a[k])\n        else:\n            dp[i] = max(dp[i - 1], a[i] + dp[i - 1])\n\n    # Find the maximum sum of increasing subsequence\n    max_sum = max(dp[0], dp[1])\n\n    # Calculate the maximum sum of increasing subsequence from prefix until kth index\n    for i in range(2, index + 1):\n        max_sum = max(max_sum, dp[i] + dp[i - 1])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n or k > index:\n        return 0\n    \n    # Initialize the list of maximum sum of increasing subsequence for each index\n    max_sum = [0] * n\n    \n    # Initialize the maximum sum of increasing subsequence till the first element\n    max_sum[0] = a[0]\n    \n    # Traverse from the second element\n    for i in range(1, n):\n        # If the current element is greater than or equal to k, then include it in the maximum sum of increasing subsequence\n        if a[i] >= k:\n            max_sum[i] = max_sum[i-1] + a[i]\n        else:\n            max_sum[i] = max_sum[i-1]\n    \n    # Initialize the maximum sum of increasing subsequence for the current index\n    max_sum_curr = max_sum[index]\n    \n    # Traverse from the kth element till the end\n    for i in range(index, n):\n        # If the current element is greater than or equal to k, then include it in the maximum sum of increasing subsequence\n        if a[i] >= k:\n            max_sum_curr = max(max_sum_curr, max_sum[i] + a[i])\n    \n    return max_sum_curr"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than or equal to k, add it to the current sum and check if it's greater than the maximum sum\n        if a[i] >= k:\n            curr_sum += a[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        # If the current element is less than or equal to k, reset the current sum to zero and continue with the next element\n        else:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    # Iterate through the array\n    for i in range(index, n):\n        # If the current element is greater than k, update max_ending_here to zero\n        if a[i] > k:\n            max_ending_here = 0\n        \n        # Add the current element to max_ending_here\n        max_ending_here += a[i]\n        \n        # Update the maximum sum of increasing subsequence\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    # Return the maximum sum of increasing subsequence\n    return max_so_far"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        result.append(deepcopy(tuplex[i*n:i*n+n]))\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    col = deepcopy(tuplex)\n    col = col[m:n]\n    col = tuple(col)\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex_copy)\n    # get the number of rows and columns\n    num_rows = m\n    num_cols = n\n    # get the index of the first element in the colon\n    start_index = 0\n    # get the index of the last element in the colon\n    end_index = num_rows * num_cols - 1\n    # create a list to store the colon\n    colon = []\n    # iterate over the colon indices\n    for i in range(start_index, end_index + 1):\n        # get the row and column indices\n        row_index = i // num_cols\n        col_index = i % num_cols\n        # get the element at the current index in the tuple\n        elem = tuplex_copy[row_index][col_index]\n        # append the element to the colon list\n        colon.append(elem)\n    # return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a new tuple with only the elements that belong to the colon\n    colon_tuple = tuple(tuplex[i] for i in range(m-1, n-1))\n    # return the colon tuple\n    return colon_tuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple of m integers and n integers as input. \n    It returns a list of the first m numbers of the tuple followed by the last n numbers of the tuple.\n    \"\"\"\n    colons = []\n    tuplex = deepcopy(tuplex)  # Make a copy of the tuple to avoid modifying it\n    \n    for i in range(m):\n        colons.append(tuplex[i])\n    \n    for j in range(n):\n        colons.append(tuplex[-1-j])\n    \n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    colon = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(deepcopy(tuplex[i][j]))\n        colon.append(col)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[i][j])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    col_tup = []\n    for i in range(m):\n        col_tup.append(deepcopy(tuplex))\n    for i in range(m):\n        for j in range(n):\n            tuplex[j] = col_tup[i][j]\n    return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            if i == m-1 and j == n-1:\n                new_tuplex = new_tuplex + (new_tuplex[-1][-1]+1,)\n            else:\n                new_tuplex = new_tuplex + (0,)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[i],) + (new_tuplex[i+1],) + (new_tuplex[i+2],) + (new_tuplex[i+3],)\n    return new_tuplex[:n]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop N times\n    for i in range(N):\n        # Find the largest product of a factor from nums1 and a factor from nums2\n        max_product = max(nums1[i] * nums2[i], nums1[i] * nums2[i+N-1], nums1[i+N-1] * nums2[i])\n        \n        # Append the maximum product to the result list\n        result.append(max_product)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product1 = max(nums1)\n        max_product2 = max(nums2)\n        max_product = max_product1 * max_product2\n        max_products.append(max_product)\n        nums1.remove(max_product1)\n        nums2.remove(max_product2)\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    # Loop through each pair of numbers in each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two numbers in each pair\n            product = nums1[i] * nums2[j]\n            # Check if the product is greater than the largest product seen so far\n            if product > products[0]:\n                # If it is, replace all products with the new product\n                products = [product]\n            elif product > products[1]:\n                # If the product is greater than the second largest product, but not greater than the first, add it to the list\n                products[0] = products[1]\n                products[1] = product\n            elif product > products[2]:\n                # If the product is greater than the third largest product, but not greater than the second, add it to the list\n                products[0] = products[1]\n                products[1] = products[2]\n                products[2] = product\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the largest products\n    largest_products = []\n\n    # Loop through the lists and find the largest products for each list\n    for num1 in nums1:\n        largest_products_num1 = []\n        for num2 in nums2:\n            # Calculate the largest product of num1 and num2\n            largest_product_num1_num2 = max(num1, num2) * min(num1, num2)\n\n            # Add the largest product of num1 and num2 to the list of largest products for num1\n            largest_products_num1.append(largest_product_num1_num2)\n\n        # Append the list of largest products for num1 to the list of largest products\n        largest_products.append(largest_products_num1)\n\n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n\n    # Return the first N largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    if N > len(nums1):\n        raise ValueError(\"N must be less than or equal to the length of the first list\")\n\n    largest_products = []\n\n    for i in range(N):\n        product1 = max(nums1[j] * nums2[j] for j in range(i))\n        product2 = max(nums1[i] * nums2[j] for j in range(i))\n        product3 = max(nums1[i] * nums2[j] for j in range(i+1, len(nums1)))\n        product4 = max(nums1[j] * nums2[i+1] for j in range(i, len(nums2)))\n\n        largest_products.append(max(product1, product2, product3, product4))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the result list\n    result = []\n\n    # iterate through the input lists\n    for i in range(N):\n        # calculate the product of the i-th largest number in nums1 and the i-th largest number in nums2\n        product = nums1[i] * nums2[i]\n        result.append(product)\n\n    # return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize an empty list to store the products\n    products = []\n    # loop through each number in the first list\n    for num1 in nums1:\n        # initialize a variable to store the largest product found so far\n        max_product = float('-inf')\n        # loop through each number in the second list\n        for num2 in nums2:\n            # find the product of the current two numbers\n            product = num1 * num2\n            # if the product is larger than the current maximum product, update the maximum product\n            if product > max_product:\n                max_product = product\n        # add the largest product found to the list of products\n        products.append(max_product)\n    # sort the products list in descending order\n    products.sort(reverse=True)\n    # return the first N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value from each list\n    max1, max2 = max(nums1), max(nums2)\n    # Initialize the maximum product as 1\n    max_product = 1\n    # Loop through all possible combinations of two factors\n    for i in range(N+1):\n        for j in range(i, N+1):\n            # Find the product of the first factor and the second factor\n            product = nums1[i-1] * nums2[j-1]\n            # Update the maximum product if the product is larger\n            if product > max_product:\n                max_product = product\n            # Update the maximum product for the next iteration\n            product = nums1[i-1] * nums2[N-j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum value of the products to a large number\n    max_product = float('-inf')\n\n    # Iterate over all possible combinations of two elements from the two lists\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # Calculate the product of the two elements\n            product = nums1[i] * nums2[j-1]\n\n            # Check if the product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum number of products found\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum value and counter variables\n    max_value = nums1[0] * nums2[0]\n    counter = 1\n    \n    # Loop through the lists and find the maximum products\n    for i in range(1, N):\n        # Find the product of the current list and the previous maximum value\n        current_value = nums1[i] * nums2[i]\n        \n        # Update the maximum value and counter if the current product is greater\n        if current_value > max_value:\n            max_value = current_value\n            counter = i\n    \n    return max_value, counter"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    list1 = list(str1)\n    # Convert the list to a tuple\n    tuple1 = tuple(list1)\n    # Return the tuple\n    return tuple1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of unset bits\n    unset_bits = 0\n    # Iterate over the bits of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is 1, increment the count of unset bits\n        if bit == '1':\n            unset_bits += 1\n        # If all bits are set, break the loop\n        if unset_bits == 32:\n            break\n    # Set the left most unset bit to 1\n    n |= (1 << (unset_bits - 1))\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Check for unset bits in the binary representation of n\n    while n & 1 == 0:\n        n >>= 1\n\n    # Set the leftmost unset bit to 1\n    n |= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each bit of the number\n    for i in range(32): \n        # Check if the bit is 0\n        if (n & (1 << i)) == 0: \n            # Increment the count if the bit is 0\n            count += 1\n    \n    # If the count is odd, then the left most unset bit is the one to the left of the leftmost set bit\n    if count % 2 == 1: \n        # Set the left most unset bit to 1\n        n |= (1 << 31)\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: # if n is 0, set the leftmost unset bit to 1\n        return 1\n    elif n == 1: # if n is 1, set the leftmost unset bit to 0\n        return 0\n    else: # if n is odd, set the leftmost unset bit to the bit that is set to 1 in the binary representation of n\n        binary_repr = bin(n)[2:] # get the binary representation of n\n        for i in range(len(binary_repr)):\n            if binary_repr[i] == '1': # if the ith bit is 1\n                return 2**i # return 2^i, which is the leftmost unset bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while (n & i) == 0:\n        i <<= 1\n\n    return i << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer.\n    '''\n    while (n & 1) == 0:\n        n = n >> 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the unset bit position to the least significant bit\n    unset_bit_pos = 31\n\n    # Iterate through each bit position\n    while (n >> unset_bit_pos) & 1 == 1:\n        unset_bit_pos -= 1\n\n    # Set the left-most unset bit to 1\n    n |= (1 << unset_bit_pos)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in a number.\n    '''\n    # Initialize the binary representation of the number\n    bin_rep = bin(n)[2:]\n    \n    # Find the index of the leftmost unset bit\n    left_most_unset_bit = bin_rep.find('1')\n    \n    # If the leftmost unset bit is found, set it to 1\n    if left_most_unset_bit!= -1:\n        bin_rep = bin_rep[:left_most_unset_bit] + '1' + bin_rep[left_most_unset_bit+1:]\n    \n    # Convert the binary representation back to integer\n    int_rep = int(bin_rep, 2)\n    \n    # Return the integer representation of the number with the left most unset bit set to 1\n    return int_rep"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize the index of the leftmost unset bit\n    i = 0\n\n    # Iterate over the binary representation of n\n    while n & 1 == 0:\n        n >>= 1\n        i += 1\n\n    # Set the leftmost unset bit to 1\n    n |= 1 << i\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while i < 32:\n        if n & (1 << i):\n            return i\n        i += 1\n    return None"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone and calculates the volume of the cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume using the formula V = (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone, respectively. \n    It returns the volume of the cone.\n    '''\n    area = math.pi * r**2 # calculate the area of the base of the cone using the formula pi*r^2\n    volume = area * h # calculate the volume of the cone using the formula area*h\n    return volume # return the volume of the cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    V = (1/3)*math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2) * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula V = pi * r^2 * h\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > 1: \n        highest_power += 1 \n        n >>= 1 # shift n right by one bit to remove the least significant bit \n    return highest_power \n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the maximum power of 2 to be less than or equal to n\n    max_power = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, check if it's greater than the maximum power found so far\n        if (1 << i) <= n:\n            # If it is, update the maximum power found\n            max_power = i\n    # Return the maximum power of 2\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1 \n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0: \n        if n & 1 == 1: \n            break \n        n >>= 1 \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 to 1\n    highest = 1\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is a power of 2\n        if i == 2**highest:\n            # if it is, update the highest power of 2\n            highest += 1\n    \n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the number is a power of 2\n        if i == 1:\n            highest = i\n        elif i & (i-1) == 0:\n            highest = i\n            break\n        else:\n            continue\n            \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 0\n    for i in range(1, n+1):\n        if i == 1:\n            highestPower = i\n        else:\n            if i == 2**i:\n                highestPower = i\n    return highestPower"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 that is less than or equal to n\n    highest_power = 1\n\n    # Loop through all powers of 2 from 1 to 32 (inclusive)\n    for i in range(1, 33):\n        # If the current power of 2 is less than or equal to n, update the highest power\n        if i <= n:\n            highest_power = i\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    # Use bitwise operations to check if n is a power of 2\n    if n == 1:\n        return 0\n    elif n & (n - 1) == 0:\n        return 1\n    else:\n        return highest_Power_of_2(n - (n & -n)) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 found to be 1\n    highest = 1\n    # loop through all the numbers from 1 to n\n    for i in range(2, n+1):\n        # if the number is a power of 2, update the highest power of 2 found\n        if i == 2**highest:\n            highest = highest + 1\n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1)\n        return lucas + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer `n` and returns then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th lucas number using the formula:\n    L(n) = L(n-1) + L(n-2)\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        if len(lst) > 0:\n            for item in lst:\n                if isinstance(item, (list, tuple)):\n                    for nested_item in item:\n                        result = {**result, **{i: nested_item}}\n                else:\n                    result = {**result, **{i: item}}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            key = f\"list{i+1}_{item}\"\n            result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if type(l1[i]) == list:\n            result[l1[i][0]] = l1[i]\n        elif type(l1[i]) == dict:\n            result = {**result, **l1[i]}\n        else:\n            result[l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a list to store the nested dictionary\n    result = []\n\n    # Loop through each list and convert it to a nested dictionary\n    for i in range(len(l1)):\n        item = {\n            l2[i]: l3[i]\n        }\n        result.append(item)\n\n    # Return the resulting nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert list1 to dictionary\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    # Convert list3 to dictionary\n    dict3 = {}\n    for i in range(len(l3)):\n        dict3[l3[i]] = l3[i]\n    # Create nested dictionary with dictionary1 and dictionary3 as its values\n    nested_dict = {\n        \"list1\": dict1,\n        \"list2\": l2,\n        \"list3\": dict3\n    }\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a list to store the nested dictionary\n    nested_dict = []\n    # iterate through the three lists and append each element to the nested_dict\n    for i in range(len(l1)):\n        nested_dict.append({'name': l1[i], 'age': l2[i], 'city': l3[i]})\n    # return the nested_dict\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List containing dictionaries.\n        l2 (list): List containing tuples.\n        l3 (list): List containing lists.\n\n    Returns:\n        dict: Nested dictionary containing all the elements of l1, l2, and l3.\n    '''\n    # Create an empty dictionary to store the final output\n    output = {}\n\n    # Iterate over the lists and add the elements to the output dictionary\n    for i in range(len(l1)):\n        output[i] = l1[i]\n\n    for i in range(len(l2)):\n        output[i] = output[i].append(l2[i])\n\n    for i in range(len(l3)):\n        for item in l3[i]:\n            output[i] = output[i].append(item)\n\n    return output"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    result = {}\n    for l in args:\n        for i in range(len(l)):\n            result[i] = l[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n\n    # Iterate over the input lists\n    for i, j, k in zip(l1, l2, l3):\n        # Check if the current key is already present in the result dictionary\n        if k in result:\n            # If it is, append the current value to the list associated with that key\n            result[k].append(j)\n        else:\n            # If not, create a new key-value pair and set the value to a list containing the current value\n            result[k] = [j]\n\n    # Return the nested dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def sum_of_factors(n):\n        return (n * (n+1)) // 2\n    \n    def helper(n, prefix_sum):\n        if n == 1:\n            return prefix_sum\n        elif n == 2:\n            return prefix_sum + sum_of_factors(3)\n        elif n == 3:\n            return prefix_sum + sum_of_factors(5)\n        else:\n            return max(helper(n//2, prefix_sum + sum_of_factors(n//2)), helper(n//3, prefix_sum + sum_of_factors(n//3)), helper(n//4, prefix_sum + sum_of_factors(n//4)), helper(n//5, prefix_sum + sum_of_factors(n//5)), n)\n    \n    return helper(n, 0)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 30\n\n    # base case\n    elif n < 6:\n        return n\n\n    # recursive case\n    else:\n        sum1 = get_max_sum(n/2)\n        sum2 = get_max_sum(n/3)\n        sum3 = get_max_sum(n/4)\n        sum4 = get_max_sum(n/5)\n\n        max_sum = max(sum1, sum2, sum3, sum4) + n\n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return 1\n    \n    # call the function recursively with n/2, n/3, n/4, n/5\n    result1 = get_max_sum(n//2)\n    result2 = get_max_sum(n//3)\n    result3 = get_max_sum(n//4)\n    result4 = get_max_sum(n//5)\n    \n    # find the maximum sum among the above results and n\n    return max(result1 + result2 + result3 + result4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base cases\n    if n <= 2:\n        return n\n\n    # recursive case\n    left_sum = get_max_sum(n/2)\n    right_sum = get_max_sum(n/3)\n    middle_sum = get_max_sum(n/4)\n    fifth_sum = get_max_sum(n/5)\n    return max(left_sum + right_sum + middle_sum + fifth_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    # Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum_left = get_max_sum(n//2)\n    max_sum_right = get_max_sum(n//3)\n    max_sum_mid = get_max_sum(n//4)\n    max_sum_back = get_max_sum(n//5)\n    max_sum_current = n\n\n    max_sum = max(max_sum_left, max_sum_right, max_sum_mid, max_sum_back, max_sum_current)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if length of set is equal to length of original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to get rid of duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple into a set to remove duplicates\n    set_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the unique values in the tuple\n    unique_values = set(test_tup)\n\n    # If the length of the set is equal to the length of the tuple, it means\n    # all the values in the tuple are unique and no duplicates are present\n    if len(unique_values) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears only once\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there are multiple non-repeating characters in the string, it returns the first one.\n    If the string contains no non-repeating characters, it returns None.\n    \"\"\"\n    char_count = {} # a dictionary to keep track of the count of each character in the string\n    \n    for char in str1:\n        if char in char_count: # if the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else: # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n            \n    for char in char_count: # loop through the dictionary and return the first non-repeating character\n        if char_count[char] == 1:\n            return char\n    \n    return None # if there are no non-repeating characters, return None\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through the string and update the frequency of each character in the dictionary\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character in the dictionary whose frequency is 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # If all characters in the dictionary have a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert string to list of characters\n    char_list = list(str1)\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n    # Initialize the first non-repeating character to None\n    first_non_repeating_char = None\n    # Loop through the characters in the string\n    for char in char_list:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with frequency 1\n        else:\n            char_freq[char] = 1\n        # If the first non-repeating character is None, set it to the current character\n        if first_non_repeating_char is None:\n            first_non_repeating_char = char\n        # If the frequency of the current character is 1, set it to the current character as the first non-repeating character\n        elif char_freq[char] == 1:\n            first_non_repeating_char = char\n        # If the frequency of the current character is greater than 1, break out of the loop and return the first non-repeating character\n        else:\n            break\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeating character in a given string.\n\n    :param str1: A string\n    :return: The first non-repeating character in the string, or None if there is none.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    first_non_repeating = None\n    for char, count in char_count.items():\n        if count == 1:\n            first_non_repeating = char\n            break\n\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index\n    mid_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted list is odd, return the middle element\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[mid_index]\n    # If the length of the sorted list is even, return the average of the two middle elements\n    else:\n        return (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        return numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers in descending order\n    nums = sorted([b, a, c], reverse=True)\n    \n    # find the middle index\n    middle_index = len(nums) // 2\n    \n    # if the middle index is odd, return the middle number\n    if middle_index % 2 == 1:\n        return nums[middle_index]\n    # if the middle index is even, average the two middle numbers\n    else:\n        return (nums[middle_index - 1] + nums[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    midpoint = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n    else:\n        median = sorted_numbers[midpoint]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2-1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the given numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the list\n    n = len(numbers)\n\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # If it is even, calculate the median as average of two middle numbers\n        median = (numbers[n//2] + numbers[n//2-1]) / 2\n    else:\n        # If it is odd, calculate the median as middle number\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    median = (a + b + c) / 3\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes in three numbers and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the array\n    length = len(sorted_numbers)\n\n    # If the length of the array is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_numbers[length//2]\n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        middle_number1 = sorted_numbers[length//2 - 1]\n        middle_number2 = sorted_numbers[length//2]\n        return (middle_number1 + middle_number2) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    length = len(numbers)\n\n    # Calculate the middle index of the list\n    middle_index = length // 2\n\n    # If the length of the list is odd, return the middle number\n    if length % 2 == 1:\n        return numbers[middle_index]\n    # If the length of the list is even, return the average of the two middle numbers\n    else:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize an empty list to store the sum of digits of each number\n    sums = []\n    \n    # Loop over each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(d) for d in str(num)]\n        # Compute the sum of the digits\n        digit_sum = sum(digits)\n        # Add the sum to the list of sums\n        sums.append(digit_sum)\n    \n    # Return the list of sums\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_num = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits_num += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits_num)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    \n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n        \n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the first tuple's values\n    result_tup = test_tup1\n    # Iterate over the second tuple, performing the bitwise xor operation with each value in the first tuple\n    for val in test_tup2:\n        result_tup = tuple(x ^ val for x in result_tup)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bin(x ^ y)[2:] for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for elem in test_list:\n        unique_tuples.add(tuple(elem))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if isinstance(item, tuple):\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if (i,) in freq_dict:\n            freq_dict[(i,)] += 1\n        else:\n            freq_dict[(i,)] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two nested tuples must have the same length.\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result = []\n    # loop through each tuple element and add them element by element\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    # return the resultant tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize empty list to store the result\n    result = []\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current index is in the second tuple\n        if i < len(test_tup2):\n            # Add the corresponding elements of both tuples\n            result.append(test_tup1[i] + test_tup2[i])\n        else:\n            # If the current index is not in the second tuple, append the original element of the first tuple\n            result.append(test_tup1[i])\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initializing the result tuple\n    result = ()\n    # Iterating through each index of the first tuple\n    for i in range(len(test_tup1)):\n        # Initializing the current element of the result tuple\n        current_element = 0\n        # Iterating through each index of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Adding the corresponding elements of the two tuples\n            current_element += test_tup1[i][j] + test_tup2[i][j]\n        # Adding the current element to the result tuple\n        result += (current_element,)\n    # Returning the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize a nested list to store the sum of elements in the two tuples\n    result_list = []\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements in the two tuples and store the result in the result_list\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n\n    # return the result_list\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result_tuple = []\n\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the corresponding elements of the two tuples\n            result_tuple.append(test_tup1[i] + test_tup2[i][j])\n\n    # return the resultant tuple\n    return tuple(result_tuple)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the minimum of those two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two tuples as input and returns True if the element exists in tuple1, else False.\n    '''\n    for item in tuple1: \n        if item in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check if an element exists in a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # check if the element exists within the tuple\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in tuple1\")\n    else:\n        print(f\"{tuplex} does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    Args:\n    tuplex: The tuple in which the element needs to be checked.\n    tuple1: The tuple containing the element to be checked.\n\n    Returns:\n    True if the element exists in the tuple, else False.\n    \"\"\"\n\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if x is an integer\n    if not isinstance(x, int):\n        print(\"Input should be an integer!\")\n        return\n    \n    # Calculate the parity of x using the modulus operator\n    parity = x % 2\n    \n    # Return the parity of x\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # To find the parity of a number, we add 1 to the odd parity of x and divide by 2.\n    odd_parity = (x + 1) // 2\n    \n    # If odd_parity is still 1, it means x is odd. Otherwise, it is even.\n    if odd_parity == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, False otherwise.\n    '''\n\n    # check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the given number is even or odd\n    if x % 2 == 0:\n        # If the number is even, return False\n        return False\n    else:\n        # If the number is odd, return True\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1\n    for i in range(1, x):\n        if x % i == 0:\n            parity *= -1\n    if parity == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Create a list of digits from the number\n    num_digits = len(str(n))\n    digits = [int(d) for d in str(n)]\n\n    # Swap adjacent digits\n    for i in range(num_digits//2):\n        j = i + num_digits//2\n        if digits[i] < digits[j]:\n            digits[i], digits[j] = digits[j], digits[i]\n\n    # Rearrange the digits\n    new_digits = [digits[num_digits//2]]\n    while new_digits[-1] < digits[-1]:\n        new_digits.append(digits.pop())\n\n    # Create the new number as a string\n    new_num = ''.join(str(d) for d in new_digits)\n\n    # Return the new number as an integer\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    original_number = n\n    next_bigger_number = ''\n    digit_count = 0\n    \n    # Convert the given number to a list of digits\n    number_list = list(str(original_number))\n    \n    # Iterate through the list of digits\n    for digit in number_list:\n        # If the digit is greater than 0, increment the digit_count\n        if int(digit) > 0:\n            digit_count += 1\n        \n        # If the digit_count is greater than 0, add the digit to the next_bigger_number\n        if digit_count > 0:\n            next_bigger_number += digit\n    \n    # Convert the next_bigger_number to an integer\n    next_bigger_number = int(next_bigger_number)\n    \n    # Return the next_bigger_number\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    num_list = list(str(n))\n    \n    # Find the index of the first digit that is greater than 9\n    for i in range(len(num_list)):\n        if int(num_list[i]) > 9:\n            break\n    \n    # Convert the digit to a string and reverse it\n    first_digit = str(int(num_list[i]))[::-1]\n    \n    # Create a string of zeros\n    zeros_str = '0' * (len(num_list) - len(first_digit))\n    \n    # Rearrange the digits of the number\n    new_num = first_digit + zeros_str + num_list[i]\n    \n    # Convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    bigger_num = int(''.join(num_list))\n    return bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    while n % 10 == 9:\n        n = int(str(n)[-1]) + 10 * int(str(n)[0])\n    return str(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)  # convert the integer to a string\n    digits = list(map(int, n))  # convert the string to a list of digits\n    \n    # reverse the list of digits\n    digits.reverse()\n    \n    # calculate the sum of the digits\n    sum_digits = sum(digits)\n    \n    # if the sum is odd, increment the last digit by 1\n    if sum_digits % 2 == 1:\n        digits[-1] += 1\n    \n    # convert the list of digits back to a string and return it\n    return \"\".join(map(str, digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # initialize variables\n    num_str = str(n)\n    num_list = list(num_str)\n    num_len = len(num_str)\n\n    # if the number is already the next bigger number, return the number as is\n    if num_str == \"999999999\":\n        return n\n\n    # swap the last two digits if the first two digits are greater than the last two digits\n    if num_list[0] > num_list[-2] and num_list[-1] > num_list[-3]:\n        num_list[-1], num_list[-3] = num_list[-3], num_list[-1]\n\n    # swap the last two digits if the first two digits are smaller than the last two digits\n    elif num_list[0] < num_list[-2] and num_list[-1] < num_list[-3]:\n        num_list[-1], num_list[-3] = num_list[-3], num_list[-1]\n\n    # swap the last two digits if the first two digits are equal to the last two digits\n    else:\n        num_list[-1], num_list[-3] = num_list[-3], num_list[-1]\n\n    # convert the list of digits back to a string and add '0' if the number is too short\n    num_str = ''.join(num_list)\n    if len(num_str) < 8:\n        num_str = '0' * (8 - len(num_str)) + num_str\n\n    # add '9' to the end of the number if it's the next bigger number\n    if num_str == '199999999':\n        num_str += '9'\n\n    # convert the string to an integer and return the number\n    num = int(num_str)\n    return num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # convert the given number into a string\n    number_str = str(n)\n    # split the string into digits\n    digits = list(map(int, number_str))\n    # sort the digits in ascending order\n    digits.sort()\n    # create a new string with the digits in reverse order\n    new_str = ''.join(str(d) for d in digits[::-1])\n    # convert the new string back to an integer\n    new_int = int(new_str)\n    # return the new integer\n    return new_int"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the given number to a string\n    str_n = str(n)\n\n    # Split the string into digits\n    digits = [int(digit) for digit in str_n]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Rearrange the digits to form the next bigger number\n    next_bigger_number = 0\n    for digit in digits:\n        next_bigger_number += digit * 10**(len(str_n) - digits.index(digit))\n\n    # Return the next bigger number as an integer\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    num = str(n)\n    # Initialize the maximum number\n    max_num = 0\n    # Loop through each digit of the number\n    for digit in num:\n        # Check if the digit is greater than the maximum number\n        if int(digit) > max_num:\n            # Update the maximum number\n            max_num = int(digit)\n    # Convert the maximum number to a string\n    max_num = str(max_num)\n    # Initialize the next bigger number\n    next_bigger = 0\n    # Loop through each digit of the maximum number\n    for digit in max_num:\n        # Add the current digit to the next bigger number\n        next_bigger += int(digit) * (9 - next_bigger % 9)\n        # Update the next bigger number modulo 9\n        next_bigger %= 9\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min-heap (priority queue) to store the smallest k pairs\n    pq = []\n\n    # Initialize two pointers for the two arrays\n    i = j = 0\n\n    # Iterate over the array and add the smallest pairs to the heap\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < nums1[i] + nums2[j-1]:\n            # Add the smaller pair to the heap\n            heapq.heappush(pq, (nums1[i], nums2[j]))\n            # Remove the smallest pair from the heap\n            heapq.heappop(pq)\n            k -= 1\n        elif nums1[i] + nums2[j] > nums1[i-1] + nums2[j]:\n            # Remove the smallest pair from the heap\n            heapq.heappop(pq)\n            k -= 1\n        else:\n            i += 1\n\n    # Return the smallest k pairs\n    return [pair for pair in pq]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if k == 0:\n                break\n            \n            if not min_heap or num1 < min_heap[0][0]:\n                heapq.heappush(min_heap, (num1, num2))\n                k -= 1\n            \n            if k == 0:\n                break\n            \n            if not min_heap or num2 < min_heap[0][1]:\n                num1, num2 = min_heap[0]\n                heapq.heappop(min_heap)\n                result.append((min(num1, num2), max(num1, num2)))\n                k -= 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples containing the first element of the first list and the second element of the second list\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    \n    # Sort the list of pairs based on the sum of the elements in each tuple\n    pairs.sort(key=lambda x: x[0] + x[1])\n    \n    # Return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min-heap for the second array\n    heapq.heapify(nums2)\n\n    # Initialize two variables to keep track of the smallest pairs found so far\n    smallest_pair1 = None\n    smallest_pair2 = None\n\n    # Loop through the first array\n    for num1 in nums1:\n        # If the size of the heap is less than k, add the current element to the heap\n        if len(nums2) < k:\n            heapq.heappush(nums2, num1)\n        # If the size of the heap is greater than or equal to k, compare the current element with the smallest element in the heap\n        else:\n            smallest_pair2 = heapq.heappop(nums2)\n            if smallest_pair2 + num1 < num1:\n                # If the sum of the smallest element in the heap and the current element is greater than the current element,\n                # add the current element to the heap\n                heapq.heappush(nums2, num1)\n            else:\n                # If the sum of the smallest element in the heap and the current element is less than or equal to the current element,\n                # update the smallest pair found so far\n                smallest_pair1 = (smallest_pair2 + num1, num1)\n                heapq.heappush(nums2, smallest_pair2)\n\n    # Return the smallest pairs found so far\n    return smallest_pair1"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            else:\n                if num1 + num2 > heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1 + num2, (num1, num2)))\n        while len(heap) > 0:\n            pair = heapq.heappop(heap)\n            result.append(pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for num in nums1:\n        # Add each element of nums1 to the heap\n        heapq.heappush(min_heap, num)\n\n        # If the size of the heap becomes greater than k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Now the smallest k elements of nums1 are in the heap\n    res = []\n    while min_heap:\n        # Remove the smallest element from the heap\n        num = heapq.heappop(min_heap)\n        res.append((num, nums1.index(num)))\n\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the smallest elements of the first array\n    min_heap = []\n    \n    # Iterate through the second array\n    for num in nums2:\n        # If the current number is greater than or equal to the smallest element in the min heap, add it to the min heap\n        if num >= min_heap[0] or (num < min_heap[0] and len(min_heap) < k):\n            heapq.heappush(min_heap, num)\n        \n        # If the size of the min heap becomes greater than k, remove the smallest element from the heap\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # If the size of the min heap becomes k, calculate the sum of the smallest elements in the heap and return it\n        if len(min_heap) == k:\n            return [min_heap[0], num]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1 (list[int]): A list of integers representing the first array.\n    nums2 (list[int]): A list of integers representing the second array.\n    k (int): An integer representing the number of pairs we want to find.\n\n    Returns:\n    list[tuple[int, int]]: A list of tuples representing the k smallest pairs. Each tuple contains the two elements of a pair.\n    \"\"\"\n    # create a min heap of size k to store the k smallest pairs\n    min_heap = []\n\n    # initialize two pointers for each array\n    i = 0\n    j = 0\n\n    # loop until k smallest pairs have been found\n    while k > 0:\n        # compare the current element at i with the current element at j\n        if nums1[i] < nums2[j]:\n            # if the current element at i is smaller, add it to the min heap and move to the next element in the i array\n            heapq.heappush(min_heap, (nums1[i], i))\n            i += 1\n        else:\n            # if the current element at j is smaller, add it to the min heap and move to the next element in the j array\n            heapq.heappush(min_heap, (nums2[j], j))\n            j += 1\n\n        # if the size of the min heap is equal to k, remove the smallest element from the heap and decrement k\n        if len(min_heap) == k:\n            # remove the smallest element from the heap and decrement k\n            heapq.heappop(min_heap)\n            k -= 1\n\n    # create a list to store the k smallest pairs\n    result = []\n\n    # loop through the min heap and add the elements to the result list\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        result.append((pair[1], pair[0]))\n\n    # reverse the result list since the largest pairs are stored first\n    result.reverse()\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pq, (num1 + num2, (num1, num2)))\n            if len(pq) > k:\n                heapq.heappop(pq)\n    return [num for _, pair in pq]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the input lists into a set to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    # calculate the total number of elements in the list\n    total_elements = len(nums1) * len(nums2)\n    # create a min heap to store the smallest pairs\n    min_heap = []\n    # initialize the minimum value for the heap\n    min_heap_value = float('inf')\n    \n    # iterate through the elements in the first array and the elements in the second array\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the sum of the two numbers and check if it's smaller than the minimum value in the heap\n            if num1 + num2 < min_heap_value:\n                # if it is, update the heap with the new minimum value\n                heapq.heappushpop(min_heap, (num1 + num2, (num1, num2)))\n                # check if we have found k number of smallest pairs so far\n                if len(min_heap) == k:\n                    return [x[1] for x in min_heap]\n                \n    # if we have not found k number of smallest pairs so far, return an empty list\n    return []"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            minimum_product = min(minimum_product, product)\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list as input and returns the minimum product of pairs of tuples within the list.\n    The minimum product is the product of the minimum values of two tuples in the list.\n    '''\n    # Initialize variables for minimum product and minimum values of two tuples\n    min_product = float('inf')\n    tuple1 = [float('inf'), float('inf')]\n    tuple2 = [float('inf'), float('inf')]\n\n    # Iterate through the list of tuples and calculate the minimum product of pairs\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate product of tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Update minimum product if product is smaller than current minimum product\n            if product < min_product:\n                min_product = product\n                tuple1 = list1[i]\n                tuple2 = list1[j]\n\n    # Return the minimum product and two tuples as a tuple\n    return (min_product, tuple1, tuple2)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # iterate over all pairs of tuples within the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and check if it's less than the minimum\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # sort the list of tuples in ascending order\n    list1.sort()\n\n    # initialize variables for the minimum product and the minimum value of the second tuple\n    min_product = float('inf')\n    second_min = float('inf')\n\n    # loop through the sorted list of tuples\n    for i in range(len(list1)):\n        # update the minimum product if the first tuple is smaller than the second tuple\n        if list1[i][0] < list1[i][1]:\n            # update the minimum product if the first tuple is smaller than the current minimum product\n            if list1[i][0] * list1[i][1] < min_product:\n                min_product = list1[i][0] * list1[i][1]\n                second_min = list1[i][1]\n        # update the minimum product if the second tuple is smaller than the current minimum product\n        elif list1[i][1] < list1[i][0]:\n            if list1[i][1] * list1[i][0] < min_product:\n                min_product = list1[i][1] * list1[i][0]\n                second_min = list1[i][0]\n\n    # return the minimum product and the minimum value of the second tuple\n    return min_product, second_min"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k]\n            for l in range(len(list1[j])):\n                product *= list1[j][l]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and minimum tuple\n    min_product = float('inf')\n    min_pair = None\n    \n    # Loop through the list of tuples\n    for tup in list1:\n        # Calculate product of tuple\n        product = 1\n        for num in tup:\n            product *= num\n        \n        # Check if product is less than current minimum\n        if product < min_product:\n            min_product = product\n            min_pair = tup\n    \n    # Return minimum product and tuple\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initialize the minimum product\n    min_product = float('inf')\n\n    #loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            #check if the current pair is within the list and if the product is less than the minimum\n            if i!= j and (i+j) < len(list1) and list1[i]*list1[j] < min_product:\n                min_product = list1[i]*list1[j]\n\n    #return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples based on their length\n    sorted_list = sorted(list1, key=lambda x: len(x))\n\n    # Initialize the minimum product as infinity\n    min_product = float('inf')\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # Check if the length of the tuples is odd\n        if len(sorted_list[i]) % 2 == 1:\n            # If yes, calculate the product of the corresponding elements\n            product = sorted_list[i][0] * sorted_list[i][-1]\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = float('inf') # initialize the minimum value to positive infinity\n    for value in listval:\n        if value < min_value: # if the current value is smaller than the minimum value, update the minimum value\n            min_value = value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # iterate through the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values as input and returns the minimum value present in the list.\n    If the list is empty, the function returns None.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = float('inf')\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in re.findall(r'(_[a-z]+)', word))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = re.findall(r'\\w+', word)\n\n    # create a camel case string\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word[0].upper() + word[1:]\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the word to snake case\n    snake_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # convert the first character to lower case\n    camel_case = snake_case.lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char\n        else:\n            result += \"_\" + char.lower()\n    return result.lstrip(\"_\")"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to snake case\n    snake_word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # Convert snake case to camel case\n    camel_word = snake_word.title()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = re.findall(r'([a-z])([A-Z])', word)\n    camel_case_word = ''.join([w.lower() for w in word_list[0]])\n    for i in range(1, len(word_list)):\n        camel_case_word += '_' + word_list[i].lower()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: A snake case string.\n    :return: A camel case string.\n    \"\"\"\n\n    # Convert snake case to camel case using regular expressions\n    camel_case = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(_\\w)', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Replace all underscores with spaces\n    words = re.findall(r'_(\\w)', word)\n    word = ''.join(words)\n    \n    # Convert the first letter to uppercase\n    word = word[0].upper() + word[1:]\n    \n    # Split the words into a list\n    words = word.split(' ')\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words back together into a camel case string\n    camel_case_word =''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n\n    Args:\n        list1 (list): list of tuples\n        n (int): index of the element to extract\n\n    Returns:\n        tuple: the nth element from the list\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except:\n        return 'Invalid input. The list does not contain that many elements.'"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Get the length of the list\n    length = len(list1)\n\n    # Check if the nth element is within the range of the list\n    if n <= 0 or n > length:\n        return \"Invalid input\"\n\n    # Extract the nth element from the list\n    result = list1[n-1]\n\n    # Return the extracted element\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input should be a list of tuples\")\n    \n    # check if n is a valid integer\n    if not isinstance(n, int):\n        raise TypeError(\"n should be an integer\")\n    \n    # check if n is within the range of the list of tuples\n    if n < 1 or n > len(list1):\n        raise IndexError(\"n should be between 1 and the length of the list of tuples\")\n    \n    # extract the nth element\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Loop through the list of tuples and extract the nth element\n    for tup in list1:\n        if n == 1:\n            return tup[1]\n        n -= 1"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set from list1 to remove duplicates and convert it to a list\n    set1 = list(set(list1))\n    # create a set from list2 to remove duplicates and convert it to a list\n    set2 = list(set(list2))\n    # check if any value in list1 exists in list2 using the intersection method\n    if len(list(set1 & set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters\n    ----------\n    list1 : list\n        First sequence to search in.\n    list2 : list\n        Second sequence to search in.\n\n    Returns\n    -------\n    bool\n        Returns True if there is any overlap, False otherwise.\n\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in the first list that also exists in the second list, otherwise it returns False.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes in two lists as input and returns a boolean value indicating whether any value in list1 exists in list2 or not.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list, otherwise, it returns False.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            elif product == max_product:\n                max_pair.append(arr[j])\n            if product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n            elif product == min_product:\n                min_pair.append(arr[j])\n    \n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables for the maximum product and the minimum product\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Iterate through the array and find the maximum and minimum product\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        elif num < min_product:\n            min_product = num\n            \n    # Return the pair of numbers with the highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = [0, 0]\n    min_product = float('inf')\n    min_pair = [0, 0]\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            elif product == max_product:\n                max_pair.append(arr[j])\n            \n            if product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n            elif product == min_product:\n                min_pair.append(arr[j])\n    \n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i])\n            elif product > max_pair[1]:\n                max_pair = (product, arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes in an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1: \n        return None \n    max_product = arr[0] * arr[1] \n    min_product = arr[0] * arr[1] \n    for i in range(2, len(arr)): \n        temp_product = max(arr[i], min_product) * min(arr[i], max_product) \n        if temp_product > max_product: \n            max_product = temp_product \n        if temp_product < min_product: \n            min_product = temp_product \n    return max_product "
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_pair = [arr[0], arr[-1]]\n    for i in range(1, len(arr)-1):\n        if arr[i] * arr[i+1] > max_pair[0] * max_pair[1]:\n            max_pair = [arr[i], arr[i+1]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair, min_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tuple_item in Input:\n        if not common_element:\n            common_element = tuple_item[0]\n        else:\n            if tuple_item[0] == common_element:\n                return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store unique elements with their count\n    unique_dict = {}\n\n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # Extract the first element of each tuple and update the count in the unique_dict\n        if tup[0] in unique_dict:\n            unique_dict[tup[0]] += 1\n        else:\n            unique_dict[tup[0]] = 1\n\n    # Find the maximum count in the unique_dict and extract the key with that count\n    max_count = max(unique_dict.values())\n    common_element = None\n\n    for key, value in unique_dict.items():\n        if value == max_count:\n            common_element = key\n\n    # Return the common element if it exists, otherwise return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for t in Input:\n        first_element = t[0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tuple in Input:\n        common_elements.add(tuple[0])\n    return common_elements\n\nInput = [(1,2), (3,4), (5,6), (7,8), (9,10)]\nprint(group_tuples(Input)) # Output: {1, 3, 5, 7, 9}"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and finds the common first element in each tuple.\n    It returns a list of tuples containing the common first element and the count of the occurrence of that element.\n    '''\n    common_elements = []\n    for tuple in Input:\n        if tuple[0] in common_elements:\n            common_elements[common_elements.index(tuple[0])][1] += 1\n        else:\n            common_elements.append((tuple[0], 1))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for i in Input:\n        if i[0] not in common_first:\n            common_first.append(i[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in Input:\n        # check if the first element is already in the dictionary\n        if tup[0] in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup[0]] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[tup[0]] = 1\n    \n    # create an empty list to store the common elements\n    common_elements = []\n    \n    # loop through the dictionary and find the common elements\n    for elem in count_dict:\n        # if the count of the element is equal to the length of the list, it is a common element\n        if count_dict[elem] == len(Input):\n            # add the element to the list of common elements\n            common_elements.append(elem)\n    \n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements\n    common_dict = {}\n    for tuple in Input:\n        # get the first element of the tuple\n        first_element = tuple[0]\n        # check if it is already in the dictionary\n        if first_element in common_dict:\n            # if it is, increment its count by 1\n            common_dict[first_element] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            common_dict[first_element] = 1\n    # create a list of common elements\n    common_list = []\n    for key, value in common_dict.items():\n        if value == max(common_dict.values()):\n            common_list.append(key)\n    # return the list of common elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Given a list of tuples, return a list of tuples where each tuple contains\n    all the elements of the corresponding tuple in the input list.\n    \"\"\"\n    result = []\n    for t in Input:\n        new_tuple = ()\n        for i, x in enumerate(t):\n            new_tuple += (x,)\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # Iterate through the given list of tuples\n    for item in Input:\n        # Get the first element from the tuple\n        first_element = item[0]\n\n        # If the element is not in the count_dict, add it with a count of 1\n        if first_element not in count_dict:\n            count_dict[first_element] = 1\n        # If the element is already in the count_dict, increment its count by 1\n        else:\n            count_dict[first_element] += 1\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through the count_dict and add the elements with count 1 to the common_elements list\n    for key in count_dict:\n        if count_dict[key] == 1:\n            common_elements.append(key)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        max_len = 0\n        for i in lst:\n            if len(str(i)) > max_len:\n                max_len = len(str(i))\n                max_ele = i\n        return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function finds the maximum element of a list.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst[0], Find_Max(lst[1:]))"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_str = ''\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_str = str(i)\n    return max_str"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for number in list1:\n        total += round(number)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Loop through each number in the list\n    total_sum = 0\n    for num in list1:\n        # Round the number and add it to the total sum\n        total_sum += round(num)\n    # Print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list as input and prints the sum of the rounded values of all the numbers in the list\n    multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(\"Total sum:\", total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    cube_sum = 0\n    \n    for num in even_numbers:\n        cube_sum += num**3\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    num = 2\n    while num <= n:\n        sum_of_cubes += num ** 3\n        num += 2\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(n):\n        # add the cube of the current even natural number to the sum of cubes\n        cube_sum += i*i*i\n\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=\": \"):\n    '''\n    This function takes a tuple and concatenates each element by the given delimiter.\n    '''\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \",\".join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    result = result.rstrip(delimiter)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1] # remove the last delimiter from the result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \",\".join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(item) for item in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cube = i ** 3\n        cubes.append(cube)\n    average = sum(cubes) / len(cubes)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n    \n    # iterate n times\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum_of_cubes += cube\n        count += 1\n        \n    # calculate average\n    average = sum_of_cubes / count\n    \n    # print result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        total_sum += i ** 3\n        count += 1\n    return total_sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variables to keep track of sum and count of cubes\n    sum_cubes = 0\n    count_cubes = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n\n        # calculate the cube of the current number\n        cube = i**3\n\n        # add the cube to the sum\n        sum_cubes += cube\n\n        # increment the count of cubes\n        count_cubes += 1\n\n    # calculate the average of cubes\n    average_cubes = sum_cubes/count_cubes\n\n    # print the result\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize variables\n    total = 0\n    count = 0\n\n    # Calculate and add the first n cubes to the total and count\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n\n    # Find the average of cubes and return it\n    average = total / count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        if isinstance(string, str):\n            rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return tuple(elem[-1] for elem in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 0:\n            rear_indices.append(i)\n    return tuple([test_tuple[i] for i in rear_indices])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x, count=0):\n    if x in list1:\n        count += 1\n    for sublist in list1:\n        if isinstance(sublist, list):\n            count = count_element_in_list(sublist, x, count)\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element x as input and returns the count of sublists in the list that contain x.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create a new list to store the odd numbers\n    odd_nums = []\n    \n    # iterate through the input list\n    for num in nums:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if it is odd, add it to the new list\n            odd_nums.append(num)\n    \n    # return the new list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list of odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() function to replace the date format\n    return re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    # regex pattern to extract year, month, and day from date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # regex pattern to extract day, month, and year from date string\n    pattern2 = r'(\\d{2})-(\\d{2})-(\\d{4})'\n\n    # using regex to match pattern in date string and extract values\n    match = re.search(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # using regex to match pattern2 in date string and extract values\n    match2 = re.search(pattern2, dt)\n    day2 = match2.group(1)\n    month2 = match2.group(2)\n    year2 = match2.group(3)\n\n    # concatenate day, month, and year values in correct order\n    result = day + '-' + month + '-' + year\n    # concatenate day2, month2, and year2 values in correct order\n    result2 = day2 + '-' + month2 + '-' + year2\n\n    return result, result2"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date format to be used\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the regular expression to match the date format\n    match = re.match(date_format, dt)\n    \n    # Check if the match is found\n    if match:\n        # Extract the year, month, and day from the match\n        year, month, day = match.groups()\n        \n        # Convert the date format to dd-mm-yyyy\n        formatted_date = day + '-' + month + '-' + year\n        \n        # Return the formatted date\n        return formatted_date\n    \n    # If the match is not found, return the original date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        year, month, day = match.groups()\n        return day+'-'+month+'-'+year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format from yyyy-mm-dd to dd-mm-yyyy\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.search() function to search for pattern in string\n    match = re.search(pattern, dt)\n\n    # Check if match was found\n    if match:\n        # Use string slicing to extract the parts of the date\n        day, month, year = match.groups()\n\n        # Use string format method to convert the date to dd-mm-yyyy format\n        new_dt = '-'.join([day, month, year])\n\n        # Return the new date string\n        return new_dt\n\n    # If no match was found, return original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regex pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Regex pattern to replace date format\n    new_pattern = r'\\3-\\2-\\1'\n    # Convert date using re.sub()\n    return re.sub(pattern, new_pattern, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year, month, and day from the input date string\n    year = int(dt[:4])\n    month = int(dt[5:7])\n    day = int(dt[8:])\n    \n    # Create a new date object using the extracted values and the new format\n    new_date = f'{day:02d}-{month:02d}-{year:04d}'\n    \n    # Return the new date string in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # find the minimum gap between the elements\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # iterate through the array using the gap\n        for i in range(gap, n):\n            # shift the elements of the array to the right\n            j = i\n            temp = my_list[j]\n            \n            while j - gap >= 0 and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        \n        # decrease the gap by a factor of 2\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the increment sequence\n    gap = n // 2\n    while gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        # Decrease the gap size\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the list\n    length = len(my_list)\n    \n    # Set the gap value\n    gap = length // 2\n    \n    while gap > 0:\n        # Iterate through the array with gap\n        for i in range(gap, length):\n            # Compare the current element with the previous gap elements\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap value\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Step 1: Determine the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Move the gap to one position to the right\n        gap = gap // 2\n        # Step 3: Perform insertion sort on the list\n        for i in range(gap, n):\n            # Insert the current element at its correct position\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the largest gap in the array\n    n = len(my_list)\n    largest_gap = n // 2\n    \n    while largest_gap >= 1:\n        # Iterate over all subarrays of size gap\n        for start in range(largest_gap, n):\n            # Insertion sort for this subarray\n            for j in range(start, start+largest_gap, largest_gap):\n                # Swap adjacent elements if they are in the wrong order\n                while j >= largest_gap and my_list[j] < my_list[j-largest_gap]:\n                    my_list[j], my_list[j-largest_gap] = my_list[j-largest_gap], my_list[j]\n        # Decrease the gap by one\n        largest_gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Calculate the length of the array\n    length = len(my_list)\n    \n    # Calculate the gap between elements\n    gap = length // 2\n    \n    # Iterate until the gap is equal to 1\n    while gap > 0:\n        \n        # Iterate through the array from the gap index\n        for i in range(gap, length):\n            \n            # Swap the elements if they are not in the correct order\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        \n        # Reduce the gap by half\n        gap //= 2\n    \n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the resulting tuples\n    result_list = []\n    # Iterate through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Append the elementwise and of the current elements of the two input tuples to the result list\n        result_list.append(test_tup1[i] & test_tup2[i])\n    # Return the result list of elementwise and tuples\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths do not match.\"\n    else:\n        and_tuple = []\n        for i in range(len(test_tup1)):\n            and_tuple.append(test_tup1[i] & test_tup2[i])\n        return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the element-wise and of the tuples.\n\n    Parameters\n    ----------\n    test_tup1 : tuple\n        First tuple to be processed.\n    test_tup2 : tuple\n        Second tuple to be processed.\n\n    Returns\n    -------\n    tuple\n        The element-wise and of the two tuples.\n    \"\"\"\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    return tuple(zip(*[iter(test_tup1), iter(test_tup2)]))[0]"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = (and_tup[i] & test_tup2[i],) + and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[x1 & x2 for x1, x2 in zip(test_tup1, test_tup2)]))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"There is no real root.\"\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + (delta**0.5))/(2*a)\n        x2 = (-b - (delta**0.5))/(2*a)\n        print(\"The directrix is\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or zero\n    if disc > 0: \n        # Calculate the roots of the discriminant\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix of the parabola\n        return roots\n    \n    # If the discriminant is negative, there is no directrix\n    else: \n        return \"There is no directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        root1 = root2 = -b/(2*a)\n    else:\n        print(\"The discriminant is negative or zero.\")\n        \n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    else:\n        x1 = (-b + b**2)/(2*a)\n        x2 = (-b - b**2)/(2*a)\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    x1 = (-b + determinant**0.5)/(2*a)\n    x2 = (-b - determinant**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The parabola has no directrix\"\n    elif delta == 0:\n        return \"The directrix is x = -b/(2*a)\"\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return \"The directrixes are x = {:.2f} and x = {:.2f}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive\n    if discriminant > 0:\n        # calculate the root using the quadratic formula\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # sort the roots in ascending order\n        sorted_roots = sorted([root1, root2])\n        \n        # return the middle root\n        return sorted_roots[1]\n    \n    # if the discriminant is negative\n    else:\n        # return the root that is closest to 0\n        if b > 0:\n            return (-b)/(2*a)\n        else:\n            return (-b)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    disc = b**2 - 4*a*c\n    \n    if disc > 0:\n        x1 = (-b + disc**0.5)/2/a\n        x2 = (-b - disc**0.5)/2/a\n    elif disc == 0:\n        x1 = x2 = -b/2/a\n    else:\n        return \"The equation of the parabola has no real roots\"\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n    else:\n        x1 = 0\n        x2 = 0\n        \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The equation does not have a unique directrix.\")\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix is:\", x)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is:\", x1, \"and\", x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from list1 and then compare to list2\n    common = list(set(list1) & set(list2))\n    # Return True if there is at least one common element, False otherwise\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    list1_set = set(list1)\n    list2_set = set(list2)\n    \n    # check if there is at least one common element\n    if list1_set.intersection(list2_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(set(list2))) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set to hold the common elements\n    common_set = set()\n    # Loop through the first list\n    for num in list1:\n        # Loop through the second list\n        for other_num in list2:\n            # If the two numbers are equal, add them to the common set\n            if num == other_num:\n                common_set.add(num)\n    # Check if the common set is empty or not\n    if not common_set:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the trapezium\n    length = (base1 + base2 + height) / 2\n    \n    # Sort the sides of the trapezium\n    sorted_sides = sorted([base1, base2, height])\n    \n    # Calculate the median\n    if sorted_sides[0] == sorted_sides[1]:\n        # If the base1 and base2 are equal, the median is either base1 or base2\n        if sorted_sides[2] == sorted_sides[1]:\n            median = sorted_sides[0]\n        else:\n            median = sorted_sides[1]\n    elif sorted_sides[0] == sorted_sides[2]:\n        # If the base1 and base2 are equal, the median is either base1 or base2\n        median = sorted_sides[0]\n    elif sorted_sides[1] == sorted_sides[2]:\n        # If the base1 and base2 are equal, the median is either base1 or base2\n        median = sorted_sides[1]\n    elif sorted_sides[0] > sorted_sides[1]:\n        if sorted_sides[0] > sorted_sides[2]:\n            median = sorted_sides[0]\n        elif sorted_sides[1] > sorted_sides[2]:\n            median = sorted_sides[2]\n        else:\n            median = (sorted_sides[0] + sorted_sides[1]) / 2\n    else:\n        if sorted_sides[1] > sorted_sides[2]:\n            median = sorted_sides[1]\n        elif sorted_sides[0] > sorted_sides[2]:\n            median = sorted_sides[2]\n        else:\n            median = (sorted_sides[0] + sorted_sides[1]) / 2\n    \n    # Calculate the error\n    error = sorted_sides[2] - median\n    \n    # Return the median and the error\n    return median, error"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the length of the smaller base\n    if base1 < base2:\n        smaller_base = base1\n    else:\n        smaller_base = base2\n    \n    # calculate the length of the larger base\n    larger_base = 0.5 * (base1 + base2)\n    \n    # calculate the length of the trapezium\n    trapezium_length = 2 * smaller_base\n    \n    # calculate the area of the trapezium using the trapezium's length\n    area_trapezium = 0.5 * smaller_base * trapezium_length\n    \n    # find the difference between the area of the trapezium and the area of the base\n    area_diff = area - area_trapezium\n    \n    # return the median length of the trapezium\n    return 0.5 * smaller_base * (area_diff/area_trapezium)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    trapezium_base = math.sqrt(area)\n    trapezium_height = height\n\n    trapezium_area = 0.5 * trapezium_base * trapezium_height\n    trapezium_length = 0.5 * trapezium_area\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    This function takes in the base and height of a trapezium and finds the median length of the trapezium.\n    '''\n    #calculating the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    #calculating the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n    \n    #calculating the area of the base of the trapezium\n    area_base = 0.5 * base * height\n    \n    #finding the height of the trapezium\n    height = 0.5 * (base1 + base2) * (area - area_base)\n    \n    #calculating the length of the trapezium\n    length = 0.5 * (base1 + base2) * height\n    \n    #calculating the median length of the trapezium\n    median = 0.5 * (base1 + base2 + length)\n    \n    #printing the median length of the trapezium\n    print(\"The median length of the trapezium is:\", median)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    length = (area * (base1 + base2)) ** 0.5\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium given its base and height.\n    \"\"\"\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # calculate the length of the shorter base\n    shorter_base = min(base1, base2)\n\n    # calculate the length of the longer base\n    longer_base = max(base1, base2)\n\n    # calculate the length of the shorter base that will give the area of the trapezium\n    shorter_area = shorter_base * height\n\n    # calculate the length of the longer base that will give the area of the trapezium\n    longer_area = longer_base * height\n\n    # determine which base is shorter and which is longer, based on the area of the trapezium\n    if area <= shorter_area:\n        shorter_base_length = shorter_base\n        longer_base_length = longer_base\n    else:\n        shorter_base_length = longer_base\n        longer_base_length = shorter_base\n\n    # calculate the length of the shorter base that will give the perimeter of the trapezium\n    shorter_perimeter = shorter_base_length + longer_base_length + height\n\n    # calculate the length of the longer base that will give the perimeter of the trapezium\n    longer_perimeter = longer_base_length + shorter_base_length + height\n\n    # determine which base is shorter and which is longer, based on the perimeter of the trapezium\n    if perimeter <= shorter_perimeter:\n        shorter_base_length = shorter_base_length\n        longer_base_length = longer_base_length\n    else:\n        shorter_base_length = longer_base_length\n        longer_base_length = shorter_base_length\n\n    # calculate the length of the shorter base that will give the area of the trapezium\n    shorter_area = shorter_base_length * height\n\n    # calculate the length of the longer base that will give the area of the trapezium\n    longer_area = longer_base_length * height\n\n    # determine which base is shorter and which is longer, based on the area of the trapezium\n    if area <= shorter_area:\n        shorter_base_length = shorter_base_length\n        longer_base_length = longer_base_length\n    else:\n        shorter_base_length = longer_base_length\n        longer_base_length = shorter_base_length\n\n    # calculate the median of the two bases\n    median = (shorter_base_length + longer_base_length) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n    \n    # calculate the median length of the trapezium\n    median_length = trapezium_length / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # calculate the length of the base that is the smaller one\n    small_base = min(base1,base2)\n    \n    # calculate the length of the base that is the larger one\n    large_base = max(base1,base2)\n    \n    # calculate the lengths of the smaller and larger base\n    length1 = small_base\n    length2 = large_base\n    \n    # calculate the length of the trapezium using the formula:\n    # (base1 + base2) / 2 + (height / 2)\n    length_trapezium = (length1 + length2) / 2 + height / 2\n    \n    # calculate the difference between the length of the trapezium and the area\n    # of the trapezium\n    length_diff = abs(length_trapezium - area)\n    \n    # calculate the median length of the trapezium\n    median_length = length_trapezium - length_diff\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n    # Calculate the number of intervals to divide the trapezium into\n    intervals = int(height / 10) + 1\n    # Initialize the sum of the lengths of the intervals\n    interval_sum = 0\n    # Loop through each interval\n    for i in range(intervals):\n        # Calculate the length of the i-th interval\n        interval_length = trapezium_length * (i / (intervals - 1))\n        # Add the length of the i-th interval to the sum of the lengths of the intervals\n        interval_sum += interval_length\n    # Calculate the median length of the trapezium\n    median_length = interval_sum / (intervals - 1)\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the height of the trapezium\n    total_height = height\n    \n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the base of each half of the trapezium\n    half_base1 = 0.5 * base1\n    half_base2 = 0.5 * base2\n    \n    # Calculate the length of the longest side of the trapezium\n    longest_side = max(half_base1, half_base2)\n    \n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = min(half_base1, half_base2)\n    \n    # Calculate the total length of the trapezium\n    total_length = longest_side + shortest_side\n    \n    # Calculate the number of equal parts of the trapezium\n    num_equal_parts = int(total_length / (longest_side * 2))\n    \n    # Calculate the length of each part of the trapezium\n    part_length = total_length / num_equal_parts\n    \n    # Calculate the number of equal parts between the two halves of the trapezium\n    num_equal_parts_between_halves = int(part_length / (longest_side * 2))\n    \n    # Calculate the length of the first half of the trapezium\n    first_half_length = longest_side * num_equal_parts_between_halves\n    \n    # Calculate the length of the second half of the trapezium\n    second_half_length = part_length - first_half_length\n    \n    # Calculate the length of the median of the two halves of the trapezium\n    median_length = first_half_length + second_half_length\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}.\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than_number = False\n    \n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    \n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(\"Yes\")\n            return\n    print(\"No\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{i} is greater than {number}\")\n            return True\n        elif i == number:\n            print(f\"{number} is already present in the array\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_found = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(arr[i], \"is greater than\", number)\n            greater_found = True\n        else:\n            print(arr[i], \"is not greater than\", number)\n    if not greater_found:\n        print(number, \"is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", i)\n            return True\n    print(\"The number is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and checks if there are any a's followed by one or more b's. If there are, it returns True, otherwise it returns False.\n    '''\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[bB]+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'(?<=a)b+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string and get the last character\n    last_char = str(n)[-1]\n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns its last digit.\n    \"\"\"\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Find the length of the string\n    length = len(n_str)\n\n    # Return the last digit\n    return int(n_str[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function will find the last digit of a given number.\n    \"\"\"\n    # take the last digit of a number\n    digit = n % 10\n    return digit\n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list containing the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function returns the negative numbers in a given list.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initializing an empty list to store negative numbers\n    neg_list = []\n    # iterating over each element in the list\n    for num in list1:\n        # checking if the element is negative\n        if num < 0:\n            # appending the negative element to the neg_list\n            neg_list.append(num)\n    # returning the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an input and returns a list containing all the negative numbers in the input list.\n    '''\n    neg_list = []\n    for i in lst:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Parameters:\n    string (str): A string to remove odd characters from.\n\n    Returns:\n    str: A new string with odd characters removed.\n    \"\"\"\n    return ''.join([char for char in string if char.isdigit() or int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char)%2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the odd characters\n    odd_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is an odd number, add it to the odd string\n        if int(char) % 2!= 0:\n            odd_str += char\n    \n    # Return the odd string\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(lambda x: x.isdigit() or x =='', str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isdigit() and int(char) % 2 == 0:\n            result += char\n        elif char not in string:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in str1:\n        if char.isalnum():\n            if char.isalnum():\n                odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('O', '')\n    str1 = str1.replace('o', '')\n    str1 = str1.replace('I', '')\n    str1 = str1.replace('i', '')\n    str1 = str1.replace('U', '')\n    str1 = str1.replace('u', '')\n    str1 = str1.replace('E', '')\n    str1 = str1.replace('e', '')\n    str1 = str1.replace('A', '')\n    str1 = str1.replace('a', '')\n    str1 = str1.replace('N', '')\n    str1 = str1.replace('n', '')\n    str1 = str1.replace('S', '')\n    str1 = str1.replace('s', '')\n    str1 = str1.replace('H', '')\n    str1 = str1.replace('h', '')\n    str1 = str1.replace('R', '')\n    str1 = str1.replace('r', '')\n    str1 = str1.replace('T', '')\n    str1 = str1.replace('t', '')\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('0', '')\n    str1 = str1.replace('1', '')\n    str1 = str1.replace('2', '')\n    str1 = str1.replace('3', '')\n    str1 = str1.replace('4', '')\n    str1 = str1.replace('5', '')\n    str1 = str1.replace('6', '')\n    str1 = str1.replace('7', '')\n    str1 = str1.replace('8', '')\n    str1 = str1.replace('9', '')\n    return str1"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i == j:\n                continue\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Returns:\n    int: Number of bidirectional tuple pairs found in the list.\n\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each element of the list\n    for i in L:\n        # Check if the element is a multiple of 2 or 3\n        if i % 2 == 0 or i % 3 == 0:\n            # If it is, add it to the sum\n            sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert list to string\n    str_L = str(L)\n    \n    # split string into list of individual integers\n    int_L = list(map(int, str_L.split(',')))\n    \n    # calculate the sum of all integers in list\n    total = sum(int_L)\n    \n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the integers in the list\n    total = 0\n    \n    # iterate through the list and add each integer to the total\n    for num in L:\n        total += num\n        \n    # return the total as the single integer\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the variable to store the sum of all the integers in the list\n    total = 0\n    \n    # Loop through each integer in the list\n    for num in L:\n        # Add the integer to the sum\n        total += num\n        \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty string variable to store the result\n    result = \"\"\n    # loop through the list of integers and append each integer to the result\n    for num in L:\n        result += str(num)\n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result = result * i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert the list to a string\n    L = ''.join(str(x) for x in L)\n    # split the string into a list of digits\n    L = list(map(int, L))\n    # multiply all the digits together\n    result = 1\n    for digit in L:\n        result *= digit\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define regular expression to find adverbs\n    pattern = r'\\b(?:a(?:nd|r(?:ight)?)?|an|the)s\\b'\n    \n    # Use re.search() method to search for the first match\n    match = re.search(pattern, text)\n    \n    # If a match is found, print the adverb and its position\n    if match:\n        adverb = match.group()\n        position = match.start()\n        print('Adverb:', adverb)\n        print('Position:', position)\n    else:\n        print('No adverbs found')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern to match adverbs\n    pattern = r'\\b([A-Z][a-z]+)\\b'\n    # Use the re.findall() method to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n    # Initialize an empty dictionary to store the adverb and its position\n    positions = {}\n    # Loop through all the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # If the adverb is not already in the dictionary, add it with its position\n        if adverb not in positions:\n            positions[adverb] = i\n    # Return the dictionary of adverbs and their positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*ed\\b|\\b\\w*ing\\b|\\b\\w*ly\\b|\\b\\w*ly\\b|\\b\\w*ful\\b|\\b\\w*ful\\b'\n\n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb and its position\n    adverbs = []\n\n    # Loop through the matches and extract the adverb and its position\n    for i, match in enumerate(matches):\n        if match.endswith('ed'):\n            adverb = match[:-2]\n            position = i\n        elif match.endswith('ing'):\n            adverb = match[:-3]\n            position = i\n        elif match.endswith('ly'):\n            adverb = match[:-2]\n            position = i\n        elif match.endswith('ful'):\n            adverb = match[:-3]\n            position = i\n        adverbs.append((adverb, position))\n\n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b([A-Za-z]+)(\\w+)(\\w*)\\b'\n    \n    # Search for the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    \n    # Iterate over the matches and extract the positions of the adverbs\n    for match in matches:\n        if len(match.groups()) == 3:\n            adverb_positions.append((match.start(), match.start()+len(match.group(2))+len(match.group(3))))\n    \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n\n    Args:\n        text (str): The sentence in string format.\n\n    Returns:\n        A tuple containing two lists. The first list contains the adverbs in the sentence, and the second list contains their positions in the sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(?:[a-z]+\\s+)*(?:(?:the|a|an|this|that)\\s+)*(?:an|a|the|this|that)\\b'\n\n    # Use the re.findall() method to find all the matches in the text\n    matches = re.findall(adverb_pattern, text, re.IGNORECASE)\n\n    # Initialize two empty lists to store the adverbs and their positions\n    adverbs = []\n    positions = []\n\n    # Loop through each match and append it to the adverbs and positions lists\n    for i, match in enumerate(matches):\n        if match.lower() in ['the', 'a', 'an', 'this', 'that']:\n            adverbs.append(match)\n            positions.append(i)\n\n    # Sort the positions list in ascending order\n    positions.sort()\n\n    # Return the adverbs and positions lists\n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n\n    # Search for adverbs in the text\n    matches = re.finditer(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Iterate through the matches and find their positions\n    adverbs = []\n    for match in matches:\n        adverb = match.group(1)\n        position = text.find(adverb)\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expressions for finding adverbs\n    pattern1 = r\"\\b([A-Za-z]+)(\\s[A-Za-z]+\\b|\\s)\\b\"\n    pattern2 = r\"\\b(a|an|the)\\s([A-Za-z]+)\\b\"\n    # Find all the matches of pattern1 and pattern2 in the text\n    matches1 = re.findall(pattern1, text)\n    matches2 = re.findall(pattern2, text)\n    # Combine the two matches into a single list of tuples\n    matches = matches1 + matches2\n    # Sort the matches in descending order of their positions\n    matches.sort(key=lambda x: len(x[0]), reverse=True)\n    # Print the adverbs and their positions\n    for match in matches:\n        print(\"Adverb: {} ({})\".format(match[0], match[1]))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(really|really|really)\\b'\n    # Use the re.findall() method to find all occurrences of the pattern in the input text\n    adverbs = re.findall(adverb_pattern, text)\n    # Iterate over all adverbs found and print their position in the input text\n    for index, adverb in enumerate(adverbs):\n        print(f\"{adverb} found at position {index+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the pattern for adverbs\n    pattern = r'\\b(?:to|during|than|until|though|after|before|again|yet|always|most|least|mostly|leastly|seriously|mostly|somewhat|rather|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|actually|just|act"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['very', 'well', 'well-known', 'well-knownly', 'finally', 'finally-ever', 'only', 'just', 'only-a-hint-of', 'only-to', 'only-due-to']\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b')\n    matches = pattern.findall(text)\n    adverb_positions = []\n    for match in matches:\n        index = text.lower().find(match.lower())\n        adverb_positions.append((match, index))\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area using the formula\n    surface_area = 6 * l**2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (2 * l * l * l) + (6 * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    area = 6 * l * l\n    print(\"The surface area of the cube is:\", area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l ** 2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    if len(nums) == 0:\n        return 0\n    else:\n        return count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    pos_nums = array('i')\n    for num in nums:\n        if num > 0:\n            count += 1\n            pos_nums.append(num)\n    return count / len(nums), pos_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    positive_sum = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            positive_sum += num\n    if positive_count == 0:\n        return 0\n    else:\n        return positive_sum / positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n            \n    pos_ratio = pos_count / (pos_count + neg_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [0])\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    if positives.item():\n        ratio = positives.item() / len(nums)\n    else:\n        ratio = 0\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    num_negative = 0\n    \n    for num in nums:\n        if num > 0:\n            num_positive += 1\n        else:\n            num_negative += 1\n    \n    positive_fraction = num_positive / (num_positive + num_negative)\n    \n    return positive_fraction"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos_count.itemset(0, pos_count[0] + 1)\n    return pos_count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create a new array to store only the positive numbers\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    \n    # calculate the positive number count and the sum of all numbers\n    positive_count = len(positive_nums)\n    total_sum = sum(nums)\n    \n    # calculate the ration of positive numbers\n    if total_sum == 0:\n        ration = 0\n    else:\n        ration = positive_count / total_sum\n    \n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    count = 0\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n            count += 1\n    return count / len(positive)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos_count.append(num)\n    return pos_count[1] / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') # initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    largest_num = lst[0]\n    for num in lst:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    largest = -float('inf')  #initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = float('-inf') # initialize variable to store the largest negative number\n    for num in list1:\n        if num < 0 and num > neg_num: # check if the number is negative and is greater than the current largest negative number\n            neg_num = num # update the largest negative number if it's greater than the current largest negative number\n    return neg_num # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest_num = None\n    # Iterate through each element in the list\n    for num in list1:\n        # Check if the current element is negative and if it's greater than the current largest negative number\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    # Return the largest negative number found\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_num = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < 0 and lst[i] > max_num:\n            max_num = lst[i]\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[k:]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(K):\n                if k < len(test_list[i][j]):\n                    test_list[i][j] = test_list[i][j][:k]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        new_list.append(trimmed_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store trimmed tuples\n    trimmed_list = []\n    \n    # loop through each tuple in the given list\n    for tup in test_list:\n        # use slicing to remove the first K elements from the tuple\n        trimmed_tup = tup[K:]\n        # add the trimmed tuple to the new list\n        trimmed_list.append(trimmed_tup)\n    \n    # return the new list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        temp = test_list[i][0:K]\n        temp = tuple(temp)\n        trimmed_list.append(temp)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        trimmed_list.append(i[K:])\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples have different length\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # get the length of the first tuple\n    length_1 = len(test_tup1)\n    # get the length of the second tuple\n    length_2 = len(test_tup2)\n    # check if the two tuples have equal lengths\n    if length_1!= length_2:\n        raise ValueError('The two tuples have different lengths')\n    # initialize a list to store the result\n    result = []\n    # loop through each index in the first tuple and multiply the corresponding element of the second tuple\n    for i in range(length_1):\n        result.append(test_tup1[i] * test_tup2[i])\n    # return the list of results\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty result list\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2)):\n            # Calculate the elementwise product of the two tuples at the current indices\n            product = test_tup1[i] * test_tup2[j]\n            # Append the product to the result list\n            result.append(product)\n    # Return the result list\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the indices of the tuples\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    # return the result list\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Calculate the product of the i-th element of the first tuple and the i-th element of the second tuple\n        product = test_tup1[i] * test_tup2[i]\n        # Append the product to the result tuple\n        result_tup += (product,)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple elements should have same length to perform multiplication\")\n        return\n\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter to count the occurrence of each element in the list in the tuple\n    count = Counter(tup)\n    # Use the counter to count the occurrence of each element in the list\n    count_list = [count[i] for i in lst]\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    res = []\n    for i in count:\n        count_dict = {i: count[i]}\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n        res.append(count_dict)\n    return res"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    This function takes a tuple and a list as inputs and returns a dictionary where the keys are the elements of the list and the values are the number of times each element appears in the tuple.\n    \"\"\"\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Loop through the tuple\n    for elem in tup: \n        # If the element is in the list, increment its count in the dictionary\n        if elem in lst: \n            counts[elem] = counts.get(elem, 0) + 1\n\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary that contains \n    the count of each element of the list in the tuple.\n    '''\n    # create a Counter object from the list\n    count_obj = Counter(lst)\n\n    # create an empty dictionary to store the count\n    count_dict = {}\n\n    # iterate over the elements of the tuple\n    for i in tup:\n        # check if the element is in the list\n        if i in count_obj:\n            # add 1 to the count of the element in the dictionary\n            count_dict[i] = count_obj[i]\n        else:\n            # if the element is not in the list, set the count to 0 in the dictionary\n            count_dict[i] = 0\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    count_dict = dict(count) \n    count_dict.update(Counter(lst)) \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for t in tup:\n        if t in count:\n            count[t] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup)\n    for item in lst: \n        count_dict[item] += 1\n        \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n\n    Parameters:\n    tup (tuple): the tuple whose elements need to be counted.\n    lst (list): the list of elements that need to be counted.\n\n    Returns:\n    dict: a dictionary where the keys are the elements of the tuple and the values are their corresponding occurences in the tuple.\n    \"\"\"\n    # count the occurence of all elements in the list in the tuple\n    count_dict = Counter(tup)\n    \n    # count the occurence of all elements in the list in the list\n    for i in lst:\n        count_dict[i] += 1\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict = {k: count_dict[k] for k in lst if k in count_dict}\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin = 0\n    perrin = 1\n    \n    while perrin <= n:\n        sum_of_perrin += perrin\n        perrin += 2\n        \n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each perrin number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number and add it to the sum\n        perrin_num = (10**(i-1)) + ((2*i-1)**2)\n        sum += perrin_num\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize the sum of perrin numbers to 0\n    sum = 0\n\n    # loop from 1 to n\n    for i in range(1, n+1):\n\n        # calculate the perrin number\n        p = (i * (i + 1)) // 2\n\n        # add the perrin number to the sum\n        sum += p\n\n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_num = 1\n    sum_perrin = 0\n    while perrin_num <= n:\n        sum_perrin += perrin_num\n        perrin_num += 1\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(i+1)*(i+2)//6\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n numbers of the perrin sequence\n    for i in range(1, n+1): \n        # Add the value of the i-th number to the sum\n        sum += i\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of string values and an integer as input,\n    and returns a list of extracted strings. The size of each string is specified by the `length` parameter.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:length])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        extracted_strings.append(l[i][:l[i].find(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts the specified size of strings from the given list of string values.\n    \"\"\"\n    return [word[:size] for word in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract a specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of string values and a number representing the desired size of string.\n    It returns a new list containing the desired size of strings from the original list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    Extracts specified length strings from a list of strings.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == length:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings as input and an integer as the specified size for the extracted strings.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(' '.join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from the given list of string values.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(str[i]) >= size:\n            extracted_strings.append(str[i][:size])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # use the pattern to replace all whitespace characters with an empty string\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n\n    # remove whitespaces using regular expression\n    text = re.sub('\\s+','', text1)\n\n    # remove leading and trailing whitespaces\n    text = text.strip()\n\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespace characters from the string using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    \n    # Return the result\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces from the string\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove whitespaces\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # remove all the whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        loss_amount = actual_cost - sale_amount\n    else: \n        loss_amount = 0\n\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n    else:\n        loss = 0\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_value = sale_amount - actual_cost\n    if loss_value <= 0:\n        return 0\n    else:\n        return loss_value"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # loss percentage\n    loss_percentage = actual_cost / sale_amount\n\n    # calculate loss amount\n    if loss_percentage < 0.1:\n        loss_amount = sale_amount * loss_percentage\n    else:\n        loss_amount = 0\n\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_per = sale_amount/actual_cost\n    if loss_per >= 0.05:\n        loss_amount = 0\n    else:\n        loss_amount = (loss_per*actual_cost) - sale_amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost - sale_amount < 0:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        loss = sale_amount - actual_cost\n        return loss \n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # if i is even, add it to the sum\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum variable\n    total = 0\n    \n    # loop through each even factor from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        # if i is a factor of n, add it to the total\n        if n % i == 0:\n            total += i\n            \n    # return the total\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += i + n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumOfFactors(n): \n    '''\n    This function will find the sum of even factors of a number.\n    '''\n    total_sum = 0  # Initialize sum variable \n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0 and i % 2 == 0:  # Check if number is divisible by i and even number \n            total_sum += i  # Add i to sum \n    return total_sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            sum += i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\w*z\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use the re.search() method to search for the pattern 'z' in the text.\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    # If a match is found, return the word that was matched.\n    if match:\n        return match.group()\n    else:\n        return \"No word found containing 'z'.\""
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bwordz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]*z[a-z]*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog zzz.\"\nresult = text_match_wordz(text)\nprint(result)  # Output: ['zzz']"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        if monthnum2 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum2)\n    if monthnum == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    if monthnum % 2 == 0:\n                        if monthnum % 7 == 1:\n                            return True\n                        else:\n                            return False\n                    else:\n                        if monthnum % 7 == 0:\n                            return True\n                        else:\n                            return False\n                else:\n                    if monthnum % 7 == 0:\n                        return True\n                    else:\n                        return False\n            else:\n                if monthnum % 7 == 0:\n                    return True\n                else:\n                    return False\n        else:\n            if monthnum % 7 == 0:\n                return True\n            else:\n                return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        if monthnum % 7 == 0:\n            return True\n        else:\n            return False\n    elif monthnum % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return \"31 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days\"\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return \"29 days\"\n        else:\n            return \"28 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    \n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum in [2]:\n        return \"28 or 29 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum % 2 == 0:\n        days = 29\n    else:\n        days = 30\n    if monthnum in range(4, 7):\n        days += 1\n    if monthnum in [3, 5, 8, 10]:\n        days += 1\n    if monthnum in range(12, 15):\n        days += 1\n    if monthnum in [4, 6, 9, 11]:\n        days += 1\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if (monthnum2 % 2 == 1):\n                return True\n            else:\n                return False\n        else:\n            if (monthnum2 % 2 == 0):\n                return True\n            else:\n                return False\n    else:\n        if (monthnum2 % 2 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through the list of strings\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    # Return the reversed list of strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and assign the reversed value back to the list\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # sort the list in ascending order\n    lst.sort()\n    # find the minimum length sublist\n    min_length = lst[0]\n    min_sublist = []\n    for i in range(len(lst)):\n        if lst[i] == min_length:\n            min_sublist.append(lst[i])\n        else:\n            break\n    # return the minimum length sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 1000000000\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and finds the sublist with the minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize the minimum length and the index of the minimum length sublist to be None\n    min_len = float('inf')\n    min_idx = None\n    \n    # Iterate through the list of sublists\n    for i in range(len(lst)):\n        # Check if the current sublist has a smaller length than the minimum length\n        if len(lst[i]) < min_len:\n            # Update the minimum length and the index of the minimum length sublist\n            min_len = len(lst[i])\n            min_idx = i\n    \n    # Return the index of the minimum length sublist\n    return min_idx"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0]) \n    min_sublist = lst[0] \n    \n    for i in range(1, len(lst)): \n        if len(lst[i]) < min_length: \n            min_length = len(lst[i]) \n            min_sublist = lst[i] \n    \n    return min_sublist \n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    # initialize a dictionary to store the length of each sublist\n    sublist_len = {}\n\n    # loop through each sublist and update the dictionary\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) in sublist_len:\n                sublist_len[len(sublist)] += 1\n            else:\n                sublist_len[len(sublist)] = 1\n\n    # find the sublist with minimum length\n    min_len = min(sublist_len.keys())\n\n    # find the sublist with that length\n    min_sublist = [lst[i] for i in range(len(lst)) if len(lst[i:i+min_len+1]) == min_len]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_sublist = lst[0]\n    min_len = len(min_sublist)\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_sublist = sublist\n            min_len = len(min_sublist)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_min = lst[0] \n    for i in range(1, len(lst)): \n        if len(lst[i]) < len(sub_min): \n            sub_min = lst[i] \n    return sub_min "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Create an empty dictionary to store the lengths of sublists\n    sublist_lengths = {}\n\n    # Iterate over the sublists in the given list\n    for i in range(len(lst)):\n        # Extract the sublist at position i from the list\n        sublist = lst[i]\n\n        # Check if the sublist length is already in the dictionary\n        if sublist in sublist_lengths:\n            # If it is, increment the count of occurrences\n            sublist_lengths[sublist] += 1\n        else:\n            # If it's not, add the sublist to the dictionary with a count of 1\n            sublist_lengths[sublist] = 1\n\n    # Find the sublist with the minimum length\n    min_length = float('inf')\n    min_sublist = []\n    for sublist, count in sublist_lengths.items():\n        if count < min_length:\n            min_length = count\n            min_sublist = [sublist]\n        elif count == min_length:\n            min_sublist.append(sublist)\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length*breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Iterate over all the substrings in the given string\n    for match in pattern.finditer(str1):\n        # Extract the uppercase substring and append it to a list of lowercase substrings\n        lowercase_substrings.append(match.group(0).lower())\n    # Join the list of lowercase substrings into a single string and return it\n    return ''.join(lowercase_substrings)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    pattern = re.compile(r'[A-Z]+')\n    matches = pattern.findall(str1)\n    \n    # Remove all uppercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Find all the substrings of uppercase letters in the given string\n    uppercase_substrings = re.findall(pattern, str1)\n    \n    # Remove all the uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all uppercase substrings using regex\n    uppercase_substrings = re.findall(r'[A-Z][a-z]+', str1)\n    \n    # iterate over each uppercase substring and replace it with a space\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring,'')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression to match uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    \n    # Iterate through the string and replace any uppercase substrings with empty strings\n    result = uppercase_pattern.sub('', str1)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    '''\n    pattern = re.compile('[A-Z]+', re.IGNORECASE) # to ignore case when matching\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    \n    # Iterate over each substring of the string using the pattern\n    matches = pattern.findall(string)\n    \n    # Remove the uppercase substrings from the original string\n    for match in matches:\n        string = string.replace(match, '')\n    \n    return string"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    '''\n    new_list = []\n    for item in lst:\n        if isinstance(item, list):\n            new_list.append(item[0])\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n    return first_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize a new empty list\n    result = []\n    # iterate through each sublist in the original list\n    for sublist in lst:\n        # get the first element of the sublist and append it to the result list\n        result.append(sublist[0])\n    # return the result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if sublist:\n            res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of sublists\n    result = []\n    \n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Check if the length of the sublist is greater than 0\n        if len(sublist) > 0:\n            # Get the first element of the sublist and append it to the result list\n            result.append(sublist[0])\n            \n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if type(sublist) == list:\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in it.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str = str.lower()\n    # Initialize a counter for upper case characters\n    upper_count = 0\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is uppercase, increment the counter\n        if char.isupper():\n            upper_count += 1\n    # Return the upper case character count\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = tuple(sorted(list1[i:j]))\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            print(\" \".join(list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of elements from a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    combinations = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        first = lst[0]\n        rest = lst[1:]\n        return [first] + combinations_list(rest)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        list2 = list1[1:]\n        return list(combinations_list(list2)) + [list1[0]]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(' '.join(map(str, list1[i:j])), end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combinations.append(lst[i:j])\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 1:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum product subarray\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate over the array and calculate the current product\n    for i in range(len(arr)):\n        current_product *= arr[i]\n\n        # Update the maximum product subarray if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # If the current product is negative, reset it to 1\n        elif current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here*num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    max_so_far = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        if max_so_far > max_product:\n            max_product = max_so_far\n    \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # get the first value from the dictionary\n    value = list(dict.values())[0]\n    # check if all values in the dictionary are same as the first value\n    return all(value == dict[key] for key in dict.keys())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set([dict[key] for key in dict])\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n\n    for key in dict:\n        if dict[key]!= dict[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize count variable to keep track of number of values in the dictionary\n    count = 0\n    \n    # Iterate through the values in the dictionary\n    for value in dict.values():\n        \n        # If we have already seen this value, increment the count\n        if value in dict:\n            count += 1\n        \n        # If we have counted all values, break out of the loop\n        if count == n:\n            break\n    \n    # If we have counted all values, return True\n    if count == n:\n        return True\n    \n    # Otherwise, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    return len(values) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key not in n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # loop through the dictionary\n    for value in dict.values():\n        # if there are any duplicates, return False\n        if len(set(dict.values()))!= len(dict):\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        for i in dict.values():\n            if i!= dict[next(iter(dict))]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_product = float('-inf')\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[0]\n        elif i == 1:\n            dp[i] = max(arr[0], arr[1])\n        else:\n            dp[i] = max(arr[i-1] * arr[i], arr[i-2] * arr[i-1])\n\n        if dp[i] > max_product:\n            max_product = dp[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Find the length of the increasing subsequence with maximum product\n    max_length = 0\n    max_product = float('-inf')\n    for i in range(1, n):\n        # Keep track of the length of the increasing subsequence with maximum product found so far\n        length = 1\n        while i + length < n and arr[i] < arr[i + length]:\n            length += 1\n        if length > max_length:\n            max_length = length\n            max_product = arr[i] * arr[i + length - 1]\n        # Multiply the product with the last element of the increasing subsequence\n        if i + length < n:\n            max_product *= arr[i + length]\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables\n    max_product = arr[0]\n    current_product = arr[0]\n    max_product_before = arr[0]\n\n    # Loop through the array and calculate the maximum product\n    for i in range(1, len(arr)):\n        # If the current element is greater than the current maximum product before the current element, update the maximum product\n        if arr[i] > current_product:\n            current_product = arr[i]\n            max_product_before = max_product\n\n        # Update the maximum product\n        max_product = max(max_product, current_product * max_product_before)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here * arr[i], arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            curr_product = arr[i]\n        else:\n            curr_product = max(arr[i], curr_product*arr[i])\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result with the first two elements of the tuple\n    result = test_tup[0] + test_tup[1]\n    \n    # Loop through the remaining elements of the tuple and add the neighboring elements to the result\n    for i in range(2, len(test_tup)):\n        result += test_tup[i]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    sum_lst = []\n    for i in range(len(test_tup) - 1):\n        sum_lst.append(test_tup[i] + test_tup[i+1])\n    return sum_lst"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) < 2:\n        return None\n\n    for i in range(len(test_tup)-1):\n        test_tup[i] += test_tup[i+1]\n\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    # check if the tuple has an even length\n    if length % 2 == 0:\n        # iterate through the tuple and add pairwise elements\n        for i in range(length-1):\n            test_tup[i] = test_tup[i] + test_tup[i+1]\n    else:\n        # iterate through the tuple and add pairwise elements\n        for i in range(length-2):\n            test_tup[i] = test_tup[i] + test_tup[i+2]\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(x + y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(1, len(test_tup)):\n        pairwise_sum += test_tup[i] - test_tup[i-1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result as 1\n    result = 1\n\n    # Iterate over the array and multiply each element by the result\n    for num in arr:\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product as 1\n    product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Multiply the current element with the product\n        product = (product * arr[i]) % n\n        \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the product of \n    the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]!= l[i+1]+1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1]!= l[i]+1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check if the list is empty\n    if not l:\n        return True\n\n    # check if the first element of the list is 1\n    if l[0] == 1:\n        return False\n\n    # check if the difference between each consecutive pair of elements in the list is 1\n    for i in range(1, len(l)-1):\n        if l[i] - l[i-1]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty or contains only one element\n    if len(l) < 2:\n        return False\n    \n    # Iterate over the list and check if each element is consecutive\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: # if the list has less than or equal to 1 element, it is not consecutive\n        return False\n    \n    for i in range(len(l)-1): # iterate through the list\n        if l[i] + 1 == l[i+1]: # if the current element and the next element are consecutive, return True\n            return True\n    \n    return False # if no consecutive elements are found, return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Using set to remove duplicates from test_list1\n    test_list1 = set(test_list1)\n    # Using set to remove duplicates from test_list2\n    test_list2 = set(test_list2)\n    # Finding intersection of test_list1 and test_list2\n    intersection = test_list1.intersection(test_list2)\n    # Converting the intersection into a list and returning it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list and then convert it to a list.\n    set1 = set(test_list1)\n    list1 = list(set1)\n\n    # Create a set from the second list and then convert it to a list.\n    set2 = set(test_list2)\n    list2 = list(set2)\n\n    # Create an empty list to store the common elements.\n    common_list = []\n\n    # Loop through both lists and append common elements to the common list.\n    for element in list1:\n        if element in list2:\n            common_list.append(element)\n\n    # Convert the common list back to a tuple and return it.\n    return tuple(common_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from test_list2 to ensure uniqueness\n    unique_list2 = set(test_list2)\n\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # loop through test_list1 and check if it's in unique_list2\n    for item in test_list1:\n        if item in unique_list2:\n            intersection.add(item)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set()\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2 and item1 not in result:\n                result.add(item1)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Find the intersection of elements in both lists using set intersection\n    intersection_set = set(test_list1).intersection(set(test_list2))\n    \n    # Convert the set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new tuple list that contains the common elements of both lists.\n    The elements in the two lists are not considered in any particular order.\n    '''\n    # create a set to store the common elements of the two lists\n    common_elements = set(test_list1) & set(test_list2)\n    # create a new tuple list with the common elements\n    result_list = list(common_elements)\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function finds the intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.append(tup1)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set(test_list1) & set(test_list2)\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list\n    set1 = set(test_list1)\n\n    # Create a set from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Creating a dictionary to store the elements of the given list\n    dict1 = {}\n    for element in test_list1:\n        dict1[element] = True\n\n    # Creating another dictionary to store the elements of the other list\n    dict2 = {}\n    for element in test_list2:\n        dict2[element] = True\n\n    # Finding the intersection of the two dictionaries\n    intersection = dict1.keys() & dict2.keys()\n\n    # Converting the intersection list to a tuple\n    result = tuple(intersection)\n\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n        str1: A string that contains characters to be replaced.\n        ch: The character to be replaced.\n        newch: The new character that replaces the old character.\n\n    Returns:\n        A string with the specified character replaced by the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the search character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string and two characters and replaces all occurrences of the first character with the second character.\n\n    Args:\n        str1 (str): The input string.\n        ch (str): The character to be replaced.\n        newch (str): The character that will replace the first character.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    # Convert the input string to a list of characters\n    lst = list(str1)\n\n    # Loop through each character in the list\n    for i in range(len(lst)):\n        # If the current character matches the first character\n        if lst[i] == ch:\n            # Replace the character with the new character\n            lst[i] = newch\n\n    # Convert the list back to a string and return it\n    return \"\".join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Args:\n        str1 (str): The string in which to replace occurrences of the character.\n        ch (str): The character to replace.\n        newch (str): The new character to replace all occurrences of ch with.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into a list of characters\n    lst = list(str1)\n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # If the character matches the specified character, replace it with the new character\n        if lst[i] == ch:\n            lst[i] = newch\n    # Join the list of characters back into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key, value in dict1.items():\n        sorted_dict[value] = sorted_dict.get(value, []) + [key]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Create a new dictionary with the sorted items\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)  # convert the dictionary to a Counter object\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))  # sort the Counter object by value\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = {k:v for k,v in sorted_dict}\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return big_sum([max_num, min_num]) + max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns their sum of the largest and smallest value.\n    '''\n    if len(nums) == 0:\n        return \"Array is empty.\"\n    elif len(nums) == 1:\n        return \"The largest value is \" + str(nums[0]) + \" and the smallest value is \" + str(nums[0])\n    else:\n        max_val = min_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n            elif nums[i] < min_val:\n                min_val = nums[i]\n        return \"The sum of the largest and smallest value is \" + str(max_val + min_val)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # find the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[-1] + nums[-2]\n    \n    # return the sum of the largest and smallest values\n    return largest_sum, smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initializing variables to store the largest and smallest values\n    smallest = nums[0]\n    largest = nums[0]\n    # looping through the array to find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    # returning the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    max_num = float('-inf')\n    min_num = float('inf')\n    # Loop through the array and update the max and min values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Initialize variables to store the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    # Loop through the array and update the largest and smallest values\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    # Calculate and return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # find the largest value in the array\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    \n    # find the smallest value in the array\n    min_val = nums[0]\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n    \n    # return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    return lower_case_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    return string.lower() == string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = re.compile(r'\\b\\w{3,}\\b')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # replace all lowercase substrings with empty string\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # remove all lowercase substrings from the given string\n    str1 = re.sub(pattern, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.sub() method to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression to match lowercase substrings\n    lowercase_pattern = re.compile(r'[a-z]+')\n    \n    # Find all lowercase substrings in the given string\n    lowercase_substrings = lowercase_pattern.findall(str1)\n    \n    # Remove all lowercase substrings from the given string\n    for substr in lowercase_substrings:\n        str1 = str1.replace(substr, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regex pattern for matching lowercase substrings\n    pattern = r'[a-z]+'\n    # use the re.findall() function to find all the lowercase substrings in the string\n    lowercase_substrings = re.findall(pattern, str1)\n    # loop through all the lowercase substrings found and remove them from the original string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0:\n        if n % 10 == 0:\n            return 0\n        else:\n            n = n // 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an argument and returns its first digit.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to string\n    str_n = str(n)\n    # get the first character of the string\n    first_char = str_n[0]\n    # convert the first character to integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n // 1000 % 10  # dividing by 10^3 and taking the last digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    # Return the first digit of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n\n    Args:\n        n (int): The number whose first digit is to be found.\n\n    Returns:\n        int: The first digit of the input number.\n\n    \"\"\"\n    # Convert the input number to a string\n    num = str(n)\n\n    # Find the first digit of the string and return it as an integer\n    first_digit = int(num[0])\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # initialize a variable to store the first digit of the number\n    first_digit = None\n    \n    # loop through each digit in the number\n    while n >= 10:\n        # calculate the remainder of n divided by 10\n        remainder = n % 10\n        # if the remainder is 0, it means n has no more digits, so exit the loop\n        if remainder == 0:\n            break\n        # if the remainder is not 0, set the first_digit variable to the remainder and exit the loop\n        else:\n            first_digit = remainder\n            break\n    \n    # return the first_digit variable\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialize a new list to store the odd numbers\n    odd_list = []\n    # loop through each number in the input list\n    for num in list:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if it is, add it to the odd list\n            odd_list.append(num)\n    # return the odd list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(n+1)])\n\n    # calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate sum of cubes of first n natural numbers\n    cubes = sum([i**3 for i in range(n+1)])\n    \n    # Calculate sum of first n natural numbers\n    sum_n = sum(range(1,n+1))\n    \n    # Find the difference between the two sums\n    diff = cubes - sum_n\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables to hold the sum of cubes and the sum of natural numbers\n    cube_sum = 0\n    nat_sum = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        cube_sum += i*i*i\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        nat_sum += i\n    \n    # Find the difference between the two sums\n    diff = cube_sum - nat_sum\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Sum of cubes of first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n\n    # Sum of first n natural numbers\n    sum_sum = sum(range(1, n+1))\n\n    # Difference between the two sums\n    difference = abs(cube_sum - sum_sum)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculate the sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # calculate the difference between the two sums\n    difference = sum_cubes - sum_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    cubes = [x**3 for x in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    # calculate the sum of the first n natural numbers\n    natural_numbers = [x for x in range(1, n+1)]\n    sum_natural_numbers = sum(natural_numbers)\n\n    # calculate the difference between the two sums\n    diff = sum_cubes - sum_natural_numbers\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(n+1))\n    sum_of_natural = sum(range(n+1))\n    return sum_of_cubes - sum_of_natural\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    # function to calculate the sum of cubes\n    def cube_sum(n):\n        return n*(n+1)*(2*n+1)/6\n    \n    # function to calculate the sum of natural numbers\n    def sum_natural(n):\n        return n*(n+1)/2\n    \n    # function to find the difference between sum of cubes and sum of natural numbers\n    def diff(n):\n        return cube_sum(n) - sum_natural(n)\n    \n    # return the difference between sum of cubes and sum of natural numbers\n    return diff(n)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two arrays A and N as input and returns the count of odd pairs in A that have an xor value between 1 and N.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1 and xor_val <= N:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function counts the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    xor_value = 0\n    count = 0\n\n    for i in range(N):\n        xor_value ^= A[i]\n        if xor_value % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = xor_sum - (A[i] + A[j])\n            if xor_diff % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        xor_value = A[i] ^ A[i+1]\n        if xor_value % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is uppercase and toggle it to lowercase if it is\n        if char.isupper():\n            modified_string += char.lower()\n        # Check if the character is lowercase and toggle it to uppercase if it is\n        elif char.islower():\n            modified_string += char.upper()\n        # If the character is neither uppercase nor lowercase, leave it unchanged\n        else:\n            modified_string += char\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_string = ''\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            modified_string += char.upper()\n        # If the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            modified_string += char.lower()\n        # Otherwise, leave the character unchanged\n        else:\n            modified_string += char\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # initialize the sum of differences to 0\n    diff_sum = 0\n    \n    # loop through each character in both strings\n    for i in range(len(n1_str)):\n        # get the corresponding digits of the two numbers\n        n1_digit = int(n1_str[i])\n        n2_digit = int(n2_str[i])\n        \n        # calculate the difference between the digits and add it to the sum\n        diff = abs(n1_digit - n2_digit)\n        diff_sum += diff\n        \n    # return the total sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    # Calculate the per-digit difference between the two numbers\n    diff_sum = 0\n    for i in range(len(n1_list)):\n        diff_sum += abs(int(n1_list[i]) - int(n2_list[i]))\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        distance += abs(int(digit1) - int(digit2))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        digit1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        digit2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        distance += abs(digit1 - digit2)\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both integers to strings and split them into lists of digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = list(num1_str)\n    num2_list = list(num2_str)\n\n    # calculate the sum of the differences between the two lists of digits\n    sum_diff = 0\n    for i in range(len(num1_list)):\n        diff = abs(int(num1_list[i]) - int(num2_list[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_distance = 0\n    for i in range(10):\n        digit_diff = abs(n1 // 10 ** i - n2 // 10 ** i)\n        total_distance += digit_diff ** 2\n    return total_distance ** 0.5"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = abs(n1)\n    num2 = abs(n2)\n    num_sum = 0\n    \n    # Calculate the sum of the absolute differences for each digit of the numbers\n    for i in range(10):\n        num1_digit = num1 % 10\n        num2_digit = num2 % 10\n        difference = abs(num1_digit - num2_digit)\n        num_sum += difference\n        num1 //= 10\n        num2 //= 10\n    \n    return num_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n    \n    # count the number of digits in the absolute difference\n    num_digits = len(str(diff))\n    \n    # calculate the sum of the per-digit differences\n    per_digit_diff = sum([abs(n1 % 10 - n2 % 10) for i in range(num_digits)])\n    \n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the two numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    \n    # initialize the sum of differences to zero\n    diff_sum = 0\n    \n    # iterate through the digits of the two numbers\n    for i in range(len(num1_str)):\n        # subtract the corresponding digits of the two numbers\n        diff = int(num1_str[i]) - int(num2_str[i])\n        \n        # add the difference to the sum of differences\n        diff_sum += diff\n    \n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings to be able to use string manipulation functions\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize a variable to store the sum of the per-digit differences\n    digit_diff_sum = 0\n\n    # Loop through each digit in both numbers\n    for i in range(len(n1_str)):\n        digit_diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        digit_diff_sum += digit_diff\n\n    # Return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 0:\n        return 0\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"The size of the sublist should not be greater than the length of the list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size, len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - size // 2:\n            current_sum -= a[i - size // 2]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n            \n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(len(arr) - size + 1):\n        current_sum = 0\n        for j in range(i, i+size):\n            current_sum += arr[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    return arr[start:start+size], max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if i >= size - 1:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum -= arr[i - size + 1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    if len(a) < size:\n        return None\n\n    max_sum = a[0]\n    current_sum = max_sum\n\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to remove duplicates and sort the resulting list\n    result = sorted(set(test_tup1 + test_tup2))\n    return result"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples\n    union = test_tup1 + test_tup2\n    # sort the union in ascending order\n    union.sort()\n    # output the sorted union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples by converting them to sets and then converting them back to lists\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    \n    # Sort the union list in ascending order\n    union_list.sort()\n    \n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Create a set from the combined list\n    set_from_list = set(combined_list)\n\n    # Convert the set back to a tuple and sort it\n    sorted_tuple = tuple(sorted(set_from_list))\n\n    # Return the sorted tuple\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set() to convert the tuples to sets, which automatically removes duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Use the union() method to combine the sets\n    union_set = set1.union(set2)\n    # Convert the resulting set back to a tuple and sort it\n    union_tuple = tuple(sorted(union_set))\n    return union_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the union elements\n    print(\"Union of the elements:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # merge the two tuples into one\n    merged_tup = test_tup1 + test_tup2\n    \n    # sort the merged tuple in ascending order\n    sorted_tup = sorted(merged_tup)\n    \n    # output the sorted tuple\n    print(sorted_tup)\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the given tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the two sets\n    union = set1.union(set2)\n    # convert the set back into a list and sort the list\n    sorted_union = sorted(list(union))\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        max_length = 0\n        for j in range(i, len(lst)):\n            if lst[j] in lst[i:j+1]:\n                max_length = max(max_length, j-i+1)\n        longest_sublist.append(max_length)\n    return max(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = j-i+1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Create an empty list to store the lengths of sublists\n    max_lengths = []\n\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Initialize the length of the current sublist\n        current_length = 0\n\n        # Iterate through each element in the current sublist\n        for element in sublist:\n            # Increment the length of the current sublist\n            current_length += 1\n\n            # Check if the current sublist is longer than the current maximum length\n            if current_length > max_lengths[-1] if max_lengths else current_length:\n                # If it is, append the new length to the list of maximum lengths\n                max_lengths.append(current_length)\n\n    # Return the length of the longest sublist\n    return max(max_lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j-i+1 > max_length:\n                max_length = j-i+1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp = 0\n\n    for i in lst:\n        temp += 1\n        if temp > max_length:\n            max_length = temp\n        if len(i) > max_length:\n            max_length = len(i)\n        if max_length == len(lst):\n            break\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if j-i+1 > max_len:\n                max_len = j-i+1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"([^\"]*)\"' # regex pattern for extracting values between quotes\n    values = re.findall(pattern, text) # find all the matches in the given text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotes\n    pattern = r'(\".*?\"|\\'.*?\\')'\n    # Use the pattern to find all occurrences of quotes in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the extracted values\n    values = []\n    # Iterate over the matches and extract the values\n    for match in matches:\n        # If the match is a string, extract its value\n        if isinstance(match, str):\n            # Remove the quotes from the beginning and end of the value\n            value = match[1:-1]\n            # Add the value to the list of extracted values\n            values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"(?<=\\\")([\\w\\s]+?)(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=^|\")(?:(?=(?:[^\"]*\")){2})*[^\"]*(?=\")'\n    result = re.findall(pattern, text, re.MULTILINE)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # Define regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    \n    # Use re.findall() to extract all the matches of the pattern in the text\n    values = re.findall(pattern, text)\n    \n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to find all matches of pattern '(?<=\")([^\"]+)(?=\")' in text\n    values = re.findall(r'(?<=\")([^\"]+)(?=\")', text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    # Initialize two counters\n    counter1 = 0\n    counter2 = 0\n\n    # Traverse the array and compare adjacent elements\n    for i in range(n):\n        if i % 2 == 0:\n            # If the element is even, increment the counter1\n            counter1 += 1\n        else:\n            # If the element is odd, increment the counter2\n            counter2 += 1\n\n    # Return the sum of the counters\n    return counter1 + counter2"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i]!= arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # split the word into a list of characters\n    characters = list(word)\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of its characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and then loop over each character\n    total = 0\n    for digit in str(n):\n        # convert each character to an integer and add it to the total\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize a variable to store the sum of digits\n    total = 0\n\n    # loop through each digit of the integer\n    while n > 0:\n        # add the last digit to the total\n        total += n % 10\n\n        # remove the last digit from the integer\n        n //= 10\n\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Convert the integer to a string\n    num_str = str(n)\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the sum\n        sum += int(char)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n = -n # Convert negative number to positive number for easier summation\n    digit_sum = 0 # Initialize sum of digits to 0\n    while n > 0:\n        digit_sum += n % 10 # Add the last digit of the number to the sum\n        n //= 10 # Remove the last digit from the number\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of n as a list of integers\n    digits = [int(d) for d in str(n)]\n    # Use a loop to add up the digits\n    sum_ = 0\n    for d in digits:\n        sum_ += d\n    # Return the sum\n    return sum_"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize a variable to store the sum of the digits\n    sum = 0\n    # Loop over the digits and add them to the sum variable\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the first element is smaller than the second element\n    if list1[0] > list1[1]:\n        return False\n\n    # Check if the list is sorted recursively\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, \n    False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if len(lst) == 0:\n        return True\n    \n    # Initialize a variable to keep track of the current element\n    current = lst[0]\n    \n    # Loop through the rest of the list\n    for i in range(1, len(lst)):\n        # If the current element is greater than the next element\n        if lst[i] > current:\n            return False\n        # Update the current element\n        current = lst[i]\n    \n    # If the loop completes without returning False, then the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list and returns True if it is sorted in ascending order,\n    and False otherwise. The list is assumed to be sorted in ascending order.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n        list1[i] = sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # replace the original sublist with the sorted sublist\n        list1[list1.index(sublist)] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Define an empty list to store unique numbers\n    unique_nums = []\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not in the unique_nums list, append it to the list\n            if num not in unique_nums:\n                unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for sublist in nums:\n        unique_sublist = list(set(sublist))\n        unique_nums.extend(unique_sublist)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert list to set to remove duplicates\n    unique_nums = list(set(nums))\n    # sort the list in ascending order\n    unique_nums.sort()\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty set to store the unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # Add each number to the set only if it hasn't already been added\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store the counts of numbers\n    num_counts = {}\n    for num in nums:\n        # if the number is not in the dictionary, add it with a count of 1\n        if num not in num_counts:\n            num_counts[num] = 1\n        # if the number is already in the dictionary, increment its count by 1\n        else:\n            num_counts[num] += 1\n    \n    # create a new list to store the unique numbers\n    unique_nums = []\n    # loop through the counts dictionary\n    for num, count in num_counts.items():\n        # if the count is 1, add the number to the unique_nums list\n        if count == 1:\n            unique_nums.append(num)\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store the unique numbers\n    unique_nums = {}\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n    # Return the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # create a set to store unique elements\n    unique_nums = set()\n\n    # iterate through each list in the input list\n    for lst in nums:\n        # add each element in the list to the set\n        unique_nums.update(lst)\n\n    # create a new list containing unique elements\n    unique_list = []\n\n    # iterate through each element in the set and add it to the new list\n    for num in unique_nums:\n        unique_list.append(num)\n\n    # return the new list\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n\n    # iterate through each list in the nums parameter\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # add the number to the set only if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # create a new list with the unique numbers\n    new_list = []\n    for num in unique_nums:\n        new_list.append(num)\n\n    return new_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Create a set from the list of data\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # remove duplicates\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers from the list_data\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_numbers = set()\n    # Loop through the list and add unique numbers to the set\n    for num in list_data:\n        unique_numbers.add(num)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculating the surface area using the formula\n    surface_area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 3.14 * r * h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * pi * r * h  # pi is a mathematical constant defined in Python"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder with radius r and height h.\n    \"\"\"\n    return 2*math.pi*r**2 + 2*math.pi*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder\n    h (float): The height of the cylinder\n\n    Returns:\n    area (float): The surface area of the cylinder\n\n    \"\"\"\n    area = (2*3.14159265359*(r**2 + h**2))\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * r * h + 2 * r * r\n    volume = (3 * r ** 2) / 4\n    surface_area = area + volume\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and checks whether A is a sublist of B.\n\n    Parameters:\n    A (list): The first list to be checked.\n    B (list): The second list to be checked.\n\n    Returns:\n    (bool): True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    # Check if both lists have the same length\n    if len(A)!= len(B):\n        return False\n\n    # Loop through the first list and check if each element is present in the second list\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if not A or not B: \n        return False \n\n    n = len(A) \n    m = len(B) \n\n    # Initialize two pointers, one for each list \n    i = 0 \n    j = 0 \n\n    # Traverse both lists simultaneously \n    while i < n and j < m: \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1 \n            j = 0 \n\n    if j == m: \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n\n    if not len(B) <= len(A):\n        return False\n\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A in B:\n        return True\n    elif len(A) < len(B):\n        for i in range(len(A)):\n            if A[:i+1] in B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    i,j = 0,0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    \n    # Check if all elements of A are present in B\n    for i in A:\n        if i not in B:\n            return False\n    \n    # Check if all elements of B are present in A\n    for i in B:\n        if i not in A:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        A = sorted(A)\n    else:\n        B = sorted(B)\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if i == len(A) or A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return False \n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n\n    return True "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return i == len(A)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Finding the factorial of n using recursion\n    def factorial_helper(num, result=1): \n        if num == 0: \n            return result \n        else: \n            return factorial_helper(num-1, num*result) \n\n    # Calculating the last digit of factorial of n\n    factorial = factorial_helper(n) \n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        last_digit = n % 10\n        factorial = 1\n        for i in range(1, last_digit+1):\n            factorial *= i\n        return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    while n > 0:\n        last_digit = n % 10\n        n = n // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the last digit of the factorial to 0\n    last_digit = 0\n    \n    # Loop through each number from 1 to n and multiply it with the factorial\n    for i in range(1, n+1):\n        last_digit += i*factorial(i)\n    \n    # Return the last digit of the factorial\n    return last_digit\n\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    # Initialize the factorial to 1\n    factorial = 1\n    \n    # Loop through each number from 1 to n and multiply it with the factorial\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Return the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize the last digit to 0\n    last_digit = 0\n    \n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Calculate the last digit of the factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return int(str(n)[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # extract the last digit\n    last_digit = int(num_str[-1])\n    # find the factorial of the number without the last digit\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n    # return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize a variable to store the factorial of n\n    factorial = 1\n    \n    #find the factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n    \n    #convert the factorial to a string and get the last digit\n    last_digit = str(factorial)[-1]\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer as input and finds the last digit of its factorial.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # loop through the digits of the factorial\n    while n > 0:\n        # extract the last digit of the factorial\n        last_digit = n % 10\n        # loop through the digits of the factorial again to reverse it\n        for i in range(10, 0, -1):\n            n = n // i\n        # multiply the last digit with the factorial to get the next factorial digit\n        n = n * last_digit\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the shortest list\n    min_length = min(len(list1), len(list2), len(list3))\n    # Create an empty list to store the final result\n    result = []\n    # Iterate over the shortest list\n    for i in range(min_length):\n        # Add the i-th element of each list to the result list\n        result.append(list1[i] if i < len(list1) else None)\n        result.append(list2[i] if i < len(list2) else None)\n        result.append(list3[i] if i < len(list3) else None)\n    # Append any remaining elements of the shortest list to the result list\n    result += list1[min_length:]\n    result += list2[min_length:]\n    result += list3[min_length:]\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    # Loop through each element in the first list\n    for element in list1:\n        # Append the element to the interleaved list\n        interleaved_list.append(element)\n        # Check if there is a corresponding element in the other two lists\n        if element in list2 and element in list3:\n            # If there is, append the corresponding element from list2 or list3\n            interleaved_list.append(list2.index(element))\n            interleaved_list.append(list3.index(element))\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single flat list that interleaves all three lists together.\n\n    Args:\n        list1 (list): The first list to be interleaved.\n        list2 (list): The second list to be interleaved.\n        list3 (list): The third list to be interleaved.\n\n    Returns:\n        list: A single flat list containing all three input lists interleaved.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    \"\"\"\n\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1: list of integers\n    list2: list of integers\n    list3: list of integers\n\n    Returns:\n    list of integers: A single flat list that interleaves list1, list2, and list3.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must be of equal length.\")\n    else:\n        flat_list = list1 + list2 + list3\n        return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine all the lists into a single list using a list comprehension\n    flat_list = [num for sublist in [list1, list2, list3] for num in sublist]\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): A list of integers.\n    list2 (list): A list of integers.\n    list3 (list): A list of integers.\n\n    Returns:\n    list: A single list that contains the elements of list1, list2, and list3 in the order specified.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elements.append(elem1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Use set() to convert the tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the common elements in the sets\n    common_elements = set1.intersection(set2)\n\n    # Find the dissimilar elements by subtracting the common elements from both sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n\n    # Return the dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.add(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # Use a set to store the common elements in both tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n\n    # Use a set to store the dissimilar elements in both tuples\n    dissimilar_elements = set(test_tup1).difference(set(test_tup2))\n\n    # Use a set to store the dissimilar elements in the first tuple\n    dissimilar_elements_in_first_tuple = set(test_tup1).difference(common_elements)\n\n    # Use a set to store the dissimilar elements in the second tuple\n    dissimilar_elements_in_second_tuple = set(test_tup2).difference(common_elements)\n\n    # Combine the three sets to get the dissimilar elements\n    dissimilar_elements = dissimilar_elements.union(dissimilar_elements_in_first_tuple)\n    dissimilar_elements = dissimilar_elements.union(dissimilar_elements_in_second_tuple)\n\n    # Convert the sets to a list and sort them in ascending order\n    dissimilar_elements = sorted(list(dissimilar_elements))\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = set(test_tup1) - common_elements\n    dissimilar_elements |= set(test_tup2) - common_elements\n    dissimilar_elements = list(dissimilar_elements)\n    dissimilar_elements.sort()\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the elements of the two tuples\n    tup1 = test_tup1[1:]\n    tup2 = test_tup2[1:]\n    # Create a set of the elements in both tuples\n    set1 = set(tup1)\n    set2 = set(tup2)\n    # Find the elements that are present in only one of the tuples\n    dissimilar_set = set1.symmetric_difference(set2)\n    # Convert the set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set(test_tup1) - set(test_tup2)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # define a helper function to check if a tuple element is even\n    def is_even(x):\n        if isinstance(x, (int, float)):\n            return x % 2 == 0\n        else:\n            return all(is_even(y) for y in x)\n\n    # iterate over the tuple elements and apply the even_fnc to each even element\n    even_list = []\n    for elem in test_tuple:\n        if is_even(elem) and isinstance(elem, tuple):\n            even_list.append(even_fnc(elem))\n        elif is_even(elem):\n            even_list.append(even_fnc(elem))\n\n    # return the even elements of the mixed tuple\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize an empty list to store the even elements\n    even_list = []\n    \n    # loop through each element in the nested tuple\n    for ele in test_tuple:\n        # check if the element is even\n        if even_fnc(ele):\n            # if it is, append it to the even_list\n            even_list.append(ele)\n    \n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize empty even_list\n    even_list = []\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # check if the element is even\n        if even_fnc(element):\n            # if the element is even, append it to the even_list\n            even_list.append(element)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for element in test_tuple:\n        if even_fnc(element):\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        elif isinstance(i, list):\n            new_tuple.append(even_fnc(i))\n        elif isinstance(i, dict):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a new empty list to store even elements\n    even_list = []\n    # loop through each element in the nested mixed tuple\n    for i in test_tuple:\n        # if the element is even, append it to the even_list\n        if even_fnc(i):\n            even_list.append(i)\n    # return the even_list as the output\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Iterate through the nested tuple and apply the even_fnc to each element\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.append(item)\n\n    # Return the new tuple with even elements removed\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # create a new list to store even elements\n    even_list = []\n\n    # loop through each element in the test_tuple\n    for element in test_tuple:\n\n        # check if the element is an iterable\n        if hasattr(element, '__iter__'):\n\n            # if the element is a list or tuple, recursively call the function on the element\n            if isinstance(element, (list, tuple)):\n                even_list.extend(even_fnc(element))\n            # if the element is a single value, check if it is even using the even_fnc function\n            else:\n                if even_fnc(element):\n                    even_list.append(element)\n        # if the element is not an iterable, check if it is even using the even_fnc function\n        else:\n            if even_fnc(element):\n                even_list.append(element)\n\n    # return the even elements in a tuple\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface_area = 2 * base * height + 2 * base * base + 2 * height * height\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (base * height) + ((base * height) ** 2) + ((base * height) ** 3) + ((base * height) ** 4) + ((base * height) ** 5) + ((base * height) ** 6) + ((base * height) ** 7) + ((base * height) ** 8) + ((base * height) ** 9)\n    surface_area = area / 2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base area\n    base_area = b * b\n    # Calculate the total area of the pyramid\n    pyramid_area = 4 * base_area + 2 * b * s + s * s\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of a square using the formula A = (base edge)^2\n    A = b**2\n    \n    # Calculate the area of the base of the pyramid using the formula B = s * A\n    B = s * A\n    \n    # Calculate the area of the pyramid using the formula A = B + (B/3)\n    A = B + (B/3)\n    \n    # Return the surface area of the pyramid\n    return A"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid by using Heron's formula\n    A = (b*s)/2\n    print(\"The surface area of the pyramid is:\", A)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    area_base = b * b\n    # calculate the area of the sides\n    area_sides = b * s\n    # calculate the area of the whole pyramid\n    area_pyramid = area_base + area_sides\n    # calculate the surface area of the pyramid\n    surface_area = 2 * area_pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of each side of the pyramid\n    side_area = 2 * b\n    # add the surface area of each side to the surface area of the pyramid\n    pyramid_area = side_area * s\n    \n    # return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two arguments, b (base edge) and s (height), and returns the surface area of a square pyramid.\n    '''\n    area = (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (b*s) + (s*s) + (b*b)\n    print(\"Surface Area of a square pyramid:\", surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)*2 # calculate the area of the base and side\n    perimeter = (2*b)+((b*s)**2)**0.5 # calculate the perimeter of the pyramid\n    surface_area = (area*perimeter)/2 # calculate the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n\n    Args:\n    dict1 (dict): The dictionary to check if empty\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Check if input is valid\n    if num < 0:\n        return None\n\n    # Calculate nth catalan number\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num*catalan_number(num-1))/(catalan_number(num-2) + catalan_number(num-2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * catalan_number(n // 2)\n    else:\n        return catalan_number(n - 1) // 2 + 1"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n + 1):\n            result += catalan_number(i) * catalan_number(n - i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    catalan_numbers = [0, 1]\n\n    for i in range(2, num+1):\n        catalan_numbers.append(sum([catalan_numbers[j] * catalan_numbers[i-j-1] for j in range(i)]))\n\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1)) ** (n - 1) / (math.factorial(2 * n - 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n\n    >>> catalan_number(5)\n    25\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return (4 * catalan_number(n-1) - catalan_number(n-2)) // (n-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num+1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for matching adverbs ending with \"ly\"\n    pattern = r'\\b([a-z]+)\\b\\s*(ly)\\b\\s*(in|on)\\b'\n\n    # Use the regular expression to find all non-overlapping matches in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Return a list of tuples, where each tuple contains the adverb, its starting position in the text, and the ending position\n    return [(m[0], m.start(), m.end()) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-zA-Z]*ly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern for finding adverbs ending with ly\n    pattern = r'\\b[aeiou]\\w*ly\\b'\n    # Use re.findall() method to find all non-overlapping matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n    # Create a list of tuples containing adverbs and their positions in the string\n    adverbs = []\n    for i, match in enumerate(matches):\n        adverbs.append((match, text.find(match)))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Use re.findall() method to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # If matches are found, return a list of tuples containing the adverb and its position\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n\n    # If no matches are found, return an empty list\n    return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        adverb, pos = matches[0]\n        pos_end = pos + len(adverb)\n        return adverb, pos, pos_end\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n\n    # Use the re.search() method to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb ending with \"ly\" and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regex pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    # Use re.findall() to find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Print the list of matches and their positions in the input string\n    for match in matches:\n        print(f'Found \"{match}\" at index {text.index(match)}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples where each tuple contains the adverb ending with ly and its starting and ending positions in the string. If no adverb ending with ly is found, the function returns an empty list.\n    '''\n    pattern = r'\\bly\\b'\n    adverbs = re.findall(pattern, text)\n    return [(adverb.lower(), text.lower().find(adverb.lower()), text.lower().rfind(adverb.lower()) + len(adverb)) for adverb in adverbs]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match the adverb ending with \"ly\"\n    pattern = r'(?<![a-zA-Z])(?=[a-zA-Z])ly(?![a-zA-Z])'\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are matches, return a list of tuples with the positions of the matches and the adverb ending with \"ly\"\n    if matches:\n        return [(m.start(), m.end()) for m in matches]\n    # If there are no matches, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'(?<![a-z])(?<![0-9])\\bly\\b(?![a-z])(?<![0-9])'\n    # Use the regular expression pattern to search for adverbs in the given text\n    matches = re.finditer(pattern, text)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Iterate over the matches and append their positions to the list\n    for match in matches:\n        positions.append(match.start())\n    # Return the list of positions of the adverbs ending with 'ly'\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns a list of the n most expensive items in the given dataset.\n    '''\n    # Create a min heap from the n least expensive items\n    min_heap = [heapq.heappushpop(min_heap, (-item[1], item[0])) for item in items][:n]\n    \n    # Convert the heap to a list of (item, price) pairs\n    expensive_items_list = [(-price, item) for price, item in min_heap]\n    \n    return expensive_items_list"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the items\n    heapq.heapify(items)\n\n    # Get the n most expensive items\n    result = []\n    while n > 0:\n        result.append(heapq.heappop(items))\n        n -= 1\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappushpop(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, and a number n, find the n most expensive items.\n    \"\"\"\n    # Sort the items in decreasing order based on their value\n    heapq.heapify(items)\n    # Pop the top n items from the heap\n    result = [heapq.heappop(items) for _ in range(n)]\n    # Return the result as a list\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize a min-heap with the first n items in the dataset\n    heap = [item for item in items[:n]]\n    # compare the smallest n items with each remaining item in the dataset\n    for item in items[n:]:\n        # if the current item is cheaper than the smallest item in the heap,\n        # remove the smallest item from the heap and add the current item to the heap\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n        # if the current item is not cheaper than the smallest item in the heap,\n        # simply add the current item to the heap\n        else:\n            heapq.heappush(heap, item)\n    # return the n items in the heap (which are the n most expensive items)\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a number n as input. It returns a list of the n most expensive items in the dataset.\n    \n    Args:\n    items (list): A list of items to be sorted.\n    n (int): The number of items to be returned.\n    \n    Returns:\n    list: A list of the n most expensive items in the dataset.\n    \"\"\"\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    \n    # Initialize a dictionary to store the price of each item\n    item_prices = {}\n    \n    for item in items:\n        # If the item is not already in the dictionary, add it with a price of 0\n        if item not in item_prices:\n            item_prices[item] = 0\n        \n        # Update the price of the item in the dictionary\n        item_prices[item] += 1\n        \n        # Add the item to the min heap if its price is less than or equal to the smallest item in the heap\n        if not min_heap or item_prices[item] <= min_heap[0][1]:\n            heapq.heappush(min_heap, (item, item_prices[item]))\n        \n        # If the min heap has more than n items, remove the item with the highest price from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Extract the n most expensive items from the min heap and return them\n    return [item for item, price in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    # loop through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # if the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize the heap with the first n items\n    heap = [(-price, item) for price, item in items[:n]]\n    \n    # use heapq to add the remaining items to the heap\n    for price, item in items[n:]:\n        heapq.heappush(heap, (-price, item))\n    \n    # return the n most expensive items from the heap\n    return [price for price, _ in heap[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first = l[:n]\n    second = l[n:]\n\n    # Add the first part to the end\n    combined = first + second\n\n    return combined"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return []\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Invalid input.\")\n    else:\n        split_list = l[:n]\n        first_part = l[n:]\n        l = first_part + split_list\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than n\n    if len(l) < n:\n        print(\"List should have at least\", n, \"elements\")\n        return\n    # check if the length of the list is equal to n\n    elif len(l) == n:\n        print(\"List should have at least\", n, \"elements\")\n        print(\"The list is already split\")\n        return\n    else:\n        # split the list at the nth element\n        mid = len(l)//2\n        first_half = l[:mid]\n        second_half = l[mid:]\n        # add the first half to the end of the second half\n        new_list = first_half + second_half\n        # return the new list\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List should have at least\", n, \"elements\"\n    else:\n        lst = l[:n]\n        lst.append(l[n:])\n        return lst"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n <= 0:\n        print(\"Invalid input. n should be a positive integer\")\n        return\n    \n    # Split the list into two parts at the nth index\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Concatenate the two parts and return the result\n    result = first_part + second_part\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create an empty list to store the new elements\n    new_list = []\n    # Iterate over the elements of the list\n    for i in range(n):\n        # Add the i-th element to the new list\n        new_list.append(l[i])\n    # Add the rest of the elements to the new list\n    for i in range(n, len(l)):\n        new_list.append(l[i])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[:n] + l[n:]\n    return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return second_part + first_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns a tuple\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple using the tuple() function\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Initialize variables to hold the largest and smallest values in the list\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # Loop through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Return the difference between the largest and smallest values in the list\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the difference between the two numbers\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store perfect squares\n    perfect_squares = []\n    \n    # Loop through numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = num ** 0.5\n        # If it is, append it to the list of perfect squares\n        if square == int(square):\n            perfect_squares.append(num)\n            \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize the list to store perfect squares\n    perfect_squares_list = []\n    # loop through all numbers from a to b\n    for i in range(a, b+1):\n        # check if the number is a perfect square\n        if i**2 == i:\n            # if it is, append it to the list of perfect squares\n            perfect_squares_list.append(i**2)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through all possible values of 'c' between 'a' and 'b'\n    for c in range(a, b+1):\n        # Check if the square of 'c' is equal to the sum of the squares of 'a' and 'b'\n        if c**2 == a**2 + b**2:\n            print(f\"{a} + {b} = {c}\")"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        for j in range(i):\n            if i**2 == j**2:\n                result.append(i)\n                break\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i ** 0.5 ** 2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == perfect_square(num):\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a:\n            print(i)\n        elif i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = int(i*i)\n        if square == i*i:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(int(a**0.5)+1):\n        if num*num == a:\n            return num\n        elif num*num == b:\n            return num-1\n    return None"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(phi)\n    y_rect = r * cmath.sin(phi)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2) # calculate the distance from origin\n    phi = cmath.phase(x + y*1j) # calculate the angle from x-axis\n    theta = cmath.phase(x + y*1j) # calculate the angle from y-axis\n    \n    return r*cmath.cos(theta), r*cmath.sin(theta) # return the rectangular coordinates"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    x' = r*cmath.cos(phi)\n    y' = r*cmath.sin(phi)\n    return (x', y')"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n\n    return x_rect.real, y_rect.real"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radial coordinate (distance from origin).\n    theta (float): The angular coordinate (angle from x-axis).\n\n    Returns:\n    x (float): The rectangular x coordinate.\n    y (float): The rectangular y coordinate.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"Error: List should have at least 2 elements.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Define the index of the first and last elements of the list\n    i = 0\n    j = len(newList)-1\n\n    # Interchange the first and last elements of the list\n    newList[i], newList[j] = newList[j], newList[i]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    # defining the size of the list\n    size = len(newList)\n    \n    # checking if the list has at least two elements\n    if size >= 2:\n        # swapping the first and last elements\n        newList[0], newList[size-1] = newList[size-1], newList[0]\n        \n        # printing the new list\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list should have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    \n    firstElement = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = firstElement\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List has less than two elements\")\n        return None\n    \n    # interchange first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return newList\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Get the length of the list\n    length = len(newList)\n\n    # If the length is less than 2, return the original list\n    if length < 2:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two arguments n and k, where n is the number of elements in the sequence and k is the number of consecutive elements to be summed.\n\n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_ = 0\n    for i in range(n-k+1):\n        term = 1\n        for j in range(k):\n            term *= (i+j)/(j+1)\n        sum_ += term\n    return sum_"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(k, n+1): \n        sum = sum * i \n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nresult = binomial_Coeff(n,k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables to store the sum and product of binomial co-efficients\n    sum_b = 0\n    product_b = 1\n\n    # Loop through the first k terms of the binomial series\n    for i in range(1,k+1):\n        # Calculate the binomial coefficient i.k.\n        binomial_i_k = nCr(n,i)\n        # Multiply the current product with the binomial coefficient\n        product_b *= binomial_i_k\n        # Add the current binomial coefficient to the sum of binomial coefficients\n        sum_b += binomial_i_k\n\n    # Return the sum of binomial coefficients\n    return sum_b\n\n\ndef nCr(n,r): \n    '''\n    Calculate the binomial coefficient nCr.\n    '''\n    # Check if r is less than or equal to n-r\n    if r > n-r:\n        r = n-r\n    # Use the formula for the binomial coefficient\n    return math.factorial(n)/(math.factorial(r)*math.factorial(n-r))\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize sum to zero\n    sum = 0\n\n    # Iterate from k to n\n    for i in range(k, n+1):\n        # Calculate the binomial coefficient\n        bin_coeff = (n-k+1) * factorial(k) // factorial(n-k) // factorial(i-k)\n\n        # Add the binomial coefficient to the sum\n        sum += bin_coeff\n\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes in two integer arguments n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to 0\n    sum_product = 0\n\n    # Initialize the binomial coefficient to 1\n    binomial = 1\n\n    # Loop through all the values of k from 0 to n-k\n    for i in range(k, n+1):\n\n        # Calculate the binomial coefficient for the current value of k\n        binomial = (binomial * (n-i+1)) // i\n\n        # Add the current binomial coefficient to the sum_product\n        sum_product += binomial\n\n    # Return the sum_product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            result += i * j\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the first n numbers from 0 to n-k\n    for i in range(n):\n        # Calculate the binomial coefficient and add to the sum variable\n        sum += binom_coeff(n, i, k)\n    # Return the sum\n    return sum\n\ndef binom_coeff(n, i, k):\n    \"\"\"\n    Calculate the binomial coefficient of n choose k.\n    \"\"\"\n    # Base case: if k is 0, return 1\n    if k == 0:\n        return 1\n    # Base case: if k is greater than n-i, return 0\n    elif k > n - i:\n        return 0\n    # Recursive case: calculate the binomial coefficient using the formula (n choose k) = (n choose (k-1)) * (k choose i)\n    else:\n        return binom_coeff(n, k - 1, i) * binom_coeff(n, k, i)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return (1/2) * k\n    else:\n        sum = 0\n        for i in range(k, n+1):\n            sum += binomial_Coeff(n-1, i-1)\n        return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = re.compile(r'^(\\d+\\.){3}\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from ip address\n    ip = re.sub(r'^(0+)([1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.){2}(0+)([1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', r'\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # replace leading zeroes with 'x'\n    ip = re.sub(r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+', 'x' * len(ip), ip)\n    # replace leading zeroes with '.'\n    ip = re.sub(r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+', '.' * len(ip), ip)\n    # remove leading zeroes from the first octet\n    ip = re.sub(r'^(\\d+):', r'\\1', ip)\n    # remove leading zeroes from the last octet\n    ip = re.sub(r':(\\d+)$', r'\\1', ip)\n    # remove leading and trailing zeroes\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$', '', ip)\n    # remove leading and trailing dots\n    ip = re.sub(r'^(\\d+\\.){3}\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define the regular expression pattern for an IP address\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    \n    # Check if the input string matches the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet of the IP address\n        ip = ''.join(octet.lstrip('0') for octet in ip.split('.'))\n        # If the resulting IP address is empty, set it to None\n        if ip == '':\n            ip = None\n        # Return the cleaned IP address\n        return ip\n    else:\n        # If the input string does not match the pattern, return the original string\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address\n    ip = re.sub(r'^\\s*(0\\.0\\.0\\.0|0\\.0\\.0|0\\.0|0)\\s*$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip = re.sub(r'^(0+)', '', ip)\n    # remove leading zeros from the entire string\n    ip = re.sub(r'^(0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern to match leading zeroes\n    pattern = r'^0+(\\d{1,3}\\.){2}\\d{1,3}$'\n    # Use re.match() method to match the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from ip address\n        ip = ip.lstrip('0')\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        diff = even_num - odd_num\n        print(diff)\n    elif even_num % 2 == 1 and odd_num % 2 == 0:\n        diff = odd_num - even_num\n        print(diff)\n    else:\n        print(\"Both numbers should be even or odd.\")"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n            if count == 1:\n                even_number = list1[i]\n        else:\n            count = 0\n            if count == 0:\n                odd_number = list1[i]\n    return abs(even_number - odd_number)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even = abs(first_even - num)\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd = abs(first_odd - num)\n    return first_even, first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if i > 0:\n                return list1[i] - list1[i-1]\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = num - even\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = num - odd\n\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n        elif num % 2 == 1:\n            count -= 1\n    return count"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    if even_num is None or odd_num is None:\n        return \"None\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n    return odd - even"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    # Initialize minimum number of swaps as infinity\n    min_swaps = float('inf')\n    # Iterate through all possible swaps\n    for i in range(len(bin1)):\n        # Swap the ith bits of both binary strings\n        bin1_new = bin1[:i] + bin1[i+1:]\n        bin2_new = bin2[:i] + bin2[i+1:]\n        # Calculate the difference between the new binary strings\n        diff = int(bin1_new, 2) - int(bin2_new, 2)\n        # Check if the difference is less than minimum number of swaps so far\n        if diff < min_swaps:\n            min_swaps = diff\n    # Return the minimum number of swaps found\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Args:\n    str1: A binary string\n    str2: Another binary string\n\n    Returns:\n    int: The minimum number of swaps required to convert str1 to str2.\n\n    \"\"\"\n    # Convert the input strings to binary and find their lengths\n    len1 = len(bin(int(str1, 2))[2:])\n    len2 = len(bin(int(str2, 2))[2:])\n\n    # If one of the strings is shorter than the other, swap the strings so that the longer string is in the rightmost position\n    if len1 < len2:\n        str1, str2 = str2, str1\n\n    # Initialize variables to store the number of swaps required and the count of swaps\n    swaps = 0\n    count = 0\n\n    # Iterate over each digit of str1 and str2 and compare them\n    for i in range(len1):\n        # If the digits are not equal, swap them and increment the swaps count\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps += 1\n            count += 1\n\n    # If the strings are equal, the swaps required is 0\n    if count == 0:\n        return swaps\n\n    # If the swaps required is less than 2^n-1, add 1 to the count\n    if swaps < (1 << len1) - 1:\n        count += 1\n\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Compare the binary numbers\n    i = 0\n    j = 0\n\n    while i < len(bin1) or j < len(bin2):\n        if i == len(bin1):\n            if int(bin2[j]) == 1:\n                count += 1\n            j += 1\n        elif j == len(bin2):\n            if int(bin1[i]) == 1:\n                count += 1\n            i += 1\n        elif int(bin1[i]) > int(bin2[j]):\n            count += 1\n            j += 1\n        else:\n            count += 1\n            i += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    str1 = int(str1, 2)\n    str2 = int(str2, 2)\n    n = max(len(str1), len(str2))\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(n, -1, -1):\n        for j in range(i, -1, -1):\n            if j < n:\n                dp[i][j] = dp[i+1][j]\n            else:\n                if i < len(str1):\n                    if str1[i-1] == '1':\n                        dp[i][j] = dp[i+1][j] + 1\n                    else:\n                        dp[i][j] = dp[i+1][j]\n                else:\n                    dp[i][j] = dp[i+1][j]\n    return dp[0][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    str1 = int(str1, 2)\n    str2 = int(str2, 2)\n\n    n = len(str1)\n    m = len(str2)\n\n    # Create a dictionary to store the edges between two binary strings\n    edges = {}\n    for i in range(2**n):\n        for j in range(2**m):\n            if i & j == i:\n                edges[(i,j)] = edges.get((i,j), 0) + 1\n\n    # Initialize the distance array as all nodes with infinite distance\n    dist = [float('inf')] * (2**n)\n\n    # Initialize the predecessor array as empty list for each node\n    pred = [None] * (2**n)\n\n    # Set the distance of node 0 to 0 and add it to the queue\n    dist[0] = 0\n    pred[0] = None\n    queue = [(0, None)]\n\n    while queue:\n        u, parent = queue.pop(0)\n\n        # If the dequeued node is the destination node, break the loop\n        if u == str2:\n            break\n\n        # For each edge (u,v) connected to the dequeued node\n        for v, w in edges.get((u,None), ()):\n            # Set the distance of node v to the minimum of the distance of node u and distance of node v plus the weight of the edge (u,v)\n            d = dist[u] + w\n\n            # Add node v to the queue and set its predecessor as the dequeued node\n            if d < dist[v]:\n                dist[v] = d\n                pred[v] = u\n                queue.append((v, u))\n\n    # If the algorithm did not find a negative cycle, then the shortest path exists\n    if dist[str2]!= float('inf'):\n        # Find the shortest path from node 0 to the destination node\n        path = [str2]\n        u = str2\n        while pred[u] is not None:\n            path.append(u)\n            u = pred[u]\n\n        # Reverse the path to get the correct order of nodes\n        path = path[::-1]\n\n        # Count the minimum number of swaps required to convert str1 to str2\n        swaps = 0\n        for i in range(n):\n            if str1 >> i & 1 == 1:\n                if path[i]!= str2 >> i & 1:\n                    swaps += 1\n\n        return swaps\n\n    # If the algorithm found a negative cycle, then the shortest path does not exist\n    else:\n        return -"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # create an empty dictionary to store the frequency of characters in str1\n    freq_dict = {}\n    # loop through str1 and count the frequency of each character\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # loop through str2 and subtract the frequency of each character in str1\n    for char in str2:\n        if char in freq_dict:\n            freq_dict[char] -= 1\n    \n    # initialize a counter for the minimum number of swaps\n    min_swaps = float('inf')\n    # loop through the frequency dictionary and add up the absolute values of all the values\n    for count in freq_dict.values():\n        min_swaps = min(min_swaps, count)\n    \n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # initialize the 2D table with zeros\n    table = [[0]*10 for i in range(10)]\n\n    # iterate over all possible binary numbers from 0 to 1 in both the strings\n    for i in range(2):\n        for j in range(2):\n            # check if the current binary number is 0\n            if i == j == 0:\n                table[i][j] = 0\n            # check if the current binary number is 1\n            elif i == j == 1:\n                table[i][j] = 0\n            # check if the current binary number is 01\n            elif i == 0 and j == 1:\n                table[i][j] = 0\n            # check if the current binary number is 10\n            elif i == 1 and j == 0:\n                table[i][j] = 0\n            # check if the current binary number is 11\n            elif i == 1 and j == 1:\n                table[i][j] = 1\n            # check if the current binary number is 00\n            elif i == 0 and j == 0:\n                table[i][j] = 1\n                \n    # fill the table using dynamic programming approach\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                for l in range(2):\n                    for m in range(2):\n                        for n in range(2):\n                            for o in range(2):\n                                for p in range(2):\n                                    for q in range(2):\n                                        for r in range(2):\n                                            for s in range(2):\n                                                for t in range(2):\n                                                    for u in range(2):\n                                                        for v in range(2):\n                                                            for w in range(2):\n                                                                for x in range(2):\n                                                                    for y in range(2):\n                                                                        for z in range(2):\n                                                                            # convert the binary number to the string representation\n                                                                            binary_str = str(i*16+j*4+k*2+l*1+m*8+n*4+o*2+p*1+q*8+r*4+s*2+t*1+u*8+v*4+w*2+x*1+y*8+z)\n                                                                            reverse_binary_str = str(t*16+b'\\x80'.decode('hex')+r*4+b'\\x80'.decode('hex')+s*2+b'\\x80'.decode('hex')+t*1+b'\\x80'.decode('hex')+u*8+v*4+w*2+x*1+y*8+z)\n\n                                                                            # calculate the number of swaps required to convert the first number to the second number\n                                                                            count = 0\n                                                                            count += binary_str.count('0')\n                                                                            count += binary_str.count('1')\n                                                                            count -= str1.count('0')\n                                                                            count -= str1.count('1')\n\n                                                                            table[i][j] = min(table[i][j],table[i][j]+count)\n\n    # find the minimum number of swaps required to convert the first binary number to the second binary number\n    min_swaps = table[0][0]\n\n    # return"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for i in range(n+1)]\n    \n    # Create a matrix to store the count of swaps required to convert each binary number to the other\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == '1' and str2[j-1] == '0':\n                dp[i][j] = dp[i-1][j] + 1\n            elif str1[i-1] == '0' and str2[j-1] == '1':\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n    \n    # Find the minimum number of swaps required to convert the first binary number to the second binary number\n    min_swaps = dp[n][n]\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the input strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    \n    # Find the lengths of the two binary strings\n    n1 = len(binary1)\n    n2 = len(binary2)\n    \n    # Initialize the variables to store the number of swaps and the maximum number of swaps\n    swaps = 0\n    max_swaps = 0\n    \n    # Initialize the variable to store the number of non-matching bits\n    diff = 0\n    \n    # Iterate through the strings from the right to the left\n    for i in range(max(n1, n2) - 1, -1, -1):\n        # If the two strings have different bits, increment the number of non-matching bits\n        if binary1[i]!= binary2[i]:\n            diff += 1\n        # If the two strings have matching bits, calculate the number of swaps required\n        else:\n            # If the number of non-matching bits is even, increase the number of swaps\n            if diff % 2 == 0:\n                swaps += 1\n            # If the number of non-matching bits is odd, set the maximum number of swaps\n            else:\n                max_swaps = max(max_swaps, swaps)\n            # Reset the number of non-matching bits to zero\n            diff = 0\n            \n    # If the number of non-matching bits is odd, set the maximum number of swaps\n    if diff % 2 == 1:\n        max_swaps = max(max_swaps, swaps)\n    \n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Convert both the strings into binary form\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Initialize a dictionary to store the frequency of each element in binary form\n    freq = {}\n    for i in range(n):\n        if bin1[i] in freq:\n            freq[bin1[i]] += 1\n        else:\n            freq[bin1[i]] = 1\n\n    # Iterate over the elements of the second binary string and update their frequency count\n    for i in range(n):\n        if bin2[i] in freq:\n            freq[bin2[i]] -= 1\n        else:\n            freq[bin2[i]] = -1\n\n    # Count the number of swaps required to convert the binary strings\n    swaps = 0\n    for i in freq:\n        while freq[i] < 0:\n            freq[i] += 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the given tuple to bytes\n    byte_string = bytearray(tuple_list)\n    # Calculate the size in bytes\n    size = len(byte_string) * sys.getsizeof(byte_string[0])\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize a variable to store the size of the tuple\n    size = 0\n    \n    # iterate over the tuple elements\n    for element in tuple_list:\n        # calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n        # add the size to the total size of the tuple\n        size += element_size\n    \n    # return the total size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Create a byte array to store the tuple size\n    byte_array = bytearray(sys.getsizeof(tuple_list))\n\n    # Iterate through the tuple and append each element to the byte array\n    for i in range(len(tuple_list)):\n        byte_array.append(tuple_list[i])\n\n    # Return the size of the tuple in bytes\n    return byte_array"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    while i < n1:\n        return arr1[i]\n        i += 1\n    while j < n2:\n        return arr2[j]\n        j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j, result = 0, 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == result:\n                return arr1[i]\n            result += 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == result:\n                return arr2[j]\n            result += 1\n            j += 1\n        else:\n            if k == result:\n                return arr1[i]\n            result += 1\n            i += 1\n            j += 1\n\n    if k == result:\n        return arr1[i]\n    elif k == result + 1:\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n\n    i = 0\n    j = 0\n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize two pointers i and j to 0, len(arr1)-1 and len(arr2)-1 respectively.\n    i = 0\n    j = len(arr2) - 1\n\n    # Initialize the result to 0.\n    result = 0\n\n    # While i is less than len(arr1) and j is less than k, we continue to find the kth element.\n    while i < len(arr1) and j >= 0:\n\n        # If arr1[i] is smaller than arr2[j], we increment i and result by 1.\n        if arr1[i] < arr2[j]:\n            i += 1\n            result += 1\n\n        # If arr1[i] is greater than arr2[j], we decrement j and result by 1.\n        else:\n            j -= 1\n            result += 1\n\n    # If i is less than len(arr1) and k is equal to 0, we return arr1[i] as kth element.\n    if i < len(arr1) and k == 0:\n        return arr1[i]\n\n    # If k is equal to 0, we return None as there is no kth element.\n    elif k == 0:\n        return None\n\n    # If i is less than len(arr1) and k is greater than 0, we return None as there is no kth element.\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    result = []\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        result.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        result.append(arr2[j])\n        j += 1\n\n    return result[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays `arr1` and `arr2` and a value `k` and returns the kth smallest element from the two arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    while i < n1:\n        if k == 1:\n            return arr1[i]\n        else:\n            k -= 1\n            i += 1\n\n    while j < n2:\n        if k == 1:\n            return arr2[j]\n        else:\n            k -= 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters:\n    arr1 - A list of integers that is the first sorted array.\n    arr2 - A list of integers that is the second sorted array.\n    k - An integer that represents the position of the element that we want to find in the sorted arrays.\n    \n    This function returns the kth element from the given two sorted arrays.\n    \n    The time complexity of this function is O(n), where n is the total number of elements in the two arrays.\n    \"\"\"\n    i = j = 0 # Initialize two pointers i and j to the beginning of the arrays\n    while i < len(arr1) and j < len(arr2): # While both arrays have not been exhausted, continue\n        if arr1[i] < arr2[j]: # If arr1[i] is smaller, move the pointer i to the next element\n            i += 1\n        else: # Otherwise, move the pointer j to the next element\n            j += 1\n        if i == k: # If we have reached the kth element in arr1, return arr1[i]\n            return arr1[i-1]\n        elif j == k: # If we have reached the kth element in arr2, return arr2[j]\n            return arr2[j-1]\n    return None # If we have not reached the kth element, return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                j += 1\n        k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and an integer k as input and returns the kth element of the two arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    result = None\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                result = arr1[i]\n                break\n            else:\n                i += 1\n                k -= 1\n        else:\n            if k == 1:\n                result = arr2[j]\n                break\n            else:\n                j += 1\n                k -= 1\n\n    if k == 1:\n        return result\n    elif k > 1:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Returns the kth smallest element from two sorted arrays.\n    \"\"\"\n    i = j = 0  # indices to traverse arr1 and arr2\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # the element at arr1[i] is equal to the element at arr2[j],\n            # so we increment both indices to get the next smallest element\n            i += 1\n            j += 1\n\n    # at this point, either i == len(arr1) or j == len(arr2),\n    # so either the kth smallest element is the last element of arr1\n    # or the kth smallest element is the last element of arr2\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        temp = n\n        total = 0\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        return n == total\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong(num):\n        print(num, \"is an Armstrong number\")\n    else:\n        print(num, \"is not an Armstrong number\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    num = number\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    # initialize sum to 0\n    sum = 0\n    \n    # convert the number to a list\n    num_list = [int(digit) for digit in str(number)]\n    \n    # iterate over the list of digits in the number\n    for digit in num_list:\n        # add the digit to the sum\n        sum += digit**len(num_list)\n    \n    # if the sum is equal to the original number, return True\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a number is an Armstrong number or not.\n    \"\"\"\n    n = str(n)\n    sum = 0\n    temp = n\n    while len(temp) > 0:\n        digit = int(temp[-1])\n        sum += digit ** len(temp)\n        temp = temp[:-1]\n    return n == str(sum)\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, and False otherwise.\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n    result = 0\n    for digit in digits:\n        result += digit ** len(digits)\n    return result == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # get the number of digits in the number\n    num_digits = len(str(number))\n    \n    # calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    for digit in str(number):\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n    \n    # check if the sum of the cubes is equal to the original number\n    if sum_of_cubes == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the given number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # calculate the sum of the cubes of the digits\n    cube_sum = sum(digit ** 3 for digit in digits)\n    # compare the sum with the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(num)\n\n    # initialize the sum of the digits of the given number\n    num_sum = 0\n\n    # loop through the digits of the given number\n    for digit in num_str:\n        # add the current digit to the sum\n        num_sum += int(digit)\n\n    # return True if the given number is an Armstrong number, else return False\n    return num_sum == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Get the length of the string\n    length = len(num_str)\n    # Initialize the sum of the digits to 0\n    digit_sum = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add to the sum\n        digit_sum += int(digit) ** length\n    # Return whether the sum is equal to the original number\n    return digit_sum == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a given number is an Armstrong number or not\n    \"\"\"\n    if n < 10:\n        return False\n    sum_of_powers = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_powers += digit ** 3\n        temp //= 10\n    return n == sum_of_powers"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize variables\n    sum = 0\n    count = 0\n    avg = 0\n\n    # Calculate sum and count of numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Calculate average\n    avg = sum / count\n\n    # Return sum and average\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize sum and count to zero\n    total = 0\n    count = 0\n    \n    # Calculate the sum and count of the first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n        \n    # Calculate the average\n    average = total / count\n    \n    # Return the sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    total_sum = sum(sum_list)\n    average = total_sum / number\n    return total_sum, average\n\nn = int(input(\"Enter the value of n: \"))\ntotal_sum, average = sum_average(n)\nprint(\"The sum of the first\", n, \"natural numbers is:\", total_sum)\nprint(\"The average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers and add each to sum\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # Calculate and return the average\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"Sum: \", sum)\n    print(\"Average: \", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    # initialize variables to store sum and average\n    sum = 0\n    count = 0\n    # iterate through the numbers from 1 to n\n    for i in range(1, number+1):\n        # add each number to the sum\n        sum += i\n        # increment the count variable\n        count += 1\n    # calculate the average\n    average = sum/count\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2==0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(f\"{n} is Even\")\n    else :\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}  # create an empty dictionary to store character counts\n    \n    # loop through the string and update the character count dictionary\n    for char in str1:\n        if char in char_count:  # if the character is already in the dictionary\n            char_count[char] += 1  # increment its count by 1\n        else:\n            char_count[char] = 1  # if the character is not in the dictionary, add it with a count of 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char  # return the first repeated character\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in freq_dict:\n            return char\n        # Otherwise, update its frequency in the dictionary\n        else:\n            freq_dict[char] = 1\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first repeated character\n    for char, count in freq_dict.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n    \n    # find the first repeated character\n    for char in str1:\n        if freq_dict[char] == 2:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary again and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through the string and increment the count for each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character that appears more than once in the string\n    for char in str1:\n        if char_freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, it returns None.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and count the frequency of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables for character and count\n    char = ''\n    count = 0\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the current character is the same as the previous character\n        if char == str1[count]:\n            # increment the count\n            count += 1\n        else:\n            # if the count is greater than 1, return the current character\n            if count > 1:\n                return char\n            # reset the count\n            count = 0\n            \n    # if the loop completes without returning a character, return an empty string\n    return ''"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the character with the highest frequency\n    max_freq = max(freq.values())\n    for char, freq_count in freq.items():\n        if freq_count == max_freq:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if i == max(lucid_numbers + [i]):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n < 2:\n        return []\n\n    lucid_numbers = [2]\n    next_lucid_number = 3\n\n    while next_lucid_number <= n:\n        lucid_numbers.append(next_lucid_number)\n        next_lucid_number += 2\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2, 3]\n    while lucid[-1] < n:\n        lucid.append(lucid[-1] ** 2 + 2 * lucid[-1] + 1)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n):\n        for j in range(i+1):\n            if i * i + j * j == n:\n                lucid_numbers.append(i * i + j * j)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if all(int(digit)**2 == i for digit in str(i)):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store lucid numbers\n    lucid_list = []\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n\n        # Check if the number is a lucid number by checking if it is a prime number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_list.append(i)\n\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n <= 1:\n        return []\n\n    lucid_numbers = [2]\n    current_number = 3\n\n    while current_number <= n:\n        lucid_numbers.append(current_number)\n        current_number += 2\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [2]\n    count = 1\n    \n    while True:\n        lucid_numbers.append(lucid_numbers[-1] + count)\n        count += 1\n        \n        if lucid_numbers[-1] > n:\n            break\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # initialize an empty list to store lucid numbers\n    lucid_numbers = []\n\n    # loop through all integers from 1 to n\n    for i in range(1, n + 1):\n\n        # loop through all integers from 1 to i-1\n        for j in range(1, i):\n\n            # check if i is a lucid number by checking if j divides i\n            if i % j == 0:\n                break\n        else:\n            # if i is not divisible by any number from 1 to i-1, then it is a lucid number\n            lucid_numbers.append(i)\n\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words together with spaces and return\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words\n    reversed_words = [word[::-1] for word in words] # Reverse each word using slicing\n    return''.join(reversed_words) # Join the reversed words back together using the'' separator"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # loop through the words and reverse each one\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of the words\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    return \" \".join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words\n    words.reverse() # Reverse the order of the words\n    return''.join(words) # Join the words back into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    reversed_s = \" \".join(words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number,\n    False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number,\n    False otherwise. The function calls the is_prime() function to check if the input\n    number is prime or not.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks whether a given integer is a prime number or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    A function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        first_match = matches[0]\n        start_index = text.find(first_match)\n        end_index = start_index + len(first_match)\n        return first_match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern_obj = re.compile(pattern)\n\n    # Search for the pattern in the text\n    match = pattern_obj.search(text)\n\n    if match:\n        # Return the matched subtring, start index, and end index\n        return match.group(), match.start(), match.end()\n    else:\n        # Return None if the pattern is not found\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    # Otherwise, extract the substrings, start and end indices and return them as a list\n    else:\n        return [(m, text.index(m), text.index(m) + len(m)) for m in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index, and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept on the couch.\"\npattern = r'\\b[a-z]+\\b'\n\nresult = find_literals(text, pattern)\n\nprint(\"Found literals:\")\nfor match in result:\n    print(f\"Match: {match}, Start index: {result.index(match)}, End index: {result.index(match) + len(match) - 1}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        first_match = matches[0]\n        start = text.find(first_match)\n        end = start + len(first_match)\n        return first_match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.index(match)\n            end_index = start_index + len(match)\n            return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    # function to calculate nth bell number\n    def bell(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 2*bell(n-1) - bell(n-2)\n\n    # calling the bell function and returning the result\n    return bell(n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    elif n % 2 == 0: \n        return 2 * bell_Number(n//2) \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize bell number and count as 0\n    bell_num = 0\n    count = 0\n    # Check if n is greater than or equal to 0\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        # Check if n is even or odd\n        if n % 2 == 0:\n            # If n is even, initialize count to n/2\n            count = n // 2\n            # Iterate from 0 to count-1\n            for i in range(0, count):\n                # Add 2^i to bell number\n                bell_num += (2**i)\n        else:\n            # If n is odd, initialize count to (n-1)/2\n            count = (n - 1) // 2\n            # Iterate from 0 to count-1\n            for i in range(0, count):\n                # Add 2^i to bell number\n                bell_num += (2**i)\n            # Add 2^(count) to bell number\n            bell_num += 2**(count)\n    # Return bell number\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_nums = [0, 1] # initialize with 0 and 1 as first two bell numbers\n    for i in range(2, n):\n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2]) # generate bell numbers using recurrence relation\n    return bell_nums[n-1] # return the nth bell number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (bell_Number(n-1) - bell_Number(n-2))\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** n - 1\n\nprint(bell_Number(4))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n//2) * 2\n    else:\n        return bell_Number((n-1)//2) + bell_Number((n-1)//2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Removing the k'th element\n    list1.pop(L-1)\n    # Returning the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L == 1:\n        return []\n    elif L > len(list1):\n        return None\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return \"List too small.\"\n    else:\n        result = [x for i, x in enumerate(list1) if i < L-1]\n        return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return []\n    \n    k = L-1\n    \n    if k < len(list1)//2:\n        list1 = list1[:k] + list1[k+1:]\n    else:\n        list1 = list1[k+1:] + list1[:k]\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_value:\n                max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    rows = len(test_list)\n\n    # Initialize the max value and its index to None\n    max_val = None\n    max_idx = None\n\n    # Loop through the matrix and find the max value and its index\n    for i in range(rows):\n        if i == 0:\n            # First row, so set the max value to the first element of the column and its index to 0\n            max_val = test_list[i][N-1]\n            max_idx = N-1\n        else:\n            # Check if the current element is greater than the current max value and its index\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n                max_idx = N-1\n\n    # Return the max value and its index\n    return max_val, max_idx"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_value:\n                max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists\")\n\n    # check if the input has at least 1 row\n    if not test_list:\n        raise ValueError(\"Input must have at least 1 row\")\n\n    # check if N is a valid input\n    if N < 1:\n        raise ValueError(\"N must be a positive integer\")\n\n    # get the number of rows in the matrix\n    rows = len(test_list)\n\n    # check if N is valid input for the number of rows in the matrix\n    if N > rows:\n        raise ValueError(\"N must be less than or equal to the number of rows in the matrix\")\n\n    # find the index of then'th column\n    for i, row in enumerate(test_list):\n        if len(row) == N:\n            col_index = i\n            break\n\n    # check if then'th column exists\n    if col_index is None:\n        raise ValueError(\"N'th column does not exist in the matrix\")\n\n    # find the maximum value in then'th column\n    max_value = max(test_list[row][col_index] for row in range(rows))\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(max(row[N-1], key=lambda x: x))\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    n = len(test_list)\n    for i in range(n):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_val to the first element in the first row of the matrix\n    max_val = test_list[0][0]\n    # loop through all the rows of the matrix\n    for i in range(1, len(test_list)):\n        # if the current element is greater than max_val, update max_val\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    # Check if N is a valid input\n    if N > num_cols or N < 1:\n        return \"Invalid input. N must be between 1 and the number of columns in the matrix.\"\n    # Initialize the max to the first value in the first row\n    max_val = test_list[0][0]\n    # Loop through the matrix and update the max_val if the value in then'th column is greater than the current max_val\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N:\n            continue\n        max_value = max(max_value, sum(row[i] for row in test_list))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the matrix to a numpy array\n    import numpy as np\n    np_array = np.array(test_list)\n    \n    # Get the maximum value of then'th column in the array\n    max_value = np.max(np_array[:,N-1])\n    \n    # Convert the max value back to a float and return it\n    return float(max_value)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        sub_list = lst[i]\n        merged_list.append([sub_list[0], sub_list[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        result.append([first, second])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    return [[lst[0][0], lst[1][0]], [lst[0][1], lst[1][1]]]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append([sublist[0], sublist[1]])\n    return new_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum with the first element of the list\n    cumulative_sum = test_list[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, len(test_list)):\n        # Add the current element to the cumulative sum\n        cumulative_sum += test_list[i]\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n\n    # loop through each element in the list\n    for element in test_list:\n        # check if the element is a tuple\n        if isinstance(element, tuple):\n            # if it is a tuple, loop through each element in the tuple\n            for sub_element in element:\n                # add the sub_element to the cumulative sum\n                cumulative_sum += sub_element\n        else:\n            # if it's not a tuple, simply add the element to the cumulative sum\n            cumulative_sum += element\n\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # iterate through each element of the list\n    for item in test_list:\n        # add the current element to the cumulative sum\n        cum_sum += item\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cumulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values present in it.\n    \"\"\"\n    # initialize the cumulative sum to 0\n    cumulative_sum = 0\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # add each value in the tuple to the cumulative sum\n        cumulative_sum += tup\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cumulative_sum = []\n\n    # iterate over the tuple list and add the current value to the cumulative sum\n    for i in test_list:\n        cumulative_sum.append(i[0])\n\n    # iterate over the tuple list and add the cumulative sum of the previous values to the current value\n    for i in range(1, len(test_list)):\n        test_list[i][0] += cumulative_sum[i-1]\n\n    # return the cumulative sum of all the values in the tuple list\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store average values\n    avg_list = []\n    # iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize sum variable to zero\n        sum = 0\n        # iterate over each value in the tuple and add it to the sum variable\n        for val in tup:\n            sum += val\n        # calculate the average of the tuple and append it to the avg_list\n        avg_list.append(sum / len(tup))\n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num)/len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple) / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    count = 0\n    for num_tuple in nums:\n        total_sum += sum(num_tuple)\n        count += 1\n    average_list = []\n    for i in range(len(nums)):\n        average_list.append(total_sum/count)\n        total_sum = 0\n        count = 0\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages for each tuple\n    avg_list = []\n    \n    # Iterate through the tuples in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the average_list\n        avg_list.append(avg)\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # perform element-wise modulo\n    result_tup = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must be of the same length.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both the tuples should have same length!\")\n        return\n    \n    # perform element wise modulo\n    modulo_tup = tuple((x % y for x, y in zip(test_tup1, test_tup2)))\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of the same length\")\n        return\n\n    # Perform element wise modulo using list comprehension\n    modulo_tup = [x % y for x, y in zip(test_tup1, test_tup2)]\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    x = 0\n    y = 0\n    \n    while y < steps:\n        jumps += 1\n        x += 1\n        y = x * d\n        \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    if steps <= 0 or d <= 0:\n        return 0\n    \n    # Initialize variables\n    jumps = 0\n    i = 0\n    j = 0\n    k = 0\n    \n    # Check for the number of jumps required to reach the desired point\n    while i < steps and j >= 0:\n        i += 1\n        j -= 1\n        k += 1\n        if j == d:\n            jumps += 1\n            j -= 1\n            k += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return 0\n\n    if d == 0:\n        return 1\n\n    min_jumps = 0\n\n    for i in range(1, d+1):\n        if i == 1:\n            min_jumps += 1\n        else:\n            if steps % i == 0:\n                min_jumps += int(steps/i)\n            else:\n                min_jumps += int(steps/i) + 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate number of jumps required using formula\n    num_jumps = math.ceil(math.log2(steps) * math.sqrt(steps))\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return -1\n    \n    jumps = 0\n    while steps > 0:\n        if d == 0:\n            steps -= 1\n            jumps += 1\n        else:\n            steps -= d\n            d -= 1\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    cost = 0\n    remaining_steps = steps\n    jumps = 0\n\n    while remaining_steps >= d:\n        # Calculate cost and remaining steps\n        cost += remaining_steps - d\n        remaining_steps = d\n\n        # Update number of jumps\n        jumps += 1\n\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return 0\n    elif d > 0 and steps >= d:\n        return min_Jumps(steps - d, d) + 1\n    elif d < 0:\n        return min_Jumps(steps, -d)\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0:\n        return 0\n\n    # Initialize variables for current step, max step, and steps remaining\n    current_step = 0\n    max_step = steps\n    steps_remaining = steps\n\n    # Initialize variables for number of jumps\n    jumps = 0\n\n    # Loop while steps remaining\n    while steps_remaining > 0:\n        # Calculate remaining steps\n        remaining_steps = min(steps_remaining, max_step - current_step)\n\n        # Check if the current position is (d, 0)\n        if current_step + remaining_steps == d:\n            # If it is, add 1 to number of jumps and reset current step and steps remaining\n            jumps += 1\n            current_step = 0\n            steps_remaining = steps\n\n        # If the current position is not (d, 0), add the remaining steps to current step and subtract from steps remaining\n        else:\n            current_step += remaining_steps\n            steps_remaining -= remaining_steps\n\n        # Update maximum step\n        max_step = current_step + steps_remaining\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Start from (0,0)\n    curr_pos = (0, 0)\n    \n    # Initialize the count of jumps\n    count = 0\n    \n    # Initialize the maximum distance that can be reached from current position\n    max_dist = steps - abs(curr_pos[0])\n    \n    # Initialize the maximum number of jumps that can be done\n    max_jumps = max_dist // d\n    \n    # Check if the maximum number of jumps is possible\n    if max_jumps == 0:\n        return 0\n    \n    # Check if the maximum distance is possible\n    if abs(curr_pos[1]) == d:\n        return max_jumps\n    \n    # If the maximum distance is not possible, check the minimum number of jumps\n    for i in range(max_jumps):\n        next_pos = (curr_pos[0] + i * d, curr_pos[1])\n        if next_pos[0] >= steps:\n            return i + 1\n        if next_pos == (steps, 0):\n            return i + 1\n        count += 1\n    \n    # If the maximum distance is still not possible, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    curr_pos = [0, 0]\n    dest_pos = [d, 0]\n\n    # Loop until destination is reached\n    while curr_pos!= dest_pos:\n\n        # Check for possible jumps\n        jumps += 1\n        if curr_pos[0] < dest_pos[0]:\n            # Left-Right Jump\n            if curr_pos[1] < dest_pos[1]:\n                curr_pos[1] += 1\n            elif curr_pos[1] > dest_pos[1]:\n                curr_pos[1] -= 1\n        elif curr_pos[0] > dest_pos[0]:\n            # Right-Left Jump\n            if curr_pos[1] < dest_pos[1]:\n                curr_pos[1] -= 1\n            elif curr_pos[1] > dest_pos[1]:\n                curr_pos[1] += 1\n        else:\n            # Down-Up Jump\n            if curr_pos[1] < dest_pos[1]:\n                curr_pos[1] += 1\n            elif curr_pos[1] > dest_pos[1]:\n                curr_pos[1] -= 1\n\n        # Check for overflow\n        if curr_pos[0] < 0 or curr_pos[0] >= steps or curr_pos[1] < 0 or curr_pos[1] >= steps:\n            return -1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    # create an empty list to store the result\n    result = []\n    # loop through the two lists and perform element-wise division\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    # Initialize an empty list to store the results\n    result = []\n    # Loop through the elements of the lists\n    for i in range(len(nums1)):\n        # Divide the element in nums1 by the element in nums2\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(test_str)\n\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left, right = 0, len(chars) - 1\n\n    # Move all the numbers to the end of the list by shifting them one position to the left\n    while left < right:\n        if chars[left].isdigit():\n            chars[left], chars[right] = chars[right], chars[left]\n        left += 1\n        right -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize the two pointers to the start of the string and end of the string\n    left_pointer = 0\n    right_pointer = len(test_str) - 1\n\n    # loop through the string until the left pointer reaches the right pointer\n    while left_pointer < right_pointer:\n\n        # check if the left pointer is a number\n        if test_str[left_pointer].isdigit():\n\n            # check if the right pointer is a letter or a number\n            if not (right_pointer < 0 or (test_str[right_pointer].isdigit() or test_str[right_pointer].isalpha())):\n\n                # swap the characters at the left and right pointers\n                test_str = test_str[:left_pointer] + test_str[right_pointer:left_pointer] + test_str[left_pointer:right_pointer+1]\n\n                # move the left pointer one position to the right\n                left_pointer += 1\n\n        # move the left pointer one position to the right\n        left_pointer += 1\n\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # Initialize a new string to hold the numbers\n    nums_str = \"\"\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the nums_str\n        if char.isdigit():\n            nums_str += char\n    # Return the original string with the numbers moved to the end\n    return test_str[test_str.index(nums_str):] + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result += test_str[i]\n        else:\n            result += test_str[i:i+1]\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of characters and store it in a variable\n    chars = list(test_str)\n    # Initialize an empty list to store numbers\n    nums = []\n    # Iterate through each character in the list\n    for char in chars:\n        # If the character is a number, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # If the character is not a number, append it to the original list\n        else:\n            chars.append(char)\n    # Concatenate the original list with the nums list\n    result = \"\".join(chars) + \"\".join(nums)\n    # Return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    return ''.join(num_list) + ''.join(filter(str.isdigit, test_str))"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [char for char in test_str if char.isdigit()]\n    result = ''.join(numbers) + test_str.replace(''.join(numbers), '')\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n\n    num_str = ''.join(num_lst)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = re.findall('\\d+', test_str)\n    for num in numbers:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    alpha_list = []\n    \n    # loop through the string and add numbers to num_list and alphabets to alpha_list\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    \n    # loop through num_list and append all numbers to the end of the string\n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    \n    # concatenate alpha_list to the end of the string\n    for char in alpha_list:\n        test_str += char\n    \n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    count = 0\n    current_sum = 0\n    prev_sum = 0\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        current_sum += a[i]\n        \n        # Check if the current sum is divisible by 2\n        if current_sum % 2 == 0:\n            count += 1\n            prev_sum = current_sum\n        \n        # If the current sum is not divisible by 2, update the count and move on\n        else:\n            count += 1\n            current_sum = prev_sum\n    \n    # Return the count of the largest subset\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables to store the maximum size and the current subset size\n    max_size = 0\n    current_size = 0\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # Check if the current element is divisible by the next element\n        if a[i] % a[i+1] == 0:\n            # If it is, add 1 to the current subset size and check if it's greater than the maximum size\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n        else:\n            # If not, reset the current subset size to 0\n            current_size = 0\n    \n    # Return the maximum size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the largest subset size and the current subset size\n    max_size = 1\n    curr_size = 1\n\n    # Loop through the list of numbers and update the current subset size and max_size as needed\n    for i in range(1, len(a)):\n        if a[i] % a[i - 1] == 0:\n            curr_size += 1\n        else:\n            curr_size = 1\n        max_size = max(max_size, curr_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize the maximum subset size\n    max_subset_size = 0\n\n    # Initialize the current subset size\n    current_subset_size = 1\n\n    # Initialize the current subset element\n    current_subset_elem = a[0]\n\n    # Loop through the sorted list\n    for i in range(1, len(a)):\n        # If the next element is not divisible by the current element, extend the current subset\n        if a[i] % current_subset_elem!= 0:\n            current_subset_size += 1\n            max_subset_size = max(max_subset_size, current_subset_size)\n            # Reset the current subset size and element\n            current_subset_size = 1\n            current_subset_elem = a[i]\n        # If the next element is divisible by the current element, merge the current subset with the next one\n        else:\n            current_subset_size += 1\n\n    # Update the maximum subset size if the last element is not divisible by the current element\n    if current_subset_elem % a[-1]!= 0:\n        current_subset_size += 1\n        max_subset_size = max(max_subset_size, current_subset_size)\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    count = 1\n    max_count = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] % 2 == 0:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 1\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    a.sort()\n    max_size = 1\n    count = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            count += 1\n        else:\n            max_size = max(max_size, count)\n            count = 1\n    max_size = max(max_size, count)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for the largest subset size and the largest pair\n    max_size = 0\n    max_pair = None\n\n    # Iterate through the list of numbers\n    for i in range(len(a)):\n        # Initialize variables for the current subset size and the current pair\n        current_size = 1\n        current_pair = None\n\n        # Iterate through the remaining numbers after the current number\n        for j in range(i+1, len(a)):\n            # Check if the current pair is divisible by the current number\n            if a[i] % a[j] == 0:\n                # If it is divisible, increment the size and update the current pair\n                current_size += 1\n                current_pair = (a[i], a[j])\n\n            # If the current size is greater than the largest size found so far, update the variables\n            if current_size > max_size:\n                max_size = current_size\n                max_pair = current_pair\n\n    # Return the largest pair and size found\n    return max_pair, max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    subset = []\n\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            subset.append(a[i])\n        else:\n            max_size = max(max_size, len(subset))\n            subset = []\n\n    max_size = max(max_size, len(subset))\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            dp[i] = dp[i - 1] + 1\n            max_size = max(max_size, dp[i])\n        else:\n            dp[i] = 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    left = 0\n    right = 1\n    max_size = 1\n    max_subset = [a[0]]\n    while right < len(a):\n        if a[right] % a[left] == 0:\n            max_size += 1\n            max_subset.append(a[right])\n        else:\n            max_size = max(max_size, right - left + 1)\n            left = right\n            right = right + 1\n        right = min(right, len(a) - 1)\n    max_size = max(max_size, len(a) - left)\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same length.\")\n    mid = n // 2\n    first = min(arr1[:mid], arr2[:mid])\n    second = max(arr1[mid:], arr2[mid:])\n    if len(first) > len(second):\n        return first[mid-1]\n    else:\n        return second[mid-1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted arrays into one\n    merged_arr = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the array is even, then the median is the average of the middle two elements\n        median = (merged_arr[n//2-1] + merged_arr[n//2])/2\n    else:\n        # If the length of the array is odd, then the median is the middle element\n        median = merged_arr[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n\n    if len(arr1) % 2 == 0:\n        mid1 = arr1[len(arr1)//2]\n        mid2 = arr2[len(arr2)//2]\n        return (max(mid1, mid2) + min(mid1, mid2))/2\n    else:\n        mid1 = arr1[len(arr1)//2]\n        mid2 = arr2[len(arr2)//2]\n        return max(mid1, mid2)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    # Calculate the median\n    median = (n % 2 == 0) and (merged_arr[n//2-1] + merged_arr[n//2]) / 2 or merged_arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median of the two lists.\n\n    Parameters:\n    arr1 (list): a list of integers\n    arr2 (list): a list of integers\n    n (int): the size of the two lists\n\n    Returns:\n    int: the median of the two lists\n    '''\n    # Combine the two lists into one\n    combined_list = arr1 + arr2\n    # Sort the combined list\n    combined_list.sort()\n    # Calculate the middle index\n    middle_index = len(combined_list) // 2\n    # If the length of the combined list is odd, return the middle element\n    if len(combined_list) % 2 == 1:\n        return combined_list[middle_index]\n    # If the length of the combined list is even, return the average of the middle two elements\n    else:\n        return (combined_list[middle_index - 1] + combined_list[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted arrays of the same size and the total number of elements in each array.\n    It returns the median of the two arrays.\n    \"\"\"\n\n    # Find the median of the first array\n    first_median = 0\n    for i in range(n//2):\n        if arr1[i] > arr1[i+1]:\n            first_median += arr1[i]\n        else:\n            first_median += arr1[i+1]\n    first_median /= n//2\n\n    # Find the median of the second array\n    second_median = 0\n    for i in range(n//2):\n        if arr2[i] > arr2[i+1]:\n            second_median += arr2[i]\n        else:\n            second_median += arr2[i+1]\n    second_median /= n//2\n\n    # Return the median\n    return max(first_median, second_median)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        return None\n    else:\n        arr1.sort()\n        arr2.sort()\n        if n % 2 == 0:\n            return (arr1[n//2] + arr1[n//2 - 1]) / 2\n        else:\n            return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Create a list to store the merged lists\n    merged = []\n    # Merge the two sorted lists\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    # Add the remaining elements of the shorter list\n    merged += arr1[i:]\n    merged += arr2[j:]\n    # Sort the merged list\n    merged.sort()\n    # Find the median\n    median = len(merged) // 2\n    if len(merged) % 2 == 0:\n        return (merged[median - 1] + merged[median]) / 2\n    else:\n        return merged[median]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three arguments: arr1, arr2, and n, where arr1 and arr2 are sorted lists of size n and n is an integer.\n    The function returns the median of the two sorted lists.\n    '''\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Check if the length of arr1 is odd or even\n    if len(arr1) % 2 == 0:\n        # Find the median of two even-sized lists\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        # Find the median of a list with an odd number of elements\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if the input lists are of equal length\n    if len(arr1)!= len(arr2):\n        raise ValueError('The input lists must be of equal length')\n\n    # merge the two sorted lists\n    merged_list = sorted(arr1 + arr2)\n\n    # find the median index\n    mid_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        median = merged_list[mid_index]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    \n    # Return the modified string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = \"\"\n    for char in string:\n        if char.isupper():\n            upper_string += char\n        else:\n            upper_string += char.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty\n    if not newList:\n        print(\"The list is empty.\")\n        return\n    # Find the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n    # Interchange the first and last element\n    newList[0] = last\n    newList[-1] = first\n    # Print the modified list\n    print(\"Modified list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # if the list has less than 2 elements, return the same list\n        return newList\n    \n    first_element = newList[0] # assign the first element to the variable first_element\n    last_element = newList[-1] # assign the last element to the variable last_element\n    newList.remove(last_element) # remove the last element from the list\n    newList.insert(0, last_element) # insert the first element at the beginning of the list\n    newList.remove(first_element) # remove the first element from the list\n    newList.insert(-1, first_element) # insert the last element at the end of the list\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length < 2:\n        print(\"List must have at least two elements to swap.\")\n    else:\n        first = newList[0]\n        last = newList[length-1]\n        newList[0] = last\n        newList[length-1] = first\n        print(\"New list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    # Store the length of the list\n    n = len(newList)\n    \n    # If the list has less than two elements, return the same list\n    if n < 2:\n        return newList\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements to swap them\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Interchange the first and last elements of the list\n    newList[0] = last\n    newList[-1] = first\n    \n    # Print the modified list\n    print(\"Modified list: \", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle area and convert it to radians\n    area = (3 * r**2) / (2 * 3.14)\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = (2 * r * area) / (3 * area - 3 * r * r)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle arc length using the formula l = 2\u03c0r\n    l = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle using the formula A = 0.5l\u00b2\n    A = 0.5 * l ** 2\n\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    # Calculate the semi-circle area\n    a = pi * r**2\n    # Calculate the area of the smallest triangle\n    area_min = (3*r**2 * math.sqrt(3)) / 4\n    # Calculate the area of the largest triangle\n    area_max = a / math.sin(math.pi/3)\n    # Calculate the area of the larger triangle\n    area_larger = (a * math.sin(math.pi/3)) / math.sin(math.pi/6)\n    # Find the largest area\n    area = max(area_min, area_max, area_larger)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    :param r: radius of the semicircle\n    :type r: float\n    \n    :return: area of the largest triangle\n    :rtype: float\n    \"\"\"\n    \n    # Calculate the area of a triangle with sides of length r\n    area1 = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n    area2 = (3 * r ** 2) / (4 * math.tan(2 * math.pi / 3))\n    area3 = (3 * r ** 2) / (4 * math.tan(4 * math.pi / 3))\n    \n    # Find the maximum area\n    area_max = max(area1, area2, area3)\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846\n    area = 0\n    \n    # Compute the semi-circle circumference\n    s = 2*pi*r\n    \n    # Compute the sides of the largest triangle\n    a = 1\n    b = 2*pi*r\n    c = s\n    \n    # Compute the areas of the triangle\n    area1 = (s*(a+b))/2\n    area2 = (s*(a+c))/2\n    area3 = (s*(b+c))/2\n    \n    # Determine the largest triangle\n    if area1 > area2 and area1 > area3:\n        area = area1\n    elif area2 > area1 and area2 > area3:\n        area = area2\n    else:\n        area = area3\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Calculate the semi-circle diameter\n    d = 2 * r\n    \n    # Calculate the area of a triangle with sides of length d\n    A1 = math.sqrt(3) / 4 * d**2\n    A2 = math.sqrt(3) / 4 * r**2\n    \n    # Calculate the area of the largest triangle\n    A = max(A1, A2)\n    \n    # Calculate the area of the smallest triangle\n    A_min = min(A1, A2)\n    \n    # Calculate the area of the inscribed circle\n    area_circ = math.pi * r**2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_max = area_circ / A\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.sqrt(3) * r * math.sin(math.pi/3) / 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Define the semi-circle parameters\n    a = r\n    b = 0\n    c = 0\n    d = 2 * r\n\n    # Calculate the three angles of the triangle\n    angle1 = 60\n    angle2 = 120\n    angle3 = 180\n\n    # Calculate the areas of the three triangles\n    area1 = (a**2 * (angle1/360))\n    area2 = (b**2 * (angle2/360))\n    area3 = (c**2 * (angle3/360))\n\n    # Find the largest area\n    max_area = max(area1, area2, area3)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Convert radius to radians\n    r = r * (2 * 3.14159)\n\n    # Calculate half of the radius\n    half_r = r / 2\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (3 * half_r * half_r) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is not provided then get the last index of the array\n    if end is None:\n        end = len(array)-1\n\n    # loop through the array and check for missing numbers\n    for i in range(start,end+1):\n        if array[i]!= i+1:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) and returns the smallest missing number.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is empty or the list contains duplicates, it returns None.\n    \"\"\"\n    if not array or len(array)!= len(set(array)):\n        return None\n\n    if end is None:\n        end = max(array)\n\n    for num in array:\n        if num < start:\n            start = num\n        elif num > end:\n            end = num\n\n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_nums = []  # empty list to store even numbers\n\n    for num in list:  # iterate over list\n        if num % 2 == 0:  # check if number is even\n            even_nums.append(num)  # append even number to list\n\n    return even_nums  # return list of even numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing only even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the x and y coordinates of the element\n    x, y = ele\n    \n    # Initialize the list to store the adjacent coordinates\n    adjacent = []\n    \n    # Iterate over the four cardinal directions and add the adjacent coordinates to the list\n    if x > 0:\n        adjacent.append((x-1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if x < 2:\n        adjacent.append((x+1, y))\n    if y < 2:\n        adjacent.append((x, y+1))\n    \n    # Add the sublists of adjacent coordinates to the final list\n    for sublist in sub:\n        adjacent.extend(sublist)\n    \n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele) # Add the given coordinate to the sub list\n    for i in range(-1, 2): # Iterate over all the possible directions\n        for j in range(-1, 2): # Iterate over all the possible directions\n            if i == 0 and j == 0: # If we are at the same coordinate, skip it\n                continue\n            new_ele = (ele[0] + i, ele[1] + j) # Create the new coordinate tuple\n            if new_ele not in sub: # If the new coordinate is not already in the sub list\n                adjac(new_ele, sub) # Recursively call the function on the new coordinate tuple"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the coordinates of the given element\n    x, y = ele\n\n    # Initialize a set to store the adjacent coordinates\n    adj = set()\n\n    # Add the adjacent coordinates to the set\n    adj.add((x-1, y))\n    adj.add((x+1, y))\n    adj.add((x, y-1))\n    adj.add((x, y+1))\n\n    # Remove the current element from the set\n    adj.remove(ele)\n\n    # Append the adjacent coordinates to the sublist\n    sub.extend(adj)\n\n    # Recursively call the function for all the adjacent elements\n    for coord in adj:\n        adjac(coord, sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Define the coordinate system\n    x = 0\n    y = 1\n\n    # Extract the row and column indices from the coordinate tuple\n    row, col = ele\n\n    # Define the directions of adjacent coordinates\n    directions = [(0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1)]\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj_coords = []\n\n    # Loop through all the adjacent coordinates and append them to the list\n    for direction in directions:\n        new_row = row + direction[0]\n        new_col = col + direction[1]\n\n        # Check if the new coordinate is within the bounds of the grid\n        if 0 <= new_row < len(sub) and 0 <= new_col < len(sub[0]):\n            adj_coords.append((new_row, new_col))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    if x - 1 >= 0 and (x, y-1) not in sub:\n        adj.append((x - 1, y - 1))\n    if x + 1 < len(grid) and (x, y+1) not in sub:\n        adj.append((x + 1, y + 1))\n    if y - 1 >= 0 and (x-1, y) not in sub:\n        adj.append((x - 1, y - 1))\n    if y + 1 < len(grid[0]) and (x+1, y) not in sub:\n        adj.append((x + 1, y + 1))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple): \n        for neighbor in sub + [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]: \n            if neighbor not in sub: \n                sub.append(neighbor) \n    return sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the coordinates of the element\n    x, y = ele\n    \n    # Initialize a list to store the adjacent coordinates\n    adj = []\n    \n    # Check the 8 adjacent cells\n    if x > 0:\n        if y > 0:\n            adj.append((x-1, y-1))\n        adj.append((x-1, y))\n        if y < 4:\n            adj.append((x-1, y+1))\n    adj.append((x, y+1))\n    if x < 4:\n        if y > 0:\n            adj.append((x+1, y-1))\n        adj.append((x+1, y))\n        if y < 4:\n            adj.append((x+1, y+1))\n    if y > 0:\n        adj.append((x-1, y-1))\n    adj.append((x+1, y-1))\n    if y < 4:\n        adj.append((x-1, y+1))\n        adj.append((x+1, y+1))\n    \n    # Add the element to the sub-list if it's not already there\n    if ele not in sub:\n        sub.append(ele)\n    \n    # Return the list of adjacent coordinates and the sub-list\n    return adj, sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize an empty list to store the adjacent coordinates\n    adj_coords = []\n\n    # extract the x and y coordinates of the element\n    x, y = ele\n\n    # iterate over all the rows and columns of the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # if the current element is not the same as the element we are currently iterating over\n            if (x+i, y+j)!= ele:\n                # add the adjacent element to the list of adjacent coordinates\n                adj_coords.append((x+i, y+j))\n\n    # return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n\n    if isinstance(ele, tuple):\n        for i in range(len(ele)):\n            sub.append(tuple(ele[:i] + ele[i+1:]))\n            sub.append(tuple(ele[:i] + ele[i+1:][::-1]))\n\n    elif isinstance(ele, list):\n        for i in range(len(ele)):\n            sub.append(tuple(ele[:i] + ele[i+1:]))\n            sub.append(tuple(ele[:i] + ele[i+1:][::-1]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_coords = []\n    x, y = ele\n    for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n        new_x, new_y = x + dx, y + dy\n        if new_x >= 0 and new_x < 10 and new_y >= 0 and new_y < 10:\n            adj_coords.append((new_x, new_y))\n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # iterate over each character in the string\n    for i in range(len(text)):\n        # if the character is a space, replace it with an underscore\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        # if the character is an underscore, replace it with a space\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Loop through each character of the string\n    for i in range(len(text)):\n\n        # Check if the character is a space\n        if text[i] =='':\n\n            # Replace the space with an underscore\n            text = text[:i] + '_' + text[i+1:]\n\n        # Check if the character is an underscore\n        elif text[i] == '_':\n\n            # Replace the underscore with a space\n            text = text[:i] +'' + text[i+1:]\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the given string to lowercase\n    text = text.lower()\n\n    # Use a regular expression to replace all whitespaces with underscores\n    text = re.sub(r'\\s+', '_', text)\n\n    # Use a regular expression to replace all underscores with whitespaces\n    text = re.sub(r'_+','', text)\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n        move_zero(num_list)\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    j = i\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, i and j, to the beginning and end of the list respectively\n    i = 0\n    j = len(num_list) - 1\n\n    # Traverse the list using the pointers\n    while i < j:\n        # If the element at position i is not zero, swap it with the element at position j\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n        return move_zero(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    if zero_count > 0:\n        for i in range(len(num_list) - 1, -1, -1):\n            if num_list[i]!= 0:\n                num_list[i], num_list[len(num_list) - 1 - zero_count] = num_list[len(num_list) - 1 - zero_count], num_list[i]\n                break\n        else:\n            print(\"No zeros found in the list.\")\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and move all zeroes to the end\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one for the beginning of the list and one for the end of the list\n    start = 0\n    end = len(num_list) - 1\n\n    # Traverse the list from both ends simultaneously\n    while start < end:\n        # If the element at the start index is zero, swap it with the element at the end index\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n            end -= 1\n        # If the element at the end index is not zero, move the start index one step forward and decrement the end index\n        else:\n            start += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(i)\n    if zero_index:\n        for j in sorted(zero_index, reverse=True):\n            num_list.pop(j)\n        return num_list\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create two pointers to iterate over the list\n    i = 0\n    j = 0\n    \n    # iterate over the list\n    while j < len(num_list):\n        # if the current element is zero, move the zero to the end of the list\n        if num_list[j] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n        \n    # return the modified list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function finds the sum of the XOR of all pairs of numbers in the given list.\n    \"\"\"\n    # XOR of all elements in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of the first and last elements of the list\n    xor_sum ^= arr[n-1] ^ arr[0]\n\n    # XOR of all pairs of numbers\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            total_sum += xor_sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR all the numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    # Return the sum of xor of all pairs of numbers in the list\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for _ in range(len(iterable) - 1, 0, -1):\n        iterable[0], iterable[_] = iterable[_], iterable[0]\n        hq.heapify(iterable[:_])\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Build max heap from list\n    hq.heapify(iterable)\n\n    # Extract elements from heap in sorted order\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using heap sort algorithm.\n    \"\"\"\n    heap = list(iterable)\n    heapq.heapify(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list to modify it in place\n    array = list(iterable)\n    # Build a max heap from the array\n    hq.heapify(array)\n    # Extract and return the maximum element from the heap\n    return [hq.heappop(array) for _ in range(len(array))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n\n    # convert the list to a min heap\n    hq.heapify(lst)\n\n    # sort the heap by removing the smallest elements and adding them to the end of the list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst[0])\n        hq.heappop(lst)\n\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [x for x in iterable]\n    heapq.heapify(heap)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \n    :param actual_cost: the actual cost of the sale\n    :type actual_cost: int\n    :param sale_amount: the amount the customer paid for the sale\n    :type sale_amount: int\n    \n    :return: True if the sale has no profit and no loss, False otherwise\n    :rtype: bool\n    \"\"\"\n    \n    # calculate the profit and loss from the sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check if the profit and loss are zero or positive\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    # check for profit and loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0 and sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"No Profit\"\n    elif actual_cost < sale_amount:\n        return \"No Loss\"\n    else:\n        return \"No Profit or Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters:\n    actual_cost: This is the actual cost of the sales\n    sale_amount: This is the amount of sales\n    \n    This function returns True if there is no profit and no loss\n    in the given sales, and False otherwise.\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    profit = sale_amount - actual_cost\n    \n    if profit == 0 and sale_amount == actual_cost:\n        return \"No loss and no profit.\"\n    elif profit > 0:\n        return \"Profit.\"\n    else:\n        return \"Loss.\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Define constants\n    g = 9.81 # Acceleration of gravity (m/s^2)\n    R = 287.05 # Universal gas constant (J/kg/K)\n    cp = 1004.6 # Specific heat capacity of air at constant pressure (J/kg/K)\n    alpha = 0.6112 # Exponential temperature coefficient\n    \n    # Calculate the temperature in Kelvin\n    k = t + 273.15\n    \n    # Calculate the dew point temperature\n    td = math.log(t/10) / (alpha - math.log(t/10))\n    \n    # Calculate the wind speed in m/s\n    ws = v * 1.60934 # Convert to m/s\n    \n    # Calculate the heat capacity of air at constant pressure\n    cp_a = cp / (1 - (1/R)*(1/cp - 1))\n    \n    # Calculate the specific enthalpy of air\n    h_a = 0.5 * cp_a * td**2\n    \n    # Calculate the moisture content\n    q = 1013.25 * math.exp(h_a / (cp_a * k)) / (g * td)\n    \n    # Calculate the moisture heat capacity\n    cp_m = cp / (1 - (1/R)*(1/cp - 1))\n    q_m = q / math.sqrt(cp_m)\n    \n    # Calculate the moisture enthalpy\n    h_m = h_a - q_m * g * td\n    \n    # Calculate the air-sea heat transfer coefficient\n    cs = math.sqrt(cp_a / cp_m)\n    \n    # Calculate the mass transfer rate\n    mv = cp_a * td**2 / (cp_m * q_m) * (ws**2 - 2*q * ws + 2*q_m * q_m)\n    \n    # Calculate the transfer rate\n    vr = mv / (2 * math.pi * math.log(q / q_m))\n    \n    # Calculate the air-sea heat transfer\n    ht = g * td * (ws**2 - vr**2 / 2)\n    \n    # Calculate the skin temperature\n    tk = h_m / (g * td)\n    \n    # Calculate the wind chill index\n    wc = 35.72 + 0.6215*t - 35.75*tk\n    \n    # Return the wind chill index rounded to the nearest integer\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity and temperature to kilometers per hour and fahrenheit\n    v_kmph = v * 1.60934\n    t_f = t * 1.8 + 32\n\n    # Calculate the heat index using the formula: HI = 0.5 * (T - 273.15) + 10.2 * (v^0.16) - 0.23 * (v^0.16)\n    HI = (t_f - 273.15) / 1.8 + 10.2 * pow(v_kmph, 0.16) - 0.23 * pow(v_kmph, 0.16)\n\n    # Calculate the wind chill index using the formula: WC = round(HI - 32)\n    WC = round(HI - 32)\n\n    return WC"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 10 and t > 0:\n        return round(max(0, 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v)))\n    else:\n        return \"Invalid inputs\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert celsius to fahrenheit\n    t = (t * 1.8) + 32\n    \n    # calculate wind chill index\n    wc = 35.75 + 0.6215*v - 35.75*math.exp((17.62*t)/(t+243.12))\n    \n    # calculate the rounded wind chill index\n    wc_rounded = int(wc + 0.5)\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill temperature\n    wc = 35.74 + 0.6215*t - 35.75*math.exp((17.625*t)/(t+243.5))\n    \n    # check if the wind chill temperature is below freezing point\n    if wc < 0:\n        return 0\n    \n    # calculate the difference between the wind velocity and the wind chill temperature\n    diff = abs(v - wc)\n    \n    # calculate the rate of change of the wind chill temperature with respect to the wind velocity\n    dwc = diff/v\n    \n    # calculate the wind chill index\n    wci = 35.75 + 0.6215*t + dwc/2\n    \n    # round the wind chill index to the next integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Kelvin\n    temp_k = t + 273.15\n    # Calculate the dew point temperature using the formula:\n    # dewpoint = 243.04 (T_c/2) - 459.67 (T_c/2)^2\n    dewpoint = 243.04 * temp_k / (2 - (temp_k / 2) ** 2)\n    # Calculate the specific humidity using the formula:\n    # h = (1000 * 6.11 * e * (1 - 0.0065 * (e ** 2))) / (temp_k + 237.3)\n    h = 1000 * 6.11 * math.exp((17.67 * (temp_k + 237.3)) / (temp_k + 243.5)) / (temp_k + 237.3)\n    # Calculate the heat capacity ratio using the formula:\n    # cp_ratio = 0.622 * 10 ** ((17.27 * T_c) / (237.3 + T_c))\n    cp_ratio = 0.622 * 10 ** ((17.27 * temp_k) / (237.3 + temp_k))\n    # Calculate the wind chill index using the formula:\n    # WC = 35.75 + 0.6215 * T_c - 35.75 * (log(h) / (cp_ratio * 10))\n    wc = 35.75 + 0.6215 * temp_k - 35.75 * (math.log(h) / (cp_ratio * 10))\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -5 or t > 40:\n        raise ValueError(\"Temperature must be between -5 and 40 degrees Celsius.\")\n    if v < 0.1:\n        raise ValueError(\"Wind velocity must be greater than or equal to 0.1 km/h.\")\n    f = (9.81 * 0.621981132) / (273.15 - 0.621981132)  # Celsius to Fahrenheit conversion factor\n    t_f = (t * 1.8) + 32\n    chill_t = 0.511 * t_f + 0.146 * v - 0.016 * v ** 2 + 0.00094 * v ** 3\n    chill_t = math.ceil(chill_t)  # Rounding the value to the nearest integer\n    if chill_t < -4:\n        return -4\n    else:\n        return chill_t"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the temperature to Fahrenheit\n    f = (9/5)*t + 32\n    # Calculate the dewpoint temperature\n    dewpoint = math.pow(v,0.16) * (f - 32) + 273.15\n    # Calculate the wind chill index\n    if dewpoint > 70:\n        wc = math.sqrt(math.pow(v,2)*math.pi*math.log(f/70))\n    else:\n        wc = 35.74 + 0.6215*t - 35.75*math.pow(t-23,2) + 0.4275*math.pow(t-23,3)\n    # Round the wind chill index to the nearest integer\n    wc = int(wc + 0.5)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters\n    ----------\n    v : float\n        Wind velocity in km/h.\n    t : float\n        Temperature in celsius.\n        \n    Returns\n    -------\n    float\n        Wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert the temperature to Kelvin\n    t = t + 273.15\n    \n    # Calculate the formula for the wind chill index\n    wci = round(23.44 * math.log(t/10) - 3.86 * math.log(v*1.60934/10) + 0.134 * (t/10)**2 - 9.28 * math.log(t/10) * (t/10) + 0.00621 * (v*1.60934/10)**2)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t = (t*1.8) + 32\n    \n    # Calculate the wind chill temperature using the formula\n    wind_chill_temp = 35.74 + 0.6215*v + 11.37*(t-t_c) - 0.3965*(t-t_c)*(t-t_c)\n    \n    # Convert the wind chill temperature to a Fahrenheit value\n    wind_chill_temp = (wind_chill_temp*1.8) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = int(math.ceil(wind_chill_temp))\n    \n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():  # check if name starts with a lowercase letter\n            total_length += len(name)  # add name length to total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name.isupper()]  # filter out names that start with a lowercase letter\n    lengths = [len(name) for name in names]  # calculate the length of each name\n    return sum(lengths)  # sum the lengths of all names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Define an empty list to store the sum of the lengths of names\n    total_length = 0\n    # Loop through the names in the list\n    for name in sample_names:\n        # Remove the lowercase letter at the beginning of the name if it exists\n        if name[0].isupper():\n            name = name[1:]\n        # Add the length of the name to the total length\n        total_length += len(name)\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    # create an empty list to store the length of each name\n    lengths = []\n    for name in sample_names:\n        # remove the name starting with a lowercase letter\n        if name[0].islower():\n            name = name[1:]\n        # add the length of the cleaned name to the list\n        lengths.append(len(name))\n    # return the sum of all lengths\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Define a list to store the length of names that start with a lowercase letter\n    lowercase_names = []\n    \n    # Iterate over each name in the sample_names list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If the first character is a lowercase letter, append its length to the lowercase_names list\n            lowercase_names.append(len(name))\n    \n    # Return the sum of all the lengths of the lowercase names in the sample_names list\n    return sum(lowercase_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if not name[0].isupper():\n            names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the variable to store the sum of the lengths of names without lowercase letters\n    sum_len = 0\n    \n    # Iterate through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, ignore it and move on to the next name\n            continue\n        # If the name does not start with a lowercase letter, add the length of the name to the sum\n        sum_len += len(name)\n    \n    # Return the sum of the lengths of names without lowercase letters\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a variable to store the sum of the lengths of names\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove the first character (which should always be a letter)\n        name = name[1:]\n        # Check if the first character is a lowercase letter\n        if name[0].islower():\n            # If it is, skip to the next name\n            continue\n        # Add the length of the name to the total\n        total_length += len(name)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)') # regular expression pattern to find all parenthesis and what's inside them\n    result = pattern.sub('', items) # remove all parenthesis and what's inbetween them\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = r'\\((.*?)\\)'\n    # Use the re.sub() method to remove the parenthesis and what is inbetween them from the string\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    \n    # remove the whitespace from the string\n    items = items.strip()\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis and any text inbetween\n    pattern = re.compile(r'\\([^()]*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^)]*)\\)'\n    return re.sub(pattern, r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        i = 1\n        while i < n:\n            j = 1\n            while j < i:\n                i += 1\n                j += 1\n        return i - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if i * (i-1) % 2 == 1:\n            count += 1\n        elif i * (i-1) % 2 == 0:\n            count -= 1\n        if count == 0:\n            return i\n    return 0\n\nprint(is_nonagonal(10))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # first check if n is even or odd\n    if n % 2 == 0:\n        # if it's even, add (n+1) to n to find the next odd number\n        next_odd = 2 * n + 1\n    else:\n        # if it's odd, subtract 1 from n to find the previous even number\n        next_odd = 2 * n - 1\n    # use the formula to find the nth nonagonal number\n    return (next_odd * (next_odd + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # calculate the value of n\n    n = n - 1\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n rows of Pascal's triangle\n    for i in range(n):\n        # loop through each element in the row\n        for j in range(i+1):\n            # add the product of the row index and the element index to the sum variable\n            sum += (i*j)\n    # return the sum variable\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    This function checks whether a given number is nonagonal or not.\n    '''\n    # Calculate the number of squares that can be formed by placing \n    # the right and bottom squares in a square grid\n    num_squares = (n + 1) * (n + 1)\n    \n    # Check if the number of squares is divisible by 2\n    if num_squares % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # Function to find the nth nonagonal number using recursion\n    def nth_nonagonal(n): \n        if n == 1: \n            return 1\n        elif n == 2: \n            return 4\n        else: \n            return 2 * (n-1) + nth_nonagonal(n-1)\n    \n    # Function to find the nth nonagonal number using a loop\n    def nth_nonagonal_loop(n): \n        if n == 1: \n            return 1\n        elif n == 2: \n            return 4\n        else: \n            nonagonal = 2 * (n-1)\n            for i in range(n-2): \n                nonagonal += 2\n            return nonagonal\n    \n    return nth_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    def nonagonal(x, y):\n        return (x + y) * x / 2\n\n    i = 1\n    j = 1\n    k = 1\n\n    while i <= n:\n        if i % 2 == 0:\n            if i == 2:\n                print(nonagonal(i, j))\n            else:\n                print(nonagonal(i, j) + nonagonal(i - 2, j))\n        else:\n            if i == 1:\n                print(nonagonal(i, k))\n            else:\n                print(nonagonal(i, k) + nonagonal(i - 1, k))\n        i += 1\n        j += 1\n        k += 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # find all words in the text that start and end with 'z'\n    words_with_z = re.findall(r'\\b(?:z)\\w+\\b', text)\n    # print the list of words that start and end with 'z'\n    print(words_with_z)\n    # return a boolean value indicating whether the text contains 'z' at the middle of a word\n    if 'z' in text:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b[^z]*z[^z]*\\b' # match word characters (not including 'z') between two word characters (including 'z')\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ][a-zA-Z]+[zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][^z]*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the regular expression pattern to match the 'z' at the middle of the word\n    pattern = r'\\b[zZ]\\w+\\b'\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b(z)\\b'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if the pattern was found in the text, False otherwise\n    return match is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    n = len(input)\n    start = 0\n    end = k-1\n\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n or k < 1:\n        print(\"Invalid position.\")\n    else:\n        temp = input[k-1]\n        input[k-1] = input[n-1]\n        input[n-1] = temp\n        for i in range(k-1, n-1, -1):\n            temp = input[i]\n            input[i] = input[n-1-i]\n            input[n-1-i] = temp\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Convert the list to a string\n    input_str = ''.join(str(i) for i in input)\n    # Reverse the string upto the position k\n    input_str = input_str[:k][::-1] + input_str[k:]\n    # Convert the string back to a list\n    input = list(map(int, input_str))\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # check if k is valid\n    if k < 1 or k > n:\n        return None\n    # reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first k elements\n    for i in range(k-1, -1, -1):\n        input[i], input[n-1] = input[n-1], input[i]\n    # Reverse the remaining elements\n    for i in range(k, n):\n        input[i], input[k-1] = input[k-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n    # Get the index of the kth element to reverse\n    index = k - 1\n    # Initialize the left and right pointers\n    left = 0\n    right = k - 1\n    # Swap elements until the right pointer reaches the end of the array\n    while left < right:\n        # Swap the left and right elements\n        input[left], input[right] = input[right], input[left]\n        # Increment the left and right pointers\n        left += 1\n        right -= 1\n    # Reverse the elements from index to the end of the array\n    while index < n - 1:\n        # Swap the left and right elements\n        input[index], input[n - 1] = input[n - 1], input[index]\n        # Increment the index and decrement the length of the array\n        index += 1\n        n -= 1\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Finding the length of the array\n    n = len(input)\n    \n    # Finding the position of the given kth element\n    index = k - 1\n    \n    # Using two pointers to swap the elements upto kth position\n    while index < n:\n        input[index], input[n-index-1] = input[n-index-1], input[index]\n        index += 1\n    \n    # Returning the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the input is a list\n    if not isinstance(input, list):\n        print(\"Error: Input must be a list\")\n        return\n\n    # Check if the given position is valid\n    if k < 0 or k >= len(input):\n        print(\"Error: Given position is invalid\")\n        return\n\n    # Reverse the array upto the given position\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # finding the length of the array\n    n = len(input)\n    # checking if the position is valid\n    if k < 1 or k > n:\n        print(\"Invalid position. The position should be between 1 and n.\")\n        return\n    # initializing the left and right pointers\n    left = 0\n    right = k - 1\n    # swapping the elements\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    # returning the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the start to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    # Reverse the remaining array from k to the end\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create an empty list to store the dictionary values\n    dict_vals = []\n    # iterate through the dictionary keys and add their values to the list\n    for key in test_dict:\n        dict_vals.append(test_dict[key])\n    # concatenate the list and the tuple to create the final tuple\n    final_tup = (test_tup + tuple(dict_vals))\n    return final_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of key-value pairs\n    dict_list = list(test_dict.items())\n    \n    # Iterate through the tuple and add the key-value pairs from the dictionary to it\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], dict):\n            # Add the key-value pairs from the dictionary to the current tuple element\n            test_tup[i].update(dict_list[i])\n    \n    # Convert the modified tuple back to a tuple and return it\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    new_dict.update(test_dict)\n    return tuple(test_tup + (new_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    test_list = test_dict.items()\n    \n    # add the list of tuples to the tuple\n    test_result = test_tup + test_list\n    \n    return test_result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list\n    dict_list = list(test_dict.items())\n    # Concatenate the tuple and dictionary lists\n    result = test_tup + dict_list\n    # Convert the result list back to a tuple\n    final_result = tuple(result)\n    return final_result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the original tuple's elements and the dictionary values\n    new_tuple = tuple(test_tup + tuple(test_dict.values()))\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_avg = 0\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if j == N-1:\n                    continue\n            if j == 0:\n                if i == N-1:\n                    continue\n            path_avg = 0\n            path = []\n            current_cost = cost[i][j]\n            visited_cells = 0\n\n            if i < N-1:\n                path.append((i+1, j))\n                path_avg += current_cost\n                visited_cells += 1\n            if j < N-1:\n                path.append((i, j+1))\n                path_avg += current_cost\n                visited_cells += 1\n\n            while i < N-1 and j < N-1:\n                i += 1\n                j += 1\n                current_cost = cost[i][j]\n                visited_cells += 1\n                if current_cost == cost[i][j-1] or current_cost == cost[i-1][j]:\n                    path.append((i, j))\n                    path_avg += current_cost\n                else:\n                    break\n\n            if visited_cells > 0:\n                path_avg /= visited_cells\n                if path_avg > max_path_avg:\n                    max_path_avg = path_avg\n                    max_path = path.copy()\n\n    return max_path_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[False]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                visited[i][j] = True\n                path_avg = dfs(i, j, visited, cost, N)\n                if path_avg > max_avg:\n                    max_avg = path_avg\n    return max_avg\n\ndef dfs(i, j, visited, cost, N):\n    total_cost = cost[i][j]\n    visited[i][j] = True\n    if i == N-1 and j == N-1:\n        return total_cost\n    if i < N-1 and not visited[i+1][j]:\n        total_cost += dfs(i+1, j, visited, cost, N)\n    if j < N-1 and not visited[i][j+1]:\n        total_cost += dfs(i, j+1, visited, cost, N)\n    visited[i][j] = False\n    return total_cost / (i+1 + j+1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, dp[i][i])\n\n    for k in range(N-1, -1, -1):\n        for i in range(k+1, N):\n            j = i - k\n            if j < 0:\n                j = 0\n            if i == N - 1:\n                dp[i][j] = cost[i][j] + dp[i][j+1]\n                max_avg = max(max_avg, dp[i][j])\n                continue\n            dp[i][j] = cost[i][j] + min(dp[i+1][j], dp[i+1][j+1])\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # Initialize the first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # Fill the remaining cells with dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            path_avg = (dp[i][j] - dp[i-1][j-1]) / (i+j+1)\n            if path_avg > max_avg:\n                max_avg = path_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    visited = [[False]*n for i in range(n)]\n    total_cost = 0\n    start_cell = (0,0)\n    end_cell = (n-1,n-1)\n\n    # Helper function to check if a cell is part of a path\n    def is_valid_cell(i,j):\n        return 0 <= i < n and 0 <= j < n and not visited[i][j]\n\n    # Helper function to update the maximum average and visited cells\n    def update_max_avg(avg):\n        nonlocal max_avg\n        if avg > max_avg:\n            max_avg = avg\n\n    # Helper function to find the maximum average for a given path\n    def find_max_avg_for_path(path):\n        nonlocal total_cost\n        visited[path[0][0]][path[0][1]] = True\n        visited[path[-1][0]][path[-1][1]] = True\n        total_cost += sum([cost[i][j] for i,j in path])\n        return sum([cost[i][j] for i,j in path])\n\n    # Helper function to find all valid paths\n    def find_all_paths(i,j):\n        paths = []\n        if i == n-1 and j == n-1:\n            paths.append([end_cell])\n        else:\n            if is_valid_cell(i+1,j):\n                paths.extend(find_all_paths(i+1,j))\n            if is_valid_cell(i,j+1):\n                paths.extend(find_all_paths(i,j+1))\n        return paths\n\n    # Find all paths\n    paths = find_all_paths(0,0)\n\n    # Compute the maximum average over all paths\n    for path in paths:\n        avg = find_max_avg_for_path(path)\n        update_max_avg(avg)\n\n    # Return the maximum average\n    return max_avg/n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the number of cells in the matrix\n    N = len(cost)\n    \n    # Initialize variables to store the maximum average and the path with maximum average\n    max_avg = 0\n    path = [[0]*N for i in range(N)]\n    \n    # Loop through each cell in the matrix\n    for i in range(N):\n        for j in range(N):\n            # Calculate the sum of the cost of the cell and its neighbors\n            neighbors = [[i+1,j],[i,j+1]]\n            sum_cost = cost[i][j] + sum([cost[x][y] for x,y in neighbors])\n            \n            # Update the maximum average and the path if the sum is greater than the current maximum average\n            if sum_cost > max_avg:\n                max_avg = sum_cost\n                path = [[i,j]]\n                for x,y in neighbors:\n                    path.append([x,y])\n                \n    # Compute the average of the maximum path\n    avg = sum_cost/len(path)\n    \n    # Return the maximum average and the path\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def findMaxAverage(matrix, i, j):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return sum(matrix[i][j]) / (i+j+1)\n        \n        if i < len(matrix) - 1:\n            return max(findMaxAverage(matrix, i+1, j), findMaxAverage(matrix, i+1, j+1))\n        elif j < len(matrix[0]) - 1:\n            return max(findMaxAverage(matrix, i, j+1), findMaxAverage(matrix, i+1, j+1))\n        else:\n            return 0\n    \n    return findMaxAverage(cost, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(cost, row, col, path_sum, max_avg):\n        if row == len(cost) - 1 and col == len(cost[0]) - 1:\n            # Base case: we have reached the bottom-right cell\n            avg = path_sum / (row * col + 1)\n            if avg > max_avg:\n                max_avg = avg\n            return\n\n        # Only consider moves that do not exceed the boundaries\n        if row < len(cost) - 1 and col < len(cost[0]) - 1:\n            # Move right\n            dfs(cost, row + 1, col, path_sum + cost[row][col], max_avg)\n            # Move down\n            dfs(cost, row, col + 1, path_sum + cost[row][col], max_avg)\n\n    # Initialize variables\n    max_avg = -float('inf')\n\n    # Perform depth-first search\n    dfs(cost, 0, 0, 0, max_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n\n    # Initialize the base case for the first row and column\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0], dp[i][0] + cost[i][0])\n    for j in range(1, n):\n        dp[0][j] = max(dp[0][j-1], dp[0][j] + cost[0][j])\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for k in range(n):\n                for l in range(n):\n                    if k == i and l == j:\n                        continue\n                    for m in range(n):\n                        if m == i and j == l:\n                            continue\n                        for n in range(n):\n                            if n == j and k == l:\n                                continue\n                            avg = dp[i][k] + dp[k][j] + dp[j][l] + dp[l][i] - dp[i][l] - dp[l][i] - dp[i][j] + dp[j][i]\n                            avg /= 4\n                            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down \n    and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    max_avg = 0\n    visited = [[0 for _ in range(N)] for _ in range(N)]\n\n    def backtrack(i, j, curr_avg, visited):\n        if i == N - 1 and j == N - 1:\n            nonlocal max_avg\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n            return\n\n        if i < N and j < N:\n            if visited[i][j] == 0:\n                visited[i][j] = 1\n                backtrack(i + 1, j, curr_avg + cost[i][j], visited)\n                backtrack(i, j + 1, curr_avg + cost[i][j], visited)\n                visited[i][j] = 0\n\n    backtrack(0, 0, 0, visited)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: data for name, data in students.items() if data[0] > h and data[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store filtered students\n    filtered_students = []\n    # loop through each student in the dictionary\n    for name, data in students.items():\n        # unpack the tuple of height and weight from the value of the dictionary\n        height, weight = data\n        # if the height and weight are above the minimum, add the student to the filtered_students list\n        if height > h and weight > w:\n            filtered_students.append(name)\n    # return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on their height and weight\n    filtered_students = {name: data for name, data in students.items() if data[0] > h and data[1] > w}\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # iterate over the students dictionary\n    for name, data in students.items():\n        # get the height and weight of the student\n        height, weight = data\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered_students list\n            filtered_students.append(name)\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students with height and weight above the minimum\n    filtered_students = {name: data for name, data in students.items() if data[0] > h and data[1] > w}\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    # Create a dictionary to store the counts of elements in each list\n    counts1 = {}\n    counts2 = {}\n    for i in range(len(nums1)):\n        counts1[nums1[i]] = counts1.get(nums1[i], 0) + 1\n        counts2[nums2[i]] = counts2.get(nums2[i], 0) + 1\n    \n    # Use the dictionary to find indices where lists have the same values\n    same_pairs = []\n    for i in range(len(nums1)):\n        if counts1[nums1[i]] == counts2[nums1[i]]:\n            same_pairs.append(i)\n    \n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    # Create a set of tuples with the form (x, y) where x and y are the elements of the lists and nums1[i] == nums2[j] for all i and j\n    pairs = set()\n    for i in range(len(nums1)):\n        for j in range(i, len(nums1)):\n            pairs.add((nums1[i], nums2[j]))\n    # Count the number of unique pairs with the same elements in nums1 and nums2\n    count = 0\n    for x, y in pairs:\n        if x == y:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize a dictionary to store the count of same values for each index\n    count_dict = {}\n\n    # Loop through the first list and count the same values for each index\n    for i in range(len(nums1)):\n        count_dict[i] = nums1[i] == nums2[i]\n\n    # Loop through the second list and count the same values for each index\n    for i in range(len(nums2)):\n        # If the same value was already counted for the first list, increment the count for the second list\n        if i in count_dict and count_dict[i]:\n            count_dict[i] += nums2[i]\n        # If the same value was not counted for the first list, add it to the count for the second list\n        else:\n            count_dict[i] = nums2[i]\n\n    # Return the count of same values for each index\n    return count_dict"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    # Calculate the sum of all digits of the base to the specified power\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for i in range(power):\n        total += int(base_str[-1])\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # calculate the sum of digits raised to the power\n    sum_of_digits = 0\n    for digit in base_str:\n        power_digit = 1\n        for i in range(power):\n            power_digit *= int(digit)\n        sum_of_digits += power_digit\n    # return the sum of digits raised to the power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        power //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through all the digits of the base\n    while base > 0:\n        # Extract the last digit of the base\n        last_digit = base % 10\n\n        # Add the last digit to the sum\n        sum += last_digit\n\n        # Divide the base by 10 to remove the last digit\n        base //= 10\n\n    # Calculate the sum of digits to the power\n    result = sum ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    total_sum = 0\n    for digit in base_str:\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += base % 10\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while num!= 0:\n        digit = num % 10\n        total += digit ** power\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # convert base to a string and split into individual digits\n    base_str = str(base)\n    base_digits = [int(digit) for digit in base_str]\n\n    # calculate sum of digits raised to the power of power\n    sum_of_digits = sum([base_digits[i] ** power for i in range(len(base_digits))])\n\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks \" \"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"'  # Match double-quoted strings\n    matches = re.findall(pattern, text, re.MULTILINE)  # Use regular expression to find matches\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))  # Remove leading and trailing spaces and add to the list\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\").*(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define regular expression pattern to find values between quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use regular expression search to find all values between quotation marks\n    matches = re.findall(pattern, text1)\n\n    # Return the list of found values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Match any character that is not inside quotes and not a backslash\n    pattern = r'[^\\\\\"]'\n\n    # Compile the pattern as a regular expression\n    regex = re.compile(pattern)\n\n    # Find all the matches in the string\n    matches = regex.findall(text1)\n\n    # Join the matches together into a single string\n    output =''.join(matches)\n\n    return output"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n\n    :param text1: The string from which we need to extract values between quotation marks.\n    :type text1: str\n\n    :return: A list of strings containing the values between quotation marks.\n    :rtype: list\n    \"\"\"\n\n    # Regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use regular expression to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text1)\n\n    # Return a list of strings containing the values between quotation marks\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate through the tuple of numbers\n    for i in range(len(test_tup)-1):\n        # add the product of the current number and the next number to the list of results\n        result.append(test_tup[i] * test_tup[i+1])\n    # add the last product of the last two numbers to the list of results\n    result.append(test_tup[-1] * test_tup[-2])\n    # return the list of results as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [None] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Check if the tuple has at least two elements\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple must have at least two elements\")\n    \n    # Initialize the result tuple with the first two elements of the input tuple\n    result_tup = (test_tup[0] * test_tup[1],)\n    \n    # Iterate over the remaining elements of the input tuple and append the product of the current element with the next element to the result tuple\n    for i in range(2, len(test_tup)):\n        result_tup += (test_tup[i] * result_tup[-1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[2*i] * test_tup[2*i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple([t_i * test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1  # since there are N+1 elements in the tuple\n    result_tup = (test_tup[0] * test_tup[1],)  # initialize the result tuple with the first two elements of the input tuple\n    for i in range(2, N+1):\n        result_tup += (test_tup[i] * result_tup[-1],)  # calculate the next element of the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t1*t2 for t1,t2 in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return [x for x in nums if x == nums[len(nums)-1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) == 1:\n            continue\n        for item in group:\n            nums.remove(item)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object from the input list\n    g = groupby(enumerate(nums))\n    # initialize an empty list to store the unique consecutive duplicates\n    result = []\n    # iterate over the generator object and append each consecutive duplicate to the result list\n    for key, group in g:\n        if key == 0:\n            result.extend(group)\n        else:\n            prev_num = group[0][1]\n            for num in group:\n                if prev_num == num[1]:\n                    result.pop()\n                else:\n                    result.append(num)\n                    prev_num = num[1]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for item in groupby(sorted(nums)):\n        if len(list(item)) > 1:\n            continue\n        result.extend(item)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    grouped_nums = groupby(nums)\n    return [list(group) for key, group in grouped_nums if key == None]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    def consecutive_groups(iterable):\n        \"\"\"\n        Yield consecutive groups of identical elements from the iterable.\n        \"\"\"\n        keyfunc = lambda x: (x,)\n        for key, group in groupby(iterable, keyfunc):\n            yield list(group)\n\n    new_nums = []\n    for num in nums:\n        if not new_nums or new_nums[-1]!= num:\n            new_nums.append(num)\n    return new_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return list(seen)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r ** 2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*(h/3)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # S = 1/3 * r^2 * h\n    lateral_surface_area = 1/3 * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone respectively.\n    It calculates the lateral surface area of the cone by using the formula:\n    lateral surface area = pi * r * h\n    '''\n    \n    lateral_surface_area = math.pi * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * (r ** 2 + h ** 2)\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate height of cone's base\n    base_height = h / (math.tan(math.pi/4) - math.tan(math.pi/4 + math.asin(r/h)))\n    \n    # Calculate lateral surface area\n    lateral_surface_area = math.pi * r ** 2 * base_height\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula to calculate lateral surface area of cone\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateral_surface_area_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = (1/3) * math.pi * r**2 * h\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*r*h\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any spaces, commas, or dots in the text\n    pattern = re.compile(r'\\s+|\\,|\\.')\n\n    # Use the re.sub() function to replace all matches of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match all special characters\n    pattern = re.compile(r'[\\s.,]', re.IGNORECASE)\n    # Replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces and commas with a colon\n    text = re.sub(r'\\s*,\\s*', ':', text)\n    # Replace all dots with a colon\n    text = re.sub(r'\\s*\\.\\s*', ':', text)\n    # Replace all multiple colons with a single colon\n    text = re.sub(r':+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    special_char_pattern = re.compile(r'[^\\w\\s]')\n    text = special_char_pattern.sub(':', text)\n\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for the characters to be replaced\n    pattern = r'[\\s,.]+'\n    \n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub('\\s', ':', text)\n    # Replace all occurrences of commas with a colon\n    text = re.sub(',', ':', text)\n    # Replace all occurrences of dots with a colon\n    text = re.sub('\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,.]+')\n    result = pattern.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern that matches any of the special characters\n    pattern = re.compile(r'[^a-zA-Z0-9 ]')\n    # Replace the special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]|_')\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index of the first occurrence as -1\n    index = -1\n\n    # loop through the array and keep track of the index of the first occurrence\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n\n    # return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid - 1  # Move right pointer to the left of the mid element\n        elif A[mid] < x:\n            left = mid + 1  # Move left pointer to the right of the mid element\n        else:\n            right = mid - 1  # Move right pointer to the left of the mid element\n\n    return left  # Return the index of the first occurrence of x"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    else:\n        low = 0\n        high = len(A)-1\n        while low <= high:\n            mid = (low+high)//2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Loop through the array until the index is found or the end of the array is reached\n    for i in range(len(A)):\n        # If the current element is equal to the given number, update the index variable to i\n        if A[i] == x:\n            index = i\n            break\n            \n    # Return the index of the first occurrence of the number x\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize variables\n    i = 0  # index of current element being checked\n    j = len(A) - 1  # index of last element being checked\n    \n    # find the first occurrence of x in A[i:j+1]\n    while i <= j:\n        mid = (i + j) // 2\n        if A[mid] == x:\n            # if found, return the index of A[i:mid]\n            while i <= mid and A[i] == x:\n                i += 1\n            return i - 1\n        elif A[mid] < x:\n            # if x is greater than mid, search in the right half of A\n            i = mid + 1\n        else:\n            # if x is smaller than mid, search in the left half of A\n            j = mid - 1\n    \n    # if not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): sorted array of integers\n    x (int): integer to find the index of\n\n    Returns:\n    int: index of the first occurrence of x, or -1 if x is not found in A\n    \"\"\"\n    # binary search to find the first occurrence\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(A) - 1\n    \n    # If the array contains the number, return its index\n    if A[left] == x:\n        return left\n    elif A[right] == x:\n        return right\n    \n    # Binary search for the first occurrence\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the element at the middle index is equal to the number, return the middle index\n        if A[mid] == x:\n            return mid\n        \n        # If the element at the middle index is less than the number, search in the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n            \n        # If the element at the middle index is greater than the number, search in the left half of the array\n        else:\n            right = mid - 1\n            \n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    # Calculate product of first element of each sublist\n    for i in range(1, n + 1):\n        dp[i] = arr[i - 1] * dp[i - 1]\n\n    # Initialize sum and max_sum to zero\n    sum_of_products = 0\n    max_sum = 0\n\n    # Calculate sum of products of all sublists\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            sum_of_products += dp[j] * dp[j - i]\n\n            # Update max_sum if current sublist sum is greater\n            if sum_of_products > max_sum:\n                max_sum = sum_of_products\n\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i])\n    return dp"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 1000000007\n\n    # Store the prefix sum of the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = (prefix_sum[i - 1] + arr[i - 1]) % MOD\n\n    # Calculate the product of all sublists of length 1\n    prod1 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        prod1[i] = (prod1[i - 1] * prefix_sum[i - 1]) % MOD\n\n    # Calculate the product of all sublists of length 2\n    prod2 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod2[j] = (prod2[j] * (prefix_sum[j] - prefix_sum[i - 1]) % MOD)\n            prod2[j] = (prod2[j] * prod1[i - 1] % MOD)\n\n    # Initialize the result list\n    result = [0] * (n + 1)\n    for i in range(1, n + 1):\n        result[i] = (result[i - 1] + (prod2[i] - 1) * prefix_sum[i - 1]) % MOD\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Find the sum of products of first element and all other elements\n    p1 = arr[0]\n    p2 = 1\n    for i in range(1, n):\n        p2 *= arr[i]\n    # Calculate the sum of products of all sublists and subtract the sum of products of the first element\n    p3 = p1 * p2\n    for i in range(1, n-1):\n        p3 += p1 * p2\n        p1 *= arr[i+1]\n        p2 *= arr[i+1]\n    return p3 - p1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_sum = [0] * n\n\n    # Calculate subarray sum for all prefixes\n    for i in range(1, n):\n        sub_sum[i] = sub_sum[i - 1] + arr[i]\n\n    # Calculate subarray product for all suffixes\n    for i in range(n - 2, -1, -1):\n        sub_sum[i] = sub_sum[i] - arr[i + 1]\n\n    # Calculate sum of products of all sublists\n    sub_prod_sum = 0\n    for i in range(n):\n        sub_prod_sum += sub_sum[i] * arr[i]\n\n    # Return the sum of products of all sublists\n    return sub_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    sum_product = 0\n    for i in range(1, n + 1):\n        prod = 1\n        for j in range(n - i + 1):\n            prod *= arr[j]\n        sum_product += prod\n    return sum_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    # Initialize two variables for sum of products and sum of subarrays\n    prod_sum = 0\n    subarray_sum = 0\n\n    # Calculate sum of products of all subarrays\n    for i in range(n):\n        prod_sum += arr[i] * (n-i)\n        for j in range(i, n):\n            subarray_sum += arr[j]\n            prod_sum -= arr[i] * arr[j]\n\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * (n+1)\n\n    for i in range(1, n+1):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n\n    subarray_product = [1] * (n+1)\n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            subarray_product[j] = subarray_product[j] * prefix_product[j]\n\n    return sum(subarray_product)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize the sum of products and the current subarray\n    total_sum = 0\n    current_sum = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Add the current element to the current subarray\n        current_sum = current_sum * arr[i]\n\n        # Calculate the sum of products of the current subarray and add it to the total sum\n        total_sum += current_sum\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # calculate product of all sublists\n    product_sum = 0\n    for i in range(1, n + 1):\n        product_sum += prefix_sum[i] * prefix_sum[n - i + 1]\n\n    return product_sum\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    n = n & ~(3 << 6) # Clear first and last bits\n    n = n ^ ((n ^ 3) & 1) # Toggle all other bits\n    n = n ^ (1 << 31) # Set the most significant bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Iterate through the bits of the number in reverse order\n    for i in range(31, -1, -1):\n        # Calculate the bitmask for the i-th bit\n        bitmask = (1 << i)\n        \n        # Get the current bit value\n        bit_val = (n & bitmask) >> i\n        \n        # Toggle the bit value\n        new_bit_val = not bit_val\n        \n        # Set the i-th bit of the number\n        n = n & ~(bitmask) | (new_bit_val << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the binary representation of n to an integer\n    n = int(n, 2)\n    \n    # Get the position of the first and last bit\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n    \n    # Convert the integer back to a binary representation and return it\n    return bin(middle_bits)[2:].zfill(32)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n\n    result = 0\n    num_bits = 0\n\n    while n!= 0:\n        result |= (n & 1) << num_bits\n        n >>= 1\n        num_bits += 1\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 1) & 1\n    \n    # Toggle the middle bits\n    middle_bits = (n >> 1) + 1\n    \n    # Combine the first and last bits with the middle bits\n    result = (middle_bits << 1) + first_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert the binary representation of n into a list of digits\n    bin_str = bin(n)[2:]\n    \n    # Calculate the number of digits in the binary representation\n    num_digits = len(bin_str)\n    \n    # Calculate the position of the first and last bits\n    first_bit_pos = num_digits - 2\n    last_bit_pos = 1\n    \n    # Calculate the number of bits to toggle\n    num_bits_to_toggle = last_bit_pos - first_bit_pos + 1\n    \n    # Create a new binary string where the first and last bits are 0 and the middle bits are 1\n    new_bin_str = bin_str[:first_bit_pos] + bin_str[first_bit_pos:last_bit_pos] + bin_str[last_bit_pos+1:]\n    \n    # Convert the new binary string back into an integer\n    new_num = int(new_bin_str, 2)\n    \n    return new_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # We need to check the middle bits\n    middle_bits = n & 0x55555555 # First and last bits are 0\n    middle_bits = (middle_bits ^ 0xAAAAAAAA) << 1 # Toggle middle bits\n    \n    # Remove the first and last bits\n    n = n & 0xAAAAAAAA # Remove first bit\n    n = n ^ 0x55555555 # Remove last bit\n    \n    # Combine the middle bits with the remaining bits\n    n = n | middle_bits\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((1 << 1) ^ (1 << (n.bit_length() - 2)))  \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Find the middle bit of the number\n    middle_bit = (n & 1) ^ 1\n\n    # Toggle all bits except the middle bit\n    toggled_bits = n ^ middle_bit\n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & (n - 1))\n    n = n ^ (n & (n - 2))\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return i\n    else:\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize left and right pointers\n    left = 0\n    right = len(a) - 1\n    \n    # Initialize result\n    result = -1\n    \n    # Loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If x is equal to the mid element, return the index of the mid element\n        if a[mid] == x:\n            result = mid\n            break\n        \n        # If x is greater than the mid element, ignore left half and search right half\n        elif a[mid] < x:\n            left = mid + 1\n            \n        # If x is less than the mid element, ignore right half and search left half\n        else:\n            right = mid - 1\n    \n    # Return result\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index of the first element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # If x is already present in the list, return the index\n    if i!= len(a) and a[i] == x:\n        return i\n    # If x is greater than the last element, then insert at the end of the list\n    elif i == len(a):\n        a.append(x)\n        return len(a) - 1\n    # If x is greater than the current element, then insert at the index i+1\n    else:\n        a.insert(i, x)\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a: list\n        A list of sorted elements.\n    x: int\n        A value to search for.\n\n    Returns:\n    int\n        The left insertion point for x.\n\n    \"\"\"\n    # Use binary search to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        # If x is not in the list, the left insertion point is the next index\n        return index\n    else:\n        # Otherwise, the left insertion point is the index of x\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    # Find the left index at which to insert x\n    i = bisect.bisect_left(a, x)\n    \n    # If the element is already present in the list, return its index\n    if i!= len(a) and a[i] == x:\n        return i\n    \n    # If x is greater than all elements in the list, insert at the end\n    if i == len(a):\n        return i\n    \n    # If x is less than all elements in the list, insert at the beginning\n    if a[i-1] > x:\n        return i-1\n    \n    # If x is between two elements in the list, insert between them\n    while i > 0 and a[i-1] > x:\n        i -= 1\n    \n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect.bisect_left to locate the left insertion point\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        # If x is greater than all the elements in a, insert at the end\n        return len(a)\n    elif a[index] == x:\n        # If x is already in a, return index\n        return index\n    elif a[index] < x:\n        # If x is in a[index+1:], insert before index\n        return index\n    else:\n        # If x is in a[index-1:], insert after index\n        return index + 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    # regex pattern to match a vowel or consonant at the beginning of a string\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    # check whether the string matches the pattern using re.match() method\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 + (1/(geometric_sum(n-1)))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n - 1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 0\n\n    # recursive case\n    else:\n        return n * (1 + geometric_sum(n-1))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Convert n to integer\n    n = int(n)\n\n    # Initialize count and minTriangular to 1\n    count = 0\n    minTriangular = 1\n\n    # Iterate over all possible values of n\n    for i in range(2, 10**n):\n        # Calculate the next triangular number\n        triangular = minTriangular + i\n\n        # Check if triangular is a square number\n        if triangular**2 == i:\n            # If yes, update the count and minTriangular\n            count += 1\n            if count == 1:\n                minTriangular = triangular\n\n    # Return the index of the smallest triangular number with n digits\n    return n - count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = math.factorial(n)\n    for i in range(n-1, -1, -1):\n        num = num//(i+1)\n    return num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    num = 0\n    triangular_num = 0\n    index = 0\n\n    # Calculate the number of digits in n\n    n = len(str(n))\n\n    # Calculate the first triangular number\n    for i in range(1, n+1):\n        triangular_num += i * 10**(n-i)\n\n    # Calculate the index of the first triangular number\n    for i in range(1, 10**n+1):\n        triangular_num_temp = int(str(triangular_num)[::-1])\n        if triangular_num_temp == i:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    It uses the formula of the smallest triangular number:\n\n    a^n - b^n = c^n\n\n    Where a, b, and c are three numbers such that a^n - b^n = c^n\n\n    This function returns the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # find the smallest prime number greater than or equal to sqrt(n)\n    a = 2\n    b = 2\n    while True:\n        if math.isqrt(n) % (b - 1) == 0:\n            break\n        a = b + 1\n        b = 2\n\n    # find the smallest c such that a^n - b^n = c^n\n    c = 3\n    while True:\n        if (a ** n - b ** n) % c == 0:\n            break\n        c += 2\n\n    # find the smallest triangular number with n digits\n    triangular_num = (a ** n - b ** n) // c\n    while len(str(triangular_num)) < n:\n        triangular_num *= 10\n\n    return triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 1\n    triangular_count = 0\n    for i in range(2, 10**n):\n        triangular_num = triangular_num * (i+1)\n        triangular_count += 1\n    \n    # return the index of the smallest triangular number with n digits\n    return triangular_count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base case \n    if n == 1: \n        return 1 \n    \n    # Initialize variables \n    min_triangular_num = 2**n \n    min_index = 1\n    triangular_num = min_triangular_num\n    \n    # Loop through the triangular numbers \n    for i in range(2, int(math.sqrt(min_triangular_num)) + 1): \n        triangular_num += i\n        \n        # Check if the triangular number is smaller than the current smallest \n        if triangular_num < min_triangular_num: \n            min_triangular_num = triangular_num \n            min_index = i\n    \n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    # function to find the smallest triangular number with n digits\n    def find_SmallestTriangular(n):\n        # base case\n        if n == 1:\n            return 1\n        else:\n            return find_SmallestTriangular(n-1) * 10 + 1\n    \n    # calculate the smallest triangular number with n digits\n    smallest = find_SmallestTriangular(n)\n    \n    # function to find the index of smallest triangular number with n digits\n    def find_Index(smallest, n):\n        # base case\n        if n == 1:\n            return 1\n        else:\n            # calculate the index of smallest triangular number with n-1 digits\n            index = find_Index(smallest, n-1)\n            # return the index of smallest triangular number with n digits\n            return index + math.ceil(smallest/(smallest-index))\n    \n    # return the index of smallest triangular number with n digits\n    return find_Index(smallest, n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize variables\n    index = 1\n    count = 0\n    num = 0\n    \n    # Calculate the number of digits in n\n    count = len(str(n))\n    \n    # Loop until the smallest triangular number has n digits\n    while count < n:\n        # Calculate the next smallest triangular number and add 1 to the index\n        num = 4 * index**2 - 1\n        index += 1\n        \n        # Check if the number of digits is equal to n\n        if len(str(num)) == n:\n            # Check if the next smallest triangular number is greater than the current smallest triangular number\n            if num > num_min:\n                num_min = num\n                index_min = index\n            \n            # Increase the count of digits\n            count += 1\n            \n    # Return the index of the smallest triangular number with n digits\n    return index_min"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Loop through the digits of n\n    for i in range(1, n+1):\n        # Calculate the triangular number for the current digit\n        triangular_number = i * (i+1) // 2\n        \n        # Check if the triangular number is smaller than n\n        if triangular_number < n:\n            # If it is, increment the result variable\n            result += 1\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    #initialize variables\n    min_num = 10**(n-1)\n    max_num = 10**n - 1\n    triangular_nums = []\n    \n    #generate all triangular numbers between min_num and max_num\n    while min_num <= max_num:\n        triangular_nums.append(min_num)\n        min_num += 1\n    \n    #find the index of the smallest triangular number with n digits\n    for i in range(len(triangular_nums)):\n        if triangular_nums[i].__len__() == n:\n            return i\n    \n    #if no triangular number with n digits exists, return -1\n    return -1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    new_dict = {}\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element as a key-value pair to the dictionary\n        new_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n        i += 2\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n    # Loop through the tuple elements\n    for i in range(len(test_tup)):\n        # If the current element is a tuple, recursively call the function on it\n        if isinstance(test_tup[i], tuple):\n            # Use the tuple as the key and recursively call the function on its value\n            result[i] = tuple_to_dict(test_tup[i])\n        # If the current element is a scalar value, add it to the dictionary using its index as the key\n        else:\n            result[i] = test_tup[i]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary to store the elements\n    dict_obj = {}\n    # iterate through the tuple and add elements to the dictionary\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    # return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # convert tuple to list\n    lst = list(test_tup)\n    # create dictionary\n    dict_lst = {}\n    # iterate over the list\n    for i in range(0, len(lst), 2):\n        # create key and value from adjacent elements\n        key = lst[i]\n        value = lst[i+1]\n        # add key-value to dictionary\n        dict_lst[key] = value\n    # return the dictionary\n    return dict_lst"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set()\n    for c in s:\n        char_set.add(c)\n    return len(char_set) == 1"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters are same, else False.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for key in count:\n        if count[key] > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    # Convert string to lowercase to ignore case sensitivity\n    s = s.lower()\n    # Convert the string to a list of characters\n    lst = list(s)\n    # Check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    # Check if all the characters in the list are the same\n    for i in range(1, len(lst)):\n        if lst[0]!= lst[i]:\n            return False\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and checks if all the characters in the string are the same or not.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        return s[0] == s[-1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    # check if the length of the string is zero\n    if len(s) == 0:\n        return True\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through the string\n    for char in s:\n        # if the character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n\n    # if all characters are equal to the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    set_s = set(s)\n    \n    # Check if the length of the set is 1, if so, all characters are same\n    if len(set_s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Check if all the characters in the list are same\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_side = side / 2\n    return (1 / 6) * ((1 / 2) + (1 / 2) + (1 / 2) + (1 / 2)) * (2 * 3 * 4)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/2 * side**2\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/6) * side * side * side\n    return round(area, 2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side**2) / (4 * math.tan(math.pi / 12))\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron using Heron's formula.\n    '''\n    s = (side * (side + math.sqrt(3)) / 4)**2\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** 0.5\n    return math.pi / 6 * s ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number as input and rotates the list by the specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if n == 0 or m == 0:\n        return list\n    \n    # Find the number of times to rotate\n    times = m // n\n    if m % n!= 0:\n        times += 1\n    \n    # Reverse the first half of the list\n    list = list[times:] + list[:times]\n    \n    # Reverse the second half of the list\n    for i in range(times):\n        list[i] = list[-1 - i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Get the length of the list\n    n = len(list)\n    # Find the modulo of m and n\n    mod = m % n\n    # If the modulo is zero, then return the list as is\n    if mod == 0:\n        return list\n    \n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    # Reverse the rest of the list\n    list[m:] = list[m:][::-1]\n    # Reverse the entire list\n    list = list[::-1]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Check if the list is empty or has only one element\n    if n <= 1:\n        return list\n    # Check if the rotation count is more than the length of the list\n    if m >= n:\n        m = m % n\n    # Reverse the list from index 0 to m-1\n    list = list[n-m:] + list[:n-m]\n    # Reverse the list from m to n-1\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # if m > n, return the original list\n    if m > n:\n        return list\n    \n    # shift the list by m items to the right\n    new_list = list[m:] + list[:m]\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    temp = list[-1]\n    for i in range(n-1, m-1, -1):\n        list[i] = list[i-1]\n    list[m-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    # Move all elements from the end of list to the front of the list\n    for i in range(n - m, n):\n        list[i], list[i - m] = list[i - m], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    k = n - m\n    \n    if k > 0:\n        list.extend(list[:k])\n        list[:k] = []\n    else:\n        list.extend(list[:m])\n        list[:m] = []\n        list.extend(list[m:])\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    if m > len(list):\n        return list\n\n    n = len(list)\n    temp = list[n-m:] + list[:n-m]\n    return temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number representing the number of items to rotate the list to the right.\n    It returns the rotated list.\n    \"\"\"\n    # create a copy of the list\n    lst_copy = lst[:]\n    # calculate the length of the list\n    n = len(lst_copy)\n    # rotate the list\n    for i in range(m):\n        lst_copy.append(lst_copy.pop(0))\n    # concatenate the original list with the rotated list\n    lst_rotated = lst_copy + lst\n    # return the rotated list\n    return lst_rotated"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a lambda function that checks if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(digit) in str(x) for digit in str(x))\n    # create a list of all numbers between startnum and endnum that satisfy the lambda function\n    divisible_numbers = list(filter(is_divisible, range(startnum, endnum + 1)))\n    # return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(d) % (num // 10 ** i) == 0 for i, d in enumerate(str(num)))\n    \n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(d % x == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digit_count = len(str(endnum))\n    return filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # filter out numbers that don't have every digit divisible by 1\n    is_divisible_by_digit = lambda x: all(int(d) % int(x % d) == 0 for d in str(x))\n    filtered_nums = filter(is_divisible_by_digit, range(startnum, endnum+1))\n    return list(filtered_nums)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    def is_divisible_by_digit(n):\n        def is_divisible(num, digit):\n            return num % digit == 0\n        return all(map(is_divisible, str(n), [int(digit) for digit in str(n)]))\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within 0-360 degrees range\n    if a < 0 or a > 360:\n        return None\n    \n    # calculate angle in radians\n    angle_rad = a * math.pi / 180\n    \n    # calculate area of sector\n    area = math.pi * r**2\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check if angle is valid\n    if a >= 360:\n        return None\n    \n    #calculate area of sector\n    area = math.pi * r**2 * a/360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of prefixes of X[], Y[], and Z[]\n    L = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # Build L[m+1][p+1] in bottom up fashion\n    for i in range(m + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Traverse L[] to get LCS\n    i = m\n    j = p\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Check if all the strings are empty\n    if X == \"\" and Y == \"\" and Z == \"\":\n        return 0\n    \n    # Initialize three variables for storing lengths of common subsequences\n    LCSX = 0\n    LCSY = 0\n    LCSZ = 0\n    \n    # Traverse the three strings and find length of longest common subsequence\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    LCSX = max(LCSX, i+1)\n                    LCSY = max(LCSY, j+1)\n                    LCSZ = max(LCSZ, k+1)\n    \n    # Return the length of longest common subsequence\n    return max(LCSX, LCSY, LCSZ)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize an empty list to store the LCS matrix\n    LCS = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the LCS matrix using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    # Return the length of the LCS\n    return LCS[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # creating a 2D array to store the lengths of LCS \n    lengths = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] \n\n    # calculating the length of LCS for all possible pairs of strings \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                lengths[i][j] = lengths[i-1][j-1] + 1 \n            else: \n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1]) \n\n    # printing the length of LCS for all possible pairs of strings \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            print(lengths[i][j], end=\" \") \n        print() \n\n    # backtracking to find the LCS \n    i, j = len(X), len(Y) \n    LCS = \"\" \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            LCS = X[i-1] + LCS \n            i -= 1 \n            j -= 1 \n        elif lengths[i-1][j] > lengths[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return LCS "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a dictionary to store the lengths of LCS for substrings of X, Y, and Z\n    L = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # fill the dictionary with the lengths of LCS of substrings of X, Y, and Z\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i][j - 1][k], L[i - 1][j][k], L[i - 1][j - 1][k - 1])\n\n    # backtrack to find the LCS\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the list of LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[0]*(p+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y)\n    o = len(Z)\n    L = [[[0] * (n+1) for j in range(o+1)] for i in range(m+1)]\n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] >= L[i][j-1][k]: \n                    L[i][j][k] = L[i-1][j][k]\n                else: \n                    L[i][j][k] = L[i][j-1][k]\n    \n    # Finding the length of the longest common subsequence \n    max_len = L[m][n][o]\n    \n    # Printing the longest common subsequence \n    i = m \n    j = n \n    k = o \n    lcs = []\n    \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k]: \n            i -= 1\n        else: \n            j -= 1\n    \n    lcs.reverse()\n    return lcs[:max_len]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, p = len(X), len(Y), len(Z)\n    L = [[0] * (p + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    return L[n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store length of LCS of substring ending at i and j\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # Fill in the table L[][] in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Backtrack to get the LCS of the given string sequence\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"(?<=[a-z])(?=[A-Z])\"\n    words = re.findall(pattern, str1)\n    new_str = \"\"\n    for word in words:\n        new_str += \" \" + word\n    new_str = re.sub(r\"\\s+\", \" \", new_str)\n    return new_str.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([a-z])([A-Z]+)', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words and filter out non-word characters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # join the filtered words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile('([A-Z][a-z]+)')\n    # Split the string by white spaces\n    words = str1.split()\n    # Initialize an empty list to store the modified words\n    modified_words = []\n    # Iterate over the words list\n    for word in words:\n        # Use the regular expression pattern to match the first letter of the word\n        match = pattern.match(word)\n        # If a match is found, add a space before it and append the rest of the word to the modified_words list\n        if match:\n            modified_words.append(''+ word[match.start():])\n        else:\n            modified_words.append(word)\n    # Join the modified_words list into a single string and return it\n    return ''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'[A-Z][a-z]+|[A-Z][A-Z]+|[a-z]+')\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-alphabetic characters from the string\n    str1 = re.sub(r'[^a-zA-Z\\s]', '', str1)\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Create an empty list to store the capitalized words\n    capitalized_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # Add the word to the list of capitalized words\n            capitalized_words.append(word)\n        else:\n            # Check if the next letter is capitalized\n            if words[words.index(word) + 1][0].isupper():\n                # Add a space between the current word and the next one\n                capitalized_words.append(word +'')\n            else:\n                # Add the word to the list of capitalized words\n                capitalized_words.append(word)\n    # Join the words in the list into a string with spaces between them\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r'\\b([A-Z][a-z]+)|([a-z][A-Z]+)'\n    result = re.sub(pattern, r'\\1 \\2', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<![\\p{L}\\d])\\p{Lu}(?=[\\p{L}\\d])'\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word[0].upper() + word[1:].lower() for word in words])\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list of str): A list of strings containing numbers.\n\n    Returns:\n        list: A sorted list of strings containing numbers.\n\n    Example:\n        >>> nums_str = ['2', '5', '1', '4', '3']\n        >>> sorted_nums_str = sort_numeric_strings(nums_str)\n        >>> print(sorted_nums_str)\n        ['1', '2', '3', '4', '5']\n    \"\"\"\n    # Convert the numbers in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the integers\n    nums.sort()\n\n    # Convert the sorted integers back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and returns a sorted list of numbers.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to floats\n    nums_float = [float(n) for n in nums_str]\n    # sort the floats using the built-in sort function\n    nums_float.sort()\n    # convert the sorted floats back to strings and return as a list\n    return [str(n) for n in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to lists of integers\n    nums_int = [int(num) for num in nums_str]\n    \n    # sort the list of integers\n    nums_int.sort()\n    \n    # convert the sorted list of integers back to strings\n    nums_str = [str(num) for num in nums_int]\n    \n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Define a function to convert strings to floats\n    def string_to_float(s):\n        try:\n            return float(s)\n        except ValueError:\n            return None\n\n    # Convert strings to floats\n    nums_float = [string_to_float(s) for s in nums_str]\n\n    # Sort the floats\n    nums_float.sort()\n\n    # Convert floats back to strings\n    sorted_nums_str = [str(num) if num is not None else s for s in nums_str]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    def is_numeric(s):\n        \"\"\"\n        Helper function to check if a given string is a numeric value.\n        \"\"\"\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def convert_to_float(s):\n        \"\"\"\n        Helper function to convert a given string to a float.\n        \"\"\"\n        try:\n            return float(s)\n        except ValueError:\n            return 0.0\n\n    nums = [convert_to_float(s) for s in nums_str if is_numeric(s)]\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert the list to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list in ascending order\n    nums.sort()\n    # convert the list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1] + test_tup[0])\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not. \n    \"\"\"\n    if i == 0:\n        return True\n    \n    parent = (i - 1) // 2\n    \n    if arr[parent] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not. \n    \"\"\"\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    if not arr or len(arr) < 2:\n        return True\n    return check_min_heap_helper(arr, len(arr)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    parent_index = (i - 1) // 2\n    if arr[parent_index] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent_index)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents a min heap or not.\n    \"\"\"\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents a min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    for i in range(n-1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i == 0:\n        return True\n    \n    # Check if the left child is greater than the current node\n    if arr[i] > arr[i//2]:\n        return False\n    \n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr) // 2:\n        # Base case\n        return True\n    elif arr[2 * i] > arr[i] or arr[2 * i + 1] > arr[i]:\n        # If any node is greater than its parent, heap is not min heap\n        return False\n    else:\n        # Recursively check left and right subtrees\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef is_min_heap(arr):\n    '''\n    Return True if the given array represents min heap else False.\n    '''\n    # Check if heap is min heap or not\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \n    Returns True if the array is a min heap, else returns False.\n    '''\n    \n    # Base case: array with 1 element is always a min heap\n    if len(arr) == 1:\n        return True\n    \n    # Check if the left child is smaller than the parent\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # Check if the right child is smaller than the parent or if there is no right child\n    if i*2+1 < len(arr) and arr[i] < arr[i*2+1]:\n        return False\n    \n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, i*2) and check_min_heap_helper(arr, i*2+1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_prev = 0\n        jacobsthal_num_curr = 1\n        for i in range(2, n+1):\n            jacobsthal_num_next = (jacobsthal_num_curr**2) + (jacobsthal_num_prev**2) + (jacobsthal_num_curr**2) + 1\n            jacobsthal_num_prev = jacobsthal_num_curr\n            jacobsthal_num_curr = jacobsthal_num_next\n        return jacobsthal_num_curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        l = 1\n        for i in range(2, n+1):\n            j += l\n            l = j - l\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    j = 0\n    while True:\n        j += 1\n        if is_jac_prime(j):\n            break\n    return j\n\ndef is_jac_prime(n):\n    \"\"\"\n    Returns True if n is a jacobsthal prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = n\n        jacob_prev = 1\n        for i in range(2, n+1):\n            jacob_next = (jacob_prev * (jacob_prev + 2)) // (i - 1)\n            jacob_prev = jacob\n            jacob = jacob_next\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (3*jacobsthal_num(n-1)) + (4*jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the variables\n    j = 0\n    l = 1\n    a = 1\n    b = 0\n\n    # Calculate the nth jacobsthal number\n    for i in range(2, n+1):\n        j += 1\n        c = (a + b) % 10\n        if c == 0:\n            l = l + 1\n        a = b\n        b = c\n\n    return l"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # sort the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize the minimum count variable\n    min_count = 0\n\n    # loop through the sorted tuple list, keeping track of the count of the number of records with k or less\n    for i in range(len(test_list)):\n        count = 1\n        # check if the count of records with k or less is greater than the current minimum count\n        while i + count < len(test_list) and test_list[i+count][1] == test_list[i][1]:\n            count += 1\n        if count <= K:\n            min_count = max(min_count, count)\n\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #sorting the list by the first element of tuple\n    test_list.sort(key=lambda x: x[0])\n    #creating a dictionary to store the minimum k records\n    min_k_dict = {}\n    #looping through the sorted list and adding the records to dictionary\n    for i in range(len(test_list)):\n        if i not in min_k_dict:\n            min_k_dict[i] = test_list[i]\n        else:\n            if test_list[i][0] < min_k_dict[i][0]:\n                min_k_dict[i] = test_list[i]\n            elif test_list[i][0] == min_k_dict[i][0]:\n                min_k_dict[i] = test_list[i]\n        #checking if dictionary has minimum k records\n        if len(min_k_dict) == K:\n            break\n    #extracting the minimum k records from dictionary\n    min_k_list = [min_k_dict[i] for i in range(len(min_k_dict))]\n    #printing the minimum k records\n    print(\"Minimum k records:\", min_k_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from a list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): The number of records to find.\n\n    Returns:\n    tuple: A tuple containing the minimum K records from the list of tuples.\n\n    Raises:\n    TypeError: If the input list is not a list of tuples.\n    \"\"\"\n    if not all(isinstance(x, tuple) for x in test_list):\n        raise TypeError(\"The input list must be a list of tuples.\")\n\n    min_k_records = []\n\n    for tup in test_list:\n        if len(min_k_records) < K:\n            min_k_records.append(tup)\n        else:\n            min_k_records = sorted(min_k_records, key=lambda x: x[1])\n            if tup[1] > min_k_records[-1][1]:\n                min_k_records[-1] = tup\n                min_k_records = min_k_records[-K:]\n\n    return tuple(min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    :param test_list: A list of tuples, where each tuple represents a record.\n    :param K: An integer, representing the number of records that we want to find.\n    :return: A list of tuples, where each tuple represents a record, and the length of the list is equal to K.\n    \"\"\"\n\n    # Sort the list of tuples by the first element of each tuple.\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum K records.\n    min_records = []\n\n    # Iterate through the sorted list and add the first K records to the min_records list.\n    i = 0\n    while i < len(sorted_list) and len(min_records) < K:\n        min_records.append(sorted_list[i])\n        i += 1\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a list of lists to store the indices of the minimum k records\n    min_indices = []\n    \n    # Iterate through the tuple list\n    for i in range(len(test_list)):\n        # Initialize a variable to store the current minimum k\n        min_value = float('inf')\n        \n        # Iterate through the indices of the minimum k records\n        for j in range(len(min_indices)):\n            # If the current minimum k is less than the current value in the list, update the minimum value to the current minimum k\n            if min_value > test_list[min_indices[j]][i]:\n                min_value = test_list[min_indices[j]][i]\n        \n        # If the length of the minimum k records list is less than K, append the current index to the list\n        if len(min_indices) < K:\n            min_indices.append(i)\n    \n    # Create a new list with the minimum k records\n    min_records = []\n    \n    # Iterate through the indices of the minimum k records\n    for index in min_indices:\n        # Append the minimum k record to the new list\n        min_records.append(test_list[index])\n    \n    # Return the new list with the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    test_list: a list of tuples of the form (key, value)\n    K: the number of records to return\n    '''\n    # Sort the list based on the value\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_list = []\n\n    # Iterate through the sorted list and add the required number of records to the min_list\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if min_list[0][1] > test_list[i][1]:\n                min_list[0] = test_list[i]\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the records and their counts\n    record_count = {}\n    for record in test_list:\n        # If the record is not in the dictionary, set its count to 1\n        if record not in record_count:\n            record_count[record] = 1\n        # If the record is already in the dictionary, increment its count\n        else:\n            record_count[record] += 1\n    \n    # Sort the dictionary based on the count of each record\n    sorted_records = sorted(record_count.items(), key=lambda x: x[1])\n    \n    # Initialize a list to store the minimum k records\n    min_k_records = []\n    \n    # Traverse the sorted list and add the records with count less than k to min_k_records\n    for i in range(len(sorted_records)):\n        if i < K:\n            min_k_records.append(sorted_records[i][0])\n    \n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            min_list.sort(key=lambda x: x[0])\n            if test_list[i] < min_list[0][0]:\n                min_list.insert(0, test_list[i])\n            elif test_list[i] > min_list[-1][0]:\n                min_list.pop()\n            else:\n                pass\n    \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize two variables to store the minimum and the maximum values of the first element\n    min_val = test_list[0][0]\n    max_val = test_list[-1][0]\n\n    # Iterate through the list starting from the second element and compare the minimum and maximum values with K\n    for i in range(1, len(test_list)-K+1):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n        if test_list[i][0] > max_val:\n            max_val = test_list[i][0]\n\n        # If the difference between the minimum and maximum values is less than or equal to K, then update the minimum value\n        if max_val - min_val <= K:\n            min_val = test_list[i][0]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Find the minimum k records from a tuple list.\n\n    Args:\n    test_list: A tuple list containing tuples of the form (key, value).\n    K: An integer indicating the number of minimum records to find.\n\n    Returns:\n    A list of tuples containing the minimum K records in the given tuple list.\n\n    Example:\n    test_list = [(1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'pear')]\n    K = 2\n    Output: [('1', 'apple'), ('2', 'banana')]\n    '''\n\n    # Sort the tuple list by value\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K records\n    min_k_list = []\n\n    # Iterate through the tuple list\n    for i in range(K):\n        # Add the minimum K records to the list\n        min_k_list.append(test_list[i])\n\n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create an empty dictionary to store the common elements\n    common = {}\n\n    # Loop through each index in the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n\n        # Check if the current element is in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n\n            # If it is, add it to the common dictionary\n            common[l1[i]] = True\n\n    # Return the common elements as a list\n    return list(common.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers) # sort the list in ascending order\n    return numbers[1] # return the second element of the sorted list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_largest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_largest = smallest\n                smallest = num\n            elif num < second_largest and num!= smallest:\n                second_largest = num\n        return second_largest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    \n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list of numbers.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        print(\"The string '{}' matches the pattern '{}'\".format(text, pattern))\n    else:\n        print(\"The string '{}' does not match the pattern '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found at index: \", match.start())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None\n\ntext = 'The quick brown fox jumps over the lazy dog. The dog slept on the floor.'\nprint(text_match_zero_one(text)) # output: 'The quick brown fox jumps over the lazy dog'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\ba[b]*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a dictionary to store the count of each string\n    count_dict = {}\n    # Iterate through the list and count the reverse pairs\n    for string in test_list:\n        # Reverse the string and check if it exists in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string in count_dict:\n            count_dict[reversed_string] += 1\n        else:\n            count_dict[reversed_string] = 1\n    # Iterate through the dictionary and count the reverse pairs\n    count = 0\n    for value in count_dict.values():\n        count += value * (value - 1) // 2\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store unique sublists and their count\n    unique_sublists = {}\n    \n    # iterate over each element in the input list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # convert the list to a tuple and check if it already exists in the dictionary\n            if tuple(element) in unique_sublists:\n                # if it does, increment its count by 1\n                unique_sublists[tuple(element)] += 1\n            else:\n                # if it doesn't, add it to the dictionary with a count of 1\n                unique_sublists[tuple(element)] = 1\n                \n    # return the dictionary\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create a dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # Iterate over each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            sublist_count[sublist_tuple] += 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            key = tuple(item)\n            if key not in sublists:\n                sublists[key] = 1\n            else:\n                sublists[key] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each element in the list\n    for item in list1:\n        # Convert the element to a tuple and check if the tuple is already in the dictionary\n        if tuple(item) in counts:\n            # Increment the count for the tuple by 1\n            counts[tuple(item)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tuple(item)] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # Initialize an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    # Loop through each element in the set\n    for element in set1:\n        # Convert the list element to a tuple\n        tuple1 = tuple(element)\n        # Check if the tuple is already in the dictionary\n        if tuple1 in sublist_count:\n            # If it is, increment the count by 1\n            sublist_count[tuple1] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[tuple1] = 1\n    # Return the sublist_count dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of unique sublists\n    count_dict = {}\n    # Loop through the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        tuple_sublist = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tuple_sublist] = 1\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # initialize an empty dictionary\n    unique_count = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # convert the element to a tuple and check if it is already in the dictionary\n        if tuple(element) not in unique_count:\n            # if it's not, add it to the dictionary with a value of 1\n            unique_count[tuple(element)] = 1\n        else:\n            # if it is, increment its value by 1\n            unique_count[tuple(element)] += 1\n    \n    # return the dictionary\n    return unique_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in unique_sublists:\n            unique_sublists[sublist] += 1\n        else:\n            unique_sublists[sublist] = 1\n    return unique_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_dict = {}\n    \n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # if the tuple is already in the dictionary, increment its value by 1\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    \n    # return the dictionary\n    return sublist_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Split the string into parts based on the decimal point\n    parts = num.split('.')\n\n    # Check if there are two parts\n    if len(parts)!= 2:\n        return False\n\n    # Check if the first part is a number\n    if not parts[0].isdigit():\n        return False\n\n    # Check if the second part is a number with a precision of 2\n    if not parts[1].isdigit() or len(parts[1]) > 2:\n        return False\n\n    # Convert the first part to an integer and check if the second part is equal to 2\n    int_part = int(parts[0])\n    if int_part == 0:\n        return False\n    elif int_part == 1 and parts[1] == '0':\n        return False\n    else:\n        return int_part == 1 and parts[1] == '1'"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        num = int(num)\n        num = float(str(num).rstrip('0').rstrip('.'))\n        if num % 1!= 0:\n            return False\n        if str(num).count('.')!= 1:\n            return False\n        if len(str(num).split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) == 2 and decimal_part.isdigit():\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function checks whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        return float_num.is_integer() and abs(float_num - int(float_num)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            return all(c in '0123456789.' for c in num) and len(num.split('.')[1]) <= 2\n        else:\n            return len(num) <= 10\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if num.find('.')!= -1:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if len(num) > 15:\n        return False\n\n    for digit in num:\n        if digit == '.':\n            if num.count('.') > 1:\n                return False\n        else:\n            if int(digit) > 9 or int(digit) < 0:\n                return False\n\n    if '.' in num:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) > 2:\n            return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    # create a set to remove duplicates\n    unique_set = set(arr)\n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # if the length of the set is equal to 1, then all elements are unique\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list contains any duplicates\n    if len(arr)!= len(set(arr)):\n        return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #convert the list to set\n    unique_numbers = set(arr)\n    #check if the length of the set is 1 or not\n    if len(unique_numbers) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize a set to store the unique elements of the list\n    unique_elements = set()\n    \n    # Loop through each element in the list\n    for element in arr:\n        # Add the element to the set if it's not already there\n        if element not in unique_elements:\n            unique_elements.add(element)\n            \n    # Check if there's only one element in the set\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) > 1:\n        for i in range(len(arr)):\n            if i == 0:\n                for j in range(i + 1, len(arr)):\n                    if arr[i] == arr[j]:\n                        return False\n            else:\n                for j in range(i):\n                    if arr[i] == arr[j]:\n                        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check for non-integer input\n    if not isinstance(monthnum3, int):\n        return 'Invalid input! Month number must be an integer.'\n    # Check for month number between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return 'Invalid input! Month number must be between 1 and 12.'\n    # Check if month has 30 days\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        elif year % 4 == 0 and year % 100 == 0 or year % 400!= 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # if the month number is divisible by 3, it contains 30 days\n    if monthnum3 % 3 == 0:\n        return True\n\n    # if the month number is divisible by 2, it contains 31 days\n    elif monthnum3 % 2 == 0:\n        return False\n\n    # if the month number is not divisible by 3 or 2, it contains 30 or 31 days\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if month number is 3 or 6 or 9 or 12, the month has 30 days\n    if monthnum3 in [3, 6, 9, 12]:\n        print(f\"The given month number {monthnum3} has 30 days.\")\n    # if month number is 2, it could be a leap year or not, so we need to check 28 or 29\n    elif monthnum3 == 2:\n        # if the year is divisible by 4, it is a leap year, so month number 2 has 29 days\n        if year % 4 == 0:\n            print(f\"The given month number {monthnum3} has 29 days.\")\n        # otherwise, it has 28 days\n        else:\n            print(f\"The given month number {monthnum3} has 28 days.\")\n    # if the month number is 4, 6, 9, 11 or 12, it has 31 days\n    elif monthnum3 in [4, 6, 9, 11, 12]:\n        print(f\"The given month number {monthnum3} has 31 days.\")\n    # if the month number is not in the given range, print an error message\n    else:\n        print(f\"Error: Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # checking if the month number is between 1 to 12\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        # checking if the month number contains 30 days or not\n        if monthnum3 == 2 and (monthnum3 % 2 == 0 or monthnum3 % 4 == 0):\n            print(monthnum3, \"contains 30 days.\")\n        elif monthnum3 % 2 == 0 or monthnum3 % 4 == 0:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")\n    else:\n        print(\"Invalid month number. Please enter a month number between 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the month number is valid\n    if not (1 <= monthnum3 <= 12):\n        return \"Invalid month number\"\n\n    # check if the month number contains 30 days\n    if monthnum3 % 2 == 0:\n        return \"30 days in February and April, May, July, August, October, and November\"\n    else:\n        return \"31 days in all other months\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the input is a valid month number\n    if not (1 <= monthnum3 <= 12):\n        return \"Invalid input. Month number should be between 1 and 12.\"\n    \n    # Check if the month number contains 30 days\n    if monthnum3 == 2:\n        return \"February has 28 or 29 days.\"\n    elif monthnum3 in (4, 6, 9, 11):\n        return \"Months with 30 days are April, June, September, and November.\"\n    else:\n        return \"All other months have 30 days.\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum value in the array\n    min_val = min(arr)\n\n    # Initialize the minimum difference as the difference between the maximum value and the minimum value\n    min_diff = max_val - min_val\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the difference between the current element and the minimum value\n        diff = abs(arr[i] - min_val)\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Find the minimum difference between any two elements\n    min_diff = abs(arr[1] - arr[0])\n\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Find the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i - 1])\n\n        # Update the minimum difference if the current difference is less than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n    # Iterate over the array and calculate the difference between adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize minimum difference as positive infinity\n    min_diff = float('inf')\n\n    # loop through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # calculate the difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n\n            # update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Iterate through the array and calculate the difference between each element and the previous element\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n): \n    arr.sort() # Sort the array in ascending order \n    min_diff = float('inf') # Initialize the minimum difference variable \n\n    for i in range(n-1): \n        diff = abs(arr[i+1] - arr[i]) \n        if diff < min_diff: \n            min_diff = diff \n\n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')  # initialize minimum difference to positive infinity\n    \n    # loop through all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # compute difference between i and j\n            diff = arr[i] - arr[j]\n            \n            # check if difference is smaller than current minimum\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to keep track of the minimum and maximum values\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n-1] - arr[n-2]\n\n    # Iterate through the array and calculate the minimum and maximum differences between any two elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function takes in a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def nth_polite_number(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 5\n        else:\n            # calculate the nth polite number using the math library\n            return math.ceil(math.log2(n + 1))\n    \n    # call the nth_polite_number function with n\n    polite_number = nth_polite_number(n)\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 21\n    elif n == 12:\n        return 23\n    elif n == 13:\n        return 25\n    elif n == 14:\n        return 27\n    elif n == 15:\n        return 29\n    elif n == 16:\n        return 31\n    elif n == 17:\n        return 33\n    elif n == 18:\n        return 35\n    elif n == 19:\n        return 37\n    elif n == 20:\n        return 39\n    elif n == 21:\n        return 41\n    elif n == 22:\n        return 43\n    elif n == 23:\n        return 45\n    elif n == 24:\n        return 47\n    elif n == 25:\n        return 49\n    elif n == 26:\n        return 51\n    elif n == 27:\n        return 53\n    elif n == 28:\n        return 55\n    elif n == 29:\n        return 57\n    elif n == 30:\n        return 59\n    elif n == 31:\n        return 61\n    elif n == 32:\n        return 63\n    elif n == 33:\n        return 65\n    elif n == 34:\n        return 67\n    elif n == 35:\n        return 69\n    elif n == 36:\n        return 71\n    elif n == 37:\n        return 73\n    elif n == 38:\n        return 75\n    elif n == 39:\n        return 77\n    elif n == 40:\n        return 79\n    elif n == 41:\n        return 81\n    elif n == 42:\n        return 83\n    elif n == 43:\n        return 85\n    elif n == 44:\n        return 87\n    elif n == 45:\n        return 89\n    elif n == 46:\n        return 91\n    elif n == 47:\n        return 93\n    elif n == 48:\n        return 95\n    elif n == 49:\n        return 97\n    elif n == 50:\n        return 99\n    elif n == 51:\n        return 101\n    elif n == 52:\n        return 103\n    elif n == 53:\n        return 105\n    elif n == 54:\n        return 107\n    elif n == 55:\n        return 109\n    elif n == 56:\n        return 111\n    elif n == 57:\n        return 113\n    elif n == 58:\n        return 115\n    elif n == 59:\n        return 117\n    elif n == 60:\n        return 119\n    elif n == 61:\n        return 121\n    elif n == 62:\n        return 123\n    elif n == 63:\n        return 125\n    elif n == 64:\n        return 127\n    elif n == 65:\n        return 129\n    elif n == 66:\n        return 131\n    elif n == 67:\n        return 133\n    elif n == 68:\n        return 135\n    elif n == 69:\n        return 137\n    elif n == 70:\n        return 139\n    elif n == 71:\n        return 141\n    elif n == 72:\n        return 143\n    elif n == 73:\n        return 145\n    elif n == 74:"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return 1\n    \n    count = 1\n    i = 2\n    while count < n:\n        i += 1\n        if i % 2 == 1 and is_prime(i):\n            count += 1\n    \n    return i\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize variables\n    num = 0\n    den = 1\n    polite_num = 0\n\n    # Calculate the nth polite number\n    for i in range(1, n+1):\n        num = num*2 + 1\n        den = den*2\n\n        # If the den becomes zero, it means the numerator is one and we can multiply it with the polite_num and divide the den by 2\n        while den == 0:\n            num *= 2\n            den = 1\n        \n        # If the numerator becomes odd, it means the nth polite number is odd, so we can add it to the polite_num\n        if num % 2 == 1:\n            polite_num += num\n    \n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables\n    a, b = 0, 1\n\n    # Iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the next number in the sequence\n        c = (a+b) % 1000\n\n        # If the number is a polite number, return True\n        if c <= 500:\n            return True\n\n        # Update the values of a and b\n        a, b = b, c\n\n    # If the loop has not returned yet, it means that n is not a polite number\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    else:\n        num = 0\n        if n % 2 == 0:\n            num = 2\n        else:\n            num = 3\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                num = 0\n                break\n        if num == 0:\n            return n\n        else:\n            return is_polite(n-1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 0\n    i = 1\n    while i <= n:\n        if is_prime(i):\n            polite += 1\n            if polite == n:\n                return i\n        i += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_polite(x):\n        y = 1\n        z = 1\n        for i in range(1, n):\n            y *= x\n            z *= (x - 1) // 2\n        return y * z\n    \n    def nth_prime(x):\n        y = 1\n        for i in range(1, n):\n            y *= x\n            if is_prime(y):\n                return y\n        return -1\n    \n    x = 1\n    while not is_prime(x):\n        x += 1\n    return nth_polite(x)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite_count = 0\n    polite_num = 0\n    polite_num_prev = 0\n    polite_prime = False\n\n    while polite_count < n:\n        polite_count += 1\n        if is_prime(polite_count):\n            polite_prime = True\n        if polite_prime:\n            polite_num = polite_count\n            polite_num_prev = polite_count - 1\n\n    return polite_num, polite_num_prev"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the n-th polite number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return is_polite(n-1) + 2\n\ndef nth_polite_number(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    return is_polite(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    return list(zip(*lst[1:]))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if i+1 < len(lst):\n            result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum' in the list 'arr'.\n    '''\n\n    pairs = 0\n\n    # Iterate through the list of numbers\n    for i in range(len(arr)):\n        # Check if the current number is less than the sum\n        if arr[i] < sum:\n            # If it is, check if the next number is less than the sum as well\n            for j in range(i+1, len(arr)):\n                if arr[j] < sum:\n                    # If it is, increment the count of pairs\n                    pairs += 1\n\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    n = len(arr)\n    \n    # Using two pointers approach\n    for i in range(n):\n        left = i+1\n        right = n-1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == sum:\n                pairs_count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n                \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes a list of numbers and the sum as inputs.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and the sum as input and returns the count of pairs whose sum is equal to sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    #Creating a new empty list to store the difference\n    diff = []\n\n    #Looping through the elements of the first list\n    for i in range(len(li1)):\n\n        #If the element is present in the second list, then append it to the difference list\n        if li1[i] in li2:\n            diff.append(li1[i])\n\n    #Returning the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference of the two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists as input and returns a new list containing the elements that are present only in the first list and not in the second list.\n    \"\"\"\n    # First, create a set of elements in the first list\n    set1 = set(li1)\n    # Then, create a set of elements in the second list\n    set2 = set(li2)\n    # Finally, subtract the two sets and convert it back to a list\n    return list(set1.difference(set2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for element in li1:\n        if element not in li2:\n            result.append(element)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are in list1 but not in list2.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            count += 1\n            total += i ** 4\n            if count == 4:\n                break\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_fourth_pow = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum_fourth_pow += i**4\n        count += 1\n    return sum_fourth_pow\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        odd_num = 3 * i + 1\n        sum += odd_num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 1 # initialize counter\n    sum_of_fourth_power = 0 # initialize sum of fourth power\n    while count <= n: # loop while count is less than or equal to n\n        if count % 2!= 0: # if count is odd\n            sum_of_fourth_power += count**4 # add fourth power of odd numbers to sum\n        count += 1 # increment counter\n    return sum_of_fourth_power # return sum of fourth power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(2, n*4, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Initialize two stacks to keep track of opening and closing parentheses\n    opening_stack = deque()\n    closing_stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            opening_stack.append(char)\n        # If the character is a closing parenthesis, pop the top element from the stack\n        elif char == ')':\n            if not opening_stack:\n                return False\n            top_opening = opening_stack.pop()\n            if top_opening == '(':\n                closing_stack.append(char)\n            else:\n                return False\n        # If the character is neither an opening nor a closing parenthesis, check if it's a balanced expression\n        else:\n            if closing_stack:\n                top_closing = closing_stack[-1]\n                if top_closing == '(':\n                    closing_stack.append(char)\n                else:\n                    return False\n            else:\n                return False\n\n    # If the stack is not empty, it means there are unmatched opening parentheses, so the expression is not balanced\n    if opening_stack:\n        return False\n\n    # If the expression is balanced, return True\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack:\n                return False\n            if char!= bracket_map[stack[-1]]:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0 or not check_priority(i, stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check_priority(i, top):\n    '''\n    Helper function to check the priority of the closing parenthesis.\n    '''\n    if i in ['(', '{', '[']:\n        return True\n    if i in [')', '}', ']']:\n        if top in ['(', '{', '[']:\n            return True\n        else:\n            return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            left = stack.pop()\n            if exp[left:i+1].count('(')!= exp[left:i+1].count(')'):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack:\n                return False\n            if stack[-1] in opening_brackets:\n                if bracket == opening_brackets.index(stack[-1]):\n                    stack.pop()\n                else:\n                    return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'[', '{', '('}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in ['}', ')', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in [')', ']']:\n                if top_char in ['(', '{', '[']:\n                    return False\n            elif char in ['}', ']']:\n                if top_char in ['[', '(', '{']:\n                    return False\n            elif char in ['}', ')', ']']:\n                if top_char == char:\n                    return False\n\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words without k length\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, append the word to the result list\n            result.append(word)\n    # Join the words in the result list into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the words without length K\n    filtered_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is less than K\n        if len(word) < K:\n            # if the word has length less than K, append it to the filtered_words list\n            filtered_words.append(word)\n    # join the filtered_words list into a string\n    result =''.join(filtered_words)\n    # return the filtered string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    \n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    new_words = [] # create a new list to store the new words\n    for word in words:\n        if len(word)!= K: # if the length of the word is not equal to K\n            new_words.append(word) # append the word to the new list\n    return''.join(new_words) # join the new list of words into a string with spaces in between"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Convert pattern to regex pattern\n    regex_pattern = re.compile(pattern)\n    # Find all the occurrences of pattern in the text\n    matches = regex_pattern.finditer(text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Create a dictionary to store the occurrences and positions\n    result = {}\n    for match in matches:\n        result[match.group()] = (match.start(), match.end())\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to match the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Find the position of the first match and iterate over the matches\n    position = 0\n    for match in matches:\n        # Increment the position by the length of the pattern\n        position += len(match.group())\n    \n    # Return the position and occurrence of the first match\n    return position, 1"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    for match in matches:\n        index = text.find(match)\n        print(\"Substring '{}' found at index {} in string '{}'\".format(match, index, text))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to search for pattern in text\n    matches = re.finditer(pattern, text)\n\n    # Initialize variables to store results\n    occurrence = None\n    position = None\n\n    # Loop through matches and find the first match with non-zero starting position\n    for match in matches:\n        if match.start()!= 0:\n            continue\n        else:\n            occurrence = match.group()\n            position = match.start()\n            break\n\n    return occurrence, position"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match {matchNum}: {match.start()}, Match {matchNum}: {match.end()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if (i % 2 == 1 and nums[i] % 2 == 0) or (i % 2 == 0 and nums[i] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            count += 1\n            if count == 1:\n                print('Index', i, 'contains odd number:', nums[i])\n    if count == 0:\n        print('Every odd index contains odd numbers.')"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if sum(nums[i-1:i]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    # iterate through the list and check if every odd index contains odd numbers\n    for i in range(len(nums)):\n        if i % 2 == 0:  # only check even indices\n            if nums[i] % 2 == 0:  # check if the number at the even index is odd\n                return False  # if not, return False\n    return True  # if all numbers are odd, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and (i+1) % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n        else:\n            break\n    if odd_count == len(nums) // 2:\n        print(\"The list contains every odd index with odd numbers.\")\n    else:\n        print(\"The list does not contain every odd index with odd numbers.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(set(nums[i:])) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #initialize a dictionary to keep track of the number of vowels for each character\n    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n\n    #loop through each character in the string\n    for char in test_str:\n        #if the character is a vowel, increment the count in the dictionary\n        if char in vowels:\n            vowels[char] += 1\n\n    #loop through each character in the string again, and count the number of vowels as neighbors\n    count = 0\n    for char in test_str:\n        #if the character is a vowel and has a vowel as its neighbor, increment the count\n        if char in vowels and vowels[char] > 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] == test_str[i-1]:\n                if test_str[i] in vowels:\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels) and (i == len(test_str)-1 or test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Calculate the sum of the unique set\n    sum_of_unique = sum(unique_set)\n\n    # Return the sum of unique set\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    '''\n\n    # Initialize a set to store the non-repeated elements\n    unique_elements = set()\n\n    # Traverse the list and add each element to the set only if it's not already in the set\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.add(element)\n\n    # Convert the set to a list and sum all the elements\n    sum_of_unique_elements = sum(unique_elements)\n\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    total = 0\n\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total += num\n\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the unique set and add each element to the sum\n    for element in unique_set:\n        sum += element\n    # Return the sum of non-repeated elements in the list\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of all unique elements in the list.\n    If there are duplicate elements in the list, the function will remove them before computing the sum.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n    # Convert the set back to a list\n    unique_list = list(unique_elements)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_list)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements from the given list\n    unique_elements = set(arr)\n\n    # initialize the sum of non-repeated elements to zero\n    sum_non_repeated = 0\n\n    # iterate over the unique elements and add their value to the sum of non-repeated elements\n    for element in unique_elements:\n        sum_non_repeated += element\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_set = set(arr)\n    total_sum = 0\n    for num in unique_set:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = []\n    for i in arr:\n        if i not in unique_arr:\n            unique_arr.append(i)\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # Dictionary to store unique elements and their indices in the list\n    unique_dict = {}\n    \n    # Loop through the list and add unique elements to the dictionary\n    for i in range(len(arr)):\n        if arr[i] not in unique_dict:\n            unique_dict[arr[i]] = [i]\n        else:\n            unique_dict[arr[i]].append(i)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the unique dictionary and add the sum of each element to the sum variable\n    for key in unique_dict:\n        sum += sum(unique_dict[key])\n    \n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        if k == None:\n            continue\n        else:\n            sublist = list(g)\n            yield sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # loop through the list and group the consecutive duplicates by their index\n    for i, item in enumerate(list1):\n        if i > 0 and item == list1[i-1]:\n            # if the current item is consecutive, pack them into a sublist\n            if i+1 == len(list1):\n                # if the end of the list is reached, add the last item to the sublist\n                yield [item]\n            else:\n                # if there are more items after the current item, add them to the sublist\n                yield [item] + [list1[i+1]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a generator object from the input list\n    gen = groupby(list1)\n    # create an empty list to store sublists\n    result = []\n    # iterate over the generator object\n    for key, group in gen:\n        # if the length of the group is greater than one, append the group to the result list\n        if len(list(group)) > 1:\n            result.append(list(group))\n    # return the result list\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Helper function to group consecutive elements by their value\n    def group_by_value(iterable):\n        return groupby(enumerate(iterable), lambda x: x[1])\n\n    # Use the helper function to group consecutive elements by their value\n    grouped_lst = group_by_value(lst)\n\n    # Use a list comprehension to extract the sublists of consecutive duplicates\n    sublists = [sublist[1] for sublist in grouped_lst if len(list(sublist[1])) > 1]\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    return [(k, list(g)) for k, g in grouped_list if len(list(g)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in list1:\n        if len(list(groupby(list1, lambda x: x == item))) > 1:\n            result.append([item])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use groupby to group the consecutive duplicates and their indices\n    grouped_list = list(groupby(enumerate(list1), lambda x: x[1] == x[0] + 1))\n    \n    # create an empty list to store the packed sublists\n    packed_list = []\n    \n    # iterate through the grouped list and append each sublist to the packed list\n    for i, group in grouped_list:\n        # group[0] contains the indices of the consecutive duplicates in the original list\n        # group[1] contains the consecutive duplicates themselves\n        # group[1] is a list of tuples containing the indices of consecutive duplicates and their values\n        sublist = [list1[i] for i in group[0]]\n        packed_list.append(sublist)\n    \n    # return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements based on their values\n    grouped_list = groupby(enumerate(list1), lambda x: x[1])\n    # Create an empty list to store the sublists\n    sublists = []\n    # Iterate through the grouped list and add sublists of consecutive duplicates\n    for key, group in grouped_list:\n        if key == 0:\n            sublists.append(list(group))\n        elif key > 0:\n            sublists[-1].extend(list(group))\n    # Return the sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group_list = []\n    for key, group in groupby(sorted(list1)):\n        if key == list1[0]:\n            group_list.append(list(group))\n        else:\n            group_list.append([list1[0]])\n            group_list.append(list(group))\n    return group_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use groupby() to group consecutive duplicates of elements\n    grouped_list = list(groupby(list1))\n    # initialize an empty list to store sublists\n    sublists = []\n    # loop through each group of consecutive duplicates\n    for i, group in grouped_list:\n        # check if the group contains only one element\n        if len(group) == 1:\n            continue\n        # pack the consecutive duplicates into a sublist and append it to the sublists list\n        sublists.append(list(group))\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        unique_lists[tuple(sublist)] = unique_lists.get(tuple(sublist), 0) + 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary to store the counts\n    counts = {}\n\n    # loop through the list of lists\n    for sublist in list1:\n        # turn the sublist into a tuple and check if it is already in the dictionary\n        if (tuple(sublist),) in counts:\n            # if it is, increment its count\n            counts[(tuple(sublist),)] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            counts[(tuple(sublist),)] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through the lists in the input list\n    for item in list1:\n        # Turn the list to a tuple\n        tup = tuple(item)\n        # If the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # Otherwise, add the tuple and its count to the dictionary\n        else:\n            counts[tup] = 1\n\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if tuple(item) not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if sublist not in count:\n            count[sublist] = 1\n        else:\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Convert the list into a set to remove duplicates\n    unique_list = set(list1)\n\n    # Initialize an empty dictionary\n    sublists_dict = {}\n\n    # Iterate over the unique list\n    for i in unique_list:\n        # Count the occurrences of the current list\n        count = list1.count(i)\n\n        # Convert the list to a tuple and add it to the dictionary with the count\n        sublists_dict[tuple(i)] = count\n\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through the list of lists\n    for sublist in list1:\n        # convert the list to a tuple and add it to the dictionary with a count of 1\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            key = tuple(item)\n            if key in count:\n                count[key] += 1\n            else:\n                count[key] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for i in range(len(list1)):\n        temp_list = list1[i]\n        tuple_list = tuple(temp_list)\n        if tuple_list in list_dict:\n            list_dict[tuple_list] += 1\n        else:\n            list_dict[tuple_list] = 1\n    return list_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the list to a tuple and check if it is in the dictionary\n        if tuple(element) in count_dict:\n            # If it is, increment its value by 1\n            count_dict[tuple(element)] += 1\n        else:\n            # If it isn't, add it to the dictionary with a value of 1\n            count_dict[tuple(element)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples from the given list\n    tuples = set(tuple(test_list[i:i+2]) for i in range(len(test_list)-1))\n    # Find all combinations of two numbers that add up to the target sum\n    for target in tuples:\n        for combination in combinations(tuples, 2):\n            if sum(combination) == target:\n                print(\"Sum: {}, Tuple: {}\".format(sum(combination), tuple(combination)))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # combine all the tuples in the given list\n    all_tuples = [tuple(x) for x in test_list]\n    # sort all the tuples in ascending order\n    all_tuples.sort()\n    # find all possible combinations of sums\n    combinations_of_sums = [x for x in combinations(all_tuples, len(test_list))]\n    # remove duplicates and return the final list\n    final_list = list(set(combinations_of_sums))\n    return final_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = combinations(test_list[i], j-i+1)\n            for c in comb:\n                if sum(c) == 0:\n                    result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Iterate through all possible pairs of tuples in the test list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the two tuples\n            sum_val = test_list[i] + test_list[j]\n            # Check if the sum is present in the test list\n            if sum_val in test_list:\n                # Find the corresponding tuple and add it to the combinations set\n                tuple_val = (test_list[i], test_list[j])\n                combinations_set.add(tuple_val)\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    n = len(test_list)\n    test_list.sort()\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum((test_list[i], test_list[j], test_list[k])) in test_list:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Generate all possible combinations of sums\n    all_combinations = combinations(test_list, len(test_list))\n\n    # Filter out combinations that don't have the required sum\n    filtered_combinations = filter(lambda x: sum(x) == target, all_combinations)\n\n    # Return the filtered combinations as a list\n    return list(filtered_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize the result list to store the combinations\n    result = []\n    # sort the given list of tuples\n    test_list.sort()\n    # iterate over all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # if the difference between the sums of the current pair of tuples is zero, add the pair to the result list\n            if test_list[i][0] + test_list[j][0] == 0:\n                result.append((test_list[i], test_list[j]))\n    # return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = set()\n    for tup in test_list:\n        for i in range(len(tup)):\n            if i == 0:\n                sums.add(tup[i])\n            else:\n                sums.add(tup[i] + sums.pop())\n    return list(combinations(sums, 2))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(test_list[i], test_list[j], test_list[k])\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns a list of all combinations of sums with tuples in the list.\n    '''\n    # Use itertools.combinations() to generate all combinations of sums with tuples in the given list\n    combs = list(combinations(test_list, len(test_list[0])))\n    # Remove duplicate combinations and sort the list in ascending order\n    combs = sorted(list(set(combs)))\n    return combs"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, and False otherwise.\n    \"\"\"\n    def count_divisors_helper(n):\n        \"\"\"\n        This function recursively counts the divisors of n using the helper function count_divisors_helper_helper.\n        \"\"\"\n        if n == 1:\n            return 0\n        elif n % 2 == 0:\n            return 2 + count_divisors_helper(n//2)\n        else:\n            return 1 + count_divisors_helper(n-1)\n    \n    count = count_divisors_helper(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculate the sum of divisors\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    \n    # check if the sum of divisors is even\n    if sum_div % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function will take a number as input and return True if the count of divisors is even, else False.\n    The function uses the math.factorial() function to calculate the count of divisors of a number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n    \n    if divisors_count % 2 == 0:\n        print(f\"{n} has an even count of divisors.\")\n    else:\n        print(f\"{n} has an odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            divisors.append(i)\n            if i!= n // i : \n                divisors.append(n // i)\n    count = len(divisors)\n    if count % 2 == 0 : \n        print(\"The count of divisors is even.\")\n    else : \n        print(\"The count of divisors is odd.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    count += 1 if n > 1 else 0\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even or odd.\n    '''\n    if n == 1:\n        return '1 is not divisible by any number.'\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 2 and n % 2 == 0:\n        count += 1\n    return f'{n} has {count} divisors.'\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # finding number of divisors of n using math.factorial() function\n    factors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    divisors = [x for x in range(1, n+1) if n % x == 0 and x not in factors]\n\n    # checking count of divisors is even or not\n    if sum(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    total_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd\n        if i % 2 == 1:\n            # Initialize a variable to store the current sum of the subarray\n            current_sum = 0\n            # Iterate through the array from the current index to the end\n            for j in range(i, len(arr)):\n                # Add the current element to the current sum\n                current_sum += arr[j]\n                # Check if the current sum is odd length\n                if j - i + 1 % 2 == 1:\n                    # Add the current sum to the total sum\n                    total_sum += current_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_odd += arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    \n    for i in range(1, len(arr)):\n        if i % 2 == 1: # if i is odd\n            sum_odd_length_subarrays += arr[i] # add the element to the sum\n    \n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd = 0\n    max_sum = 0\n\n    for i in range(n):\n        if i < n-1:\n            count += 1\n            sum_odd += arr[i]\n        else:\n            if count % 2 == 0:\n                sum_odd -= arr[i-1]\n            max_sum = max(max_sum, sum_odd)\n            count -= 1\n            sum_odd = 0\n\n    return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    total = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                total += arr[j] - arr[i]\n                \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_of_odd_length_subarrays = 0\n\n    for i in range(1, n):\n        if i % 2 == 1:\n            sum_of_odd_length_subarrays += arr[i]\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize sum of all odd length subarrays as 0\n    odd_sum = 0\n    # Initialize variable to store the current sum of odd length subarrays\n    current_sum = 0\n    \n    for i in range(n):\n        # If the current element is odd and the sum of all previous odd length subarrays is even, update the sum of current odd length subarray\n        if arr[i] % 2 == 1 and current_sum % 2 == 0:\n            current_sum += arr[i]\n        # If the current element is odd and the sum of all previous odd length subarrays is odd, add the current element to the sum of current odd length subarray\n        elif arr[i] % 2 == 1 and current_sum % 2 == 1:\n            current_sum += arr[i]\n        # If the current element is even and the sum of all previous odd length subarrays is even, add the current element to the sum of current odd length subarray\n        elif arr[i] % 2 == 0 and current_sum % 2 == 0:\n            current_sum += arr[i]\n        # If the current element is even and the sum of all previous odd length subarrays is odd, add the current element to the sum of current odd length subarray\n        elif arr[i] % 2 == 0 and current_sum % 2 == 1:\n            current_sum += arr[i]\n        # If the current element is the last element and the sum of all previous odd length subarrays is even, add the current element to the sum of current odd length subarray\n        elif i == n-1 and current_sum % 2 == 0:\n            current_sum += arr[i]\n        # If the current element is the last element and the sum of all previous odd length subarrays is odd, update the sum of current odd length subarray\n        elif i == n-1 and current_sum % 2 == 1:\n            current_sum += arr[i]\n        # If the current element is the first element and the sum of all previous odd length subarrays is even, update the sum of current odd length subarray\n        elif i == 0 and current_sum % 2 == 0:\n            current_sum += arr[i]\n        # If the current element is the first element and the sum of all previous odd length subarrays is odd, update the sum of current odd length subarray\n        elif i == 0 and current_sum % 2 == 1:\n            current_sum += arr[i]\n        # If the current element is the first element and the sum of all previous odd length subarrays is even, update the sum of current odd length subarray\n        elif i == 0 and current_sum % 2 == 0:\n            current_sum += arr[i]\n        # If the current element is the first element and the sum of all previous odd length subarrays is odd, update the sum of current odd length subarray\n        elif i == 0 and current_sum % 2 == 1:\n            current_sum += arr[i]\n        # Update the sum of all odd length subarrays\n        odd_sum = current_sum\n    \n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1%2 == 1:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum_odd = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current index is an odd index\n        if i % 2!= 0:\n            # Initialize the current subarray variable to the current element\n            subarray = arr[i]\n            # Iterate over the remaining elements of the array\n            for j in range(i+1, len(arr)):\n                # Check if the next index is an odd index\n                if j % 2!= 0:\n                    # Append the next element to the current subarray\n                    subarray.append(arr[j])\n                    # Calculate the sum of the current subarray\n                    odd_subarray_sum = sum(subarray)\n                    # Add the sum to the overall sum\n                    sum_odd += odd_subarray_sum\n                    # Reset the current subarray to the next element\n                    subarray = [arr[j]]\n\n    # Return the overall sum of all odd length subarrays\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0 # Scale RGB values to [0,1]\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    \n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    v = max_rgb\n    \n    s = delta / max_rgb\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    del_max_min = max_rgb - min_rgb\n    del_max_min = del_max_min if del_max_min!= 0 else 1\n\n    if max_rgb == r:\n        h = (g - b) / del_max_min\n    elif max_rgb == g:\n        h = 2 + (b - r) / del_max_min\n    else:\n        h = 4 + (r - g) / del_max_min\n\n    h = h * 60 if max_rgb == min_rgb else h\n\n    if h < 0:\n        h = h + 360\n\n    s = del_max_min / max_rgb\n\n    return h, s, max_rgb"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n    \"\"\"\n    # Convert RGB to HSV\n    h = 0\n    s = 0\n    v = max(r, g, b) / 255.0\n    delta = v - min(r, g, b) / 255.0\n    if delta == 0:\n        s = 0\n    elif v == r:\n        h = (g - b) / delta\n    elif v == g:\n        h = 2 + (b - r) / delta\n    elif v == b:\n        h = 4 + (r - g) / delta\n    if h < 0:\n        h += 6\n    h *= 60\n    if h < 0:\n        h += 360\n    s *= 100\n    s = int(s)\n    v *= 100\n    v = int(v)\n    # Return HSV values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    \n    # convert rgb to hsv\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    \n    if max_c == min_c:\n        h = 0\n    elif max_c == r:\n        h = 60 * ((g - b) / (max_c - min_c))\n    elif max_c == g:\n        h = 60 * ((b - r) / (max_c - min_c)) + 120\n    else:\n        h = 60 * ((r - g) / (max_c - min_c)) + 240\n    \n    if max_c == 0:\n        s = 0\n    else:\n        s = (max_c - min_c) / max_c\n    \n    v = max_c\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, and b to float values and subtract the minimum value to avoid division by zero\n    r = float(r) - min(r, g, b)\n    g = float(g) - min(r, g, b)\n    b = float(b) - min(r, g, b)\n\n    # Find the maximum value in the RGB color and calculate its index\n    max_val = max(r, g, b)\n    max_index = r == max_val and 0 or g == max_val and 1 or b == max_val and 2\n\n    # Convert the remaining values to floats and calculate the sum of the squares of the values\n    sum_square = r**2 + g**2 + b**2\n\n    # Calculate the sum of the values for the HSV color model\n    sum_values = r + g + b\n\n    # Calculate the value for the HSV color model\n    hsv_value = sum_values / 3\n\n    # Calculate the saturation for the HSV color model\n    if sum_values == 0:\n        saturation = 0\n    else:\n        saturation = sum_square / (sum_values / 3)\n\n    # Calculate the hue for the HSV color model\n    if max_index == 0:\n        h = (g - b) / (6 * hsv_value)\n    elif max_index == 1:\n        h = (b - r) / (6 * hsv_value) + 1\n    else:\n        h = (r - g) / (6 * hsv_value) + 2\n\n    # Convert the hue value to an integer and normalize it to a value between 0 and 1\n    h = int(h * 6)\n\n    # Return the HSV values as a tuple\n    return (h, saturation, hsv_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red color value in the range of [0, 255].\n        g (int): Green color value in the range of [0, 255].\n        b (int): Blue color value in the range of [0, 255].\n\n    Returns:\n        tuple: A tuple containing the following values:\n            h (int): Hue value in the range of [0, 360].\n            s (int): Saturation value in the range of [0, 100].\n            v (int): Value (brightness) value in the range of [0, 100].\n    \"\"\"\n    # Convert the RGB values to a float between 0 and 1\n    r_float = r / 255.0\n    g_float = g / 255.0\n    b_float = b / 255.0\n\n    # Convert the RGB values to the relative luminance (Y)\n    y = 0.2126 * r_float + 0.7152 * g_float + 0.0722 * b_float\n\n    # Convert the Y value to the relative chroma (C)\n    if r_float == g_float and r_float == b_float:\n        c = 0.0\n    else:\n        c = 1.0 - abs(2 * y - 1)\n\n    # Convert the RGB values to the relative hue (H)\n    if c == 0.0:\n        h = 0.0\n    elif r_float == g_float:\n        h = (b_float - c) / c\n    elif r_float == b_float:\n        h = (g_float - c) / c + 2.0\n    else:\n        h = (r_float - c) / c + 4.0\n\n    # Convert the H value to the hue in the range of [0, 360]\n    if h < 0.0:\n        h += 360.0\n\n    # Convert the chroma and luminance to the range of [0, 100]\n    h *= 60.0\n    s = 0.0 if c == 0.0 else (100.0 * c) / (1.0 - abs(2 * y - 1))\n    v = 100.0 * y\n\n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0, 0, max_val\n    \n    # Calculate saturation\n    delta = max_val - min_val\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n        \n    # Calculate hue\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    elif max_val == b:\n        h = 4 + (r - g) / delta\n        \n    # Normalize hue\n    h = h * 60\n    if h < 0:\n        h += 360\n        \n    # Convert to degrees and return\n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b values to float\n    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0\n    \n    # Find the maximum and minimum values of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the delta value of r, g, and b\n    delta = max_val - min_val\n    \n    # Find the hue, saturation, and value of the color\n    hue = None\n    saturation = None\n    value = max_val\n    \n    if delta == 0:\n        # achromatic color\n        hue = 0\n        saturation = 0\n    else:\n        if max_val == r:\n            hue = ((g - b) / delta) % 6\n        elif max_val == g:\n            hue = (b - r) / delta + 2\n        else:\n            hue = (r - g) / delta + 4\n        \n        # Normalize the hue to 0-360 degrees\n        hue = hue * 60\n        \n        # If hue is less than 0, add 360 to it\n        if hue < 0:\n            hue += 360\n        \n        # Convert hue and saturation to percentages\n        saturation = delta / max_val * 100\n        value = max_val / 255.0 * 100\n    \n    # Return the hsv color\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    return (h, s, cmax)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value of the color.\n        g (int): Green value of the color.\n        b (int): Blue value of the color.\n\n    Returns:\n        tuple: Tuple containing HSV values for the color.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_value\n\n    v = max_value / 255\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n        else:\n            odd_product *= num\n            odd_count += 1\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == 0 or odd_count == 0:\n        return \"No even or odd numbers found in the list.\"\n    else:\n        product = even_count * odd_count\n        return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Find the product of the first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an input and returns the product of the first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    # Iterate over the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    \n    # Check if there are an even and odd numbers\n    if even_count == 0 or odd_count == 0:\n        return 0\n    \n    # Return the product of the even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Loop through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # Check if there are any even numbers\n    if even_num == 0:\n        return None\n    # Check if there are any odd numbers\n    elif odd_num == 0:\n        return None\n    else:\n        # Calculate the product of even and odd numbers\n        result = even_num * odd_num\n        return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= min(even_count, odd_count)\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    '''\n    product = 1\n    for num in lst:\n        if num % 2 == 0 and num!= 0:\n            product *= num\n        elif num % 2!= 0 and num!= 0:\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer\n    int_list = [int(num) for num in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for elem in test_str:\n        if elem.isdigit():\n            int_list.append(int(elem))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def string_to_tuple(s):\n        \"\"\"\n        Converts a string to a tuple of integers.\n        \"\"\"\n        return tuple(map(int, s.split(',')))\n\n    test_str = test_str.strip('[]')\n    tup = string_to_tuple(test_str)\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # convert string to list\n    lst_str = list(test_str)\n\n    # create empty integer list\n    lst_int = []\n\n    # loop through list and convert each element to integer\n    for item in lst_str:\n        try:\n            lst_int.append(int(item))\n        except ValueError:\n            pass\n\n    # convert integer list to tuple\n    tup_int = tuple(lst_int)\n\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple\n        my_tuple = eval(test_str)\n        # Check if tuple contains only integers\n        if all(isinstance(x, int) for x in my_tuple):\n            return my_tuple\n        else:\n            print('Tuple contains non-integer elements.')\n    except Exception as e:\n        print('Error:', e)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and convert each element to integer\n    tuple_int = tuple([int(x) for x in test_str.split(',')])\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings using the comma as the separator\n    lst = test_str.split(',')\n    # Convert each string to an integer and append it to a list\n    int_lst = [int(x) for x in lst]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to list of tuples\n    tup_list = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")\n    # convert each tuple to integer and store in a new list\n    int_list = [int(num) for num in tup_list]\n    # return new list\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into individual tuples\n    result = tuple(map(int, test_str.split(',')))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for item in test_str:\n        if item.isdigit():\n            result.append(int(item))\n        elif item == ',':\n            pass\n        else:\n            raise ValueError('Invalid character in tuple string')\n    return tuple(result)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect_right() method from the bisect module to find the insertion point\n    index = bisect.bisect_right(a, x)\n    # If the value is already present in the sorted list, return the index\n    if index < len(a) and a[index] == x:\n        return index\n    # If the value is greater than all the elements in the list, return the length of the list\n    elif index == len(a):\n        return len(a)\n    # If the value is smaller than the first element in the list, return 0\n    else:\n        return 0"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index-1] + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        if a[0] >= x:\n            return 0\n        else:\n            return 1\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the index where x should be inserted\n    index = bisect.bisect_right(a, x)\n    \n    # If x already exists in the list, then its index is the insertion point\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # Otherwise, find the closest value to x that is smaller than x\n    if index == 0:\n        return 0\n    elif a[index-1] < x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the binary search algorithm to find the right insertion point for x in a\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        # If x is greater than all elements in a, append x to the end of the list\n        a.append(x)\n        return len(a) - 1\n    elif index == 0:\n        # If x is less than the first element in a, insert it at index 0\n        a.insert(0, x)\n        return 0\n    else:\n        # If x is between two elements, insert it at the next index\n        a.insert(index, x)\n        return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    This function takes a sorted list of integers a and a value x and returns the index where x should be inserted\n    such that all elements to its left are smaller than x and all elements to its right are larger than x.\n    If x is already present in a, it returns the index of the leftmost occurrence of x.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        i -= 1\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a\\bb\\bb\\b')\n    match = pattern.search(text)\n\n    if match:\n        print(\"The string '{}' contains a three 'b's\".format(text))\n    else:\n        print(\"The string '{}' does not contain a three 'b's\".format(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{2}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?i)a(?=bb)'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The aaaabbbbb is a match.\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): List of values to include in the new tuple.\n        test_str (str): String to include in the new tuple.\n\n    Returns:\n        tuple: New tuple with the list and string values.\n\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and the string into a single string\n    new_string = test_str.join(test_list)\n    # Convert the concatenated string into a list of characters\n    new_list = list(new_string)\n    # Create a new tuple from the list of characters\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into one list\n    combined_list = test_list + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and string into a single list\n    combined_list = [test_str] + test_list\n    \n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to tuple\n    new_tuple = tuple(test_list)\n    # Concatenate the two tuples\n    final_tuple = test_str + new_tuple\n    # Return the final tuple\n    return final_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a new tuple\n    new_tuple = tuple(test_list + test_str)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and append the string to it\n    new_list = tuple(test_list) + (test_str,)\n    # Return the new tuple\n    return new_list"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i, len(nums), 2):\n                count += 1\n                if nums[j] % 2!= 0:\n                    break\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(len(nums)):\n            if nums[j] % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n    \n    if even_count == len(nums):\n        print(\"Every even index contains even numbers.\")\n    else:\n        print(\"Not all even indices contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Iterate through the list and check if the current element is even\n    for i in range(0, len(nums), 2):\n        # If the current element is even, check if it contains even numbers\n        if nums[i] % 2 == 0:\n            count = 0\n            # Iterate through the remaining elements from the current index until the end of the list\n            for j in range(i, len(nums)):\n                # If an even number is found, increment the count\n                if nums[j] % 2 == 0:\n                    count += 1\n            # If the count is greater than 0, the even index is invalid and should be skipped\n            if count == 0:\n                continue\n            else:\n                # If the count is equal to the length of the remaining elements, the even index is valid\n                if count == len(nums) - i:\n                    return True\n    return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return [x for sub_tup in test_tup for x in remove_nested(sub_tup)]\n    else:\n        return []"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(test_tup[0]) + remove_nested(test_tup[1:])\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(x for tup in test_tup for x in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for y in test_tup for x in y]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flattened_list.append(item)\n        else:\n            flattened_list += remove_nested(item)\n    return flattened_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    n = len(arr)\n    while i < n and arr[i] < x:\n        i += 1\n    if i == n:\n        return -1\n    while i < n and arr[i] == x:\n        i += 1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters:\n    arr: A sorted array of integers\n    x: The element for which the last position is required\n    '''\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n\n    # Search for the element in the array\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted array of integers.\n        x (int): An integer value to be searched in the array.\n\n    Returns:\n        int: The index of the last occurrence of x in the array.\n\n    Raises:\n        ValueError: If the input array is not sorted.\n\n    Example:\n        >>> arr = [2, 5, 7, 9, 11, 12, 13, 14, 15]\n        >>> last(arr, 7)\n        6\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"The input array is empty.\")\n\n    if len(arr) == 1:\n        return 0\n\n    for i in range(len(arr)-1):\n        if arr[i] == x:\n            return i\n\n    return len(arr)-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Finding the index of the last occurrence of x in arr\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the leftmost index of x in arr\n    left = 0\n    right = len(arr) - 1\n    while arr[left] < x:\n        left += 1\n    while arr[right] > x:\n        right -= 1\n    if arr[left] == x:\n        return left\n    else:\n        return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the first element greater than x\n    i = 0\n    while i < len(arr) and arr[i] <= x:\n        i += 1\n\n    # If x is not present, return -1\n    if i == len(arr):\n        return -1\n\n    # Find the index of the last occurrence of x in the array\n    j = len(arr) - 1\n    while j >= 0 and arr[j] > x:\n        j -= 1\n\n    # Return the index of the last occurrence of x\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a\\w*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    '''\n    Function to find the sum of all items in a dictionary\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i%2!=0:\n            sum += i\n    return sum\n\nn = int(input(\"Enter value of n: \"))\nprint(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", sum_odd(n))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0 \n    for i in range(n): \n        if i % 2!= 0: \n            sum += i \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    # initialize the sum to zero\n    sum_of_odds = 0\n\n    # use a for loop to iterate over all odd natural numbers within the range\n    for i in range(l, r+1, 2):\n        # add the current odd number to the sum\n        sum_of_odds += i\n\n    # return the sum of all odd natural numbers within the range\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [l, r]\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    s = 0\n    while l <= r:\n        s += l\n        l += 2\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n    # loop through the range of natural numbers from l to r (inclusive)\n    for num in range(l, r+1):\n        # check if the number is odd\n        if num % 2 == 1:\n            # add the number to the sum variable\n            sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Add the element to the sum\n        sum += arr[i]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # iterate through the array\n    for num in arr:\n        # add the number to the sum\n        sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary number to a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    # Rotate the bits by d bits to the left\n    rotated_bits = bits[-d:] + bits[:-d]\n    # Convert the rotated bits back to a binary number\n    rotated = int(''.join(str(bit) for bit in rotated_bits), 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a string\n    n_str = bin(n)[2:]\n    # If the number of bits is less than d, pad with zeros\n    n_str = \"0\"*(32-len(n_str)) + n_str\n    # Extract the leftmost d bits\n    left_bits = n_str[:d]\n    # Extract the rightmost bits\n    right_bits = n_str[d:]\n    # Combine the left and right bits\n    rotated_bits = left_bits + right_bits\n    # Convert the rotated bits back to an integer\n    rotated_int = int(rotated_bits, 2)\n    # Return the rotated number\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to a binary string\n    binary_string = bin(n)[2:]\n\n    # Extract the last d bits\n    shifted_bits = binary_string[-d:]\n\n    # Shift the bits to the left\n    new_binary_string = shifted_bits + binary_string[:-d]\n\n    # Convert the new binary string to an integer\n    new_number = int(new_binary_string, 2)\n\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    n = n & mask\n    d = d % 32\n    result = ((n >> d) | (n << (32 - d))) & mask\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n    Args:\n    n: the number to rotate\n    d: the number of bits to rotate\n\n    Returns:\n    The rotated number\n    \"\"\"\n    # Convert number to binary string\n    bin_str = bin(n)[2:]\n    # Pad with 0 if needed\n    if len(bin_str) < 32:\n        bin_str = '0' * (32 - len(bin_str)) + bin_str\n    # Split into groups of 4 bits\n    groups = [bin_str[i:i+4] for i in range(0, len(bin_str), 4)]\n    # Reverse order of groups\n    groups.reverse()\n    # Combine groups into binary string\n    bin_str = ''.join(groups)\n    # Convert binary string back to integer\n    rotated = int(bin_str, 2)\n    # Return rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    if d >= 32:\n        return n << (d - 32)\n    elif d < 0:\n        d = -d\n        return left_rotate(n >> d, d)\n    else:\n        return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Calculate the number of bits to shift the bits to the left\n    num_bits_to_shift = 32 - d\n\n    # Shift the bits to the left by the number of bits to shift\n    shifted_bits = (n << num_bits_to_shift) & 0xffffffff # Use bitwise AND with 0xffffffff to ensure that the number stays within the range of 32 bits\n    \n    # Rotate the bits to the left by d bits\n    rotated_bits = (n >> d) & 0xffffffff # Use bitwise AND with 0xffffffff to ensure that the number stays within the range of 32 bits\n    \n    # Combine the rotated and shifted bits\n    final_bits = (rotated_bits | shifted_bits) & 0xffffffff # Use bitwise AND with 0xffffffff to ensure that the number stays within the range of 32 bits\n    \n    # Convert the final bits back to an integer and return it\n    return final_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n &= 0xffffffff # mask out upper bits (if necessary)\n    n = (n << d) | (n >> (32 - d)) # rotate and mask back\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Replace all occurrences of whitespace with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        for j in range(x, y+1):\n            for k in range(x, y+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n        else:\n            count += 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z and x == z:\n        count = 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z and x == z:\n        count += 1\n    if x!= y and y!= z and x!= z:\n        count += 1\n    if x == y and y!= z and x!= z:\n        count += 1\n    if x!= y and y == z and x!= z:\n        count += 1\n    if x!= y and y!= z and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,x+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return n - i - 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    # Check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n    \n    # If the array is already sorted, we can return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n    # iterate over all possible rotations\n    for i in range(n):\n        # iterate over all possible partitions of the array\n        for j in range(i+1, n):\n            # check if the array can be sorted by swapping the i-th and j-th elements\n            if arr[i] > arr[j]:\n                # swap the i-th and j-th elements\n                arr[i], arr[j] = arr[j], arr[i]\n                # check if the array is sorted after swapping\n                if arr == sorted(arr):\n                    return 1\n                # unswap the i-th and j-th elements\n                arr[i], arr[j] = arr[j], arr[i]\n    # if the above iterations do not generate a sorted array, return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # If the array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n\n    # If the array has only one element, return 0 rotations\n    if n == 1:\n        return 0\n\n    # If the array has only two elements, return 1 rotation\n    if n == 2:\n        return 1\n\n    # If the array has more than two elements, sort the array\n    arr_sorted = sorted(arr)\n\n    # Initialize a variable to keep track of the minimum value in the array\n    min_val = arr_sorted[0]\n\n    # Initialize a variable to keep track of the maximum value in the array\n    max_val = arr_sorted[-1]\n\n    # Initialize a variable to keep track of the rotation count\n    rotation_count = 0\n\n    # Iterate through the array from the second element to the last element\n    for i in range(1, n - 1):\n        # Check if the current element is greater than the minimum value\n        if arr_sorted[i] > min_val:\n            # Check if the current element is less than the maximum value\n            if arr_sorted[i] < max_val:\n                # Increment the rotation count\n                rotation_count += 1\n                # Update the minimum value\n                min_val = arr_sorted[i]\n                # Update the maximum value\n                max_val = arr_sorted[-i - 1]\n                # Exit the loop\n                break\n            # If the current element is greater than the maximum value\n            else:\n                # Update the minimum value\n                min_val = arr_sorted[i]\n\n    # Return the rotation count\n    return rotation_count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if array is already sorted\n    if is_sorted(arr):\n        return 0\n    # Perform binary search to find the partition point\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_sorted(arr[:mid]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Determine the number of rotations required to generate sorted array\n    count = 0\n    while left < right:\n        arr_left = arr[:left]\n        arr_right = arr[right:]\n        if is_sorted(arr_left):\n            arr_left = arr_left[::-1]\n            count += 1\n        if is_sorted(arr_right):\n            arr_right = arr_right[::-1]\n            count += 1\n        if arr_left == arr_right:\n            return count\n        left += 1\n        right -= 1\n    return count\n\ndef is_sorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Finding the minimum element in the array\n    min_element = min(arr)\n    # Creating a hash table to store the count of the elements in the array\n    freq = {}\n    # Storing the count of each element in the hash table\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    # Initializing the count of rotations required\n    count = 0\n    # Traversing the array to find the rotation count\n    for i in range(n):\n        # Finding the next smallest element\n        next_min = min(arr[i+1:])\n        if next_min == min_element:\n            count += freq[min_element]\n        else:\n            # Incrementing the count of rotations required\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_elem = min(arr)\n    # Find the index of the minimum element\n    min_elem_index = arr.index(min_elem)\n    # Initialize the count of rotations\n    count = 0\n    # Initialize the maximum element to the minimum element\n    max_elem = min_elem\n    # Iterate from the minimum element to the end of the array\n    for i in range(min_elem_index, n):\n        # If the current element is greater than the maximum element, then count a rotation\n        if arr[i] > max_elem:\n            count += 1\n        # Update the maximum element to the current element\n        max_elem = arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            continue\n        left = i\n        right = n-1\n        while left < right:\n            mid = left + (right-left)//2\n            if arr[i] < arr[mid]:\n                right = mid\n            else:\n                left = mid+1\n        count += right\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Use the Babylonian method to check if the given number is a perfect square.\n    # The idea is to calculate the square root of n using the formula:\n    # sqrt(n) = 1/2 * (2 * sqrt(n) - n)\n    # We then check if the difference between the calculated square root and n is less than 0.0001.\n    # If it is, then n is a perfect square.\n    # If the difference is greater than or equal to 0.0001, then n is not a perfect square.\n    if n < 0:\n        return False\n    x = 1.0\n    epsilon = 0.0001\n    while abs(x*x - n) > epsilon:\n        x = 0.5 * (x + n / x)\n    return abs(x*x - n) <= epsilon"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n\n    left, right = 0, n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks if a given number is a perfect square or not.\n    \"\"\"\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n    \n    # initialize variables\n    square = 0\n    i = 1\n    \n    # calculate square root using the formular sqrt(n) = x * (1 - x^2)^(1/2)\n    while i * i <= n:\n        square += i\n        i += 1\n        \n    if square * square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to be checked for being a perfect square.\n\n    Returns:\n        bool: True if the given number is a perfect square, otherwise False.\n    \"\"\"\n    # check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # use the binary search to check whether the number is a perfect square\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        # check if the square root of mid is an integer\n        if mid * mid == n:\n            return True\n        # if the square root of mid is an integer, then the square root of mid^2 must be an integer too\n        elif mid * mid > n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # if we reach here, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not using the given approach.\n    \"\"\"\n    root = int(n ** 0.5) + 1\n    for i in range(2, root):\n        if n % i == 0:\n            return False\n    return n % 2 == 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the Pythagorean theorem to check if the number is a perfect square or not\n    # If the number is a perfect square, the difference between its square root and itself will be 0\n    sqrt_n = int(n**0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(sqrt_n):\n        if i * i == n:\n            return True\n        elif i * i > n:\n            break\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    # check if the number is a square number or not\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    # Initialize variables to store the product of all elements and the sum of all elements\n    product = 1\n    sum_of_elements = 0\n\n    # Loop through the list and multiply each element by the product variable\n    for num in arr:\n        product *= num\n\n    # Calculate the sum of all elements in the list\n    for num in arr:\n        sum_of_elements += num\n\n    # Check if the sum of all elements is even or not by comparing the product with the sum of all elements\n    if sum_of_elements % 2 == 0 and product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    # Loop through each sublist in the input list\n    for sublist in lists:\n        # Initialize a variable to store the current sum of the sublist\n        current_sum = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the current sum\n            current_sum += element\n\n        # Check if the current sum is greater than the current max_sum\n        if current_sum > max_sum:\n            # Update max_sum and max_sum_list\n            max_sum = current_sum\n            max_sum_list = sublist\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_lists = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [lists[i]]\n        elif current_sum == max_sum:\n            max_lists.append(lists[i])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to keep track of the maximum sum found so far\n    max_sum = float('-inf')\n    # Initialize a variable to keep track of the list with the maximum sum\n    max_list = []\n    # Loop through each list in the list of lists\n    for list in lists:\n        # Initialize a variable to keep track of the current sum of the elements in the list\n        current_sum = 0\n        # Loop through each element in the list\n        for element in list:\n            # Add the element to the current sum\n            current_sum += element\n        # If the current sum is greater than the maximum sum found so far, update both variables\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n\n    max_sum = sum(lists[0])\n    max_list = lists[0]\n\n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n        current_list = lists[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = current_list\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input, where each inner list contains elements to be added.\n    The function returns the list in a list of lists that has the highest sum of elements.\n    '''\n    # Initialize variables to store maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    # Iterate through each inner list in the input list of lists\n    for inner_list in lists:\n        # Initialize variable to store the current sum of the elements in the inner list\n        current_sum = 0\n        # Iterate through each element in the inner list\n        for element in inner_list:\n            # Add the element to the current sum\n            current_sum += element\n        # If the current sum is greater than the maximum sum, update the maximum sum and corresponding list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = inner_list\n    # Return the list in a list of lists that has the highest sum of elements\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes in a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize a variable to keep track of the maximum sum of all sublists\n    max_sum = float('-inf')\n\n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the sublist\n        sublist_sum = sum(sublist)\n\n        # Update the maximum sum if the new sublist sum is greater\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n\n    # Create a list containing the maximum sublist\n    max_sublist = [sublist for sublist in lists if max_sum == sum(sublist)]\n\n    return max_sublist"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            current_run = 0\n        \n        if uppercase_count > current_run:\n            current_run = uppercase_count\n    \n    return current_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    current_uppercase_count = 0\n    max_run_length = 0\n    max_run_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_uppercase_count += 1\n        else:\n            if current_uppercase_count > max_run_length:\n                max_run_length = current_uppercase_count\n                max_run_start = i - max_run_length + 1\n            current_uppercase_count = 0\n\n    if current_uppercase_count > max_run_length:\n        max_run_length = current_uppercase_count\n        max_run_start = len(test_str) - current_uppercase_count + 1\n\n    return test_str[max_run_start:max_run_start + max_run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of current run and current maximum run\n    current_run = 0\n    max_run = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase or if we have reached the end of the string, update the maximum run count if necessary\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run count to 0 if the end of the string is reached\n            current_run = 0\n\n    # If the current run count is greater than the maximum run count, update the maximum run count\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if run == 0:\n                start = i\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            if run > max_run:\n                max_run = run\n            run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_run = 0\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > run_length:\n                run_length = current_run\n        else:\n            current_run = 0\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    uppercase = False\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, update the run length and check if it's the longest run seen so far\n            if run_length > max_run:\n                max_run = run_length\n            # Reset the run length for the next run\n            run_length = 1\n            # Set the flag for uppercase characters to True\n            uppercase = True\n        else:\n            # If it's not uppercase, increment the run length and reset the flag\n            run_length += 1\n            uppercase = False\n    \n    # Check if the last run is the longest run seen so far\n    if run_length > max_run:\n        max_run = run_length\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    prev_upper = False\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if not prev_upper:\n                max_run = 1\n            else:\n                max_run += 1\n            prev_upper = True\n        else:\n            prev_upper = False\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    current_run = 0\n    max_run = 0\n    # iterate through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # if it is, increment the current run counter\n            current_run += 1\n            # if the current run is greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # if the current character is not uppercase, reset the current run counter\n        else:\n            current_run = 0\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, the function should return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n\n    Args:\n    nums: a list of numbers\n\n    Returns:\n    The first odd number in the list.\n    \"\"\"\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and an integer K as input, and returns True if the tuple contains the integer K,\n    and False otherwise.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        for i in range(len(test_tup)):\n            if K not in test_tup[i]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a value for k and returns True if the tuple contains at least k occurrences of the value, otherwise False.\n    '''\n    # initialize a counter for the number of occurrences of the value\n    count = 0\n    \n    # loop through the tuple and increment the counter if the value matches\n    for val in test_tup:\n        if val == K:\n            count += 1\n            \n    # if the count is greater than or equal to k, return True\n    if count >= K:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the two tuples must be the same.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]