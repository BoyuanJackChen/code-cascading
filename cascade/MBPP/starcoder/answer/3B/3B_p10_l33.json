[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return list(common_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements between the tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the given tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # create a set of unique elements in list1\n    unique_elements1 = set(list1)\n\n    # create a set of unique elements in list2\n    unique_elements2 = set(list2)\n\n    # find the common elements in both sets\n    shared_elements = unique_elements1.intersection(unique_elements2)\n\n    # convert the set back to a list\n    shared_elements_list = list(shared_elements)\n\n    # return the list of shared elements\n    return shared_elements_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_set = set(test_tup1).intersection(set(test_tup2))\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    shared_list = list(shared_set)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function will identify non-prime numbers. It takes a number n as input, and returns a boolean value. \n    '''\n\n    if n <= 1:\n        return True\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function returns a boolean value indicating whether a given number is not prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is divisible by 2 or less than 2\n    if n <= 1:\n        return True\n    # check if the number is divisible by any number less than it's square root\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a Python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    result = []\n    while len(result) < n:\n        result.append(hq.heappop(nums))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    hq.heapify(max_heap)\n    result = []\n    \n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n        result.append(max_heap[0])\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the given list of numbers\n    min_heap = hq.heapify(nums)\n    \n    # create a min heap with the n largest numbers\n    max_heap = []\n    for _ in range(n):\n        heapq.heappush(max_heap, -heapq.heappop(min_heap))\n    \n    # return the max heap as a list of integers\n    return [abs(x) for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = [-x for x in nums]\n    hq.heapify(max_heap)\n\n    for _ in range(n):\n        max_num = -hq.heappop(max_heap)\n        hq.heappush(max_heap, -max_num)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the input list\n    hq.heapify(nums)\n\n    # Extract the n largest integers from the heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_heap = []\n    for num in nums:\n        hq.heappush(largest_heap, num)\n        if len(largest_heap) > n:\n            hq.heappop(largest_heap)\n    return largest_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            hq.heappush(heap, nums[i])\n    \n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # convert the given number to binary string\n    bin_str = bin(x)[2:]\n    # check if the length of the binary string is 1\n    if len(bin_str) == 1:\n        # if yes, then the two numbers differ at one bit position only\n        return True\n    else:\n        # if not, then the two numbers differ at two or more bit positions\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Initialize the result variable to True\n    result = True\n\n    # Check if the input number is less than or equal to 0\n    if x <= 0:\n        return False\n\n    # Check if the binary representation of the input number has more than 1 bit set\n    if bin(x)[2:].count('1') > 1:\n        return False\n\n    # Check if the binary representation of the input number has exactly 1 bit set\n    if bin(x)[2:].count('1') == 1:\n        # Count the number of bits set to 1 in the binary representation of the input number\n        count = bin(x)[2:].count('1')\n\n        # Check if the difference between the binary representations of x and 2^count is 0\n        if bin(x ^ (1 << count))[2:] == '0' * count:\n            result = False\n\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x ^ (x-1))[2:].count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x and returns True if the difference between x and its binary representation\n    contains only one bit set to 1, and False otherwise.\n    \"\"\"\n    binary = bin(x)[2:]\n    for i in range(len(binary)-1):\n        if binary[i] == binary[i+1]:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number into binary format\n    binary_str = bin(x)[2:]\n\n    # Count the number of occurrences of 1 in the binary format\n    count = binary_str.count('1')\n\n    # Check whether the count of 1's is odd or even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the given number is a power of two or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0: # Check if x is a power of two by checking if x & (x-1) is 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression pattern to match words with at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Find all words in the string that match the pattern\n    matches = re.findall(pattern, text)\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # find words of length at least 4\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Using regular expression to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n\n    # Printing the list of words which are at least 4 characters long\n    print(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{4,}\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Using regular expressions to find all words which are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the text\n    result = [word for word in words if len(word) >= 4] # filter words with length 4 or more\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words of at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    rotations = 0 \n    for i in range(n-1): \n        if str[i]!= str[(i+1)%n]: \n            rotations += 1 \n    return rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Check if the string is empty\n    if not str:\n        return 0\n\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize an empty list to store the counts\n    counts = [0] * 26\n\n    # Count the frequency of each character in the string\n    for i in range(n):\n        counts[ord(str[i]) - ord('a')] += 1\n\n    # Initialize the count of characters that are already at the end of the string\n    count = sum(counts)\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = n\n\n    # Check all possible rotations of the string\n    for i in range(1, min_rotations):\n        # Find the count of characters that are already at the end of the rotated string\n        count_rotated = count - counts[i - 1] + counts[i + n - 1]\n\n        # Update the minimum number of rotations if the rotated string is a permutation of the original string\n        if count_rotated == count:\n            min_rotations = i + 1\n            count = count_rotated\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n\n    # Iterate through all possible rotations\n    for i in range(n):\n        # Initialize the current and previous characters\n        current = str[i]\n        prev = str[(i + n - 1) % n]\n\n        # While the characters are different, keep rotating\n        while current!= prev:\n            # Swap the characters\n            str[i], str[(i + n - 1) % n] = str[(i + n - 1) % n], str[i]\n\n            # Update the current and previous characters\n            current = str[i]\n            prev = str[(i + n - 1) % n]\n\n        # Check if the rotation gives the same string\n        if str == prev + prev:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i:i+n] == str[(i+1)%n:n]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i]!= s[n - 1 - i]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    # Iterate over all possible rotations of the string\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                # Check if the string is equal to the reversed string\n                if str[i:j+1] == str[j:k+1][::-1]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the maximum frequency of any character\n    max_freq = max(freq.values())\n\n    # Loop through the characters in the string and check if the frequency of each character is greater than the maximum frequency\n    for char in str:\n        if freq[char] > max_freq:\n            # If it is, return the minimum number of rotations required to get the same string\n            return str.count(char) - freq[char]\n\n    # If no rotations are required, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n\n    # Create a 2D list to store the frequency of each character in the string\n    freq = [[0] * 26 for _ in range(n)]\n\n    # Count the frequency of each character in the string\n    for i in range(n):\n        freq[i][ord(str[i]) - ord('a')] += 1\n\n    # Initialize the minimum number of rotations\n    min_rotations = n\n\n    # Iterate over all the possible rotations of the string\n    for i in range(n):\n        for j in range(i, n):\n            # If the characters are not the same, continue to the next pair of characters\n            if freq[i][ord(str[j]) - ord('a')]!= freq[j][ord(str[i]) - ord('a')]:\n                continue\n\n            # Calculate the number of rotations required to get the same string\n            rotations = 0\n            while i!= j:\n                # Rotate the string by one character\n                if i < j:\n                    i += 1\n                else:\n                    j -= 1\n                rotations += 1\n\n            # Update the minimum number of rotations if the current rotation count is smaller\n            if rotations < min_rotations:\n                min_rotations = rotations\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # initialize a count variable to keep track of the number of characters in the string\n    count = sum(char_count.values())\n    \n    # create a list to store the characters of the string\n    chars = list(str)\n    \n    # loop through all possible rotations of the string\n    for i in range(len(chars)):\n        for j in range(i+1, len(chars)):\n            # check if the two substrings are equal\n            if chars[i:j+1] == chars[j:i+1][::-1]:\n                # if they are, calculate the count of each character in the rotated substring\n                rotated_char_count = {}\n                for k in range(len(chars[i:j+1])):\n                    if chars[i:j+1][k] in rotated_char_count:\n                        rotated_char_count[chars[i:j+1][k]] += 1\n                    else:\n                        rotated_char_count[chars[i:j+1][k]] = 1\n                \n                # add the count of each character in the rotated substring to the count of each character in the original string\n                for char, count in char_count.items():\n                    if char in rotated_char_count:\n                        char_count[char] += rotated_char_count[char]\n                    else:\n                        char_count[char] = rotated_char_count[char]\n                \n                # remove the characters from the list of characters\n                for char in chars[i:j+1]:\n                    chars.remove(char)\n                \n                # update the count variable to reflect the new count of characters in the string\n                count -= (j-i+1)\n    \n    # initialize a variable to store the minimum number of rotations\n    min_rotations = float('inf')\n    \n    # loop through all possible rotations of the characters in the string\n    for i in range(len(chars)):\n        for j in range(i+1, len(chars)):\n            # check if the two substrings are equal\n            if chars[i:j+1] == chars[j:i+1][::-1]:\n                # calculate the count of each character in the rotated substring\n                rotated_char_count = {}\n                for k in range(len(chars[i:j+1])):\n                    if chars[i:j+1][k] in rotated_char_count:\n                        rotated_char_count[chars[i:j+1][k]] += 1\n                    else:\n                        rotated_char_count[chars[i:j+1][k]] = 1\n                \n                # update the minimum number of rotations if the rotated substring has fewer characters than the original string\n                if sum(rotated_char_count.values()) < count:\n                    min_rotations = min(min_rotations, j-i+1)\n    \n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # create a list of all possible rotations of the string\n    rotations = [\"\".join(rot) for rot in zip(*[iter(str)]*len(str))]\n\n    # sort the rotations based on the frequency of each character\n    sorted_rotations = sorted(rotations, key=lambda x: char_freq[x[0]])\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = 0\n    prev_char = None\n    for char in str:\n        if char!= prev_char:\n            min_rotations += 1\n            prev_char = char\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and returns the modified string with first and last occurrence of the character removed.\n    \"\"\"\n    if s.count(ch) == 1:\n        # If the character is only present once in the string, remove it from both ends\n        return s.replace(ch, '')\n    else:\n        # If the character is present more than once in the string, remove it from the beginning and end of the string\n        return s.replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input, and returns a new string \n    with the first and last occurrence of the given character removed.\n    '''\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == ch:\n            s.pop(i)\n            i -= 1\n        else:\n            i += 1\n        if s[j] == ch:\n            s.pop(j)\n            j -= 1\n        else:\n            j -= 1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1) # Remove first occurrence\n    s = s.replace(ch, '', -1) # Remove last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if character is present in the string\n    if ch not in s:\n        return s\n    # convert the string to a list\n    s_list = list(s)\n    # find the index of the first occurrence of the character\n    index = s_list.index(ch)\n    # remove the first occurrence of the character from the list\n    s_list.pop(index)\n    # find the index of the last occurrence of the character\n    last_index = s_list.index(ch)\n    # remove the last occurrence of the character from the list\n    s_list.pop(last_index)\n    # convert the list back to a string and return\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # remove the first occurrence of the character\n    s = s.replace(ch, '')\n    # remove the last occurrence of the character\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    s_list = list(s)\n    # Find the index of first occurrence of character ch\n    i = s_list.index(ch)\n    # Remove the first occurrence of character ch\n    s_list.pop(i)\n    # Find the index of last occurrence of character ch\n    j = s_list.index(ch)\n    # Remove the last occurrence of character ch\n    s_list.pop(j)\n    # Join the list of characters back into string\n    new_s = ''.join(s_list)\n    # Return the new string without first and last occurrence of character ch\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    if not s:\n        return s\n    if ch == s[0]:\n        return s[1:]\n    elif ch == s[-1]:\n        return s[:-1]\n    else:\n        return remove_Occ(s[1:], ch)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Create a copy of the matrix\n    M_copy = M.copy()\n\n    # Sort the matrix in ascending order of the sum of its rows\n    for i in range(n):\n        M_copy[i] = sorted(M_copy[i])\n\n    # Merge the sorted matrices\n    result = []\n    i = j = 0\n    while i < n and j < n:\n        if M_copy[i][0] + M_copy[j][0] < M_copy[i][-1] + M_copy[j][-1]:\n            result.append(M_copy[i].pop(0))\n            i += 1\n        else:\n            result.append(M_copy[j].pop(0))\n            j += 1\n\n    # Append any remaining elements of the first matrix\n    result.extend(M_copy[i])\n\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_M = []\n    \n    # Sort each row in the matrix in ascending order of its sum\n    for row in M:\n        sorted_row = sorted(row)\n        sorted_M.append(sorted_row)\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                # swap rows\n                temp = M[i][j]\n                M[i][j] = M[i][j+1]\n                M[i][j+1] = temp\n    for i in range(rows-1):\n        for j in range(cols):\n            if M[i][j] > M[i+1][j]:\n                # swap columns\n                temp = M[i][j]\n                M[i][j] = M[i+1][j]\n                M[i+1][j] = temp\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables\n    n = len(M)\n    row_sums = [sum(row) for row in M]\n    \n    # Sort row_sums in non-descending order\n    row_sums.sort(reverse=True)\n    \n    # Initialize variables for result\n    result = []\n    \n    # Iterate through rows and find the corresponding row_sums\n    for i in range(n):\n        row = M[i]\n        row_sum = row_sums.pop(0)\n        \n        # If row_sum is greater than the sum of the row, append row to result\n        if row_sum > sum(row):\n            result.append(row)\n    \n    # Return result\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Iterate through each row of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n\n        # Iterate through each element of the row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n\n        # Add the row sum to the sorted_M list\n        sorted_M.append(row_sum)\n\n    # Sort the sorted_M list in ascending order\n    sorted_M.sort()\n\n    # Return the sorted_M list\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums in ascending order\n    M.sort(key=lambda x: row_sums[M.index(x)])\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize two empty lists to store the sorted matrix and the sums of its rows\n    sorted_matrix = []\n    row_sums = []\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Initialize an empty list to store the current row\n        current_row = []\n        # Loop through each element in the row\n        for j in range(n):\n            # Add the jth element of the row to the sum of the ith row\n            row_sums.append(sum(M[i][:j+1]))\n            # Add the jth element of the row to the current row\n            current_row.append(M[i][j])\n        # Add the current row to the sorted matrix\n        sorted_matrix.append(current_row)\n    # Sort the matrix based on the sum of the rows\n    sorted_matrix.sort(key=lambda x: sum(row_sums))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    # Sort the matrix in ascending order based on the sum of its rows\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[j])):\n                for l in range(len(M[k])):\n                    M[i][j][k][l] = sorted(M[i][j][k][l])"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    This function takes in length of the base and height of a triangular prism as arguments.\n    It calculates the volume of the prism and returns the result.\n    '''\n    V = (l*b*h)/3  # formula to calculate volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the prism\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in length, width, and height of a triangular prism as input\n    and returns the volume of the prism.\n    \"\"\"\n    V = (1/3) * l * b * h  # Formula to calculate the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments: length (l), width (b), and height (h) of a triangular prism.\n    It calculates the area of the prism and then uses the formula V = 1/2 * l * b * h to find its volume.\n    '''\n    area = 0.5 * l * b * h  # calculate the area of the prism\n    volume = area / 3  # calculate the volume using the formula V = 1/2 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes in the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)(_[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'\\b([a-z])(_|[a-z])\\b'\n    match = re.search(underscore_pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'([a-z][a-z0-9]*_)+'\n    return bool(re.search(regex, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'(?<![a-z])([a-z])[A-Z]+'\n    match = re.search(regex, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z_]+'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z](?=[a-z])|_(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^(?=.*[a-z])(?=.*[_])(?=.*[a-z])[a-z][_a-z]*[a-z]$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    This function takes in a string and returns a new string with all the characters from the first string that are not present in the second string.\n    '''\n    first_string = string.lower()\n    second_string = ''.join(chr(i) for i in range(256) if chr(i) not in second_string)\n    new_string = ''\n    for char in first_string:\n        if char in second_string:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    result = []\n    for char in string:\n        if char not in char_list:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the output string\n    output = []\n    \n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is present in the second string\n        if char not in string:\n            # If it's not, append it to the output list\n            output.append(char)\n            \n    # Return the output list\n    return ''.join(output)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string[0] == chr(i):\n            string = string.replace(string[0], '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of characters that are present in the second string.\n    \"\"\"\n    first_set = set(string)\n    second_set = set(input(\"Enter the string containing the characters you want to remove: \"))\n    result = list(first_set.difference(second_set))\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    # Create an empty list to store the modified string\n    modified_string = []\n    \n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is not present in the second string, add it to the modified string\n        if char not in string:\n            modified_string.append(char)\n            \n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    alphabet = list(string)\n    freq_dict = {}\n    for char in alphabet:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n\n    for i in range(len(string)):\n        if string[i] not in freq_dict:\n            alphabet.remove(string[i])\n\n    return ''.join(alphabet)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_chars = list(string)\n    for i in range(NO_OF_CHARS):\n        if list_chars[i] in string:\n            list_chars.remove(list_chars[i])\n    return ''.join(list_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a list of characters in the first string\n    that are not present in the second string.\n    \"\"\"\n    char_list = []\n    for char in string1:\n        if char not in string2:\n            char_list.append(char)\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = list(string)\n    second_string = list('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    result_list = []\n    for char in first_string:\n        if char not in second_string:\n            result_list.append(char)\n    return ''.join(result_list)\n\nif __name__ == \"__main__\":\n    input_string = input(\"Enter a string: \")\n    print(\"The modified string is:\", str_to_list(input_string))"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the values of the array as keys and the count as values\n    count_dict = {}\n    for num in arraynums:\n        # If the value for the current number in the dictionary is not present, add it with a count of 1\n        if num not in count_dict:\n            count_dict[num] = 1\n        # Otherwise, increment the count of the number in the dictionary\n        else:\n            count_dict[num] += 1\n\n    # Iterate through the dictionary to check for duplicates\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the count of each element in the array\n    count = {}\n    # iterate through the array and count the number of times each element appears\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # iterate through the dictionary and check if there are any elements with a count greater than 1\n    for num, count in count.items():\n        if count > 1:\n            return True\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the occurrences of each element in the array\n    occurrences = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arraynums:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n\n    # Loop through the dictionary and check if there are any duplicate elements\n    for key, value in occurrences.items():\n        if value > 1:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) < 2:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    \n    # check if the set is empty, which means there are no duplicates in the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        else:\n            hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements and their frequency\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # loop through the dictionary and check if any element appears more than once\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n    # if no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # creating a dictionary to store the elements and their frequency\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # iterating through the dictionary and checking for duplicate elements\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Initialize the variables to store the digit values of the number\n    hundreds = 0\n    tens = 0\n    ones = 0\n\n    # Loop through each digit of the number\n    while x > 0:\n        # Find the digit value and add it to the corresponding variable\n        hundreds += x // 1000\n        tens += (x // 100) % 10\n        ones += x % 10\n\n        # Remove the last digit from the number\n        x = x // 10\n\n    # Check if the sum of the digit values is odd or even\n    if (hundreds + tens + ones) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 10 and x < 20: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x < 0 or x > 25:\n        return False\n\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 1:\n        return \"Woodball\"\n    elif x > 1 and x < 10:\n        return \"Woodball\"\n    elif x > 10 and x < 100:\n        return \"Woodball\"\n    elif x > 100 and x < 1000:\n        return \"Woodball\"\n    elif x > 1000 and x < 10000:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x % 5 == 0 and x % 10 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 42 or x == 666:\n        return True\n    elif x >= 100 and x <= 999:\n        return True\n    elif x >= 1000 and x <= 9999:\n        return True\n    elif x >= 10000 and x <= 99999:\n        return True\n    elif x >= 100000 and x <= 999999:\n        return True\n    elif x >= 1000000 and x <= 9999999:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    elif x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return 'This is not a woodball.'\n    else:\n        return 'This is a woodball.'"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Convert the string to a list of digits\n    num_list = [int(digit) for digit in num_str]\n\n    # Reverse the list of digits\n    rev_list = num_list[::-1]\n\n    # Convert the list of digits back to a string\n    rev_str = ''.join(str(digit) for digit in rev_list)\n\n    # Convert the reversed string to an integer\n    rev_num = int(rev_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 2 == 0:\n        return False\n    else:\n        reversed_num = 0\n        temp = num\n        while temp > 0:\n            remainder = temp % 10\n            reversed_num = reversed_num * 10 + remainder\n            temp //= 10\n        if reversed_num - 1 == num:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num == rev_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # reverse the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # check if the reversed number is one less than twice the original number\n    if rev_num - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num < (reverse * 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num*10) + (num%10)\n        num = num//10\n    if (num*2) < rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    if num < 0:\n        num = -num # To make the function works with positive numbers\n\n    reverse_num = 0\n    temp = num\n    while temp > 0:\n        reverse_num = reverse_num * 10 + temp % 10\n        temp //= 10\n\n    if reverse_num < (num * 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert number to a string\n    num_str = str(num)\n\n    # reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n\n    # calculate the reverse of the reverse of the original number\n    twice_rev_num = rev(rev_num)\n\n    # if the original number is one less than twice its reverse, return True\n    if num < twice_rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return num > 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_reverse = 0\n    while num!= 0:\n        remainder = num % 10\n        num_reverse = num_reverse * 10 + remainder\n        num = num // 10\n    return num_reverse == 1 * num_reverse"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n\n    for num in arr : \n        if num > max_num : \n            max_num = num \n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    num = 0\n\n    for i in range(len(arr)):\n        num += arr[i] * (10 ** i)\n        max_num = max(max_num, num)\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # initialize max_num to the first number in the array\n    max_num = arr[0]\n\n    # loop through the array from index 1 to the end\n    for i in range(1, len(arr)):\n        # check if the current number can be formed by concatenating the previous number with the current number\n        if arr[i] + max_num == arr[i+1]:\n            # if it can, update max_num to the current number\n            max_num = arr[i]\n        # if the current number can't be formed by concatenating the previous number with the current number, \n        # add the current number to the max_num\n        else:\n            max_num = max_num + arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables to store the largest and second largest numbers\n    largest = arr[0]\n    second_largest = arr[1]\n\n    # Loop through the array starting from index 2\n    for i in range(2, len(arr)):\n        # Check if the current number can be formed with the second largest number and the next number\n        if arr[i] + second_largest <= largest:\n            # If it can, update the second largest number and continue the loop\n            second_largest = arr[i]\n        else:\n            # If it can't, update the largest number and exit the loop\n            largest = arr[i]\n            break\n\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            num = int(''.join(sorted(str(arr[i])+str(arr[j]))))\n            max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the list of digits in descending order\n    arr.sort(reverse=True)\n    # Initializing the maximum number\n    max_num = 0\n    # Looping through the sorted list of digits\n    for digit in arr:\n        # Adding the current digit to the maximum number\n        max_num += digit\n        # Checking if the maximum number is greater than 999999\n        if max_num > 999999:\n            # If it is, resetting the maximum number to 0\n            max_num = 0\n    # Returning the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        for i in range(9,0,-1):\n            if num >= i:\n                temp_num = num - i\n                if temp_num >= 0 and temp_num not in arr:\n                    max_num = max(max_num, temp_num)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            num = int(''.join(sorted(str(x) for x in arr[i:j])))\n            if num > max_num:\n                max_num = num\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return False\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if x and y have opposite signs\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs\"\n    else:\n        return \"Both numbers have equal signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"The two numbers have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"The two numbers have opposite signs.\"\n    else:\n        return \"The two numbers have the same signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs \n    and False otherwise. \n    '''\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x * y) < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    if x > 0 and y > 0:\n        return \"The first number is positive and the second number is positive\"\n    elif x < 0 and y < 0:\n        return \"The first number is negative and the second number is negative\"\n    elif x > 0 and y < 0:\n        return \"The first number is positive and the second number is negative\"\n    elif x < 0 and y > 0:\n        return \"The first number is negative and the second number is positive\"\n    else:\n        return \"Both the numbers have same sign\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number or not.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Calculate the number of rows and columns required\n    rows = int(n**0.5) + 1\n    columns = int(n**0.5) + 1\n\n    # Check if the given number is prime or not\n    if not is_prime(n):\n        return False\n\n    # Initialize a 2D array to store the prime numbers\n    prime_matrix = [[True for j in range(columns)] for i in range(rows)]\n\n    # Mark the first row and first column as prime\n    prime_matrix[0][0] = prime_matrix[0][1] = prime_matrix[rows-1][0] = prime_matrix[rows-1][1] = False\n\n    # Iterate through the matrix to mark the remaining numbers as prime\n    for i in range(2, rows):\n        for j in range(2, columns):\n            if prime_matrix[i][j-1] and prime_matrix[i-1][j] and prime_matrix[i][j] and prime_matrix[i+1][j] and prime_matrix[i][j+1]:\n                prime_matrix[i][j] = False\n\n    # If the number is prime, it must be an octagonal number\n    return prime_matrix[rows-1][columns-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def triangular_numbers(n):\n        '''\n        Returns a list of the first n triangular numbers.\n        '''\n        return [i for i in range(1, n+1)]\n\n    def octagonal_numbers(n):\n        '''\n        Returns a list of the first n octagonal numbers.\n        '''\n        triangular_nums = triangular_numbers(n)\n        return [num**2 + num - 5 for num in triangular_nums]\n\n    def nth_octagonal(n):\n        '''\n        Returns the nth octagonal number.\n        '''\n        octagonal_nums = octagonal_numbers(n)\n        return octagonal_nums[n-1]\n\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for the nth octagonal number:\n    formula = (n * (3 * n - 1)) // 2\n    # Return the result of the formula\n    return formula"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    # Initialize the octagonal number counter\n    octagonal_count = 0\n\n    # Calculate the base of the octagonal number\n    base = 1\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the octagonal number\n        octagonal_number = base * (3 ** i)\n\n        # Check if the octagonal number is equal to n\n        if octagonal_number == n:\n            return True\n\n        # Increment the octagonal number counter\n        octagonal_count += 1\n\n        # Calculate the next base of the octagonal number\n        base += 1\n\n    # If the loop completes without finding the nth octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # Calculate the square root of n\n    square_root = int(n**0.5)\n    \n    # Check if the square root is an odd number\n    if square_root % 2 == 1:\n        return False\n    \n    # Calculate the nth octagonal number\n    octagonal = 15 * square_root\n    \n    # Check if the nth octagonal number is equal to n\n    if octagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1): \n        for j in range(1, i+1): \n            if (i+j)**2 == 8*i**3-4: \n                return i**3\n    return None\n\nn = int(input(\"Enter a positive integer: \"))\nresult = is_octagonal(n)\nif result is None: \n    print(f\"The {n}th octagonal number is not found.\")\nelse: \n    print(f\"The {n}th octagonal number is: {result}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function checks if a given integer n is an octagonal number.\n\n    An octagonal number is a positive integer that is equal to the sum of its\n    right and left neighbors.\n\n    Examples:\n    is_octagonal(1) -> True\n    is_octagonal(2) -> True\n    is_octagonal(3) -> False\n    is_octagonal(8) -> True\n    \"\"\"\n    # Helper function to get the square of a number\n    def square(n):\n        return n * n\n\n    # Check if n is an odd number\n    if n % 2!= 0:\n        return False\n\n    # Calculate the sum of the right and left neighbors of n\n    right_neighbor = n * (n - 1) // 2\n    left_neighbor = square(right_neighbor) - right_neighbor\n\n    # Check if the sum is equal to n\n    return right_neighbor == n or left_neighbor == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 2\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3**0.5) - n * (3**0.5) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagon(n):\n        '''\n        Calculate the nth octagon number.\n        '''\n        return (n*(3*n-1))/2\n    \n    def is_octagonal_helper(start, end):\n        '''\n        Helper function to check if a range of numbers is octagonal.\n        '''\n        for i in range(start, end+1):\n            if octagon(i)!= i:\n                return False\n        return True\n    \n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return None\n    elif is_octagonal_helper(1, int(n/2)):\n        return octagon(n)\n    else:\n        return octagon(n) - 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j] and int(s[i]) == int(s[j]):\n                dp[i] += dp[j]\n    return sum(dp.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_counts = defaultdict(int)\n    for i in range(len(s)):\n        digit_counts[s[i]] += 1\n\n    count = 0\n    for substring in digit_counts:\n        if len(substring) == sum(digit_counts.values()):\n            count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    # create a defaultdict to store the count of substrings with the given length\n    count = defaultdict(int)\n    # loop through all possible substrings of length n\n    for i in range(n):\n        for j in range(i, n+1):\n            # check if the sum of digits in the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def helper(i, j):\n        if i > j:\n            return 0\n        if i == j:\n            return 1\n        if s[i] == s[j]:\n            return helper(i+1, j-1) + 1\n        else:\n            return helper(i+1, j)\n\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j]:\n                dp[j] += dp[i]\n\n    count = 0\n    for i in range(n):\n        count += dp[i] * (dp[i]-1) // 2\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with specific sum of digits\n    count = defaultdict(int)\n    \n    # Loop through the characters in the string\n    for i in range(len(s)):\n        # Loop through the characters after the current character\n        for j in range(i+1, len(s)+1):\n            # If the sum of digits of the substring is equal to its length, increment the count\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n    \n    # Return the count of substrings with specific sum of digits\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings\n    count = defaultdict(int)\n    \n    # Iterate over the characters in the string\n    for i in range(len(s)):\n        # Get the substring from i to the end of the string\n        substring = s[i:]\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n        # If the substring has a sum of digits equal to its length, add 1 to the count\n        if substring_sum == len(substring):\n            count[substring] += 1\n            \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += len(s) - i - 1\n\n    for substring in count_substrings(s):\n        digits_sum = sum(int(digit) for digit in substring)\n        if digits_sum == len(substring):\n            count += 1\n\n    return count\n\ndef count_substrings(s):\n    '''\n    Helper function to generate all possible substrings of a given string.\n    '''\n    count_dict = defaultdict(int)\n    for i in range(len(s) + 1):\n        for j in range(i, len(s) + 1):\n            count_dict[(i, j)] = count_dict[(i, j - 1)] + (j - i)\n    return [s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1) if (i, j) in count_dict and count_dict[(i, j)] > 0]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Dictionary to store the count of each substring with sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                # Add 1 to the count of the substring\n                count[s[i:j+1]] += 1\n\n    # Return the count of each substring\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings with a particular sum of digits\n    substring_count = defaultdict(int)\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        \n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in s[i:])\n        \n        # Update the count of substrings with the given sum in the dictionary\n        substring_count[substring_sum] += 1\n    \n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings_with_sum(s, sum_length):\n        count = defaultdict(int)\n        for i in range(len(s)):\n            for j in range(i, len(s) + 1):\n                if sum(int(digit) for digit in s[i:j]) == sum_length:\n                    count[len(s[i:j])] += 1\n        return count\n    \n    s = str(s)\n    length_sum = sum(len(s[i:j]) for j in range(1, len(s) + 1))\n    return count_substrings_with_sum(s, length_sum)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest variable with the first element of the list\n    smallest = xs[0]\n    \n    # iterate through the rest of the list\n    for x in xs[1:]:\n        # if the current element is smaller than the smallest element, update smallest\n        if x < smallest:\n            smallest = x\n    \n    # return the smallest element\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n\n    n = len(test_list)\n    # Initialize two variables to keep track of the minimum and maximum values of the current window\n    min_val = test_list[0][0]\n    max_val = test_list[0][0]\n    max_diff = test_list[0][0] - test_list[0][1]\n\n    for i in range(1, n):\n        # Slide the window by one position to the right\n        min_val = min(min_val, test_list[i][0])\n        max_val = max(max_val, test_list[i][0])\n        # Calculate the difference between the current maximum and minimum values of the window\n        curr_diff = max_val - min_val\n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the given list in ascending order\n    test_list = sorted(test_list)\n\n    # Initialize the maximum difference as zero\n    max_diff = 0\n\n    # Iterate over all pairs of tuples in the sorted list\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][0] - test_list[i][1]\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize the maximum difference to be 0\n    max_diff = 0\n    \n    # iterate over the list of tuples\n    for i in range(len(test_list)-1):\n        # calculate the difference between the current element and the next element\n        diff = test_list[i][1] - test_list[i+1][1]\n        \n        # update the maximum difference if the current difference is greater than the previous maximum\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    '''\n\n    # Create a dictionary to store the number of pairs with each value in the list\n    count_dict = {}\n\n    for num in test_list:\n        if num not in count_dict:\n            count_dict[num] = 1\n        else:\n            count_dict[num] += 1\n\n    # Find the maximum number of pairs with each value in the list\n    max_count = max(count_dict.values())\n\n    # Find the maximum difference between pairs with the maximum number of pairs\n    max_diff = 0\n    for key, value in count_dict.items():\n        if value == max_count:\n            diff = abs(key - max(test_list))\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the tuple list in ascending order\n    test_list.sort()\n    \n    # Initialize two variables to store the maximum and minimum difference found\n    max_diff = 0\n    min_diff = float('inf')\n    \n    # Iterate through the tuple list\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(test_list[i+1] - test_list[i])\n        \n        # Update the maximum and minimum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n        \n        # Update the minimum difference if the current difference is less\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    If there are no pairs available, the function should return None.\n    '''\n\n    # Sort the list of tuples\n    test_list.sort()\n\n    # Initialize the maximum difference to be the difference between the first two elements\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n\n    # Loop through the remaining elements\n    for i in range(1, len(test_list)-1):\n        # Calculate the difference between the current element and the next element\n        curr_diff = abs(test_list[i+1][0] - test_list[i][0])\n        # Update the maximum difference if necessary\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and finds the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples and sorts them based on the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a new list to store the sorted tuples\n    sorted_marks = []\n\n    # loop through the subject marks\n    for marks in subjectmarks:\n        # loop through the marks\n        for mark in marks:\n            # if the mark is not a string, convert it to a string\n            if not isinstance(mark, str):\n                mark = str(mark)\n\n            # add the tuple to the sorted list if it's not already in it\n            if tuple(sorted_marks)!= tuple(marks):\n                sorted_marks.append(marks)\n\n    # sort the sorted list of tuples\n    sorted_marks.sort(key=lambda x: x[1])\n\n    # return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n\n    :param subjectmarks: A list of tuples of the form (subject, mark) where each tuple represents a student's\n                        marks for a subject.\n    :return: A list of tuples, sorted by second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value (mark) of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Convert the list to a dictionary to make it easy to access the values by key\n    subject_marks_dict = {key: value for key, value in subjectmarks}\n    \n    # Sort the dictionary by the second value (i.e. the marks)\n    sorted_marks = dict(sorted(subject_marks_dict.items(), key=lambda item: item[1]))\n    \n    # Convert the sorted dictionary back to a list of tuples and return it\n    return sorted_marks.items()"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    This function sorts a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        flat_list = []\n        for item in data_list:\n            if type(item) in [list, tuple]:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    total_sum = sum(flat_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # if the input list has only one element, return that element\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # otherwise, sum the first element and the recursive sum of the remaining elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data):\n        '''\n        Flatten a list.\n        '''\n        flat_list = []\n        for item in data:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_flat_list(flat_list):\n        '''\n        Sum all the elements in a flattened list.\n        '''\n        total = 0\n        for item in flat_list:\n            if isinstance(item, int):\n                total += item\n            else:\n                total += sum_flat_list(item)\n        return total\n\n    flat_list = flatten_list(data_list)\n    return sum_flat_list(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: flatten the list recursively\n    flat_list = recursive_list_sum(data_list[0])\n\n    # Sum the elements of the flattened list\n    for element in flat_list:\n        data_list.append(element)\n\n    # Return the sum of the flattened list\n    return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Check if the data_list is empty\n    if not data_list:\n        return 0\n    \n    # Get the first element of the data_list\n    current_element = data_list[0]\n    \n    # Check if the current element is a list\n    if isinstance(current_element, list):\n        # Recursively call the function with the rest of the list\n        return recursive_list_sum(current_element) + recursive_list_sum(data_list[1:])\n    else:\n        # Add the current element to the total sum\n        return current_element + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Define the Bell numbers\n    bell = [1, 1]\n    # Define the partition function\n    def partition(n, index, ways):\n        # Base case: if the index reaches n, add the current set to the set of partitions\n        if index == n:\n            ways.append(tuple(bell))\n        # Otherwise, add the current set to the set of partitions and recursively partition the set with the remaining Bell numbers\n        else:\n            partition(n, index+1, ways)\n            partition(n, index+1, ways)\n            bell[index] += 1\n            partition(n, index+1, ways)\n            bell[index] -= 1\n            bell[index+1] += 1\n            partition(n, index+1, ways)\n            bell[index+1] -= 1\n\n    # Call the partition function with the number of Bell numbers and an empty list to store the partitions\n    partition(n, 0, [])\n    # Return the length of the list of partitions\n    return len(ways)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition_count(n, k):\n        if n < k:\n            return 0\n        elif n == k:\n            return 1\n        else:\n            count = 0\n            for i in range(k):\n                count += partition_count(n - i, k)\n            return count\n    return partition_count(n, 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_partition(n, k):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return bell_partition(n - 1, k) + bell_partition(n - 1, k - 1)\n    return bell_partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nprint(bell_number(5))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count of ways to partition the set of Bell numbers\n    ways = 0\n    # Iterate through the set of Bell numbers\n    for i in range(1, n+1):\n        # Iterate through all possible partitions of the set of Bell numbers\n        for j in range(1, i+1):\n            # If the partitions meet, increment the count of ways\n            if i == j:\n                ways += 1\n    # Return the count of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the number of ways to partition to 1\n    ways = 1\n\n    # Loop through the range of n\n    for i in range(1, n+1):\n\n        # Calculate the number of ways to partition to i using the Bell number formula\n        ways = ways * (i * (i-1)) // (i-1)\n\n    # Return the number of ways to partition to n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_number(n-1) - bell_number(n-2)) // n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nprint(bell_number(10))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    A monotonic array is an array where all elements are either increasing or decreasing.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    # If the first element is less than the second element\n    if A[0] < A[1]:\n        # Check if the remaining elements are increasing\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    \n    # If the first element is greater than the second element\n    elif A[0] > A[1]:\n        # Check if the remaining elements are decreasing\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    # If the first and last elements are the same\n    else:\n        return is_Monotonic(A[1:])\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[1] > A[0]:\n        if A[-1] < A[-2]:\n            return False\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i-1] or A[i] > A[i+1]:\n                    return False\n    else:\n        if A[-1] > A[-2]:\n            return False\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i-1] or A[i] < A[i+1]:\n                    return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n\n    Input: A: list of integers\n\n    Output: True if the array is monotonic, False otherwise.\n\n    Approach: We can use the fact that any increasing or decreasing subsequence in the array is also increasing or decreasing. We can check this property for each subsequence and return False if any of them is not monotonic.\n\n    Time Complexity: O(n^2)\n\n    Space Complexity: O(1)\n    '''\n\n    for i in range(len(A)):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # Check if the array is monotonic or not\n    if n == 1:\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, n):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    elif A[0] > A[1]:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # initialize the first element as the minimum value\n    min_val = A[0]\n    \n    # loop through the array starting from the second element\n    for i in range(1, len(A)):\n        \n        # check if the current element is less than the previous element\n        if A[i] < min_val:\n            return False\n        \n        # update the minimum value if the current element is less than the minimum value\n        min_val = min(min_val, A[i])\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize the variables for the first and last element\n    first = A[0]\n    last = A[-1]\n    \n    # Iterate through the array from first to last\n    for i in range(1, len(A)-1):\n        # If the current element is greater than the next element, return False\n        if A[i] > A[i+1]:\n            return False\n    \n    # If all the elements are equal, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # check if the array is monotonic in terms of increasing or decreasing order\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        if A[-1] > A[-2]:\n            return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        if A[-1] < A[-2]:\n            return False\n    \n    # if both checks passed, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists as input. The first list 'l' contains the elements that we want to check if they are a sublist of the second list's'. The second list's' is the sublist that we want to check if it is present in the first list 'l'. The function returns a boolean value indicating whether the second list's' is present in the first list 'l' or not.\n\n    Example:\n    l = [1, 2, 3, 4, 5]\n    s = [3, 4]\n    is_sublist(l, s) # Output: True\n    '''\n\n    # Convert the second list's' to set to remove duplicates\n    s = set(s)\n\n    # Iterate through the first list 'l' and check if the second list's' is present in it\n    for element in l:\n        if s <= set(element):\n            return True\n\n    # If no sublist is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    # Check if sublist is empty\n    if len(s) == 0:\n        return True\n\n    # Check if sublist is present at the beginning of the list\n    if l[0:len(s)] == s:\n        return True\n\n    # Check if sublist is present in the list\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If none of the above conditions are satisfied, the sublist is not present in the list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(s, list):\n        return False\n    elif not isinstance(l, list):\n        return False\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i] not in l:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return s[0] in l[0] and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments, a list 'l' and a sublist's'.\n    The function checks whether the sublist's' exists in the list 'l' or not.\n    If the sublist is found in the list, the function returns True, otherwise, it returns False.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if all the tuples have the same number of elements\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize count variable to zero\n    count = 0\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Check if the length of the tuple is equal to the previous length\n        if len(tup) == count:\n            # If all the tuples have equal length, increment count variable\n            count += 1\n        else:\n            # If the length of a tuple is not equal to the previous length, return False\n            return False\n    # If the loop completes, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(Input) == 0:\n        return \"Error: Input is empty.\"\n    \n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if len(Input[i])!= len(Input[j+1]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to one side of the list\n        for i in range(gap, n):\n            # Swap adjacent elements if they are not in the correct order\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        # Decrease the gap by a factor of 1.3\n        gap = int(gap * 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \"\"\"\n    swapped = True\n    n = len(nums)\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        gap = (gap + 1) // 2"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm for sorting a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    count = 0\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / 1.3)\n        count += 1\n        sorted = True\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                sorted = False\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = (gap * 10) // 13\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1 or nums[0] < nums[n-1]:\n        # print(gap)\n        if gap > 1:\n            # print(\"swapping\")\n            for i in range(0, n-gap):\n                # print(\"i:\", i, \"j:\", i+gap)\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        # print(\"gap:\", gap)\n        gap = int(gap/1.3)\n        # print(\"gap/1.3:\", gap)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define the number of swaps\n    swaps = 0\n\n    # define the maximum number of iterations\n    max_iter = len(nums)\n\n    # define the minimum gap\n    min_gap = 1\n\n    # loop until we've made a pass through the list without swapping anything\n    while swaps!= 0 and max_iter > 0:\n        # calculate the new minimum gap\n        min_gap = 1 + int(min_gap * 0.75)\n\n        # loop through the list and compare adjacent elements\n        for i in range(len(nums)-1):\n            # if the elements are out of order, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swaps += 1\n\n                # if we've made a pass through the list without swapping anything, we're done\n                if swaps == 0 or max_iter == 0:\n                    break\n\n        # decrement the maximum number of iterations\n        max_iter -= 1\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    sorted = False\n\n    while not sorted:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is a positive integer\n    if type(n)!= int or n < 0:\n        print(\"Please enter a positive integer\")\n        return\n    \n    # Calculate the difference of squares\n    squares = [i**2 for i in range(1, int(n**0.5)+1)]\n    sum_squares = sum(squares)\n    difference = n - sum_squares\n    \n    # Check if the difference is a square\n    if difference**2 == sum_squares:\n        print(\"The given number can be represented as the difference of two squares\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n//2\n    b = n - 2*a\n    if a*a == b:\n        print(a, \"can be represented as the difference of two squares\")\n    else:\n        print(a, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # function to check whether n can be represented as the difference of two squares or not\n    def is_square_difference(num):\n        for i in range(2, int(num**0.5)+1):\n            if (num - i*i)**2 == num:\n                return True\n        return False\n\n    # check whether n can be represented as the difference of two squares or not\n    if is_square_difference(n):\n        print(n, \"can be represented as the difference of two squares\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        print(\"The given number is even\")\n        return False\n\n    # Find the square of the given number\n    square = n ** 0.5\n\n    # Check if the square is an integer\n    if int(square)!= square:\n        print(\"The square of the given number is not an integer\")\n        return False\n\n    # Check if the square is greater than the given number\n    if square > n:\n        print(\"The square of the given number is greater than the given number\")\n        return False\n\n    # Check if the given number can be represented as the difference of two squares\n    diff = n - square\n    if diff ** 2 == square:\n        print(\"The given number can be represented as the difference of two squares\")\n        return True\n    else:\n        print(\"The given number cannot be represented as the difference of two squares\")\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate square of difference\n    difference = n**2 - (n*n)**2\n    # check if difference is integer\n    if difference.is_integer():\n        # if difference is integer, check if difference is a perfect square or not\n        if int(difference**0.5)**2 == difference:\n            print(\"The given number can be represented as the difference of two squares.\")\n        else:\n            print(\"The given number cannot be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return \"The given number cannot be represented as the difference of two squares\"\n    elif n == 0: \n        return \"The given number is zero\"\n    elif n == 1: \n        return \"The given number is one\"\n    else: \n        # Create two lists of integers for the two squares of the given number\n        squares = [int(x*x) for x in range(int(n**0.5)+1)]\n        # Create a list of integers for the squares of the differences of the given number\n        differences = [x**2-n for x in squares]\n        # Check if the list of differences is empty or not\n        if differences: \n            return \"The given number is not a difference of two squares\"\n        else: \n            return \"The given number is a difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # If n is not a positive integer, return False\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # If n is 1, return True\n    if n == 1:\n        return True\n    \n    # Initialize two variables to store the two squares\n    square1 = n\n    square2 = n\n    \n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Iterate through all the odd numbers up to sqrt_n\n    for i in range(3, sqrt_n+1, 2):\n        # Check if i and n/i are the same\n        if i == n//i:\n            # If they are, then n is the difference of two squares\n            return True\n    \n    # If the loop completes without finding a pair of squares, then n is not a difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a prime number or not\n    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if the given number can be represented as the difference of two squares or not\n    def isSquareDiff(num):\n        # Calculate the square of the number\n        square = num ** 0.5\n\n        # Check if the square is prime or not\n        if isPrime(square):\n            # Calculate the sum of squares of digits of the square\n            sum_of_squares = sum(int(digit ** 2) for digit in str(square))\n\n            # Check if the sum is equal to the given number\n            if sum_of_squares == num:\n                return True\n        return False\n\n    # Check if the given number can be represented as the difference of two squares or not\n    if isSquareDiff(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Take square of the number and check if it is a square\n    square_n = n * n\n    if square_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Use nested for loops to check for divisibility by squares\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*i + j*j == n:\n                # Check if divisible by any other square\n                for k in range(1, n+1):\n                    if (i+j)*(i+j) == k*k:\n                        return False\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two lists of colors and patterns as input and returns True if the patterns\n    follow the sequence specified in the patterns array, and False otherwise.\n    \"\"\"\n\n    # Check if the number of colors in the lists is the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through each pattern and check if it matches the corresponding color in the list\n    for i in range(len(patterns)):\n        if colors.count(patterns[i])!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a dictionary to store the count of each color in the colors array\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # Initialize a variable to keep track of the index in the patterns array\n    index = 0\n    \n    # Loop through the colors in the colors array\n    for color in colors:\n        # If the color count for the current color is not equal to the current pattern in the patterns array\n        if color_count[color]!= patterns[index]:\n            return False\n        \n        # Increment the index by 1 to move on to the next pattern in the patterns array\n        index += 1\n        \n    # If we reach this point, it means the colors in the colors array follow the sequence in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Convert colors to set to avoid duplicates\n    colors = set(colors)\n\n    # Initialize a counter for each pattern in the patterns array\n    counters = []\n    for pattern in patterns:\n        counters.append(0)\n\n    # Loop through the colors and update the counter for each pattern\n    for color in colors:\n        for i in range(len(patterns)):\n            if color == patterns[i]:\n                counters[i] += 1\n\n    # Loop through the counters and check if they are all the same\n    for counter in counters:\n        if counter!= counters[0]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # If the colors are not the same, return False\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # If we made it through the loop without returning False, it means the patterns match the colors\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Get the number of colors\n    n = len(colors)\n    \n    # Check if the length of patterns array is same as the number of colors\n    if len(patterns)!= n:\n        return False\n\n    # Initialize a dictionary to store the count of each pattern\n    pattern_count = {}\n\n    # Loop through the colors and count the number of occurrences of each pattern in the patterns array\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n\n    # Loop through the colors and check if it matches the current pattern in the patterns array\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # Check if the count of each pattern in the patterns array is same as the count in the dictionary\n    for pattern in patterns:\n        if pattern_count[pattern]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables for the current pattern and the number of matching patterns\n    pattern = []\n    matching_patterns = 0\n\n    # Loop through the colors array and check if it matches the current pattern\n    for color in colors:\n        if color in pattern:\n            matching_patterns += 1\n        else:\n            pattern = [color]\n\n    # Check if the number of matching patterns matches the length of the patterns array\n    if matching_patterns == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the colors and patterns lists have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a list of lists to store the subsequences\n    subsequences = [[], []]\n\n    # Initialize the first subsequence with the first color and the second pattern\n    subsequences[0].append(colors[0])\n    subsequences[1].append(patterns[0])\n\n    # Loop through the remaining colors and patterns\n    for i in range(1, len(colors)):\n        # Check if the current color is the same as the last color in the first subsequence\n        if colors[i] == subsequences[0][-1]:\n            # Check if the current pattern is the same as the last pattern in the second subsequence\n            if patterns[i] == subsequences[1][-1]:\n                # If both conditions are satisfied, append the color and pattern to the first subsequence\n                subsequences[0].append(colors[i])\n                subsequences[1].append(patterns[i])\n            else:\n                # If the second subsequence is exhausted, return False\n                if not subsequences[1]:\n                    return False\n                # If the current pattern is different from the last pattern in the second subsequence,\n                # append the current color and pattern to the second subsequence\n                subsequences[1].append(patterns[i])\n        else:\n            # If the first subsequence is exhausted, return False\n            if not subsequences[0]:\n                return False\n            # If the current color is different from the last color in the first subsequence,\n            # append the current color and pattern to the first subsequence\n            subsequences[0].append(colors[i])\n            subsequences[1].append(patterns[i])\n\n    # If all colors and patterns are used in the subsequences, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables to store the current pattern and current color\n    current_pattern = patterns[0]\n    current_color = colors[0]\n\n    # Loop through the colors and patterns arrays\n    for i in range(1, len(colors)):\n        # If the current color is not the same as the previous color\n        if colors[i]!= current_color:\n            # If the current pattern is the same as the previous pattern\n            if current_pattern == patterns[i]:\n                # Reset the current pattern and color variables\n                current_pattern = patterns[i]\n                current_color = colors[i]\n            else:\n                # If the current pattern is not the same as the previous pattern, return False\n                return False\n        else:\n            # If the current color is the same as the previous color, check if the current pattern is valid\n            if current_pattern == patterns[i]:\n                # If the current pattern is valid, update the current color and pattern variables\n                current_color = colors[i]\n                current_pattern = patterns[i]\n            else:\n                # If the current pattern is not valid, return False\n                return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize empty set to store the tuples\n    result = set()\n    \n    # loop through the list of tuples\n    for t in test_list:\n        # check if all elements of the tuple are divisible by K\n        if all(i % K == 0 for i in t):\n            # if all elements are divisible by K, add the tuple to the result set\n            result.add(t)\n            \n    # return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    def is_divisible(tup, k):\n        return all(elem % k == 0 for elem in tup)\n\n    return [tup for tup in test_list if is_divisible(tup, K)]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the tuples which meet the criteria\n    valid_tuples = []\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Initialize a set to store the elements in the tuple\n        set_tup = set(tup)\n        # Loop through each element in the tuple\n        for elem in set_tup:\n            # Check if the element is divisible by K\n            if elem % K!= 0:\n                # If it's not, remove it from the set and check if there are any remaining elements in the set\n                if len(set_tup) == 1:\n                    # If there are no remaining elements, the tuple is not valid\n                    break\n                else:\n                    set_tup.remove(elem)\n        # If the set is empty, the tuple is valid and can be added to the valid_tuples list\n        if not set_tup:\n            valid_tuples.append(tup)\n    # Return the list of valid tuples\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    \n    # create a list to store tuples with all elements divisible by K\n    result_list = []\n    \n    # iterate through the count dictionary\n    for elem, count in count_dict.items():\n        # check if all elements in the dictionary have a count divisible by K\n        if count % K == 0:\n            # create a new tuple with the current element and K times\n            new_tup = (elem, K*count)\n            # add the new tuple to the result list\n            result_list.append(new_tup)\n    \n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    count = 0\n    for word in words:\n        if len(word) % 2 == 0: # check if the length of the word is even\n            count += 1\n    if count % 2 == 0: # check if the length of all even words is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    '''\n    word_list = s.split() # split the input string into a list of words\n    for word in word_list:\n        if len(word) % 2 == 0: # if the length of the word is even\n            return False # return False if the length of the word is even\n    return True # return True if the length of the word is odd"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # loop through each word\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            # if the length is odd, return True\n            return True\n        else:\n            # if the length is even, return False\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd or even\n            print(word + \" is odd length.\")\n        else:\n            print(word + \" is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even word\")\n        else:\n            print(f\"{word} is an odd word\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        t = 1/2 * (n**2 + n + 1)\n        while t!= 0:\n            n += 1\n            t = 1/2 * (n**2 + n + 1)\n        return n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4*tetrahedral_number(n-1) + 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    sum_of_powers = 0\n    count = 0\n    \n    # Calculate the sum of powers of 4 up to n\n    for i in range(1, n+1):\n        sum_of_powers += (i * i * i * i)\n        count += 1\n        \n    # Calculate the nth tetrahedral number\n    tetrahedral_number = sum_of_powers / count\n    \n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function calculates the nth tetrahedral number.\n\n    Returns:\n    The nth tetrahedral number.\n\n    Example:\n    >>> tetrahedral_number(10)\n    2575\n    '''\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of cubes of the natural numbers from 1 to n\n    sum_cubes_from_1_to_n = n * (n + 1) * (n + 2) // 6\n\n    # Return the sum of the two sums\n    return sum_cubes - sum_cubes_from_1_to_n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Function to calculate the nth tetrahedral number\n    def nth_tetrahedral(n):\n        # Base case: return 1 if n is 1\n        if n == 1:\n            return 1\n        # Recursive case: compute n-th tetrahedral number by adding n-th triangular number and n-th pentagonal number\n        return (2 * n - 1) * nth_tetrahedral(n - 1) + nth_triangular(n - 1) + nth_pentagonal(n - 1)\n\n    # Function to calculate the nth triangular number\n    def nth_triangular(n):\n        # Base case: return 1 if n is 0\n        if n == 0:\n            return 1\n        # Recursive case: compute n-th triangular number by adding n-th tetrahedral number and n-th hexagonal number\n        return (n * (3 * n - 1)) // 2\n\n    # Function to calculate the nth pentagonal number\n    def nth_pentagonal(n):\n        # Base case: return 1 if n is 0\n        if n == 0:\n            return 1\n        # Recursive case: compute n-th pentagonal number by adding n-th tetrahedral number and n-th hexagonal number\n        return (5 * n * (3 * n - 1)) // 2\n\n    # Call the nth_tetrahedral function and print the result\n    print(nth_tetrahedral(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # First, find the sum of the first n natural numbers.\n    # Sum of first n natural numbers: (n*(n+1))/2\n    sum_of_natural_numbers = (n * (n + 1)) // 2\n\n    # Next, find the sum of the first n squares of natural numbers.\n    # Sum of first n squares of natural numbers: (n*(n+1)*(2n+1))/6\n    sum_of_natural_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Finally, find the sum of the first n cubes of natural numbers.\n    # Sum of first n cubes of natural numbers: n*(n+1)*(2n+1)*(n+1)/120\n    sum_of_natural_cubes = n * (n + 1) * (2 * n + 1) * (n + 1) // 120\n\n    # The nth tetrahedral number is the sum of the first n squares of natural numbers\n    # and the first n cubes of natural numbers.\n    nth_tetrahedral_number = sum_of_natural_squares + sum_of_natural_cubes\n\n    return nth_tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Helper function to find the number of 6-digit numbers with the same parity as n\n    def num_with_same_parity(n, parity):\n        count = 0\n        for i in range(1, 10**6):\n            if (i % 3 == 0) == parity:\n                count += 1\n        return count\n\n    # Find the parity of n\n    parity = n % 3\n\n    # Calculate the number of tetrahedral numbers with the same parity as n\n    count = num_with_same_parity(n, parity)\n\n    # Calculate the nth tetrahedral number\n    result = count * 4**count\n\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the first tetrahedral number\n    t = 0\n    # Loop through each integer value of n\n    for i in range(n): \n        # Add the value of t to the result\n        t += i\n        # Add 1 to the value of t\n        t += 1\n    # Return the value of t\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 4\n    b = 6\n    c = 12\n    d = 24\n    for i in range(1, n+1):\n        print(a*i*(a-1)//2 + b*i*(b-1)//2 + c*i*(c-1)//2 + d*i*(d-1)//2)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # initialize variables\n    num = 0\n    num_prev = 1\n\n    # calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        num = 1 + 4 * (num_prev * (num_prev + 1)) // 3\n        num_prev = num\n\n    # return the nth tetrahedral number\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius as input and returns the volume of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    surface_area = (4/3)*math.pi*(r**3)\n\n    # Calculate the volume of the sphere\n    volume = (4/3)*math.pi*(r**3)\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume using the formula V = (4/3)\u03c0r^3\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere given its radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return sum % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total += ord(i)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    return chr((ascii_value % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to a list of characters\n    str_list = list(strr)\n\n    # Calculate the ASCII value of each character\n    ascii_val = [ord(char) for char in str_list]\n\n    # Calculate the sum of the ASCII values modulo 26\n    sum_ascii = sum(ascii_val) % 26\n\n    # Convert the sum to a character and return it\n    return chr(sum_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    char_value = (ascii_value % 26)\n    char_code = chr(char_value)\n    return char_code"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    \n    # loop through the characters of the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_val = ord(char)\n        \n        # add the ASCII value to the sum\n        sum += ascii_val\n    \n    # convert the sum to the corresponding character\n    char = chr((sum % 26) + 65)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum(ord(c) for c in strr) % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) % 26\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to lowercase to make the calculation case-insensitive\n    strr = str(strr).lower()\n\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate over each character in the string and add its ASCII value to the sum modulo 26\n    for char in sstrn:\n        sum += ord(char)\n\n    # Find the character corresponding to the sum modulo 26\n    char = chr((sum % 26) + ord('a'))\n\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1] # start with 1 and 1\n    for i in range(2, n+1): # loop from 2 to n\n        next_number = sequence[i-1] + sequence[i-2]\n        sequence.append(next_number)\n    return sequence[n] # return the nth number"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    seq = [0, 1]\n\n    # Calculate the next number in the sequence\n    for i in range(2, n+1):\n        # Check if the next number should be a 1 or a 0\n        if i % 3 == 0:\n            # It's a 1, add it to the sequence\n            seq.append(1)\n        else:\n            # It's a 0, add it to the sequence\n            seq.append(0)\n\n    # Return the nth number in the sequence\n    return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0, 1]  # Initializing the sequence with 1 and 0\n    for i in range(n-1):\n        sequence.append(sequence[-1]+sequence[-2])  # Adding the next number in the sequence\n    return sequence[n-1]  # Returning the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    i = 2\n    while i < n:\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, (a+b)\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize variables\n    count = 1\n    a = 1\n    b = 1\n    \n    # Loop until n is reached\n    while count < n:\n        # Check if a is prime\n        is_prime = True\n        for i in range(2, a):\n            if a % i == 0:\n                is_prime = False\n                break\n        \n        # If a is prime, update a and b\n        if is_prime:\n            a += 1\n        else:\n            b += 1\n        \n        # Increment count\n        count += 1\n    \n    # Return the value of a\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0, 1]\n    for i in range(2, n):\n        a.append(4 * a[i-1] - a[i-2])\n    return a[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4*math.pi*r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function finds the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere with radius r.\n    \n    Args:\n    r: radius of the sphere\n    \n    Returns:\n    surface_area: surface area of the sphere in square units\n    \"\"\"\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r  # formula for surface area of sphere\n    print(\"Surface area of a sphere of radius\", r, \"is\", area)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Function to calculate the centered hexagonal number\n    def centered_hexagonal(n):\n        \"\"\"\n        Calculates the centered hexagonal number for n.\n        \"\"\"\n        return (n * (3 * n - 1)) / 2\n    \n    # Return the nth centered hexagonal number\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return (n * (3 * n - 1)) // 2\n    else:\n        return (n * (3 * n - 1) + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        print(\"Please enter a positive integer.\")\n    elif n == 1:\n        print(1)\n    else:\n        # Find the value of n\n        val = 1 + 3 * (n - 1)\n        # Calculate the number of rows\n        rows = 1 + val // 6\n        # Calculate the number of columns\n        cols = 2 * rows - 1\n        # Calculate the starting position for the number\n        start_pos = 1 + 2 * rows - 1\n        # Calculate the sum of the centered hexagonal numbers\n        hex_sum = 0\n        for i in range(1, rows + 1):\n            # Calculate the number of hexagonal numbers in each row\n            num_hex = 2 * rows - 2 * i + 1\n            # Calculate the starting position for the hexagonal numbers\n            hex_start = start_pos - num_hex + 1\n            # Calculate the sum of the hexagonal numbers in the row\n            hex_sum += hex_start * (hex_start + 1) // 2\n        print(hex_sum)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Convert n to float\n    n = float(n)\n\n    # Calculate the sum of centered hexagonal numbers up to n\n    sum = 0.5 * (n * (n + 1) + 2 * n + 1)\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    num = 1\n    for i in range(n):\n        num += (2 * i + 1) * (2 * i + 1)\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        '''\n        Helper function to find centered hexagonal number.\n        '''\n        return 2 * n - 1\n    \n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Finding the number of squares required to reach n\n    num_squares = (2*n+1)**0.5 - 1\n    \n    # Finding the center of the hexagon\n    center = int((num_squares+1) / 2)\n    \n    # Finding the number of sides\n    num_sides = 2*center + 1\n    \n    # Finding the number of rows\n    num_rows = int(num_squares / 2)\n    \n    # Finding the total number of hexagons\n    total_hexagons = num_rows * num_sides\n    \n    # Finding the distance from the center to the nth hexagon\n    distance = n - center\n    \n    # Finding the distance from the center to the nth side of the hexagon\n    center_to_side = center - distance\n    \n    # Calculating the nth centered hexagonal number\n    hexagonal_number = (num_sides*center_to_side**2 + center**2)**0.5\n    \n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hexagonal_numbers = [2, 14, 44, 132, 392, 1104]\n    return centered_hexagonal_numbers[n-1]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a merged dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    \n    # Add keys from dict1 to merged_dict\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    \n    # Add keys from dict2 to merged_dict\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    \n    # Add keys from dict3 to merged_dict\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1: A dictionary.\n        dict2: A dictionary.\n        dict3: A dictionary.\n\n    Returns:\n        A single dictionary containing all the key-value pairs from dict1, dict2, and dict3.\n    \"\"\"\n\n    # Merge dictionaries using the built-in merge() method from collections.py\n    merged_dict = {**dict1, **dict2, **dict3}\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Arguments:\n    - dict1: A dictionary.\n    - dict2: A dictionary.\n    - dict3: A dictionary.\n\n    Returns:\n    - A dictionary that contains the keys and values from all three dictionaries.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): Dictionary 1.\n        dict2 (dict): Dictionary 2.\n        dict3 (dict): Dictionary 3.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n\n    # Create a new dictionary to hold the merged data.\n    merged_dict = {}\n\n    # Iterate over each key in the first dictionary.\n    for key, value in dict1.items():\n        # Add the key-value pair to the merged dictionary.\n        merged_dict[key] = value\n\n    # Iterate over each key in the second dictionary.\n    for key, value in dict2.items():\n        # Add the key-value pair to the merged dictionary.\n        merged_dict[key] = value\n\n    # Iterate over each key in the third dictionary.\n    for key, value in dict3.items():\n        # Add the key-value pair to the merged dictionary.\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key] + dict2[key]\n        else:\n            if key in dict3.keys():\n                merged_dict[key] = dict1[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Iterate over the three dictionaries and add their values to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)  # Using defaultdict to create a dictionary with default values of 0\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(N))\n    sorted_list = sorted(num_list)\n    closest = sorted_list[0]\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] - N < closest:\n            closest = sorted_list[i]\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = None\n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    for i in range(1, N+1):\n        if i < N:\n            curr_diff = abs(N - i)\n        else:\n            curr_diff = abs(N - i) + 1\n        if curr_diff < diff:\n            diff = curr_diff\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N):\n        if smallest > i:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = -1\n    \n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n            \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = 1\n    largest_num = N\n    closest_num = N\n    smallest_diff = abs(N-smallest_num)\n    largest_diff = abs(N-largest_num)\n\n    while smallest_diff <= largest_diff:\n        mid_num = (smallest_num + largest_num) // 2\n        mid_diff = abs(N-mid_num)\n        if mid_diff < smallest_diff:\n            smallest_diff = mid_diff\n            closest_num = mid_num\n            smallest_num = mid_num\n        else:\n            largest_diff = mid_diff\n            largest_num = mid_num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smaller_numbers = []\n    for num in range(N, 0, -1):\n        smaller_numbers.append(num)\n    closest = smaller_numbers[-1]\n    for num in smaller_numbers:\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    diff = float('inf')\n\n    for i in range(1, N+1):\n        if i <= N//2:\n            diff = abs(N-i)\n        else:\n            diff = abs(i-N)\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = 10**9\n    min_diff = diff\n    for i in range(1, int(N**0.5)+1):\n        if N%i == 0:\n            smaller_num = i-1\n            if diff > abs(smaller_num-N):\n                diff = abs(smaller_num-N)\n                min_diff = diff\n                closest_num = smaller_num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    min_diff = float('inf')\n    closest = float('inf')\n\n    # Iterate over the numbers from 1 to N\n    for num in range(1, N+1):\n\n        # Calculate the difference between the current number and N\n        diff = abs(N - num)\n\n        # Update the minimum difference and closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    \n    # loop through each element in the list\n    for element in list1:\n        # split the element into words and iterate through each word\n        words = element.split()\n        for word in words:\n            # check if the length of the word is greater than max_length\n            if len(word) > max_length:\n                max_length = len(word)\n                \n    # return the maximum length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of strings.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize variables\n    max_len = 0\n    current_len = 0\n    \n    # Loop through the list of words\n    for word in list1:\n        # Update the current length of the word\n        current_len = len(word)\n        \n        # If the current length is greater than the maximum length, update the maximum length\n        if current_len > max_len:\n            max_len = current_len\n            \n    # Return the maximum length of the word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables\n    max_length = 0\n    longest_word = \"\"\n\n    # Loop through each word in the list\n    for word in list1:\n        # Get the length of the current word\n        length = len(word)\n\n        # If the length is greater than the current maximum length, update the variables\n        if length > max_length:\n            max_length = length\n            longest_word = word\n\n    # Return the length of the longest word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        words = i.split()\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if str1 in sub_str:\n            return True\n        else:\n            return False\n    else:\n        return \"Both inputs must be strings.\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found\")\n    else:\n        print(\"Substring not found\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return False\n    \n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n        str1 (str): A given string to check if it is present in sub_str.\n        sub_str (list): A list of strings to search for the given string.\n\n    Returns:\n        bool: True if str1 is present in sub_str, False otherwise.\n    \"\"\"\n    if sub_str:\n        for string in sub_str:\n            if string in str1:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in sub_str)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether a given number is undulating or not.\n    If the number is odd and divisible by 2, it is undulating.\n    Otherwise, it is not undulating.\n    '''\n    \n    if n % 2 == 1 and n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether a given number is undulating or not.\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n\n    # Check if the number has only odd digits\n    if len(str(n)) % 2 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if not (n**0.5).is_integer():\n        return False\n\n    # Otherwise, it's undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # If the number is even, check if it's divisible by 3\n        if n % 3 == 0:\n            # If the number is divisible by 3, it's undulating\n            return True\n        else:\n            # If the number is not divisible by 3, it's not undulating\n            return False\n    else:\n        # If the number is odd, check if it's divisible by 5\n        if n % 5 == 0:\n            # If the number is divisible by 5, it's undulating\n            return True\n        else:\n            # If the number is not divisible by 5, it's not undulating\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return is_undulating(n-1) + is_undulating(n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n > 0:\n        for i in range(n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Get the square root of the input number\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 3 == 0 and n % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Convert the given number to a string\n    s = str(n)\n\n    # Iterate through the string and check if the sum of the digits is odd or even\n    for i in range(len(s)):\n        sum = int(s[i]) + int(s[-i-1])\n        if sum % 2 == 0:\n            return True\n\n    # If the number is not undulating, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, returns the index of the first value in the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function to get the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_val = None\n    min_idx = None\n    for i in range(len(test_list)):\n        if min_val is None or test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_idx = i\n    return min_idx"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create a lambda function to sort the list based on the second value\n    sort_func = lambda x: x[1]\n    \n    # Use the sorted() function to sort the list based on the second value\n    sorted_list = sorted(test_list, key=sort_func)\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by the second value (index 1) using the built-in sorted function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple (index 0) in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes in a list of lists and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(1, len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the minimum length to the length of the first list in the list of lists\n    min_length = len(lst[0])\n\n    # Loop through each list in the list of lists\n    for i in range(len(lst)):\n\n        # If the current list has a shorter length than the minimum length, update the minimum length\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    # initialize variables to store the current minimum and current list lengths\n    min_length = lst[0][0]\n    current_length = len(lst[0])\n    \n    # loop through each list in the input list of lists\n    for sublist in lst:\n        # check if the current list has a smaller length\n        if len(sublist) < current_length:\n            # update the minimum length to the current list's length\n            min_length = len(sublist)\n            # update the current list length to the current list's length\n            current_length = len(sublist)\n    \n    # return the minimum list length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize variables\n    count = 0\n    divisor = 1\n    \n    # loop through integers from 1 to n-1\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # increment count if i is a divisor\n            count += 1\n            \n            # update divisor to the last divisor found\n            divisor = i\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [num for sublist in list1 for num in sublist]\n    freq_dict = {}\n    for num in flattened_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # loop through each element in the list\n    for elem in list1:\n        # if the element is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(elem, list):\n            if elem not in freq:\n                freq[elem] = 1\n            else:\n                freq[elem] += 1\n        # if the element is a list, flatten it and add the frequency of each element in the list\n        else:\n            for sub_elem in elem:\n                if not isinstance(sub_elem, list):\n                    if sub_elem not in freq:\n                        freq[sub_elem] = 1\n                    else:\n                        freq[sub_elem] += 1\n                else:\n                    for subsub_elem in sub_elem:\n                        if not isinstance(subsub_elem, list):\n                            if subsub_elem not in freq:\n                                freq[subsub_elem] = 1\n                            else:\n                                freq[subsub_elem] += 1\n                        else:\n                            for subsubsub_elem in subsub_elem:\n                                if not isinstance(subsubsub_elem, list):\n                                    if subsubsub_elem not in freq:\n                                        freq[subsubsub_elem] = 1\n                                    else:\n                                        freq[subsubsub_elem] += 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list += sublist\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary recursively\n    def decimal_to_binary_helper(num, binary='', base=10):\n        if num == 0:\n            return binary\n        elif num >= base:\n            return decimal_to_binary_helper(num // base, binary + str(num % base), base)\n        else:\n            return decimal_to_binary_helper(num * base, binary + str(num % base), base)\n\n    # Call the helper function and return the binary equivalent\n    return decimal_to_binary_helper(n)[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2\n        binary = str(rem) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert the decimal number to a string\n    decimal_str = str(n)\n\n    # Initialize an empty string to store the binary representation\n    binary_str = \"\"\n\n    # Iterate over the digits of the decimal number from right to left\n    for digit in reversed(decimal_str):\n        # Convert the current digit to a string\n        digit_str = str(int(digit))\n\n        # Calculate the number of times the current digit must be repeated in the binary representation\n        times_digit = len(digit_str)\n\n        # Pad the current digit with leading zeros if necessary\n        padded_digit = \"0\" * (bits - times_digit) + digit_str\n\n        # Add the repeated digit to the binary string\n        binary_str += padded_digit\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty string to store the binary equivalent\n    binary = ''\n\n    # loop until the decimal number is 0\n    while n > 0:\n\n        # find the remainder when n is divided by 2\n        remainder = n % 2\n\n        # add the remainder to the beginning of the binary string\n        binary = str(remainder) + binary\n\n        # remove the last digit from n\n        n = n // 2\n\n    # return the binary string with no leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '-' + decimal_to_binary(-n)\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the given number is a palindrome\n    if is_palindrome(num):\n        # find the first non-palindrome number greater than the given number\n        for i in range(num+1, sys.maxsize):\n            if not is_palindrome(i):\n                return i\n    # if no non-palindrome number is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize two pointers to the left and right of the number\n    left = right = num\n    \n    # Iterate until the left pointer reaches the right of the number\n    while left >= right:\n        # Calculate the midpoint of the current range\n        mid = (left + right) // 2\n        \n        # Check if the midpoint is a palindrome\n        if str(mid) == str(mid)[::-1]:\n            # If it is, update the left pointer to mid\n            left = mid\n        else:\n            # If it's not, update the right pointer to mid\n            right = mid\n    \n    # Return the next smallest palindrome\n    return left + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    else:\n        # check if the input number is even or odd\n        if num % 2 == 0:\n            # if even, find the next odd number greater than or equal to num/2\n            next_num = num // 2 + 1\n        else:\n            # if odd, find the next even number greater than or equal to (num/2)+1\n            next_num = (num // 2) + 1\n        # convert next_num to string and reverse it\n        next_num_str = str(next_num)[::-1]\n        # check if next_num_str is a palindrome\n        while next_num_str[:1] == '0' and len(next_num_str) > 1:\n            next_num_str = next_num_str[1:]\n        # check if next_num is a palindrome, and if it is, return the next smallest palindrome\n        if int(next_num_str) == next_num:\n            return next_num\n        else:\n            return next_smallest_palindrome(int(next_num_str))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is odd or even\n    if num % 2 == 0:\n        num -= 1\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer and check if it's a palindrome\n    num_reverse = int(num_str)\n    if num_reverse == num_reverse[::-1]:\n        num_reverse += 1\n\n    # Check if the reversed number is odd or even\n    if num_reverse % 2 == 0:\n        num_reverse -= 1\n\n    # Return the next smallest palindrome\n    return num_reverse\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Initialize a variable to store the next smallest palindrome\n    next_palindrome = 0\n\n    # Check if the number is palindrome or not\n    if is_palindrome(num):\n        # If it is, return the next integer\n        return num + 1\n\n    # Check all odd integers between 10 and 100\n    for i in range(10, 101, 2):\n        # Check if the odd integer is a palindrome\n        if is_palindrome(i):\n            # If it is, return the next smallest palindrome\n            next_palindrome = i\n            break\n\n    # If there is no next smallest palindrome, return the smallest palindrome that is greater than the given integer\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    for i in range(100, 1000):\n        temp = str(num) + str(i)\n        if temp == temp[::-1] or temp == temp[::-1][1:]:\n            return int(temp)\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_num_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # add 1 to the reversed integer\n    reversed_num += 1\n    # convert the reversed integer back to a string\n    reversed_num_str = str(reversed_num)\n    # check if the reversed integer is a palindrome\n    is_palindrome = reversed_num_str == reversed_num_str[::-1]\n    # check if the reversed integer is less than the original integer\n    is_less_than_original = reversed_num < num\n    # if both conditions are true, return the reversed integer\n    if is_palindrome and is_less_than_original:\n        return reversed_num\n    # otherwise, return the original integer\n    else:\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = list(str(num))\n    n = len(digits)\n\n    # Convert the number to a string and reverse it\n    digits_rev = digits[::-1]\n\n    # Compare each digit of the original number with the corresponding digit of its reverse\n    for i in range(n):\n        if digits[i] < digits_rev[i]:\n            # If a digit in the original number is smaller than its reverse, we increment that digit by 1\n            digits[i] += 1\n            # We also check for cases where the incremented digit results in a palindrome\n            if digits[i] % 2 == 0 and num % 2 == 0:\n                digits[i] -= 1\n            return int(''.join(map(str, digits)))\n\n    # If all digits are the same, we add one to the last digit\n    digits[n-1] += 1\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        temp = str(num)\n        rev_temp = temp[::-1]\n        if temp == rev_temp:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**9 # maximum integer value that can be represented as a string\n    \n    # Convert the input integer to a string to check if it's palindrome or not\n    input_str = str(num)\n    if input_str == input_str[::-1]:\n        return num\n    \n    # If the input integer is not palindrome, find the next smallest palindrome\n    next_num = num - 1\n    while True:\n        next_str = str(next_num)\n        if next_str == next_str[::-1]:\n            return next_num\n        next_num -= 1\n    \n    # If no palindrome is found, return the original input integer\n    return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Check if k is valid (1 \u2264 k \u2264 len(arr))\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array, inclusive\")\n\n    # Use binary search to find the kth element\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if k == mid:\n            return arr[k-1]\n        elif k < mid:\n            right = mid - 1\n        else:\n            left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k must be between 1 and the length of the array.\"\n    \n    count = 1\n    for i in arr:\n        if count == k:\n            return i\n        count += 1\n    \n    return \"Invalid input. k is greater than the length of the array.\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid index!\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n\n    left = 1\n    right = n\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid - 1] <= arr[mid] and arr[mid] < arr[mid + 1]:\n            if k == mid:\n                return arr[mid]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid - 1] > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        print(\"Error: k is greater than the length of the array.\")\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k:\n                return arr[mid-1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Error: k is greater than the length of the array.\"\n    elif k <= 0:\n        return \"Error: k is less than or equal to 0.\"\n    else:\n        k -= 1\n        for i in range(len(arr)):\n            if i == k:\n                return arr[i]\n            elif i > k:\n                return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the word to lowercase and split it into a list of words\n    words = word.lower().split(\"_\")\n    # Capitalize the first letter of each word and join them to form the camel case string\n    camel_case_word = \"\".join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    for i in range(len(word)):\n        if word[i].isupper():\n            if i!= 0:\n                camel_case.append('_')\n            camel_case.append(word[i].lower())\n        else:\n            camel_case.append(word[i].lower())\n    return ''.join(camel_case)\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += '_'\n        camel_case += char.lower()\n    return camel_case.title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += \"_\" + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert the word to a list of words\n    word_list = word.split('_')\n    # capitalize the first letter of each word and join them together\n    camel_word = ''.join(word.capitalize() for word in word_list)\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i].capitalize() + word[i:].lower() for i in range(1, len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: The camel case string.\n    '''\n\n    # Convert the first character to lowercase\n    word = word[0].lower()\n\n    # Convert the remaining characters to camel case\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            word = word[:i] + '_' + word[i].lower()\n        else:\n            word += word[i]\n\n    return word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_words = []\n    for word in words:\n        if len(word) > 1:\n            camel_case_words.append(word[0].lower() + word[1:])\n        else:\n            camel_case_words.append(word.lower())\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif word[i-1]!= \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase and join the words together with underscores\n    camel_case = words[0].upper() + '_'.join(words[1:])\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Find the number of paths in the grid of size (n+1)x(m+1)\n    paths = n * m\n    # Calculate the value of a(n, m)\n    a = paths - n\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): Size of the square grid\n    m (int): Size of the square grid\n\n    Returns:\n    int: The value of the Eulerian number a(n, m)\n    \"\"\"\n\n    # Initialize the Eulerian number to 1\n    eulerian = 1\n\n    # Initialize the visited array to False\n    visited = [[False for j in range(n)] for i in range(m)]\n\n    # Initialize the path array to None\n    path = None\n\n    # Start from the top-left corner\n    i, j = 0, 0\n\n    # While we have not yet visited all cells\n    while not all(visited[i][j] for i in range(m) for j in range(n)):\n        # Mark the current cell as visited\n        visited[i][j] = True\n\n        # Find the neighbors of the current cell\n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n        # Find the next unvisited neighbor\n        for neighbor in neighbors:\n            if not visited[neighbor[0]][neighbor[1]]:\n                path = [(i, j), neighbor]\n                break\n\n        # If we cannot find an unvisited neighbor, backtrack\n        if path is None:\n            i, j = path[-1]\n            visited[i][j] = False\n            path.pop()\n        else:\n            i, j = path[-2]\n            path.pop()\n\n    # Return the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the factorial of a number\n    def factorial(num):\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n\n    # Calculate the Eulerian number a(n, m) using the given values of n and m\n    num_pairs = [(i, j) for i in range(1, n + 1) for j in range(1, m + 1)]\n    num_pairs.sort()\n    a = factorial(n) // (factorial(m) * factorial(n - m))\n\n    # Check if the Eulerian number a(n, m) is prime\n    if is_prime(a):\n        return a\n    else:\n        return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i+j == n:\n                count += 1\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += i * j\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix and the list of vertices\n    graph = [[0 for j in range(n)] for i in range(m)]\n    vertices = []\n    \n    # Read the adjacency list of the graph\n    for i in range(m):\n        u = int(input())\n        for j in range(n):\n            v = int(input())\n            if j > u:\n                graph[i][j] = graph[i][u] + graph[u][j]\n                if (u, v) not in vertices:\n                    vertices.append((u, v))\n    \n    # Initialize the result matrix\n    result = [[0 for j in range(n)] for i in range(m)]\n    \n    # Calculate the Eulerian number\n    for i in range(m):\n        for j in range(n):\n            if i == j:\n                result[i][j] = 1\n            elif i < j:\n                result[i][j] = graph[i][j] + result[i][j-1]\n            else:\n                result[i][j] = graph[i][j] + result[i-1][j]\n    \n    # Return the Eulerian number\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return m\n    elif n == 1:\n        return (2 * m - 1) // 2\n    else:\n        return (3 * m - 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j or (i > j and i % j == 0):\n                a = a * i // j\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # generate all numbers from 1 to n\n    all_numbers = list(range(1, n+1))\n    # use the Sieve of Eratosthenes algorithm to get all prime numbers up to sqrt(n)\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p*p <= n:\n        if primes[p]:\n            for i in range(p*p, n+1, p):\n                primes[i] = False\n        p += 1\n    primes = [i for i in range(2, n+1) if primes[i]]\n    # count the number of prime numbers between 1 and n that are also between m and sqrt(n)\n    count = sum([primes.count(i) for i in range(max(1, m), int(n**0.5)+1)])\n    # return the Eulerian number a(n, m)\n    return (count * (count-1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2**n - 1 - (2**n-1) % (2*m)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the sorted input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0   \n    for item in lst:   \n        if isinstance(item, bool):   \n            if item:   \n                count += 1   \n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_true_booleans(lst):\n    \"\"\"\n    Count the number of true booleans in a list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple with the elements from the original tuple and the given list\n    new_tup = test_tup + test_list\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create an empty list to store the concatenated tuples\n    new_list = []\n\n    # Iterate over the tuples in the input list\n    for tup in test_tup:\n        # Convert the tuple to a list and append the list to the new list\n        new_list.append(list(tup))\n\n    # Iterate over the tuples in the input list\n    for tup in test_list:\n        # Convert the tuple to a list and append the list to the new list\n        new_list.append(list(tup))\n\n    # Return the new list of concatenated tuples\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for num in test_list:\n        test_tup += (num,)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    for item in test_tup:\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the lists to tuples if they are not already\n    test_tup = tuple(test_tup)\n    test_list = tuple(test_list)\n    \n    # append the lists to the tuples\n    new_tup = test_tup + test_list\n    \n    # convert the result back to a list\n    return list(new_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert test_list to a tuple so that we can append to it\n    test_tup = tuple(test_list)\n    \n    # append test_list to test_tup\n    test_tup += test_list\n    \n    # return test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert tuples to lists for easy manipulation\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # add the list to the tuples and convert back to tuples\n    test_tup = tuple(test_tup + test_list)\n\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into a single sorted list\n    merged_list = num1 + num2 + num3\n\n    # Use heapify to convert the merged list into a min heap\n    heapq.heapify(merged_list)\n\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Create an empty list to store the merged list\n    merged_list = []\n    \n    # Use heapq to merge the three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    # Merge the three lists into a single sorted list\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n    \n    # Add any remaining elements to the merged list\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n\n    # Remove duplicates and return the sorted list\n    unique_list = []\n    while merged_list:\n        unique_list.append(heapq.heappop(merged_list))\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create an empty list to store the merged sorted list\n    merged_list = []\n\n    # initialize two pointers for each list\n    i, j = 0, 0\n\n    # while both pointers are not at the end of their lists\n    while i < len(num1) and j < len(num2) and j < len(num3):\n\n        # if the first number in num1 is smaller than the first number in num2\n        if num1[i] < num2[j]:\n\n            # if the first number in num1 is smaller than the first number in num3\n            if num1[i] < num3[j]:\n\n                # add the first number in num1 to the merged list and increment the pointer\n                merged_list.append(num1[i])\n                i += 1\n\n            # else, add the first number in num3 to the merged list and increment the pointer\n            else:\n\n                # add the first number in num3 to the merged list and increment the pointer\n                merged_list.append(num3[j])\n                j += 1\n\n        # else, if the first number in num2 is smaller than the first number in num3\n        elif num2[j] < num3[j]:\n\n            # add the first number in num2 to the merged list and increment the pointer\n            merged_list.append(num2[j])\n            j += 1\n\n        # else, add the first number in num3 to the merged list and increment the pointer\n        else:\n\n            # add the first number in num3 to the merged list and increment the pointer\n            merged_list.append(num3[j])\n            j += 1\n\n    # if the merged list is empty, add the remaining numbers from the lists\n    if i < len(num1) or j < len(num2) or j < len(num3):\n\n        # if there are still numbers left in num1, add them to the merged list\n        if i < len(num1):\n            for num in num1[i:]:\n                merged_list.append(num)\n\n        # if there are still numbers left in num2, add them to the merged list\n        if j < len(num2):\n            for num in num2[j:]:\n                merged_list.append(num)\n\n        # if there are still numbers left in num3, add them to the merged list\n        if j < len(num3):\n            for num in num3[j:]:\n                merged_list.append(num)\n\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    # convert the input lists into heaps\n    for num in num1:\n        heapq.heappush(heap1, -num)\n    for num in num2:\n        heapq.heappush(heap2, -num)\n    for num in num3:\n        heapq.heappush(heap3, -num)\n    \n    # merge the heaps and add the negative values to the merged list\n    while heap1 and heap2 and heap3:\n        if -heap1[0] > -heap2[0]:\n            if -heap1[0] > -heap3[0]:\n                heapq.heappush(merged_list, -heap1[0])\n                heapq.heappop(heap1)\n            else:\n                heapq.heappush(merged_list, -heap3[0])\n                heapq.heappop(heap3)\n        else:\n            if -heap2[0] > -heap3[0]:\n                heapq.heappush(merged_list, -heap2[0])\n                heapq.heappop(heap2)\n            else:\n                heapq.heappush(merged_list, -heap3[0])\n                heapq.heappop(heap3)\n    \n    # add the remaining heaps to the merged list\n    while heap1:\n        heapq.heappush(merged_list, -heap1[0])\n        heapq.heappop(heap1)\n    while heap2:\n        heapq.heappush(merged_list, -heap2[0])\n        heapq.heappop(heap2)\n    while heap3:\n        heapq.heappush(merged_list, -heap3[0])\n        heapq.heappop(heap3)\n    \n    # convert the merged list into a sorted list\n    sorted_list = [heapq.heappop(merged_list) for i in range(len(merged_list))]\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Create a list of all the elements in the three input lists\n    all_elements = num1 + num2 + num3\n\n    # Step 2: Sort the list of all elements in ascending order using heap sort\n    heapq.heapify(all_elements)\n    sorted_elements = []\n    while len(all_elements) > 0:\n        sorted_elements.append(heapq.heappop(all_elements))\n\n    # Step 3: Return the sorted list of all elements\n    return sorted_elements"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # merge the lists\n    merged = num1 + num2 + num3\n    # sort the merged list\n    sorted_list = sorted(merged)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heappush(result, heapq.heappop(num1))\n    heapq.heappush(result, heapq.heappop(num2))\n    heapq.heappush(result, heapq.heappop(num3))\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    # Convert binary string to list of integers\n    binary_list = [int(i) for i in s]\n    # Check if binary string is of even length\n    if len(binary_list) % 2!= 0:\n        binary_list.append(0)\n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        left = binary_list[-1]\n        for i in range(len(binary_list) - 1):\n            binary_list[i] = binary_list[i + 1]\n        binary_list[-1] = left\n    # Count the number of odd numbers in the rotated binary string\n    for num in binary_list:\n        if num % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert binary string to list of digits\n    s = list(map(int, bin(int(s,2))[2:]))\n    \n    # Initialize variables\n    count = 0\n    \n    # Rotate the list of digits n times\n    for i in range(n):\n        s.append(s.pop(0))\n        \n    # Iterate through the rotated list of digits\n    for digit in s:\n        if digit % 2 == 1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s) # convert binary string to list\n    for i in range(n): # rotate the list n times\n        s.append(s.pop(0))\n    return s.count(1) # count the number of odd values in the rotated list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # split the string into a list of characters\n    char_list = list(s)\n    \n    # rotate the list of characters the given number of times\n    for i in range(n):\n        char_list.append(char_list.pop(0))\n    \n    # count the number of odd values in the rotated list\n    count = 0\n    for char in char_list:\n        if int(char) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize an empty list to store the odd numbers found\n    odd_numbers = []\n    # Convert the binary string to a list of integers\n    binary_list = list(s)\n    # Loop through each element in the list and add it to the odd_numbers list if it is odd\n    for i in range(len(binary_list)):\n        if binary_list[i] == '1':\n            odd_numbers.append(int(binary_list[i]))\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        for j in range(len(binary_list)/2):\n            temp = binary_list[j]\n            binary_list[j] = binary_list[len(binary_list)-1-j]\n            binary_list[len(binary_list)-1-j] = temp\n    # Loop through the new list of binary numbers and add any odd numbers that were found\n    for i in range(len(binary_list)):\n        if binary_list[i] == '1':\n            odd_numbers.append(int(binary_list[i]))\n    # Return the number of odd numbers found after rotation\n    return len(odd_numbers)\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initializing the count variable\n    count = 0\n    \n    # loop for n times\n    for i in range(n):\n        # creating a new binary string with the first half of the original string appended to the second half\n        binary_string = s[::-1] + s\n        \n        # loop to check if each character of the new binary string is odd\n        for j in binary_string:\n            if int(j) % 2!= 0:\n                # incrementing the count variable if an odd number is found\n                count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the length of the binary string is odd\n    if len(s) % 2 == 1:\n        return \"The length of the binary string should be even.\"\n    else:\n        # Initialize the count variable to 0\n        count = 0\n        # Initialize the current position to 0\n        current_pos = 0\n        # Initialize the step to n\n        step = n\n        # Loop until the current position is greater than or equal to the length of the binary string\n        while current_pos < len(s):\n            # Find the binary value of the character at the current position\n            binary_val = bin(ord(s[current_pos]))[2:]\n            # Check if the binary value of the character is odd\n            if int(binary_val, 2) % 2 == 1:\n                # Increment the count variable\n                count += 1\n            # Check if the current position is at the end of the binary string\n            if current_pos == len(s) - 1:\n                # If the current position is at the end of the binary string, rotate the binary string by n positions and check if the binary value of the character at the new position is odd\n                if step > 0:\n                    # If n is positive, rotate the binary string by n positions\n                    new_pos = current_pos + step\n                    if new_pos >= len(s):\n                        # If the new position is greater than or equal to the length of the binary string, rotate the binary string by n - len(s) positions\n                        new_pos = new_pos - len(s)\n                    # Find the binary value of the character at the new position\n                    binary_val = bin(ord(s[new_pos]))[2:]\n                    # Check if the binary value of the character is odd\n                    if int(binary_val, 2) % 2 == 1:\n                        # Increment the count variable\n                        count += 1\n                else:\n                    # If n is negative, rotate the binary string by n positions\n                    new_pos = current_pos + step\n                    if new_pos < 0:\n                        # If the new position is less than 0, rotate the binary string by n + len(s) positions\n                        new_pos = new_pos + len(s)\n                    # Find the binary value of the character at the new position\n                    binary_val = bin(ord(s[new_pos]))[2:]\n                    # Check if the binary value of the character is odd\n                    if int(binary_val, 2) % 2 == 1:\n                        # Increment the count variable\n                        count += 1\n            else:\n                # If the current position is not at the end of the binary string, rotate the binary string by one position and check if the binary value of the character at the new position is odd\n                new_pos = current_pos + 1\n                # Find the binary value of the character at the new position\n                binary_val = bin(ord(s[new_pos]))[2:]\n                # Check if the binary value of the character is odd\n                if int(binary_val, 2) % 2 == 1:\n                    # Increment the count variable\n                    count += 1\n            # Update the current position to the new position\n            current_pos = new_pos\n        # Return the count of odd numbers in the binary string after rotating it the given number of times\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    s = s.zfill(2*len(s)) # ensure binary string length is 2n\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        s = s[-1] + s[:-1] # rotate binary string\n        if count % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    start = 0\n    \n    # Check if the input string is of length 1\n    if len(s)!= 1:\n        # Convert the binary string into an array\n        arr = [int(i) for i in s]\n        \n        # Rotate the array the given number of times\n        for i in range(n):\n            arr = arr[-1:] + arr[:-1]\n        \n        # Iterate through the rotated array\n        for i in range(len(arr)):\n            # Check if the number is odd\n            if arr[i] % 2!= 0:\n                count += 1\n        \n        # Return the count\n        return count\n    else:\n        # Return 0 if the input string is of length 1\n        return 0"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize a counter variable to 0\n    count = 0\n\n    # Convert the input string to a binary string\n    binary_string = bin(int(s, 2))\n\n    # Split the binary string into a list of characters\n    binary_list = list(binary_string[2:])\n\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # Iterate through the rotated binary list and count the odd numbers\n    for num in binary_list:\n        if num == '1':\n            count += 1\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_elements.append(nestedlist[i])\n                common_elements.append(nestedlist[j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append((nestedlist[i], nestedlist[j]))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            common.append(j)\n    return list(set(common))\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    set2 = set(nestedlist[1])\n    common = set1.intersection(set2)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Loop through the nested lists\n    for i in nestedlist:\n        # Loop through the elements of each list\n        for j in i:\n            # Add the element to the set if it's not already there\n            if j not in common_set:\n                common_set.add(j)\n\n    # Return the set of common elements\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store common elements\n    common_elements = set()\n\n    # Loop through the nested lists and check for common elements\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(sublist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize a set to store the common elements\n    common_elements = set()\n\n    # Iterate over each nested list\n    for nested in nestedlist:\n\n        # Check if the nested list contains any common elements\n        if len(set(nestedlist[0]).intersection(set(nested))) > 0:\n\n            # Add the common elements to the set\n            common_elements.update(nested)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # create an empty dictionary\n    empty_dict = {}\n\n    # iterate over the list of dictionaries\n    for item in list1:\n        # check if the current dictionary is empty\n        if item == empty_dict:\n            # if yes, return False\n            return False\n\n    # if we reach here, all dictionaries are not empty\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError(\"All elements of the tuple must be positive integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the converted integer\n    converted_int = ''\n\n    # iterate through the tuple of positive integers\n    for num in nums:\n        # convert the current number to a string and add it to the converted integer string\n        converted_int += str(num)\n\n    # convert the converted integer string to an integer and return it\n    return int(converted_int)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the final integer\n    result = \"\"\n    # loop through each element in the tuple\n    for num in nums:\n        # check if the current element is a positive integer\n        if isinstance(num, int) and num > 0:\n            # add the integer to the result string\n            result += str(num)\n    # convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            if type(element) in [int, float, str]:\n                new_sublist.append(float(element))\n            else:\n                new_sublist.append(element)\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, str]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Define a function to check if a value can be converted to a float\n    def is_convertible(value):\n        try:\n            float(value)\n            return True\n        except ValueError:\n            return False\n\n    # Define a function to convert a value to a float if possible\n    def convert_to_float(value):\n        if is_convertible(value):\n            return float(value)\n        else:\n            return value\n\n    # Iterate over each element in the list\n    for i in range(len(test_list)):\n        # Check if the element is a list\n        if isinstance(test_list[i], list):\n            # Recursively convert the list to float if possible\n            if all(is_convertible(x) for x in test_list[i]):\n                test_list[i] = [convert_to_float(x) for x in test_list[i]]\n                # If any element in the list was converted, make sure to recurse\n                if any(isinstance(x, list) for x in test_list[i]):\n                    list_to_float(test_list[i])\n        # Check if the element is convertible\n        elif is_convertible(test_list[i]):\n            # Convert the element to a float if possible\n            test_list[i] = convert_to_float(test_list[i])\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if type(test_list[i][j]) in [int, float]:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                print(f\"{element} is already a float.\")\n            except ValueError:\n                print(f\"{element} is not a float. Converting to float.\")\n                element = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    max_count = 1\n    result = None\n    \n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n        \n        if count == max_count:\n            result = arr[i]\n            max_count = count\n            \n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in a sorted array.\n    If there is no such element in the array, it returns None.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            if count == 1:\n                return arr[i]\n            count = 0\n    if count == 1:\n        return arr[-1]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Use a hash set to store the elements that appear only once.\n    unique_elements = set()\n\n    # Iterate through the array.\n    for num in arr:\n        # If the number is already in the hash set, it means that it appears only once.\n        if num in unique_elements:\n            # Return the unique element.\n            return num\n        # If the number is not in the hash set, add it to the hash set.\n        else:\n            unique_elements.add(num)\n\n    # If the loop completes without finding any unique element, return None.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers, one starting from the beginning and the other starting from the end of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Iterate through the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1 and i!= left:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate through the sorted array\n    for num in arr:\n        # If the element is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # Otherwise, add it to the dictionary with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element with a frequency of 1\n    for num, freq in freq.items():\n        if freq == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n    for i in range(len(arr)-1, -1, -1):\n        if i == len(arr)-1 or arr[i]!= arr[i+1]:\n            count += 1\n    if count == len(arr):\n        return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Loop through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to store the count and the element\n    count = 0\n    element = None\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current element is the same as the previous element\n        if arr[i] == arr[i-1]:\n            # If it is, increment the count and update the element\n            count += 1\n            if element is None or arr[i] < element:\n                element = arr[i]\n            \n    # Return the element that appears only once\n    return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate over the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n\n    Args:\n    arr (list): A sorted array of integers.\n\n    Returns:\n    int: The element that appears only once in the sorted array.\n\n    \"\"\"\n    # Initialize variables\n    unique_element = None\n    count = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is equal to the unique element, increment the count\n        if arr[i] == unique_element:\n            count += 1\n        # If the current element is not equal to the unique element, reset the count and assign it to the unique element\n        elif unique_element is not None:\n            unique_element = arr[i]\n            count = 1\n        # If the current element is not equal to the unique element and is the first occurrence of the element, assign it to the unique element and set the count to 1\n        else:\n            unique_element = arr[i]\n            count = 1\n\n    # If the count is 1 and the unique element is not None, return the unique element\n    if count == 1 and unique_element is not None:\n        return unique_element\n    # If the count is not 1 and the unique element is None, return None\n    elif count!= 1 and unique_element is None:\n        return None\n    # If the count is not 1 and the unique element is not None, raise an exception\n    else:\n        raise Exception(\"The element that appears only once in the sorted array is not unique.\")"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # create a list of tuples of tuples\n    list2 = [(x, y) for x in list1 for y in list1 if x!= y]\n    \n    # initialize maximum product to be negative infinity\n    max_product = -float('inf')\n    \n    # loop through the list of tuples of tuples\n    for i in range(len(list2)):\n        for j in range(i+1, len(list2)):\n            # calculate the absolute product of the numbers in the pair\n            product = abs(list2[i][0] * list2[j][1])\n            \n            # update the maximum product if the new product is greater\n            if product > max_product:\n                max_product = product\n    \n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]*lst[j][0]) * abs(lst[i][1]*lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_tuple = None\n\n    for tup in list1:\n        abs_product = abs(tup[0] * tup[1])\n        if abs_product > max_product:\n            max_product = abs_product\n            max_tuple = tup\n\n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_sum = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            sum_pair = abs(list1[i][0] + list1[j][1])\n            if product > max_product:\n                max_product = product\n            if sum_pair > max_sum:\n                max_sum = sum_pair\n    return max_product, max_sum"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list as input, and returns the maximum absolute product between numbers in pairs of tuples.\n\n    Args:\n        lst (list): A list of tuples\n\n    Returns:\n        float: The maximum absolute product between numbers in pairs of tuples\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    pairs = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][0]) + abs(lst[i][1] - lst[j][1])\n            if diff > max_product:\n                max_product = diff\n                pairs = [(lst[i][0], lst[j][0]), (lst[i][1], lst[j][1])]\n\n    return max_product, pairs\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables to store the maximum absolute product and the index of the pair with the maximum absolute product\n    max_product = float('-inf')\n    index = None\n    \n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two numbers within the pair\n            product = abs(list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1])\n            \n            # Update the maximum absolute product and its index if necessary\n            if product > max_product:\n                max_product = product\n                index = (i, j)\n    \n    # If there is no pair with the maximum absolute product, return None\n    if index is None:\n        return None\n    \n    # Extract the two numbers within the pair with the maximum absolute product and return them as a tuple\n    return tuple(list1[index[0]][0], list1[index[1]][1])"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit + 1):\n        if num == sum_of_divisors(num):\n            if sum_of_divisors(sum_of_divisors(num)) == num:\n                sum += num\n    return sum\n\ndef sum_of_divisors(num):\n    '''\n    Helper function to find the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, num):\n        if num % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = i\n        while j < limit + 1:\n            if i % j == 0 and j % i == 0:\n                amicable_numbers.append(j)\n            j += 1\n    \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(n):\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0 and i!= n/i:\n                sum += i + n/i\n        return sum\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate from 2 to limit-1\n    for num in range(2, limit):\n        # check if the number is amicable\n        if num in amicable_numbers(num):\n            # add the number to the sum\n            sum += num\n    # return the sum\n    return sum\n\ndef amicable_numbers(num):\n    '''\n    Write a function to find all the amicable numbers for a given number.\n    '''\n    # initialize a set to store the amicable numbers\n    amicable = set()\n    # iterate from 1 to the square root of the number\n    for i in range(1, num//2 + 1):\n        # check if the number is divisible by i and i+1\n        if num % i == 0 and num / i == i:\n            # add the pair of numbers to the set\n            amicable.add(i)\n            amicable.add(num // i)\n    # return the set of amicable numbers\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_prime(num) and is_prime(sum(divisors(num))):\n            amicable_sum += num\n    return amicable_sum\n\ndef divisors(n):\n    divs = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divs.append(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to limit.\"\"\"\n    amicable = set()\n    for i in range(1, limit + 1):\n        if is_prime(i):\n            for j in range(i, limit + 1):\n                if is_prime(j) and i!= j and j!= i and i + j == limit:\n                    amicable.add(i)\n                    amicable.add(j)\n    return sum(amicable)\n\nlimit = int(input(\"Enter a limit: \"))\nresult = sum_amicable_numbers(limit)\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    # Check if the number is amicable\n    def is_amicable(num):\n        for i in range(1, num):\n            if num % i == 0 and num // i!= i:\n                return True\n        return False\n\n    # Check if the number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find all prime factors of the number\n    def prime_factors(num):\n        factors = []\n        for i in range(2, num+1):\n            while num % i == 0 and is_prime(i):\n                factors.append(i)\n                num //= i\n        return factors\n\n    # Check if two numbers are amicable\n    def is_amicable_with(num1, num2):\n        # Check if either number is prime\n        if is_prime(num1) or is_prime(num2):\n            return False\n        # Check if the sum of the prime factors of both numbers is prime\n        if is_prime(sum(prime_factors(num1)) + sum(prime_factors(num2))):\n            return True\n        return False\n\n    # Find all amicable numbers\n    for i in range(1, limit+1):\n        if i!= 1 and is_prime(i) and is_prime(limit - i):\n            if is_amicable_with(i, limit - i):\n                amicable_numbers.append(i)\n\n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_numbers)\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def sum_of_amicable_numbers(n):\n        \"\"\"\n        Helper function to find the sum of all amicable numbers from 1 to n.\n        \"\"\"\n        # Check if n is prime\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        # Initialize variables\n        sum_of_primes = 0\n        amicable_sum = 0\n\n        # Check if n is amicable\n        if n < 2:\n            return 0\n        elif is_prime(n) and is_prime(sum_of_amicable_numbers(n)):\n            sum_of_primes += n\n            amicable_sum += sum_of_amicable_numbers(n)\n        elif is_prime(n) and is_prime(n + sum_of_amicable_numbers(n)):\n            sum_of_primes += n\n            amicable_sum += n + sum_of_amicable_numbers(n)\n\n        # Check if n+1 is amicable\n        if is_prime(n + 1) and is_prime(sum_of_amicable_numbers(n + 1)):\n            sum_of_primes += n + 1\n            amicable_sum += sum_of_amicable_numbers(n + 1)\n        elif is_prime(n + 1) and is_prime(n + 2 + sum_of_amicable_numbers(n + 1)):\n            sum_of_primes += n + 1\n            amicable_sum += n + 2 + sum_of_amicable_numbers(n + 1)\n\n        # Check if n+2 is amicable\n        if is_prime(n + 2) and is_prime(sum_of_amicable_numbers(n + 2)):\n            sum_of_primes += n + 2\n            amicable_sum += sum_of_amicable_numbers(n + 2)\n        elif is_prime(n + 2) and is_prime(n + 3 + sum_of_amicable_numbers(n + 2)):\n            sum_of_primes += n + 2\n            amicable_sum += n + 3 + sum_of_amicable_numbers(n + 2)\n\n        return sum_of_primes + amicable_sum\n\n    # Calculate the sum of all amicable numbers from 1 to the limit\n    return sum_of_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(n):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    def sum_of_divisors(num):\n        '''\n        Write a helper function to calculate the sum of divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    sum_div1 = sum_of_divisors(n)\n    sum_div2 = sum_of_divisors(sum_div1)\n    return sum_div1 + sum_div2 == n\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Find the sum of all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store all the numbers in range 1 to limit\n    numbers = list(range(1, limit+1))\n    \n    # Iterate through the list and check if each number is amicable\n    for num in numbers:\n        if num < limit:\n            # Check if num and its amicable number are in the same list\n            if num in numbers and (num+num in numbers):\n                # If num is amicable, add it to the sum\n                amicable_sum += num\n    \n    # Return the sum of all amicable numbers found\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns the angle in radians.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex numbers in radians.\n    \"\"\"\n    angle_rad = cmath.phase(a + b)\n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number to polar form\n    r = cmath.sqrt(a**2 + b**2)\n    theta = cmath.phase(a + b*1j)\n    \n    # Calculate the angle in degrees\n    angle = theta*180/cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = angle * 180.0 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n-1):\n        diff = 0\n        for j in range(i+1, n):\n            if string[i] == '0' and string[j] == '1':\n                diff += 1\n            elif string[i] == '1' and string[j] == '0':\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n            count_1s = 0\n        elif string[i] == '1':\n            count_1s += 1\n            count_0s = 0\n\n        if count_0s == 0 or count_1s == 0:\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        \n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            \n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n            \n        diff = abs(count_zeros - count_ones)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            diff = abs(count_zeros - count_ones)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a list to store the length of the longest substrings that have only 0s and 1s\n    longest = []\n    \n    # loop through all possible substrings of the string\n    for i in range(1, len(string)):\n        # create a new string with the current substring\n        substring = string[i-1:i+1]\n        \n        # check if the substring has only 0s and 1s\n        if freq[substring] == 1:\n            # check if the substring is longer than the current longest substring\n            if len(substring) > len(longest):\n                longest = substring\n    \n    # find the maximum difference between the number of 0s and number of 1s in the longest substrings\n    max_diff = 0\n    for i in range(len(longest)-1):\n        if longest[i] == '0' and longest[i+1] == '1':\n            max_diff = max(max_diff, longest.count('0') - longest.count('1'))\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = sum(int(char) for char in string[i-1:i+1]) - sum(int(char) for char in string[0:i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # Loop through the string\n    for i in range(len(string)):\n        # Check if the character is a 0\n        if string[i] == '0':\n            zero_count += 1\n            one_count = 0\n        # Check if the character is a 1\n        elif string[i] == '1':\n            one_count += 1\n            zero_count = 0\n        # Update the maximum difference\n        if one_count > 0:\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        diff = 0\n        for j in range(i+1, n):\n            if string[j] == '0':\n                diff += 1\n            elif string[j] == '1':\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    # initialize sum variable\n    sum_cd = 0\n    \n    # find the smallest number\n    if a < b:\n        smallest = a\n    else:\n        smallest = b\n        \n    # loop through numbers from smallest to largest\n    for num in range(smallest, 0, -1):\n        # check if number is a divisor of both numbers\n        if num % a == 0 and num % b == 0:\n            # add number to sum\n            sum_cd += num\n            \n    # return sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # function to check if a number is a common divisor of two numbers\n    def is_common_divisor(a, b):\n        return a % b == 0\n    \n    # initialize a variable to store the sum of common divisors\n    sum_common_divisors = 0\n    \n    # loop through all possible divisors of num1 and num2\n    for i in range(1, num1 + 1):\n        if is_common_divisor(i, num1) and is_common_divisor(i, num2):\n            sum_common_divisors += i\n    \n    # return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using a recursive algorithm.\n    \"\"\"\n\n    # Base case: If one of the numbers is 0, then their common divisors are also 0.\n    if a == 0 or b == 0:\n        return 0\n\n    # Recursive case: Find the common divisors of the two numbers and add them up.\n    common_divisor = __gcd(a, b)\n    return common_divisor + sum(a // common_divisor, b // common_divisor)\n\n\ndef __gcd(a, b):\n    \"\"\"\n    This is a helper function to find the greatest common divisor of two numbers using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_set = set()\n    for num in range(1, min(a, b) + 1):\n        if a % num == 0 and b % num == 0:\n            divisors_set.add(num)\n    return sum(divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    \n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to check if a number is a common divisor of two numbers\n    def is_common_divisor(num1,num2):\n        if num2 == 0:\n            return False\n        while num2!= 0:\n            if num2 == num1:\n                return True\n            num2 = num2 // num1\n        return False\n\n    # function to find the sum of common divisors of two numbers\n    def sum_of_common_divisors(num1,num2):\n        sum_cd = 0\n        for i in range(1,num2+1):\n            if is_common_divisor(num1,i) and is_common_divisor(num2,i):\n                sum_cd += i\n        return sum_cd\n\n    # main function to find the sum of common divisors of two numbers\n    def main_function(num1,num2):\n        if num2 > num1:\n            num1,num2 = num2,num1\n        return sum_of_common_divisors(num1,num2)\n\n    # call the main function\n    result = main_function(int(input(\"Enter the first number: \")),int(input(\"Enter the second number: \")))\n    print(\"The sum of common divisors of\",num1,\"and\",num2,\"is:\",result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and returns the sum of their common divisors.\n    '''\n\n    # To find the common divisors of two numbers, we need to find all the divisors of both numbers.\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n\n    # Now, we need to find the common divisors of the two numbers.\n    common_divisors = []\n    for d in divisors_a:\n        if d in divisors_b:\n            common_divisors.append(d)\n\n    # Finally, we can calculate the sum of the common divisors.\n    return sum(common_divisors)\n\n\ndef find_divisors(num):\n    '''\n    This function takes an integer as input and returns a list of all its divisors.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the common divisor of a and b\n    gcd = a\n    if b > 0:\n        if b < a:\n            gcd = b\n\n    # Finding the sum of common divisors of a and b\n    sum_cd = 0\n    for i in range(1, gcd+1):\n        if gcd % i == 0 and a % i == 0 and b % i == 0:\n            sum_cd += i\n\n    return sum_cd"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        result += remainder\n        x = x // y\n        y = remainder\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The result of {} * {} is {}\".format(x, y, result))"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    for i in range(max(x, y), min(x, y) - 1, -1):\n        product += x if i <= x else y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the string into words\n    words = str.split()\n\n    # Filter out words that are longer than n characters\n    long_words = filter(lambda x: len(x) > n, words)\n\n    # Convert the filtered words back into a list\n    long_word_list = list(long_words)\n\n    return long_word_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    n: int\n        The maximum number of characters for a word to be considered long.\n    words: list of str\n        A list of words to search for words longer than n characters in.\n\n    Returns:\n    list of str\n        A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Create an empty list to store the long words\n    long_words_list = []\n\n    # Iterate through the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the word to the list of long words\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has a certain size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements are distinct integers\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n\n    # Check if each row and column contains the same number of elements\n    for i in range(len(my_matrix)):\n        if len(set(my_matrix[i]))!= len(set(my_matrix[i][0])) or len(set(my_matrix[i]))!= len(set(my_matrix[0][i])):\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the element at row i, column j is the sum of the elements in the adjacent squares\n            if my_matrix[i][j]!= (my_matrix[i][(j-1)%len(my_matrix[0])] + my_matrix[j][(i-1)%len(my_matrix)] + my_matrix[(i-1)%len(my_matrix)][(j-1)%len(my_matrix[0])]):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n!= len(set(map(tuple, my_matrix))):\n        return False\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum or row_sum!= n*(n+1)/2 or col_sum!= n*(n+1)/2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        # Check rows\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= sum(my_matrix[i][k] for k in range(len(my_matrix[0])) if k!= j):\n                return False\n            if my_matrix[j][i]!= sum(my_matrix[k][i] for k in range(len(my_matrix)) if k!= i):\n                return False\n        # Check columns\n        for j in range(len(my_matrix[0])):\n            if my_matrix[j][i]!= sum(my_matrix[k][j] for k in range(len(my_matrix)) if k!= i):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        # Check if the sum of the row is equal to the sum of the column\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        # Check if the sum of the row is equal to the sum of the diagonal\n        if i == j:\n            diag_sum = row_sum + col_sum\n        elif i + j == len(my_matrix) - 1:\n            diag_sum = row_sum + col_sum\n        else:\n            diag_sum = 0\n        if row_sum!= col_sum or row_sum!= diag_sum or col_sum!= diag_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Check all rows for each column to see if each row sums to 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                # Check if row sums to 0\n                if sum == 0:\n                    return True\n                else:\n                    sum -= my_matrix[i][j]\n                \n            elif i == n-j-1:\n                # Check if row sums to n^2\n                if sum == n*n:\n                    return True\n                else:\n                    sum -= my_matrix[i][j]\n                    \n    # Check all columns for each row to see if each column sums to 0\n    for j in range(n):\n        for i in range(n):\n            if j == i:\n                # Check if column sums to 0\n                if sum == 0:\n                    return True\n                else:\n                    sum -= my_matrix[i][j]\n                \n            elif j == n-i-1:\n                # Check if column sums to n^2\n                if sum == n*n:\n                    return True\n                else:\n                    sum -= my_matrix[i][j]\n                    \n    # If all checks have failed, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check that all elements in the matrix are unique\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[i][:j] + my_matrix[i][j+1:] + my_matrix[:i,j] + my_matrix[i+1:,j]:\n                return False\n    \n    # Check that each row, column and sub-matrix is a magic square\n    for i in range(rows):\n        magic_row = True\n        for j in range(cols):\n            magic_col = True\n            for k in range(rows):\n                if my_matrix[i][j] == my_matrix[k][j]:\n                    magic_row = False\n                    break\n            if not magic_row:\n                break\n        if not magic_col:\n            return False\n    \n    for j in range(cols):\n        magic_col = True\n        for i in range(rows):\n            magic_row = True\n            for k in range(cols):\n                if my_matrix[i][j] == my_matrix[i][k]:\n                    magic_col = False\n                    break\n            if not magic_col:\n                break\n        if not magic_row:\n            return False\n    \n    for i in range(rows-2):\n        for j in range(cols-2):\n            magic_sub_matrix = True\n            for k in range(3):\n                for l in range(3):\n                    if my_matrix[i+k][j+l] == my_matrix[i][j]:\n                        magic_sub_matrix = False\n                        break\n            if not magic_sub_matrix:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    num_sum = 0\n\n    # Calculate the sum of the numbers in each row and column\n    for i in range(rows):\n        num_sum += sum(my_matrix[i])\n\n    for j in range(cols):\n        num_sum += sum([row[j] for row in my_matrix])\n\n    # Check if the sum of the diagonal elements is the same as the sum of the off-diagonal elements\n    if num_sum == sum(sum(row) for row in my_matrix) or num_sum == sum(sum(my_matrix[j][i] for i in range(rows)) for j in range(cols)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column in the matrix\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n\n    # Check if the row sums and column sums are equal\n    if row_sums == col_sums:\n        # Check if the row sums and column sums are both equal to the sum of the matrix itself\n        if row_sums == [sum(my_matrix[i][j] for j in range(len(my_matrix[0]))) for i in range(len(my_matrix))]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check for empty matrix\n    if len(my_matrix) == 0:\n        return False\n\n    # check for rows and columns of equal length\n    row_lengths = [len(row) for row in my_matrix]\n    col_lengths = [len(row) for row in zip(*my_matrix)]\n    if row_lengths!= col_lengths:\n        return False\n\n    # check for magic squares with even number of elements\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 0:\n                for k in range(1, 5):\n                    if k == 2:\n                        continue  # skip checking for 2\n                    if k < 4:\n                        if my_matrix[i][j] + k > 15:\n                            continue\n                    else:\n                        if my_matrix[i][j] - 4 + k > 15:\n                            continue\n                    if my_matrix[i][j] == my_matrix[k - 1][j]:\n                        return False\n\n    # check for magic squares with odd number of elements\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 0:\n                for k in range(1, 5):\n                    if k == 2:\n                        continue  # skip checking for 2\n                    if k < 4:\n                        if my_matrix[i][j] + k > 15:\n                            continue\n                    else:\n                        if my_matrix[i][j] - 4 + k > 15:\n                            continue\n                    if my_matrix[i][j] == my_matrix[k - 1][j]:\n                        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    counts = defaultdict(int)\n\n    # Iterate through the list and update the count of each item\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with the maximum count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_num = None\n    for num in freq_dict:\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n            break\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency and return it\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [item for item, freq in freq.items() if freq == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in string:\n        if char.lower() not in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_count = 0\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            result = str1[i] + result\n        elif vowel_count > 0:\n            break\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if i > 0 and str1[i-1] in vowels:\n                pass\n            else:\n                str1.pop(i)\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowels_index = [i for i, c in enumerate(str1) if c.lower() in vowels]\n    vowels_index.reverse()\n    return ''.join([str1[i] for i in vowels_index])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            if char.lower() in vowels:\n                reversed_str += char.lower()\n            else:\n                reversed_str += char.upper()\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_reverse = ''\n    \n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            vowel_reverse += str1[i]\n    \n    return vowel_reverse"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to list and join them with ','\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # converting the tuple to a string using the join() method\n    string = ', '.join(map(str, tup1))\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = \"\"\n    for i in range(len(tup1)):\n        if i == 0:\n            string1 += str(tup1[i])\n        else:\n            string1 += \",\" + str(tup1[i])\n    return string1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) +''\n    return str1"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for num in nums:\n        if num < 0:\n            negativenum += num\n    return negativenum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the constant to convert from square to hexagonal coordinates\n    hex_constant = 1 + 2 * sqrt(5)\n    \n    # Calculate the nth hexagonal number\n    return int((n - 1) * hex_constant)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hex_val(n):\n        if n % 2 == 0:\n            return n * (3 * n - 1)\n        else:\n            return (n + 1) * (3 * n - 1) / 2\n    \n    return hex_val(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # formula for nth hexagonal number is (n*(n-1)) + (2*n) - 1\n    return (n*(n-1)) + (2*n) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Convert n to an integer\n    n = int(n)\n\n    # Calculate the nth hexagonal number\n    hex_num = (2 * n * n - 1) // 6\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define the base and the hexagonal number\n    base = 3  # The base of the hexagon is 3\n    hexagonal_num = (base ** 2 + base) * (n - 1)  # Calculate the nth hexagonal number\n    \n    return hexagonal_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[num] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))  # create an array of zeros of same length as input array\n    \n    # loop through the input array and count the number of zeros\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    \n    # calculate the ratio of zeros to non-zeros\n    ratio = zeros.count(0) / len(nums)\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for _ in range(len(nums))])\n    count = 0\n    \n    for num in nums:\n        if num == 0:\n            count += 1\n            zeros[count] = num\n    \n    non_zero_count = len(nums) - count\n    \n    return zeros[non_zero_count] / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[non_zeros.index(0)] += 1\n        else:\n            non_zeros[non_zeros.index(0)] += 1\n\n    non_zeros_count = len(nums) - sum(non_zeros)\n    zeros_count = sum(zeros)\n\n    return zeros_count / non_zeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / len(nums) if len(nums) > 0 else 0\n\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n\n    ratio = 0\n    if non_zeroes!= 0:\n        ratio = zeroes / non_zeroes\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    zero_ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n\n    zeros_count = zeros.sum()\n    non_zeros_count = non_zeros.sum()\n\n    if zeros_count == 0:\n        return 0\n    else:\n        return non_zeros_count / zeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_non_zero = 0\n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n    if num_non_zero == 0:\n        return 0\n    else:\n        return num_zero / num_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the non-zero values\n    non_zeros = array('i')\n\n    # Iterate through the input array and add non-zero values to the array\n    for num in nums:\n        if num!= 0:\n            non_zeros.append(num)\n\n    # Calculate the number of zeroes in the non-zero values array\n    zero_count = len(non_zeros)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / len(nums)\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if (n - i) // i == 0:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert the number to a string\n    n = str(n)\n    # convert the string to a list of characters\n    n_list = list(n)\n    # initialize a counter to keep track of non-zero digits in the number\n    non_zero_count = 0\n    # iterate through the list of characters and check if the digit is non-zero\n    for digit in n_list:\n        if digit!= '0':\n            non_zero_count += 1\n            # break the loop if we have found more than one non-zero digit\n            if non_zero_count > 1:\n                return False\n    # if we have made it through the loop without finding any non-zero digits, it means that the number is divisible by 2^n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Counting the number of non-zero bits in the binary representation of n\n    count = bin(n).count('1')\n    # Calculating the sum of powers of 2\n    sum_of_powers_of_two = (count * count)\n    # Checking if the sum of powers of 2 is equal to n\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 1: \n        return False\n    while n > 0: \n        if n % 2 == 0: \n            n //= 2 \n        else: \n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        Helper function to check if a given number is a power of two or not.\n        \"\"\"\n        if num == 0:\n            return False\n        return (num & (num - 1)) == 0\n\n    def find_largest_power_of_two(num):\n        \"\"\"\n        Helper function to find the largest power of two that is less than or equal to a given number.\n        \"\"\"\n        while num & (num - 1)!= 0:\n            num &= num - 1\n        return num\n\n    def is_sum_of_powers_of_two(num):\n        \"\"\"\n        Helper function to check whether a given number can be represented as sum of non-zero powers of 2 or not.\n        \"\"\"\n        largest_power_of_two = find_largest_power_of_two(num)\n        if largest_power_of_two == 1:\n            return num == 0\n        elif largest_power_of_two == 0:\n            return num == 1\n        else:\n            count = 0\n            while num > 0:\n                if num & 1 == 1:\n                    count += 1\n                num >>= 1\n            return count % 2 == 0\n\n    if is_power_of_two(n):\n        return True\n    else:\n        return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables\n    power = 0\n    sum_of_powers = 0\n\n    # Loop through the bits of the number and check for powers of 2\n    while n > 0:\n        if n & 1 == 1:\n            if power == 0:\n                return False\n            sum_of_powers += 2**power\n        n = n >> 1\n        power += 1\n\n    # Check for the last power of 2\n    if power == 0:\n        return False\n    sum_of_powers += 2**power\n\n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Convert the number to binary and count the number of 1s\n    binary_str = bin(n)[2:]\n    count = sum(1 for bit in binary_str if bit == '1')\n\n    # Check if the number can be represented as sum of non-zero powers of 2 or not\n    if count % 2 == 0 or n == 1:\n        return True\n\n    # Check if the number can be represented as sum of powers of 2\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n *= 2\n\n    return n == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Convert the given number to a set to remove any duplicates\n    nums_set = set(map(int, list(str(n))))\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(1, 33):\n        if nums_set.issubset({2**i}):\n            return True\n        \n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n\n    # Formula for the circumference of a circle: pi * r^2\n    circumference = 2 * 3.14 * r\n\n    # Print the circumference\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Finding the circumference of a circle using the formula pi*r^2\n    circumference = 2 * 3.14 * r\n    \n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r  # Formula to calculate circumference of a circle\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int or type(item) == float:\n                result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_numbers = list(set(flattened_list))\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        return [item for sublist in lst for item in flatten(sublist)]\n\n    def extract(lst):\n        return set([x for sublist in lst for x in sublist])\n\n    flattened = flatten(test_list)\n    return list(extract(flattened))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened += extract_singly(item)\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    def helper(nums, n):\n        for i in range(n):\n            max_index = i\n            for j in range(i + 1, n):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n        return nums\n\n    for i in range(len(nums), 1, -1):\n        nums = helper(nums, i)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements as input and sorts them using the pancake sort algorithm.\n    The pancake sort algorithm works by repeatedly rearranging the elements of the list in reverse order.\n    The algorithm works by selecting a particular element (which is called a pancake) from the list and rearranging it in reverse order.\n    This process is repeated until the entire list is sorted in ascending order.\n    '''\n\n    # Use a while loop to perform the sorting\n    while True:\n\n        # Find the maximum element in the unsorted part of the list\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element has already been sorted, break out of the loop\n        if max_index == 0:\n            break\n\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n\n        # Reverse the unsorted part of the list from 1 to max_index\n        for i in range(1, max_index):\n            nums[i], nums[len(nums) - i] = nums[len(nums) - i], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize variables\n    n = len(nums)\n    steps = 0\n    \n    # loop through the list\n    while steps < n:\n        # find the largest element in the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n                \n        # swap the largest element with the first element\n        nums[max_idx], nums[steps] = nums[steps], nums[max_idx]\n        steps += 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the length of the list\n    n = len(nums)\n    \n    # iterate through the list and sort it\n    for i in range(n):\n        # find the index of the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the largest element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the list from the current index to the end\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    \n    # function to swap two elements in a list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # function to perform swaps in pancake sort algorithm\n    def pancake_swap(nums, i, j, k):\n        # move pivot to i-th position\n        nums[i], nums[k] = nums[k], nums[i]\n        # move pivot to j-th position\n        nums[j], nums[k] = nums[k], nums[j]\n    \n    # function to arrange the list in ascending order\n    def ascending_order(nums, start, end):\n        if start < end:\n            # find the pivot element and its index\n            pivot = nums[start]\n            pivot_index = start\n            for i in range(start+1, end+1):\n                if nums[i] < pivot:\n                    pivot = nums[i]\n                    pivot_index = i\n            # swap pivot with first element of the range\n            nums[start], nums[pivot_index] = nums[pivot_index], nums[start]\n            # recursive call to sort the range excluding the pivot\n            ascending_order(nums, start+1, end)\n            # recursive call to sort the range including the pivot\n            pancake_swap(nums, start, end, pivot_index)\n            ascending_order(nums, start, end-1)\n    \n    # function to arrange the list in descending order\n    def descending_order(nums, start, end):\n        if start < end:\n            # find the pivot element and its index\n            pivot = nums[end]\n            pivot_index = end\n            for i in range(end-1, start-1, -1):\n                if nums[i] > pivot:\n                    pivot = nums[i]\n                    pivot_index = i\n            # swap pivot with last element of the range\n            nums[end], nums[pivot_index] = nums[pivot_index], nums[end]\n            # recursive call to sort the range excluding the pivot\n            descending_order(nums, start+1, end)\n            # recursive call to sort the range including the pivot\n            pancake_swap(nums, start, end, pivot_index)\n            descending_order(nums, start, end-1)\n    \n    # call ascending_order() function for ascending order\n    ascending_order(nums, 0, len(nums)-1)\n    \n    # call descending_order() function for descending order\n    descending_order(nums, 0, len(nums)-1)\n    \n    # return sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # iterate through all possible pancakes sizes\n    for i in range(n, 0, -1):\n        # for each pancake size, iterate through the list and swap elements\n        for j in range(0, n-i):\n            if nums[j] > nums[j+i]:\n                nums[j], nums[j+i] = nums[j+i], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swaps = 0\n\n    # Start by sorting in descending order\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n\n        # If the largest element is not already in its correct position, swap it\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            swaps += 1\n\n    # Check if any swaps were made\n    if swaps == 0:\n        return nums\n    else:\n        return pancake_sort(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Traverse the list from 1 to n\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    # Print the sorted list\n    print(\"Sorted list is:\", nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to swap two elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to rotate the list by 1 step\n    def rotate(nums, start, end):\n        pivot = nums[end]\n        i = start\n        for j in range(start, end):\n            if nums[j] >= pivot:\n                swap(nums, i, j)\n                i += 1\n\n    # Perform the pancake sort algorithm\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted portion of the list\n        max_idx = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the unsorted portion of the list\n        if max_idx!= i:\n            swap(nums, i, max_idx)\n\n        # Find the next element that needs to be rotated\n        for j in range(i + 1, n):\n            if nums[j] > nums[i]:\n                # Rotate the list to the right\n                rotate(nums, i, j)\n                break"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    This function takes three lists and returns the number of items that are identical in the same position of the lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[j] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize a variable to store the count of identical pairs\n    count = 0\n\n    # Loop through each element in the first list\n    for item1 in list1:\n        # Loop through each element in the second list\n        for item2 in list2:\n            # Loop through each element in the third list\n            for item3 in list3:\n                # Check if the current element in the first list is the same as the current element in the third list\n                if item1 == item3:\n                    # Check if the current element in the second list is the same as the current element in the third list\n                    if item2 == item3:\n                        # Increment the count of identical pairs\n                        count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        elif list1[i] == list3[i]:\n            count += 1\n        elif list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') #initialize the maximum difference to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        curr_diff = arr[i] - arr[i-1]\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and finds the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = 0 # initialize max_diff to zero\n\n    for i in range(len(arr)): # loop through each element in the array\n        for j in range(i+1, len(arr)): # loop through all elements after the current element\n            diff = abs(arr[i] - arr[j]) # calculate the absolute difference between the current elements\n            if diff > max_diff: # if the absolute difference is greater than the current max_diff, update max_diff\n                max_diff = diff # update max_diff\n\n    return max_diff # return the maximum absolute difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if the discriminant is positive or zero\n    if d < 0:\n        return None\n\n    # Find the root of the discriminant\n    root = (-b + (b**2 - 4*a*n)**0.5)/(2*a)\n\n    # Return the solution\n    return (root, -root)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Determine the type of the equation: ax + by = n\n    if a == 0:\n        # y = 0, so equation is ax = -b/a\n        x = -n/b\n        if x % 1 == 0:\n            return (int(x), 0)\n    elif b == 0:\n        # x = 0, so equation is by = -a/b\n        y = -n/a\n        if y % 1 == 0:\n            return (0, int(y))\n    else:\n        # Both a and b are nonzero, so equation is a*x + b*y = n\n        x = (-n + b**0.5)/a\n        y = (-n - b**0.5)/a\n        if x % 1 == 0 and y % 1 == 0:\n            return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are zero\n    if a == 0 and b == 0:\n        return None\n\n    # check if a is negative and b is positive\n    if a < 0 and b > 0:\n        return None\n\n    # check if a is zero and b is negative\n    if a == 0 and b < 0:\n        return None\n\n    # initialize variables for x and y\n    x = 0\n    y = 0\n\n    # loop until x and y satisfy the given conditions\n    while a * x * x + b * y * y <= n:\n        # check if x and y satisfy the given conditions\n        if a * x + b * y == n:\n            return (x, y)\n\n        # check if x is negative and y is positive\n        if a < 0 and b > 0:\n            return None\n\n        # check if x is zero and y is negative\n        if a == 0 and b < 0:\n            return None\n\n        # check if x is positive and y is negative\n        if a > 0 and b < 0:\n            return None\n\n        # update x and y\n        x = x + 1\n        y = -y + 1\n\n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive\n    if d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)\n    # The discriminant is negative, so there is no solution\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        # a is zero, so x and y are not solutions\n        return None\n    x = -b / a\n    y = n / a\n    if y.is_integer():\n        return (x, int(y))\n    else:\n        return (x, float(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = 0\n    y = 0\n    x0 = 0\n    y0 = 0\n    \n    # find x0 and y0 such that ax + by = n\n    while x0 ** 2 + y0 ** 2 <= n:\n        x0 += 1\n    \n    x0 -= 1\n    y0 = -(a * x0 + b) / b\n    \n    # check if the solution exists\n    if x0 ** 2 + y0 ** 2 == n:\n        return (x0, y0)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b/(2*a)\n    x2 = (b**2-4*a*n)/(4*a)\n    if x1 == x2:\n        return (x1, x1)\n    elif x1 < x2:\n        return (x1, x2)\n    else:\n        return (x2, x1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x, y = 0, 0\n    \n    # check for divisibility by a\n    if n % a!= 0:\n        return None\n    \n    # find the number of steps to reach the square root of n\n    steps = 0\n    while n > 1:\n        n /= 2\n        steps += 1\n    \n    # check if the number of steps is less than the square root of n\n    if steps < int(steps**0.5):\n        return None\n    \n    # set the lower and upper bounds of x\n    lower_bound = -10**9\n    upper_bound = 10**9\n    \n    # check if the upper bound is greater than the square root of n\n    while upper_bound > n**0.5:\n        # check if the lower and upper bounds satisfy the given equation\n        if x*a + y*b == n:\n            return (x, y)\n        \n        # increment the lower bound and decrement the upper bound\n        lower_bound += 1\n        upper_bound -= 1\n    \n    # check if the lower bound is less than the square root of n\n    while lower_bound < -n**0.5:\n        # check if the lower and upper bounds satisfy the given equation\n        if x*a + y*b == n:\n            return (x, y)\n        \n        # increment the lower bound and decrement the upper bound\n        lower_bound += 1\n        upper_bound -= 1\n    \n    # no solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x1, x2 = -b/a, b/a\n    if x1 > n:\n        x1, x2 = x2, x1\n    y1 = a*x1 + b\n    y2 = a*x2 + b\n    if y1 == y2:\n        return None\n    return (x1, y1, x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Compute the discriminant\n    d = b**2 - 4*a*n\n\n    # If the discriminant is less than zero, there is no solution\n    if d < 0:\n        return None\n\n    # Compute the two solutions\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n\n    # Return the solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a new list to store the remaining elements\n    result_list = []\n\n    # loop through the first list\n    for element in list1:\n        # check if the element is present in the second list\n        if element not in list2:\n            # if not, add it to the result list\n            result_list.append(element)\n\n    # return the new list with the removed elements\n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Check if list1 is empty or not\n    if not list1:\n        return []\n\n    # Create a set of all elements in list1\n    set1 = set(list1)\n\n    # Create a set of all elements in list2\n    set2 = set(list2)\n\n    # Iterate over all elements in set1 and check if they are present in set2 or not\n    result = []\n    for element in set1:\n        if element not in set2:\n            result.append(element)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # If the element is present in the second list, remove it from the list\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n\n    else:\n        return sum_series(n // 2) + n - 1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2 * i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_series(n // 2) + n\n    else:\n        return sum_series(n // 2) + n + n // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += (n - 2 * i)\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i < n // 2:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return sum(range(n//2+1, -1, -2))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula A = (s * l * (1/tan(pi/l)))^2\n    area = (s * l * (1/tan(pi/l)))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - 2*l + pi)) / (4 * l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n\n    for i in range(l):\n        x = s * tan(angle * i / 360)\n        y = s * tan(angle * (i + 1) / 360)\n        area += abs(x * y) / 2\n\n    return area * s * s / (4 * pi * (l + 1))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the value of the height of each side of the polygon\n    height = tan(pi/l)\n    # Calculate the area of the polygon by multiplying its sides and the height\n    area = s * height\n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the perimeter of the polygon\n    perimeter = 2 * s * l\n    \n    # Calculate the semi-perimeter\n    semi_perimeter = perimeter / 2\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = semi_perimeter * (tan(pi/l)**2 + 1)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s * tan(pi/l)) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    sp = (s * l) / 2\n    \n    # Calculate the area using the formula for a regular polygon\n    area = (pi * sp ** 2) / 12\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    perimeter = s * l\n    # Calculate the area of the polygon using the formula:\n    # Area = (s/2) * (sin(pi/l))**2\n    area = (perimeter / 2) * (tan(pi / l)) ** 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n/i:\n                divisor_sum += n/i\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n//i\n    return divisor_sum == 0\n\nprint(div_sum(30)) # False\nprint(div_sum(60)) # True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = 0\n    div2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n            if n // i!= i:\n                div2 += n // i\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    #finding all the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    #checking if the sum of the divisors is the same\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                return False\n            else:\n                return True\n        i += 1\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div_sum = sum(divisors)\n\n    if div_sum == n:\n        return \"The sum of the divisors of {} is equal to {}\".format(n, div_sum)\n    else:\n        return \"The sum of the divisors of {} is not equal to {}\".format(n, div_sum)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and determines if the sum of the divisors of \n    two integers are the same or not. The function returns True if the sum is the same and \n    False otherwise. \n    '''\n\n    # Function to find the sum of divisors of a given number\n    def sum_of_divisors(num):\n        div_sum = 0\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                if i!= num//i:\n                    div_sum += i\n                div_sum += num//i\n        return div_sum\n\n    # Find the sum of the divisors of n\n    n_sum = sum_of_divisors(n)\n\n    # Find the sum of the divisors of n+1\n    n_plus_1_sum = sum_of_divisors(n+1)\n\n    # Check if the sum of n and n+1 is equal\n    if n_sum == n_plus_1_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == n//i:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Check if n is less than 2. If yes, return False.\n    if n < 2:\n        return False\n\n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    # Return True if the sum of the divisors is the same as n, else False.\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n    return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(i+97)] = 0\n    \n    for char in str1:\n        if char.isalpha():\n            count_dict[char.lower()] += 1\n    \n    result = 0\n    for count in count_dict.values():\n        result += count\n    \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    char_freq = {}\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n    return char_freq"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is a letter, check if it is already in the dictionary\n        if char.isalpha():\n            # if it is, increment the count by 1\n            if char in char_count:\n                char_count[char] += 1\n            # if it is not, add the character to the dictionary with a count of 1\n            else:\n                char_count[char] = 1\n    # iterate over each character in the string again, counting the occurrences of each character that occurs at the same position in the alphabet as in the English alphabet\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            # check if the character occurs at the same position in the alphabet as in the English alphabet\n            if char_count[char] == ord(char) - ord('a'):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the English alphabet\n    freq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase to make case insensitive\n        char = char.lower()\n        # check if the character exists in the dictionary\n        if char in freq:\n            # increment the frequency count by 1\n            freq[char] += 1\n\n    # loop through the dictionary and print the frequency count of each character that occurs at the same position in the English alphabet\n    for char in freq:\n        # check if the frequency count is greater than 0\n        if freq[char] > 0:\n            # print the character and its frequency count\n            print(char, freq[char])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26): # iterate over English alphabet (case insensitive)\n        if str1.lower()[i].isalpha(): # if character is an alphabet (case insensitive)\n            count += str1.lower().count(chr(i+97)) # count occurrences of character in string (case insensitive)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the counts of each character in the alphabet\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Initialize a dictionary to store the counts of each character that occurs at the same position in the string\n    same_position_char_count = {}\n    \n    # Iterate through each character in the alphabet\n    for char in char_count:\n        # If the character occurs at the same position in the string as in the alphabet, increment its count in the same_position_char_count dictionary\n        if char_count[char] == 1:\n            if char in same_position_char_count:\n                same_position_char_count[char] += 1\n            else:\n                same_position_char_count[char] = 1\n    \n    # Return the total number of characters that occur at the same position in the string as in the English alphabet\n    return sum(same_position_char_count.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for char in str1:\n        if char in english_alphabet:\n            count += str1.count(char)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if str1.lower().count(chr(i)) > 0:\n            count += str1.lower().count(chr(i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    for i in range(26):\n        if str1[i] == str2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    for i in range(len(str2)):\n        if i+1 < len(str2) and (ord(str2[i]) == ord(str2[i+1]) or (ord(str2[i]) - ord('a') == ord(str2[i+1]) - ord('a') + 13)):\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_sum = 0\n    for num in A:\n        if num % 2 == 0:\n            even_sum += num\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == even_sum:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # loop until n is a power of 2\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and count the number of 1's in it\n    count = 0\n    while n:\n        n &= n - 1  # clear the least significant 1 bit\n        count += 1\n\n    # Calculate the next power of 2 using the binary exponentiation method\n    next_pow = 1\n    while count < 31:\n        next_pow <<= 1\n        count += 1\n\n    # Return the next power of 2\n    return next_pow"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary form\n    bin_n = bin(n)[2:]\n    \n    # Initialize variables for binary search\n    low = 1\n    high = 1024 # An arbitrary large number\n    \n    # Perform binary search to find the next power of 2\n    while low <= high:\n        mid = (low + high) // 2\n        mid_bin = bin(mid)[2:]\n        \n        # Check if mid is a power of 2\n        if mid_bin == '0' * (len(mid_bin) - mid.bit_length()) + '1':\n            return 2 ** mid\n        \n        # Check if mid is greater than n\n        elif mid > n:\n            high = mid - 1\n        \n        # Check if mid is less than n\n        else:\n            low = mid + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # initialize result to n\n    result = n\n\n    # loop until result is a power of 2\n    while result % 2 == 0:\n        result /= 2\n\n    # multiply result by 2 to get the next power of 2\n    result *= 2\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # iterate from 1 to n and check if each number is a power of 2\n    for i in range(1, n+1):\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        return n\n    # find the next power of 2\n    else:\n        n = n | (1 << 31) # set the highest bit to 1\n        n = n | (n >> 1) # double the value\n        n = n | (n >> 2)\n        n = n | (n >> 4)\n        n = n | (n >> 8)\n        n = n | (n >> 16)\n        n = n | (n >> 32)\n        return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n < 2:\n        n = n << 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Check if the power of 2 is greater than or equal to n\n    if power >= n:\n        return power\n    else:\n        return 2**((power >> 1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return it as is.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the smallest power of 2 greater than or equal to 1.\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = max(1, n)  # make sure n is positive\n    while n % 2 == 0:  # check if n is a power of 2\n        n = n // 2\n    return 2**(n - 1)  # return the power of 2 that is greater than or equal to n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    \n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        print(\"Invalid indices\")\n        return None\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    list1 (list): a list of numbers\n    m (int): the index of the first number in the range\n    n (int): the index of the last number in the range\n\n    Returns:\n    int: the sum of numbers in the range\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    if n >= len(list1) or m < 0:\n        return 0\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter (half the perimeter)\n    semi_perimeter = 5 * a\n\n    # calculate the area of the pentagon using Heron's formula\n    area = (5 * a * a) / (4 * math.tan(math.pi / 5))\n\n    # calculate the perimeter of the pentagon by adding its semi-perimeter to the triangle's base (a)\n    perimeter = semi_perimeter + a\n\n    return round(perimeter, 2), round(area, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a\n\n    # Calculate the area of the pentagon\n    area = (5 ** 0.5) * (semi_perimeter ** 2)\n\n    # Calculate the perimeter of the pentagon\n    perimeter = (semi_perimeter * (3 + math.sqrt(5))) / 2\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n        \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_len = 3\n    for i in range(len(s)-std_len+1):\n        if s[i:i+std_len] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = s.find('std')\n    while start_index!= -1:\n        count += 1\n        start_index = s.find('std', start_index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_elem = test_tuple[0]\n    # initialize a variable to store the data type of the first element\n    data_type = type(first_elem)\n    # loop through the rest of the elements in the tuple\n    for elem in test_tuple[1:]:\n        # get the data type of the current element\n        curr_type = type(elem)\n        # check if both data types are same or not\n        if curr_type!= data_type:\n            return False\n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # checking if the length of the tuple is 1\n    if len(test_tuple) == 1:\n        return True\n\n    # getting the data type of first element in the tuple\n    first_element_type = type(test_tuple[0])\n\n    # checking if all the elements in the tuple have same data type\n    for element in test_tuple:\n        if type(element)!= first_element_type:\n            return False\n\n    # if all the elements have same data type then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])  # Get the data type of the first element of the tuple\n    \n    for element in test_tuple:\n        if type(element)!= data_type:  # Check if all elements have same data type\n            return False\n        \n    return True  # All elements have same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple has at least one element\n    if len(test_tuple) == 0:\n        return \"The tuple is empty.\"\n    else:\n        # Check if all the elements in the tuple have the same data type\n        data_type = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element)!= data_type:\n                return \"The data type of the elements is not the same.\"\n    return \"All elements have the same data type.\""
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise ValueError(\"Input must be a tuple\")\n\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n\n    return all(x == types[0] for x in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    else:\n        first_elem = type(test_tuple[0])\n        for elem in test_tuple[1:]:\n            if type(elem)!= first_elem:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns True if the given element x is the majority element in the given sorted array,\n    False otherwise. If there are more than one majority elements in the array, it returns\n    the first one it finds.\n\n    Args:\n    arr (list): sorted array of integers\n    n (int): length of the array\n    x (int): integer to search for as the majority element\n\n    Returns:\n    bool: whether the given element x is the majority element in the array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits in that integer.\n    A set bit is a binary digit with a value of 1.\n    For example, 13 has two set bits: 1 and 8.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    # Loop through the string and remove the odd index characters\n    for i in range(len(str)):\n        if i % 2 == 1:\n            str = str.replace(str[i], '')\n    return str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Initialize an empty string to hold the odd-indexed characters\n    odd_char_str = ''\n\n    # Iterate through the list of characters\n    for i, char in enumerate(char_list):\n        # Check if the index value is odd\n        if i % 2!= 0:\n            # Add the character to the odd-indexed string\n            odd_char_str += char\n\n    # Return the odd-indexed string\n    return odd_char_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string\n    new_str = ''\n    # loop through the characters of the input string\n    for char in str:\n        # check if the index of the character is odd\n        if (ord(char) - ord('a') + 1) % 2!= 0:\n            # if the index is odd, append it to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # finding the minimum number using ternary operator\n    return a if a < b and a < c else b if b < a and b < c else c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if the input values are all integers\n    if not all(isinstance(x, int) for x in (a, b, c)):\n        raise ValueError(\"All input values must be integers.\")\n\n    # find the minimum of the three numbers\n    min_num = min(a, b, c)\n\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    Args:\n        n: an integer which represents the number of bits\n        l: an integer which represents the lower limit of the range\n        r: an integer which represents the upper limit of the range\n    Returns:\n        A boolean value indicating whether all the bits are unset in the given range or not\n    \"\"\"\n    # Initializing an empty list to store the unset bits\n    unset_bits = []\n    # Loop through the range of the given number of bits\n    for i in range(n):\n        # Initializing the current bit to 0\n        current_bit = 0\n        # Shifting the current bit by i bits and adding it to the current bit\n        current_bit += (1 << i)\n        # Checking if the current bit is unset in the given range\n        if (l & current_bit)!= current_bit:\n            # Appending the current bit to the list of unset bits\n            unset_bits.append(i)\n        if (r & current_bit)!= current_bit:\n            # Appending the current bit to the list of unset bits\n            unset_bits.append(i)\n    # Checking if all the bits are unset in the given range\n    if len(unset_bits) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize the count of unset bits\n    unset_bits = 0\n\n    # Loop through each bit in the integer n\n    for i in range(l, r + 1):\n        # Check if the i-th bit is 1\n        if (n & (1 << (i - l)))!= 0:\n            # If the bit is set, increment the unset_bits counter\n            unset_bits += 1\n            # If the unset_bits counter reaches the length of the range, return True\n            if unset_bits == r - l + 1:\n                return True\n\n    # If the function reaches here, all the bits are unset\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits in the range as 0\n    count = 0\n    # Iterate through all the bits in the range\n    for i in range(l, r+1):\n        # Check whether the i-th bit is set or not\n        if n & (1 << i):\n            # If it is set, increment the count by 1\n            count += 1\n            # If the count becomes greater than the number of bits in the range, return False\n            if count > r-l+1:\n                return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to keep track of the number of unset bits in the given range\n    unset_bits = 0\n    \n    # loop through the given range\n    for i in range(l,r+1):\n        # loop through each bit of the current number\n        for j in range(32):\n            # if the bit is set, add 1 to the unset_bits variable\n            if (i & (1<<j)):\n                unset_bits += 1\n                # exit the inner loop once the unset_bits variable is greater than or equal to n\n                if (unset_bits >= n):\n                    return True\n    \n    # if the inner loop completes without returning True, all the bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Finding the number of bits in n\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1)  # clears the least significant bit\n\n    # Checking if all the bits are set in the given range\n    if count >= r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n\n    while l < r:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n        l = l >> 1\n        r = r >> 1\n\n    return True if n == 0 else False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range into a list of bits\n    range_list = [int(bit) for bit in bin(r)[2:]]\n    # Initialize a boolean variable to keep track of whether all bits are set or not\n    all_set = True\n    # Iterate through the list of bits and check if all the bits are set\n    for bit in range_list:\n        if bit == 0:\n            all_set = False\n            break\n    # Return the result of the check\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary format\n    l_bin = bin(l)[2:]\n    r_bin = bin(r)[2:]\n    \n    # Check if all the bits are unset in the given range\n    if l_bin == n * '0' and r_bin == n * '1':\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the number of set bits in the given range\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i)[2:].count('1')\n\n    # Calculate the number of unset bits in the given range\n    unset_count = n - count\n\n    # Check whether all the unset bits are set in the given range or not\n    if unset_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        l += 1\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, left and right, to the beginning and end of the array, respectively\n    left = 0\n    right = len(arr) - 1\n    \n    # Loop through the array from left to right\n    while left < right:\n        # If the element at the left pointer is negative, move the left pointer to the right\n        if arr[left] < 0:\n            left += 1\n        # If the element at the right pointer is positive or zero, move the right pointer to the left\n        elif arr[right] > 0 or arr[right] == 0:\n            right -= 1\n        # If the element at the right pointer is negative, swap the elements and move the left pointer to the right\n        else:\n            # Swap the elements at the left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            \n            # Move the left pointer to the right\n            left += 1\n            \n            # Move the right pointer to the left\n            right -= 1\n    \n    # Return the modified array\n    return arr[:n] + sorted(arr[n:])"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize variables to keep track of negative and positive elements\n    negative_elements = []\n    positive_elements = []\n\n    # Iterate through the array and add negative and positive elements to their respective lists\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n\n    # Re-arrange the negative and positive elements such that negative elements appear before positive ones\n    re_arranged_elements = negative_elements + positive_elements\n\n    # Re-arrange the elements in the original array such that the first n elements are the re-arranged elements\n    arr[:n] = re_arranged_elements[:n]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a list to store the negative elements\n    neg_list = []\n    # create a list to store the positive elements\n    pos_list = []\n    # loop through the array and find the negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    # loop through the array again and add the negative elements to the front of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[i] = neg_list.pop(0)\n        else:\n            arr[i] = pos_list.pop(0)\n    # return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Function to check if a number is positive or negative\n    def is_positive_or_negative(num):\n        return num >= 0\n\n    # Function to compare two numbers\n    def compare_nums(num1, num2):\n        if is_positive_or_negative(num1)!= is_positive_or_negative(num2):\n            # If both numbers are negative or positive, they are compared based on their absolute values\n            return abs(num1) - abs(num2)\n        else:\n            # If only one number is negative, it is sorted before the positive number\n            if is_positive_or_negative(num1):\n                return -1\n            else:\n                return 1\n\n    # Function to re-arrange the first n elements of the array\n    def rearrange_array_helper(arr, n):\n        for i in range(n):\n            min_index = i\n            for j in range(i+1, n):\n                if compare_nums(arr[j], arr[min_index]) < 0:\n                    min_index = j\n            if min_index!= i:\n                arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    # Call the helper function\n    rearrange_array_helper(arr, n)\n\n    # Print the updated array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # loop through the array and add negative elements to the negative list, positive elements to the positive list\n    for i in arr:\n        if i < 0:\n            neg_list.append(i)\n        else:\n            pos_list.append(i)\n    \n    # add the negative elements to the beginning of the array, followed by the positive elements\n    arr[:n] = neg_list + pos_list\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    positive = negative + positive\n    \n    return positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to hold negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and add elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Concatenate the two lists and sort them in reverse order\n    combined_list = neg_list + pos_list\n    combined_list.sort(reverse=True)\n    \n    # Re-arrange the first n elements of the combined list\n    result = combined_list[:n]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # loop over the elements of the array\n    for num in arr:\n        # add the negative elements to the negative list, and the positive elements to the positive list\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n            \n    # re-arrange the negative elements in the negative list so that they appear before the positive ones\n    neg_list.sort(reverse=True)\n    \n    # concatenate the negative and positive lists\n    new_arr = neg_list + pos_list\n    \n    # return the new array with the first n elements preserved\n    return new_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables for negative and positive elements\n    negatives = []\n    positives = []\n\n    # iterate over the first n elements of the array\n    for i in range(n):\n        # if the current element is negative, add it to the negative list\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        # otherwise, add it to the positive list\n        else:\n            positives.append(arr[i])\n\n    # concatenate the negative and positive lists into a single list\n    result = negatives + positives\n\n    # shuffle the resulting list randomly\n    import random\n    random.shuffle(result)\n\n    # return the shuffled list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # First, find the index of the largest negative element\n    largest_neg_index = arr.index(-max(arr))\n    \n    # Rearrange the array such that all negative elements appear before positive ones\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[largest_neg_index] = arr[largest_neg_index], arr[i]\n            largest_neg_index -= 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(string, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # use a list comprehension to iterate over each character in the string\n    return ''.join([char if c!='' else string[i] for i, c in enumerate(string)])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Remove all the blank spaces from the string using replace() method\n    str1 = str1.replace(\" \", \"\")\n    \n    # Add the character to all the remaining blank spaces in the string using replace() method\n    str1 = str1.replace(\"\", char)\n    \n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(char)\n    # Use list comprehension to replace blank spaces in the string with the character\n    str2 = ''.join([char if char!='' else char_list[0] for char in str1])\n    # Return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # use replace() method to replace blank spaces with the specified character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        raise ValueError(\"The value of n should be less than or equal to the length of the list.\")\n\n    max_heap = []\n    heapq.heapify(max_heap)\n\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to find the n largest items in the list\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the max heap to a list and return it\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a heap and pop the n largest values\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Args:\n        list1 (list): A list containing the numbers to be sorted.\n        n (int): The number of largest items to be returned.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n\n    # Iterate through the list and insert each number into the min heap\n    for num in list1:\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n\n    # Return the n largest items from the min heap\n    return min_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    '''\n\n    # calculate the lateral surface area\n    lateral_surface = 2 * r * h\n\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n\n    Inputs:\n    r: radius of the cylinder (float)\n    h: height of the cylinder (float)\n\n    Output:\n    Ls: lateral surface area of the cylinder (float)\n    '''\n\n    # Calculate the lateral surface area of the cylinder\n    Ls = math.pi * r**2 * h\n\n    return Ls"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2 * r * h) + (2 * r * h * r * h)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*(r**2 + h**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    area = 2 * (r * h) + (r**2 + h**2) * (3*r + h) + (r**3 + h**3) * (4*r**2 + 6*h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_area = (2 * r * h) + ((2 * r * h) ** 2)\n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r * r * h # Calculate the area of the cylinder using the formula A = pi * r^2 * h\n    lateral_surface_area = 2 * area + 2 * math.pi * r * h # Calculate the lateral surface area by adding the area of the base of the cylinder to the area of the cylinder\n    return lateral_surface_area # Return the lateral surface area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * (r ** 2 + h ** 2)\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0:\n        if n % 2 == 0:\n            n &= n - 1\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary representation\n    binary_representation = bin(n)[2:]\n    # Split the binary representation into groups of 4 bits\n    groups = [binary_representation[i:i+4] for i in range(0, len(binary_representation), 4)]\n    # Iterate over the groups and set each even bit to 1\n    for i in range(len(groups)):\n        groups[i] = '0b' + '1'*(len(groups[i])-1) + '0'\n    # Join the groups back into binary representation and convert back to decimal\n    result = int(groups[0], 2)\n    for i in range(1, len(groups)):\n        result |= int(groups[i], 2) << i*4\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append a 1 to the result string\n        if int(bit) == 0:\n            result += '0'\n        else:\n            result += '1'\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to hold the result\n    result = 0\n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the corresponding bit in the result to 1\n        if bit == '0':\n            result |= 1\n        else:\n            result &= ~(1 << 0) # Clear the least significant bit (LSB)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \n    Parameters:\n    n (int): The number to set the even bits of.\n    \n    Returns:\n    int: The number with all even bits set to 1.\n    \"\"\"\n    # Iterate over each bit in the binary representation of n\n    for i in range(8):\n        # If the ith bit is even, set its corresponding bit in the result to 1\n        if n & (1 << i):\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, add it to the even_bits list\n        if i % 2 == 0:\n            even_bits.append(int(bin(n)[2:][i]))\n\n    # Convert the list of even bits back to an integer and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n % 2 == 0:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is an even bit, set it to 1\n        if bit == '0':\n            even_bits = even_bits | 1\n    \n    # Return the even bits of the number\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n & 1  # get the even bit of the number\n    n = n ^ even_bits  # set the even bits to 1\n    n = n | 0b10000000  # set all odd bits to 0\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n\n    # Loop through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n & (1 << i))!= 0:\n            # If the current bit is even, set it to one in the result variable\n            result |= (1 << i)\n\n    # Return the result variable as the even bit set number\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through the test list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n            \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples into a list of lists to allow for multiple occurrences of each tuple\n    flattened_list = [item for sublist in test_list for item in sublist]\n    # Create a Counter object to count the occurrences of each tuple in the flattened list\n    counter = Counter(flattened_list)\n    # Return the dictionary of unique tuples and their counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each possible starting index for the substring\n        for j in range(i, len(str)+1): \n            # Check if the substring is non-empty and not a substring of any other substring\n            if j > i and str[i:j] not in [sub[0:len(str[i:j])] for sub in str[0:i] + str[i+1:]]:\n                # Increment the count variable\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str) + 1):\n        for j in range(i, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = str[i:j]\n            if substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j - i >= 3:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and counts the number of non-empty substrings of the string.\n    A non-empty substring is defined as any substring that has at least one character.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    sequence = [0] * (n + 1)\n    sequence[0] = 1\n    sequence[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if i - j >= 2 * m:\n                if 2 * j >= m and 2 * j <= m:\n                    sequence[i] += sequence[i - j]\n\n    return sequence[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m, 2*m, 2):\n        if i <= 2*m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: if n == 0, there is only one sequence\n    if n == 0:\n        return 1\n\n    # Base case: if n is 1, there are only n sequences of length 1\n    if n == 1:\n        return m * (m - 1) // 2\n\n    # Recursive case: count the number of sequences of length n\n    count = 0\n    for i in range(2, n + 1):\n        count += get_total_number_of_sequences(m, n - i)\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    seq_len = 1\n    prev_num = 1\n    prev_num_twice = 2\n    \n    while seq_len < n:\n        count += 1\n        \n        # get the next number in the sequence\n        next_num = prev_num + prev_num_twice\n        \n        # check if it meets the condition\n        if next_num >= 2 * prev_num and next_num <= m:\n            prev_num = next_num\n            prev_num_twice = 2 * prev_num - 1\n            seq_len += 1\n        else:\n            prev_num_twice += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables for number of possible sequences and current sequence\n    count = 0\n    current_sequence = []\n\n    # Initialize variables for previous and current element\n    previous_element = float('-inf')\n    current_element = 2\n\n    # Loop through all possible sequences of length n\n    while len(current_sequence) < n:\n        # Check if current element is within the range of m\n        if current_element >= 2 * previous_element and current_element <= m:\n            # Add current element to sequence and increment count\n            current_sequence.append(current_element)\n            count += 1\n        # Increment current element\n        current_element += 1\n        # Reset previous element if it becomes negative\n        if current_element < 0:\n            previous_element = float('-inf')\n            current_sequence = []\n\n    # Return total number of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of sequences to 1\n    count = 1\n\n    # Initialize the current sequence to 2 (the first sequence starts with 2)\n    current_sequence = [2]\n\n    # Initialize the previous element to None (the first element is always 2)\n    previous_element = 2\n\n    # Loop through all possible lengths up to n\n    for length in range(3, n+1):\n        # Loop through all possible starting positions up to m\n        for start in range(1, m+1):\n            # If the starting position is within the range of the current sequence and the length is not exceeded, add the element to the sequence\n            if start >= len(current_sequence) and length <= n:\n                current_sequence.append(start)\n\n    # Loop through all possible sequences\n    for sequence in current_sequence:\n        # If the sequence is of length n and it contains only positive integers greater than or equal to twice the previous element but less than or equal to m, increment the count\n        if len(sequence) == n and sequence[0] >= 2 * previous_element <= m and all(isinstance(num, int) and num > 0 and num >= 2 * previous_element <= m for num in sequence):\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev = 0\n    prev2 = 0\n    for i in range(n):\n        if i == 0:\n            count += m - 1\n        elif i == 1:\n            count += m - 1\n        else:\n            count += m - 1\n            count -= prev2\n            count -= prev\n            count += prev2\n        prev2 = prev\n        prev = i + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(n):\n        if i == 0 or i == 1:\n            count += 1\n        elif i > 1:\n            count += (m//(i*2) + 1)\n        else:\n            count += 0\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    if n == 1:\n        return m\n\n    total = 0\n    for i in range(m//2, 1, -1):\n        total += get_total_number_of_sequences(i, n-1)\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    def is_valid_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < seq[i-1] * 2 or seq[i] > m:\n                return False\n        return True\n    \n    sequences = []\n    for i in range(2, m):\n        if is_valid_sequence([i]):\n            sequences.append([i])\n    \n    for i in range(2, n+1):\n        for j in range(1, len(sequences)):\n            if is_valid_sequence(sequences[j] + [i]):\n                sequences.append(sequences[j] + [i])\n    \n    return len(sequences)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the first list is equal to the length of the second list\n    if len(list1)!= len(list2):\n        print(\"The two lists are not of equal length.\")\n        return\n    \n    # Find the index of the last element in the first list\n    last_index = len(list1) - 1\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1.append(list2[-1])\n        list2.pop()\n    elif len(list1) > len(list2):\n        list1.pop()\n        list2.append(list1[-1])\n    else:\n        list1.pop()\n        list2.pop()\n        list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2[0]\n            list2 = list2[1:]\n    elif len(list1) > len(list2):\n        for i in range(len(list1)-len(list2)+1):\n            list1[i] = list2[0]\n            list2 = list2[1:]\n    else:\n        for i in range(len(list1)-len(list2)+1):\n            list1[i] = list2[0]\n            list2 = list2[1:]\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for i in range(len(str1)):\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # convert input number to float to handle decimal numbers\n    N = float(N)\n    # loop until we find a perfect square\n    while True:\n        # find the next perfect square using the math.isqrt function\n        next_square = math.sqrt(N) + 1\n        # check if the next perfect square is greater than N\n        if next_square > N:\n            # return the next perfect square as an integer\n            return int(next_square)\n        # check if the next perfect square is within the given range of 0 to N\n        elif N - next_square >= 0:\n            # return the next perfect square as an integer\n            return int(next_square)\n        else:\n            # decrement the value of N and continue the loop\n            N = N - 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # loop through all numbers from N to 1\n    for i in range(N, 1, -1):\n        # check if i is a perfect square\n        square = int(math.sqrt(i))\n        if square**2 == i:\n            # if i is a perfect square, return the next perfect square greater than i\n            return i + 1\n    # if no perfect square found greater than N, return N+1\n    return N+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    A perfect square is a square number that is equal to the square of its square root.\n    For example, 16 is a perfect square because 16 = 4^2.\n    \n    The function first calculates the square root of N using the math.sqrt() function. \n    Then, it adds 1 to the square root and finds the square of the result.\n    This square is the next perfect square.\n    \n    If N is already a perfect square, then the function returns N.\n    \n    If N is already the largest perfect square that can be calculated (i.e., N + 1), then the function returns None.\n    '''\n    if math.sqrt(N) == int(math.sqrt(N)):\n        return N\n    else:\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    low, high = 0, N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid <= N:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        root = math.sqrt(num)\n        return int(root) ** 2 == num\n\n    # Find the smallest number greater than N that is a perfect square\n    current_square = int(N ** 0.5)\n    next_square = current_square + 1\n\n    # Check if the next number is a perfect square\n    while not is_perfect_square(next_square):\n        next_square += 1\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n):\n        return n == int(math.sqrt(n))**2\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        while not is_prime(n+1):\n            n += 1\n        return n\n\n    def next_perfect_square(n):\n        while not is_perfect_square(n+1):\n            n = next_prime(n)\n        return n\n\n    if not is_perfect_square(N):\n        while not is_perfect_square(next_prime(N)):\n            N = next_prime(N)\n    return next_perfect_square(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N = int(N)\n    while True:\n        N += 1\n        if is_Perfect_Square(N):\n            return N\n        N += 1\n\ndef is_Perfect_Square(num):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    return math.sqrt(num) == int(math.sqrt(num))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = math.ceil(N / 2)  # reduce the number to its next perfect square\n    N *= 2  # increase the number to its next perfect square\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N using math.sqrt()\n    sqrt_N = math.sqrt(N)\n    # Convert the square root to an integer\n    sqrt_int = int(sqrt_N)\n    # Check if the square root is an integer\n    if sqrt_int == sqrt_N:\n        # If it is, then the square root of N is greater than the given number\n        next_perfect_square = sqrt_int + 1\n    else:\n        # If it is not, then the square root of N is less than the given number\n        next_perfect_square = sqrt_int - 1\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    # The function returns the next perfect square greater than N\n    # We will use the bisection method to find the square root of N\n    lo, hi = 1, N\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        # The next perfect square greater than mid will be mid*mid + mid\n        if mid * mid + mid > N:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    # The answer is the square root of N\n    return int(math.sqrt(N)) + 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Check if the array is bitonic\n    if arr[0] > arr[1] and arr[1] < arr[2] > arr[3]:\n        return arr[0] + arr[2]\n\n    # Check if the array is increasing and decreasing\n    elif arr[0] < arr[1] and arr[1] > arr[2] < arr[3]:\n        return arr[0] + arr[3]\n\n    # If the array is neither increasing nor decreasing, find the maximum sum of a subarray\n    else:\n        # Initialize the maximum sum and the maximum sum subarray\n        max_sum = 0\n        max_sum_subarray = []\n\n        # Iterate through the array\n        for i in range(n):\n            # If the current element is less than the previous element, add it to the maximum sum subarray\n            if arr[i] < arr[i-1]:\n                max_sum_subarray.append(arr[i])\n\n            # If the current element is greater than the previous element, check if it is greater than the maximum sum subarray\n            elif arr[i] > arr[i-1]:\n                if arr[i] > max_sum_subarray[-1]:\n                    max_sum_subarray.append(arr[i])\n                else:\n                    max_sum_subarray.pop(-1)\n\n            # If the current element is equal to the previous element, add it to the maximum sum subarray\n            else:\n                max_sum_subarray.append(arr[i])\n\n            # Check if the maximum sum subarray is greater than the maximum sum\n            if i > 0:\n                if max_sum_subarray[-1] + max_sum_subarray[-2] > max_sum:\n                    max_sum = max_sum_subarray[-1] + max_sum_subarray[-2]\n\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        raise ValueError(\"Input array should have at least 3 elements\")\n    \n    # Check if the array is bitonic\n    is_increasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            is_increasing = False\n            break\n    if is_increasing:\n        return sum(arr)\n    \n    # Compute the sum of all decreasing subarrays\n    decreasing_sums = [0] * n\n    for i in range(n-2, -1, -1):\n        decreasing_sums[i] = sum(arr[i:j+1] for j in range(i, n-1))\n        \n    # Compute the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n-2):\n        if decreasing_sums[i] > decreasing_sums[i+1]:\n            max_sum = max(max_sum, decreasing_sums[i] + decreasing_sums[i+1])\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence in the given array.\n\n    Args:\n    arr (list): A list of integers representing the array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence in the given array.\n\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        raise ValueError(\"The array must have at least three elements.\")\n\n    # Step 1: Determine if the array is increasing or decreasing.\n    increasing = all(arr[i] <= arr[i+1] for i in range(n-1))\n    decreasing = all(arr[i] >= arr[i+1] for i in range(n-1))\n\n    # Step 2: If the array is increasing, return the maximum sum.\n    if increasing:\n        max_sum = arr[0] + arr[1] + arr[2]\n        return max_sum\n\n    # Step 3: If the array is decreasing, return the maximum sum.\n    elif decreasing:\n        max_sum = arr[0] + arr[1] + arr[2]\n        return max_sum\n\n    # Step 4: If the array is neither increasing nor decreasing, return the maximum sum of a subarray.\n    else:\n        max_sum = 0\n        for i in range(1, n):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_sum_increasing = arr[0]\n    max_sum_decreasing = arr[0]\n    max_sum = max(max_sum_increasing, max_sum_decreasing)\n    # Iterate through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # Case 1: Increasing subsequence\n            max_sum_increasing = max(max_sum_increasing + arr[i], max_sum_decreasing)\n            max_sum_decreasing = max(max_sum_increasing, max_sum_decreasing)\n        else:\n            # Case 2: Decreasing subsequence\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], max_sum_increasing)\n            max_sum_increasing = max(max_sum_increasing, max_sum_decreasing)\n        max_sum = max(max_sum, max_sum_increasing)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    n = len(arr)\n    max_sum = arr[0]\n    max_sum_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_sum_ending_here += arr[i]\n            max_sum = max(max_sum, max_sum_ending_here)\n        else:\n            max_sum_ending_here = arr[i]\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Define a function to check if a given number is increasing or decreasing\n    def is_increasing(num):\n        if len(arr) == 1:\n            return True\n        elif arr[0] < num:\n            return True\n        else:\n            return False\n\n    # Find the maximum subsequence ending at the last index\n    max_ending_at_last = max(arr)\n\n    # Initialize variables for the maximum subsequence ending at any index\n    max_ending_at_middle = max(arr[0], arr[-1])\n    max_ending_at_i = arr[0]\n\n    # Iterate over the array from 0 to len(arr) - 2\n    for i in range(1, len(arr) - 1):\n        # Check if the current number is increasing or decreasing\n        if is_increasing(arr[i]):\n            # Update the maximum subsequence ending at the current index\n            max_ending_at_i = max(max_ending_at_i + arr[i], arr[i])\n            # Update the maximum subsequence ending at the middle index\n            max_ending_at_middle = max(max_ending_at_middle + arr[i], max_ending_at_i)\n        else:\n            # Update the maximum subsequence ending at the current index\n            max_ending_at_i = max(max_ending_at_i - arr[i], arr[i])\n            # Update the maximum subsequence ending at the middle index\n            max_ending_at_middle = max(max_ending_at_middle - arr[i], max_ending_at_i)\n\n    # Update the maximum subsequence ending at the last index\n    max_ending_at_last = max(max_ending_at_last, max_ending_at_middle)\n\n    return max_ending_at_last"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence.\n    A sequence is considered bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            # If the next element is greater than the previous element, the subsequence is decreasing and the current maximum sum is updated.\n            max_sum = max(max_sum, arr[i]-arr[start])\n            start = i\n        elif arr[i] > arr[i-1]:\n            # If the next element is less than the previous element, the subsequence is increasing and the current maximum sum is updated.\n            max_sum = max(max_sum, arr[i]-arr[end])\n            end = i\n    # If the length of the array is odd, the maximum sum of a bitonic subsequence is either the sum of the first half or the last element.\n    if len(arr) % 2!= 0:\n        if arr[0] <= arr[len(arr)-1]:\n            max_sum = max(max_sum, arr[0]-arr[start])\n        else:\n            max_sum = max(max_sum, arr[len(arr)-1]-arr[end])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables\n    increasing = True\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is increasing or decreasing\n        if increasing:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i]\n        # Update the max_sum if needed\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # Update the increasing flag\n        if arr[i] >= arr[i+1]:\n            increasing = True\n        else:\n            increasing = False\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Calculate the cumulative sum of the array\n    cumulative_sum = [0] * (n + 1)\n    cumulative_sum[0] = arr[0]\n    for i in range(1, n + 1):\n        cumulative_sum[i] = cumulative_sum[i-1] + arr[i-1]\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = cumulative_sum[0]\n    current_sum = cumulative_sum[0]\n\n    # Traverse the array from the second element to the end\n    for i in range(1, n):\n        if cumulative_sum[i] - cumulative_sum[i-1] >= 0:\n            current_sum += arr[i]\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = cumulative_sum[i]\n\n    # Add the last element to the sum\n    current_sum += arr[n]\n    max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for i in range(2)]\n    dp[0][0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[0][i] = max(dp[0][i-1], dp[1][i-1]) + arr[i]\n        else:\n            dp[1][i] = max(dp[0][i-1], dp[1][i-1]) + arr[i]\n\n    return max(dp[0][n-1], dp[1][n-1]) - min(dp[0][n-1], dp[1][n-1])"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while guess * guess > number:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        guess = (guess + number/guess) / 2\n        if abs(guess**2 - number) < 0.001:\n            break\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        print(\"Error: Please enter a non-negative number.\")\n        return None\n    else:\n        guess = number / 2\n        while abs(guess*guess - number) > 0.001:\n            guess = (guess + number / guess) / 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.00001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Square roots of negative numbers are not defined.')\n    elif number == 0:\n        return 0\n    \n    # Initialize variables\n    x0 = 1\n    x1 = number / x0\n    x = x1\n    y = x1\n    \n    # Compute square root using babylonian method\n    while abs(x - x1) > 10**-10:\n        x0 = x1\n        x1 = x\n        y = (x + number / x) / 2\n        x = y\n    \n    # Return result\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # Initial guess for the square root\n    guess = number / 2\n\n    # Number of iterations\n    iterations = 0\n\n    # Check for convergence\n    while abs(guess * guess - number) > 0.0001 and iterations < 1000:\n        iterations += 1\n        guess = (number / guess + guess) / 2\n\n    # Return the square root\n    if iterations == 1000:\n        print(\"Convergence failed.\")\n    else:\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # initial guess\n    guess = number / 2\n\n    # find the number of iterations required to achieve the desired precision\n    precision = 0.00001\n    iterations = 0\n    while abs(guess**2 - number) > precision:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n\n    # print the result\n    print(\"Number of iterations:\", iterations)\n    print(\"Square root:\", guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number / x) / 2\n    while abs(x - y) > 0.000001:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    The babylonian method is a method of finding square roots using Newton's method.\n    It uses the property that the square of the difference between the\n    square of the next root and the number is equal to the difference\n    between the next two roots.\n\n    The function takes a number as input and returns the square root of that number.\n    \"\"\"\n\n    # initialize variables\n    prev_guess = 1\n    guess = prev_guess + 1\n    prev_diff = abs(guess**2 - number)\n    diff = abs(guess**2 - number)\n\n    while diff > 10**(-5):\n        prev_guess = guess\n        guess = prev_guess - diff / (2 * guess)\n        prev_diff = diff\n        diff = abs(guess**2 - number)\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize variables\n    x = number/2\n    y = number/2\n    iter = 0\n\n    # calculate the square root using the babylonian method\n    while abs(x-y) >= 10**(-12):\n        x = (x+y)/2\n        y = number/x\n        iter += 1\n\n    # return the square root and the number of iterations required\n    return x, iter"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    table = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        table[i][i] = 1\n\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position\n    # in the given string\n    table = [[0] * n for i in range(n)]\n    # Initialize the table for the first row and column\n    for i in range(n):\n        table[i][i] = 1\n    # Fill the table using dynamic programming\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store lengths of longest palindromic subsequences of substrings \n    # of str \n    table = [[0] * n for _ in range(n)] \n  \n    # Initialize LPS length for the first character \n    for i in range(n): \n        table[i][i] = 1 \n  \n    # Fill rest of the table in bottom up fashion \n    for length in range(3, n+1): \n        for start in range(n-length+1): \n            end = start + length - 1 \n            # Check if substring is palindrome \n            if str[start] == str[end]: \n                # If yes, then check if it is the longest palindrome found so far \n                if length > table[start+1][end-1]: \n                    table[start][end] = length \n            else: \n                table[start][end] = 0 \n  \n    # Return length of longest palindromic subsequence \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence for each substring\n    # dp[i][j] stores the length of the longest palindromic subsequence in substring str[i:j+1]\n    dp = [[0] * n for _ in range(n)]\n\n    # initialize the base cases\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill in the rest of the matrix\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            # if the current character is same as the next one, extend the palindromic subsequence\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            # if the current character is different, compare it with the next and previous characters\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the lengths of LPSs for odd and even lengths\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and column of the array to 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill in the rest of the array using the LPS algorithm\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            # Compare the characters at i and j, and update the length of the longest LPS\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D array to store lengths of longest palindrome subsequences\n    # for every possible substring of length i\n    lps_arr = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the array\n    for i in range(n):\n        lps_arr[i][i] = 1\n\n    # Fill the remaining elements of the array in bottom-up manner\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                lps_arr[start][end] = lps_arr[start + 1][end - 1] + 2\n            else:\n                lps_arr[start][end] = max(lps_arr[start + 1][end], lps_arr[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_arr[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of the longest palindromic subsequence for every subsequence ending at each position\n    dp = [[0] * n for _ in range(n)]\n    # fill the 2D table using dynamic programming\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # return the length of the longest palindromic subsequence in the given string\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j][i-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[j][i])\n\n        if max_len > 1:\n            print(str[start-max_len+1:start+1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0] * n for _ in range(n)]\n\n    # Step 1: Compute the length of the longest palindromic subsequence for all possible pairs of indices\n    for i in range(n):\n        table[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    # Step 2: Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "Let's write the Python code for this problem.<|im_sep|>"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/2) * (n*(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1 as the sum of the reciprocals of the first n terms\n    harmonic_sum = 1 / (1 / 1) + 1 / (1 / 2) + 1 / (1 / 3) +... + 1 / (1 / (n - 1))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*n) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1)) + (1/(n-2)) +... + (1/(n-n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = (1/n) + (1/n) + (1/n) +... + (1/n)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Create a set of elements present in array_nums2\n    intersection_set = set(array_nums2)\n\n    # Find the intersection of the two sets and store them in a list\n    intersection = [num for num in intersection_set if freq_dict[num] > 0]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    # Loop through each element in the first array\n    for num in array_nums1:\n\n        # Check if the element is in the second array\n        if num in array_nums2:\n\n            # If the element is in both arrays, add it to the intersection list\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty dictionary to store the intersection of the two arrays\n    intersection = {}\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Check if the element exists in the second array\n        if num1 in array_nums2:\n            # If it does, add it to the dictionary with a value of 1\n            if num1 in intersection:\n                intersection[num1] += 1\n            else:\n                intersection[num1] = 1\n    # Create a list of the intersection keys and sort them alphabetically\n    sorted_intersection = sorted(list(intersection.keys()))\n    # Return the sorted intersection list\n    return sorted_intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the frequency of each element in each array\n    freq1 = {}\n    freq2 = {}\n\n    # Loop through the first array and count the frequency of each element\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Loop through the second array and count the frequency of each element\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Find the intersection of the two dictionaries by looping through the keys\n    intersection = []\n    for key in freq1.keys():\n        if key in freq2 and freq1[key] <= freq2[key]:\n            intersection.append(key)\n\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store unique elements of array1\n    array1_set = set(array_nums1)\n    # Create a set to store unique elements of array2\n    array2_set = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection_set = array1_set.intersection(array2_set)\n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array that contains only the elements that are common to both arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create another dictionary to store the frequency of each element in the second array\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n    \n    # Find the intersection of the two dictionaries\n    intersection_dict = {}\n    for num in freq_dict:\n        if num in freq_dict2 and freq_dict[num] >= freq_dict2[num]:\n            intersection_dict[num] = freq_dict[num]\n    \n    # Convert the dictionary to a list of tuples\n    intersection_list = []\n    for num in intersection_dict:\n        intersection_list.append((num, intersection_dict[num]))\n    \n    # Sort the list in descending order based on the frequency of each element\n    intersection_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Extract the first n elements from the sorted list\n    intersection = []\n    for i in range(len(intersection_list)):\n        intersection.append(intersection_list[i][0])\n        \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # create a set to store the intersection of array_nums1 and array_nums2\n    intersection_set = set()\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection_set.add(num)\n            freq_dict[num] -= 1\n\n    # convert the set to a list and return it as the intersection of the two arrays\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays using a dictionary to store unique elements\n    :param array_nums1: list of integers\n    :param array_nums2: list of integers\n    :return: list of integers, the intersection of the two arrays\n    \"\"\"\n    # Convert both arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersect = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection to a list and return it\n    return list(intersect)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize a dictionary to store the counts of each element in array_nums1\n    counts = {}\n    for num in array_nums1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Iterate through array_nums2 and add elements to the intersection that are in counts\n    for num in array_nums2:\n        if num in counts and counts[num] > 0:\n            counts[num] -= 1\n            intersection.append(num)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create an empty list to store the modified list\n    modified_list = []\n\n    # Loop through each element in the original list\n    for i in range(len(list)):\n        # Append the element to the modified list\n        modified_list.append(list[i])\n        # Insert the element before each element in the original list\n        modified_list.insert(i, element)\n\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.insert(0,element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n            new_list.append(list[i])\n        else:\n            new_list.append(list[i])\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = abs(num)\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(\"({}, {})\".format(magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        # convert complex number to polar form\n        x = cmath.rect(num.real)\n        y = cmath.rect(num.imag)\n        # calculate magnitude and angle of complex number\n        magnitude = cmath.sqrt(x**2 + y**2)\n        angle = cmath.phase(num)\n        # create a tuple of polar coordinates\n        polar_coords = (magnitude, angle)\n        polar_numbers.append(polar_coords)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:  \n        real, imag = cmath.polar(number)  \n        print(\"{:.2f} + {:.2fi} = {:.2f}\u00b0\".format(real, imag, cmath.phase(number) * 180 / cmath.pi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        real, imag = cmath.polar(number)\n        # append the polar coordinates to the result list\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"Polar coordinate for {number}: ({real:.2f}, {imag:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # format output\n        result.append((r, theta))\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num[0], num[1]) for num in numbers]\n    polar_coordinates = [cmath.polar(num) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        arg = cmath.phase(num)\n        \n        print(f\"The magnitude of {num} is {cmath.sqrt(real**2 + imag**2):.2f}\")\n        print(f\"The argument of {num} is {arg:.2f} radians\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        if real == 0 and imag == 0:\n            result.append(\"Origin\")\n        else:\n            magnitude = cmath.sqrt(real**2 + imag**2)\n            angle = cmath.phase(complex(real, imag))\n            result.append(\"({},{})\".format(magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        # print the polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Count the number of integer elements in a list.\n\n    Parameters:\n    lst (list): List of elements.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return [tuple(combination) for combination in combinations]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create a list of all possible combinations\n    combos = list(combinations_with_replacement(l, n))\n    # Initialize an empty list to store the combinations\n    results = []\n    # Loop through the combinations and add them to the results list as a tuple\n    for combo in combos:\n        results.append(tuple(combo))\n    return results"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # check that n is less than or equal to the length of the list\n    if n > len(l):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n\n    # generate all possible combinations of length n using itertools.combinations_with_replacement\n    combinations = list(combinations_with_replacement(l, n))\n\n    # create a list of tuples for each combination\n    combinations_list = []\n    for combination in combinations:\n        combinations_list.append(tuple(combination))\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, len(l)+1):\n        for combo in combinations_with_replacement(l, i):\n            color_combinations.append(tuple(combo))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n\n    # Loop through numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the length of the tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n\n    # Compare the lengths and swap the tuples if they are not equal\n    if tup1_len!= tup2_len:\n        if tup1_len > tup2_len:\n            test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # Find the maximum element in each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n\n    # Compare the maximum elements and swap the tuples if they are not equal\n    if max_val1!= max_val2:\n        if max_val1 > max_val2:\n            test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # Return the maximum value in each tuple\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    if test_tup2 > max_tup:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables for maximum values\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    max_tup = test_tup1\n    \n    # Check if second tuple is greater than first\n    if test_tup2[0] > test_tup1[0]:\n        max1 = test_tup2[0]\n        max2 = test_tup1[0]\n        max_tup = test_tup2\n    \n    # Check if third tuple is greater than first and second\n    if test_tup3[0] > test_tup1[0] and test_tup3[0] > test_tup2[0]:\n        max1 = test_tup3[0]\n        max2 = test_tup1[0]\n        max_tup = test_tup3\n    \n    # Check if fourth tuple is greater than first, second, and third\n    if test_tup4[0] > test_tup1[0] and test_tup4[0] > test_tup2[0] and test_tup4[0] > max1:\n        max1 = test_tup4[0]\n        max2 = test_tup1[0]\n        max_tup = test_tup4\n    \n    # Return the maximum values and the tuple that was maxed\n    return max1, max2, max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create empty lists to hold the maximum values of each tuple\n    max1 = []\n    max2 = []\n\n    # Iterate over the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max1.append(test_tup1[i])\n            max2.append(test_tup2[i])\n        elif test_tup2[i] > test_tup1[i]:\n            max1.append(test_tup2[i])\n            max2.append(test_tup1[i])\n        else:\n            max1.append(test_tup1[i])\n            max2.append(test_tup1[i])\n\n    # Combine the two lists and return the maximum value\n    return max(max1) + max(max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Getting the maximum value from both tuples\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n\n    # Getting the minimum value from both tuples\n    min_value1 = min(test_tup1)\n    min_value2 = min(test_tup2)\n\n    # Initializing the new tuple\n    new_tup = ()\n\n    # Looping through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # If the current element of the first tuple is greater than or equal to the maximum value of the second tuple,\n        # then we add it to the new tuple\n        if test_tup1[i] >= max_value2:\n            new_tup = new_tup + (test_tup1[i],)\n        # If the current element of the first tuple is less than or equal to the minimum value of the second tuple,\n        # then we add it to the new tuple\n        elif test_tup1[i] <= min_value2:\n            new_tup = new_tup + (test_tup1[i],)\n        # If the current element of the first tuple is between the maximum and minimum value of the second tuple,\n        # then we add the maximum value of the second tuple to the new tuple\n        else:\n            new_tup = new_tup + (max_value2,)\n\n    # Returning the new tuple\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If the first tuple is greater than the second tuple, return the first tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    # If the second tuple is greater than the first tuple, return the second tuple\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    # If the first tuple is equal to the second tuple, check which one is larger\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize variables to hold the maximum elements\n    max1 = max2 = None\n\n    # Iterate through the two tuples\n    for elem in test_tup1:\n\n        # If the current element is greater than the maximum element found so far\n        if elem > max1:\n\n            # Update the maximum element to be the current element\n            max1 = elem\n\n            # If the current element is greater than the second maximum element found so far\n            if elem > max2:\n\n                # Update the second maximum element to be the current element\n                max2 = elem\n\n    # Return the maximum and second maximum elements\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Find the minimum value in the two tuples\n    min1 = min(test_tup1)\n    min2 = min(test_tup2)\n\n    # Compare the maximum values with the minimum values\n    # and return the tuple with the maximum value\n    if max1 > min1:\n        return test_tup1\n    elif max1 < min1:\n        return test_tup2\n    elif max2 > min2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        while True:\n            if is_prime(i):\n                count = 0\n                j = i + i\n                while j <= n:\n                    count += 1\n                    j += i\n                if count == 2:\n                    return i\n            i += 2\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Find the index of the first prime number greater than 2\n    for i in range(3, 100000):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            break\n    else:\n        print(\"No prime numbers found greater than 2\")\n        return None\n\n    # Calculate the nth newman-shanks-williams prime number\n    nth = (i**2 - 1) // 2\n    prime = 2\n\n    for _ in range(n):\n        if all(prime % j!= 0 for j in range(2, int(prime**0.5)+1)):\n            break\n        else:\n            nth = nth - 1\n            prime += 1\n\n    return nth"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_prime_helper(n, current_prime):\n        if n == 0:\n            return current_prime\n        for i in range(2, 2 * current_prime + 1):\n            if is_prime(i):\n                newman_prime_helper(n - 1, i)\n\n    newman_prime_helper(n, 2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the first n newman\u2013shanks\u2013williams primes\n    newman_primes = []\n\n    # Start with 2 as the first newman\u2013shanks\u2013williams prime number\n    current_prime = 2\n\n    # Check if the current prime is a newman\u2013shanks\u2013williams prime\n    while len(newman_primes) < n:\n        if is_newman_prime(current_prime):\n            newman_primes.append(current_prime)\n        current_prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return newman_primes[n-1]\n\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is divisible by any odd number between 3 and its square root\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if is_prime(p):\n            for i in range(2, p):\n                if p % i == 0:\n                    break\n            else:\n                return p\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n\n    # Initialize variables\n    prime_count = 0\n    curr_num = 2\n\n    while prime_count < n:\n        if is_prime(curr_num):\n            prime_count += 1\n        curr_num += 1\n\n    return curr_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if n == 1:\n                return p\n            n -= 1\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for current prime, count and divisor\n    current_prime = 1\n    count = 0\n    divisor = 2\n    \n    # Loop until the count reaches n\n    while count < n:\n        # Check if the current prime is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(current_prime):\n            count += 1\n        # Increase the divisor and try the next prime number\n        divisor += 1\n        current_prime = divisor * divisor + 1\n        \n    return current_prime\n\ndef is_newman_shanks_williams_prime(num):\n    '''\n    Check if a number is a newman-shanks-williams prime.\n    '''\n    # Initialize variables for current prime, count and divisor\n    current_prime = 1\n    count = 0\n    divisor = 2\n    \n    # Loop until the count reaches n\n    while count < num:\n        # Check if the current prime is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(current_prime):\n            return True\n        # Increase the divisor and try the next prime number\n        divisor += 1\n        current_prime = divisor * divisor + 1\n        \n    return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    primes = []\n    is_prime = True\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if the input is a valid prime number\n    while is_prime:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    if n > len(primes):\n        raise ValueError(\"n is greater than the number of newman\u2013shanks\u2013williams primes\")\n    else:\n        return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        '''\n        Returns the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        if num < 2:\n            return 2\n        i = 2\n        while i < num:\n            if is_prime(i):\n                i += 1\n            else:\n                i += 2\n        return i\n\n    return newman_shanks_williams(n)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have equal length.\")\n    \n    # create an empty result tuple with the same length as the first tuple\n    result_tup = ()\n    \n    # iterate through the tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup.append(None)\n        else:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize an empty list to store the element-wise division result\n    division_result = []\n\n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        division_result.append(test_tup1[i] / test_tup2[i])\n\n    # return the division_result list\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # If the length of the two tuples is not equal, raise an error\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n\n    # Create a new empty tuple to store the result\n    result_tup = ()\n\n    # Perform element-wise division operation across the two tuples and add the result to the new tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    # Return the new tuple with the result\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize an empty list to hold the result\n    result = []\n\n    # check if the length of the two tuples are the same\n    if len(test_tup1) == len(test_tup2):\n        # iterate over the elements of the two tuples\n        for i in range(len(test_tup1)):\n            # perform element-wise division and append the result to the result list\n            result.append(test_tup1[i] / test_tup2[i])\n    else:\n        print(\"The two tuples must have the same length.\")\n\n    # return the result list\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('nan'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length.\")\n        return\n    \n    # Perform element-wise division\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples are same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must be of same length\")\n        return\n    \n    # perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            print(\"Error: Cannot divide by zero\")\n            return\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a new empty list to store the first part of the list\n    first_part = []\n    \n    # loop through the list and add the first L elements to the new list\n    for i in range(L):\n        first_part.append(list1[i])\n    \n    # create a new empty list to store the second part of the list\n    second_part = []\n    \n    # loop through the list and add the remaining elements to the new list\n    for i in range(L, len(list1)):\n        second_part.append(list1[i])\n    \n    # return the tuple of the first and second parts\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L >= n:\n        return (list1, [])\n    else:\n        mid = n // 2\n        return ((list1[:mid], list1[mid:]), list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        return (list1[:L], list1[L:])\n    else:\n        return None"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes a list and an integer L as input and returns two parts of the list, where the length of the first part is L.\n    '''\n    # split the list into two parts with length L\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of list1 is greater than L\n    if len(list1) > L:\n        # Split the list into two parts and return them in a tuple\n        return (list1[:L], list1[L:])\n    else:\n        # Return an error message if the length of list1 is less than or equal to L\n        return \"Error: The length of the list is less than or equal to L.\""
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        raise ValueError(\"L should be a positive integer\")\n    if len(list1) < L:\n        raise ValueError(\"List should have at least L elements\")\n    \n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    mid = n // 2\n    \n    if mid >= L:\n        return (list1[:mid], list1[mid:])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in dog's years\n    dog_years = 7 * h_age\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (7 - h_age) * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age * 7) + 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \n    Args:\n    h_age (int): The height in inches of the dog.\n    \n    Returns:\n    int: The dog's age in dog's years.\n    \"\"\"\n    # convert the height from inches to centimeters\n    height_cm = h_age * 2.54\n    \n    # convert the height from centimeters to meters\n    height_m = height_cm / 100\n    \n    # convert the height from meters to feet\n    height_ft = height_m / 3.28\n    \n    # calculate the dog's age in dog's years\n    age_dogs = round(height_ft / 2.5)\n    \n    # return the dog's age in dog's years\n    return age_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 7 * h_age\n    return age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(len(S) - n + 1):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if isinstance(S, list):\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new list containing the current element and the previous n-1 elements\n        new_list = [S[i]]\n        for j in range(1, step):\n            new_list.append(S[i+j])\n        # append the new list to the result list\n        result.append(new_list)\n    # return the final result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        return []\n\n    result = []\n    i = 0\n    while i < len(S):\n        j = i + step - 1\n        if j >= len(S):\n            j = len(S) - 1\n        result.append(S[i:j+1])\n        i = j + 1\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('Step must be a positive integer.')\n    if len(S) % step!= 0:\n        raise ValueError('Length of S must be divisible by step.')\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if n % step == 0:\n        return [S[i:i+step] for i in range(0, n, step)]\n    else:\n        return [S[i:i+step] for i in range(0, n-step+1, step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6  # formula for lateral surface area of a cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the total surface area of the cube\n    surface_area = 6 * (l ** 2)\n    \n    # Calculate the lateral surface area\n    lateral_area = 2 * (l ** 2)\n    \n    # Return the total surface area and lateral surface area\n    return surface_area, lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2  # Lateral surface area of a cube = 6 times its side length squared\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l # calculate the area using the formula 6l\u00b2\n    return area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(3, n, 2)]  # generate the first n odd natural numbers\n    odd_squares = [i**2 for i in odd_numbers]  # calculate the squares of the odd numbers\n    return sum(odd_squares)  # calculate the sum of the squares of the odd numbers"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the sum\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variables\n    if n == 1:\n        result = \"*\"\n    else:\n        result = \"\"\n    \n    # Loop through the range of n and add the appropriate number of \"*\" characters to the result string\n    for i in range(1, n+1):\n        result += \"*\"\n        \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        num = 1\n        for i in range(1, n):\n            num = num * 2\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(1, n+1):\n        star_num *= i\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th star number is:\", find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the star number to 0\n    star_num = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Print a star for each number from 1 to n\n        print(\"*\" * i)\n\n        # Increment the star number by 1\n        star_num += 1\n\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input! n must be a positive integer.\"\n    \n    # Calculate the nth star number\n    star_num = 1\n    for i in range(1, n + 1):\n        star_num *= i\n    \n    # Return the nth star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"The 1st star number is 1.\"\n    elif n == 2:\n        return \"The 2nd star number is 2.\"\n    else:\n        return \"The \" + str(n) + \"th star number is \" + str(n*(n-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # base case for n = 1\n    if n == 1:\n        return \"*\"\n    # recursive case for n > 1\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {chr(i): i for i in range(32, 128)}\n    return ascii_value_dict.get(k, 'Character not found')"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert k to lowercase\n    k = k.lower()\n    # check if k is a single character\n    if len(k) == 1:\n        # convert k to an integer and return its ascii value\n        return ord(k)\n    else:\n        # if k is a multi-character string, return None\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) > 1:\n        print(\"Please enter a single character.\")\n    else:\n        k = k.upper()\n        if k in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            ascii_value = ord(k)\n            print(ascii_value)\n        else:\n            print(\"Invalid input.\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as an argument and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n        if i % 2 == 0:\n            if count_even > 0:\n                sum_even += arr[i]\n                count_even += 1\n            else:\n                count_even = 0\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    \n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n    return sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum variable to 0\n    even_sum = 0\n    \n    # iterate through even numbers up to n\n    for i in range(2, n+1, 2):\n        # calculate the power of the number and add it to the sum variable\n        even_sum += i**5\n    \n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers raised to the fifth power is:\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize the sum to zero\n    sum_even_power = 0\n    \n    # iterate from 0 to n-1\n    for i in range(n):\n        # check if the number is even\n        if i % 2 == 0:\n            # check if the number is raised to the fifth power\n            if i ** 5 == 0:\n                # if it is, add it to the sum\n                sum_even_power += i\n                \n    # return the sum\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_powers = 0\n    for i in range(n):\n        sum_even_powers += i**5\n    return sum_even_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear_elem for tup in test_list for rear_elem in tup[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list to store the rear elements\n    rear_list = []\n    # loop through each tuple in the list\n    for item in test_list:\n        # append the rear element of the tuple to the rear_list\n        rear_list.append(item[1])\n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_tup2[test_tup2.index(test_tup1[i])] = test_tup2[test_tup2.index(test_tup1[i])]-test_tup1[i]\n    return test_tup2"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Input tuples must have the same length\"\n\n    # Loop through the tuples and subtract the elements with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup = sub_tup + (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the two tuples is not equal.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    \n    print(\"The result is:\", test_tup1)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    even_sum = 0\n    \n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if j % 2 == 0:\n                even_sum += math.comb(i, j)\n                \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through odd indices and compute even index binomial coefficients\n    for i in range(1, n+1, 2):\n        # Compute the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # Add the even-indexed coefficient to the sum\n            sum += coeff\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeffs = [math.comb(n, i) for i in range(n+1)]\n    even_coeffs = [coeffs[i] for i in range(0, n+1, 2)]\n    even_sum = sum(even_coeffs)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff = [1]  # list of all coefficients\n    for i in range(2, n+1):  # loop through all even numbers from 2 to n\n        coeff.append(math.comb(n, i-1)*i)  # calculate the even-indexed binomial coefficient\n\n    even_sum = sum([coeff[i] for i in range(0, n, 2)])  # add up all even-indexed coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize variables\n    even_coeff_sum = 0\n    odd_coeff = 1\n    \n    # loop through odd indices and add their binomial coefficients to the sum\n    for i in range(1, n+1, 2):\n        even_coeff_sum += math.comb(n, i) * odd_coeff\n        odd_coeff *= (n-i+1)\n\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return None\n    else:\n        sum_even = 0\n        count = 0\n        for i in range(1, n+1):\n            coeff = math.comb(n, i)\n            if i % 2 == 0 and coeff % 2 == 0:\n                sum_even += coeff\n                count += 1\n        return sum_even / count"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    even_sum = 0\n    index = 0\n\n    # Calculate binomial coefficients\n    while index <= n:\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, index)\n\n        # Check if the index is even\n        if index % 2 == 0:\n            even_sum += coeff\n\n        index += 1\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if i%2 == 0 and j%2 == 0:\n                sum += math.comb(n, i-j+1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    coeff_sum = 0\n    n_terms = 0\n\n    # Calculate binomial coefficients for even indices only\n    for i in range(1, n+1, 2):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n        n_terms += 1\n\n    # Return the sum of even index binomial coefficients\n    return coeff_sum / n_terms"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_index_coeffs = [0]*n\n    for i in range(1,n+1):\n        if i%2 == 0:\n            even_index_coeffs[i-1] = math.comb(n, i)\n    return sum(even_index_coeffs)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3)*3.141592653589793**2)*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * (r ** 2)\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * (r**2) * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r  # calculating the surface area of a cylinder\n    volume = area * h  # calculating the volume of a cylinder\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i+1]:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] > test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n        elif test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    row = 1\n    col = 1\n    while col <= n:\n        if row == 1:\n            decagonal_num += 2**(row-1)\n        else:\n            decagonal_num += 2*2**(row-1) - 1\n        row += 1\n        col += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize the variables\n    decagonal = 1\n    current_num = 1\n\n    # Loop through the range of numbers to find the nth decagonal number\n    for i in range(2, n+1):\n        # Increment the current number\n        current_num += 1\n\n        # Check if the current number is a decagonal number\n        if current_num == i**2:\n            return True\n\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = n * (2 * n - 1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num = 4 * i * (i+1) - 6 * i\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (10 * (n * (n+1) - 1) // 2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if the number is a decagonal number, otherwise False.\n    A decagonal number is a positive integer that can be written as the sum of two squares.\n    For example, 6 is a decagonal number because 6 = 1^2 + 2^2.\n    \"\"\"\n    if n < 1:\n        return False\n    # calculate the sum of two squares\n    sum_of_squares = (n ** 2) + (2 * n)\n    # check if the sum of two squares is a perfect square\n    return sum_of_squares == int(sum_of_squares ** 0.5) ** 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    count = 0\n    decagonal = 0\n\n    # Loop through odd numbers\n    for i in range(1, n+1):\n        # Add the product of the count and the current number to the decagonal number\n        decagonal += (count * i)\n\n        # Increment the count\n        count += 1\n\n    # Check if the decagonal number is equal to n\n    if decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1,n+1):\n        sum = i*i*3 + (i-1)*(i-1)*3\n        if sum == n:\n            return True\n    return False\n\nn = int(input(\"Enter a positive integer: \"))\n\nif is_num_decagonal(n):\n    print(\"The number\", n, \"is a decagonal number.\")\nelse:\n    print(\"The number\", n, \"is not a decagonal number.\")"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize counter variable to 0\n    count = 0\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the current number to the sum variable\n        sum += i\n        # Check if the sum is divisible by 10\n        if sum % 10 == 0:\n            # Increment the counter variable\n            count += 1\n    # Check if the counter variable is equal to n\n    if count == n:\n        # Return True if the number is a decagonal number\n        return True\n    else:\n        # Return False if the number is not a decagonal number\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        dec_num = i * (3 * i - 1) // 2\n        if dec_num == n:\n            return True\n    return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the list until an element is found or the loop runs out\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    # if the loop completes without finding the element, return False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements are unique, False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set of unique elements from the given list\n    unique_elements = set(test_list)\n    # Check if the length of the set is equal to the length of the given list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all its elements are unique or not.\n\n    Args:\n        test_list (list): A list of elements to be checked for uniqueness.\n\n    Returns:\n        bool: True if all the elements of the list are unique, else False.\n    \"\"\"\n    # Create a set of the elements in the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1 (list): a list of numbers\n    nums2 (list): a list of numbers\n\n    Returns:\n    list: a list of the differences between the two input lists\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n\n    # check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        return \"Lists do not have equal length.\"\n\n    # loop through the two lists and subtract each element\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the lists element-wise\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists have different lengths\")\n\n    # create a new list to store the result\n    result = []\n\n    # iterate over the elements of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq_dict:\n            freq_dict[digit] = 1\n        # if the digit is already in the dictionary, increment its frequency\n        else:\n            freq_dict[digit] += 1\n    \n    # loop through each digit in the integer again\n    for digit in str(n):\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq_dict[digit] > int(digit):\n            return False\n    \n    # if we made it this far, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for d in str(n):\n        freq[d] = freq.get(d, 0) + 1\n    \n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # convert the integer to a string\n    str_num = str(n)\n    # initialize the frequency dictionary\n    freq = {}\n    # loop through each digit in the string\n    for digit in str_num:\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the frequency count of the digit\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq[digit] = 1\n    # loop through each digit in the dictionary and check if its frequency is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            # return False if the frequency is greater than the digit\n            return False\n    # return True if all digits have a frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digit_freq = {}\n\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num_digits = len(str(n))\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > num_digits or freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    for i in range(10):\n        if freq[i] > freq[i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit in the number\n    freq_dict = {}\n\n    # Iterate over each character in the number string and update the frequency of each digit in the dictionary\n    for digit in num_str:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # Iterate over each digit in the dictionary and check if the frequency of that digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of digits\n    digit_freq = {}\n\n    # Iterate through each digit in the number and update the frequency of each digit in the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate through each digit in the dictionary and check whether its frequency is greater than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    # If all digits pass the check, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Define a regular expression pattern to match 'a' followed by two or three 'b' characters\n    pattern = r'a.*(b){2,3}'\n\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n\n    # Return True if the pattern is found in the text, otherwise return False\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]*b.{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?i)a(?:b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)[ab][ab]|(?=a)[ab]{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_two_three(text):\n    # Define a regular expression pattern for the 'a' character followed by two or three 'b' characters\n    pattern = r'a[bB]{2,3}'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return True; otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the maximum sum\n    max_sum = 0\n    for i in range(k):\n        a = a * n + a\n    for i in range(k, n*k):\n        a[i] *= n\n        if max_sum < a[i]:\n            max_sum = a[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # calculate the sum of the array\n    arr_sum = sum(a)\n    \n    # calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n    \n    # calculate the difference between the sum of the first k elements and the sum of the original array\n    diff = arr_sum - first_k_sum\n    \n    # if the difference is positive, it means that the first k elements can be repeated to get the desired sum\n    if diff > 0:\n        # initialize variables to keep track of the maximum sum, the current sum of the repeated array, and the current subarray sum\n        max_sum = diff\n        current_sum = diff\n        subarray_sum = 0\n        \n        # iterate through the array, adding each element to the current subarray sum and the current sum of the repeated array\n        for i in range(n):\n            subarray_sum += a[i]\n            current_sum = max(subarray_sum, current_sum)\n            \n            # update the maximum sum if necessary\n            if current_sum > max_sum:\n                max_sum = current_sum\n        \n        # return the maximum sum of the repeated array\n        return max_sum\n    \n    # if the difference is negative, it means that the first k elements cannot be repeated to get the desired sum\n    else:\n        return -1"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Sort the given array in non-decreasing order\n    a.sort()\n    \n    # Initialize a variable to store the maximum sum of a contiguous array formed by repeating the given array k times\n    max_sum = float('-inf')\n    \n    # Initialize variables to store the maximum sum of a contiguous array formed by repeating the given array k times, and the start and end indices of the current subarray\n    max_sum_subarray = [0, 0]\n    start_subarray = 0\n    end_subarray = 0\n    \n    # Iterate through the array and repeat the subarray k times\n    for i in range(k):\n        # Calculate the start and end indices of the current subarray\n        start_subarray = i\n        end_subarray = i + n\n        \n        # Calculate the sum of the current subarray\n        subarray_sum = sum(a[start_subarray:end_subarray])\n        \n        # Update the maximum sum of a contiguous array formed by repeating the given array k times if necessary\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_sum_subarray = [start_subarray, end_subarray]\n    \n    # Calculate the sum of the maximum sum of a contiguous array formed by repeating the given array k times\n    repeated_array_sum = sum(a[max_sum_subarray[0]:max_sum_subarray[1]])\n    \n    # Return the maximum sum of a contiguous array formed by repeating the given array k times\n    return max_sum + repeated_array_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # create a new array of size n*k\n    arr = [a[i] for i in range(n*k)]\n    # initialize the sum of the new array to 0\n    total = 0\n    # loop over the new array and update the sum\n    for i in range(n*k):\n        total += arr[i]\n        # if the current sum is greater than the total, update it\n        if total > total_max:\n            total_max = total\n    # return the maximum sum found\n    return total_max"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    temp_sum = 0\n    result = []\n    repeated_array = [0] * n\n    \n    for i in range(n):\n        repeated_array[i] = a[i] * k\n    \n    for i in range(k):\n        temp_sum = sum(repeated_array)\n        result.append(temp_sum)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        repeated_array = [a[i]] + repeated_array[1:]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the input array k times\n    modified_array = [0] * (k * n)\n    for i in range(n):\n        modified_array[i] = a[i]\n    for i in range(1, k * n):\n        modified_array[i] = modified_array[i] + a[i % n]\n    \n    # Initialize variables to keep track of the current maximum subarray sum and its start and end indices\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n    \n    # Traverse the modified array and find the maximum subarray sum\n    for i in range(k * n):\n        # Add the current element to the current subarray sum\n        curr_sum += modified_array[i]\n        \n        # If the current subarray sum exceeds the maximum subarray sum, update the maximum subarray sum, start and end indices\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i - n + 1\n            end = i\n            \n    # Return the maximum subarray sum and its start and end indices\n    return max_sum, start, end"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [0] * n  # Modified array\n    mod_a[0] = a[0]  # First element in the modified array\n    max_sum = mod_a[0]  # Initialize the maximum sum\n\n    for i in range(1, n):  # Traverse through the given array\n        mod_a[i] = mod_a[i-1] + a[i]  # Calculate the modified array\n\n        if mod_a[i] > max_sum:  # If the current modified array is larger than the maximum sum so far\n            max_sum = mod_a[i]\n\n        # Check if the current modified array has a sum that is greater than k times the sum of the original array\n        if mod_a[i] > k * max_sum:  # If the current modified array is greater than k times the maximum sum\n            return max_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_ending_here = 0\n    current_sum = 0\n\n    for i in range(n):\n        if i % k == 0:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n            max_ending_here = a[i]\n        else:\n            current_sum += a[i]\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Sort the given array in non-decreasing order\n    a.sort()\n\n    # Initialize the maximum sum and the maximum subarray sum\n    max_sum = a[-1]\n    curr_sum = a[-1]\n\n    # Repeat the array k times\n    for i in range(k):\n        # Find the maximum subarray sum\n        for j in range(n):\n            curr_sum += a[j]\n            curr_sum = max(curr_sum, a[j])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return \"Error: Value of k should be less than or equal to n.\"\n\n    max_sum = float('-inf')\n    window_sum = 0\n\n    for i in range(k):\n        window_sum += a[i]\n\n    max_sum = window_sum\n\n    for i in range(k, n):\n        window_sum += a[i] - a[i-k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n    return even_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(n):  \n        if i%2 == 0:  \n            sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    \n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_of_squares += count**2\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        sum_of_squares += count * count\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        square = count ** 2\n        sum_of_squares += square\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize variables\n    even_numbers = 0\n    sum_of_squares = 0\n\n    # Iterate through the even numbers\n    for i in range(2, n+1, 2):\n        even_numbers += 1\n        sum_of_squares += i*i\n\n    # Return the sum of squares of the first n even natural numbers\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return [i for j in range(max_length) for i in list1]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list):\n            max_length_list = [len(sublist)]\n        elif len(sublist) == max(max_length_list):\n            max_length_list.append(len(sublist))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > max(max_length_list, default=0):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(x) for x in lst]\n        if len(lengths) == 0:\n            continue\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D list to store the number of ways of painting the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case: if there are no posts left to paint, there is only 1 way\n    if n == 0:\n        ways[0][0] = 1\n\n    # Base case: if there is only one color left, there is only 1 way to paint the fence\n    elif k == 1:\n        ways[0][1] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i <= 2:  # If there are less than or equal to 2 posts left to paint, there is only 1 way\n                ways[i][j] = ways[i - 1][j]\n            else:  # If there are more than 2 posts left to paint, there are two ways to paint the fence\n                ways[i][j] = ways[i - 1][j] + ways[i - 2][j - 1]\n\n    # Return the total number of ways of painting the fence\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 1:\n        return 0\n    \n    # Initialize a 2D array to store the number of ways of painting each fence\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Base cases\n    ways[1][1] = 1\n    ways[1][2] = 0\n    \n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    \n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [1] * (k + 1)\n    ways[0] = 0\n    \n    for i in range(1, n + 1):\n        ways[i] = ways[i - 1]\n        \n        for j in range(1, k + 1):\n            if j == 1 or i >= j:\n                ways[i] += ways[j]\n                \n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    \n    if n == 1 or k == 1:\n        return n\n    \n    # initialize dp array to store all possible combinations\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # fill dp array\n    dp[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0 for _ in range(n)] for _ in range(k)]\n    \n    for i in range(n):\n        for j in range(k):\n            if i == 0 or i == n-1:\n                ways[j][i] = 1\n            else:\n                ways[j][i] = ways[j][i-1] + ways[j][i+1]\n    \n    return ways[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n == 1:\n        return k\n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = k\n\n    for i in range(2, n+1):\n        for j in range(i):\n            if i <= k:\n                dp[i] += dp[j]\n\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize the count variable to 0\n    count = 0\n    # Initialize an array to store the frequency of each color\n    freq = [0] * k\n    # Iterate through the array from 0 to n\n    for i in range(n):\n        # Iterate through the array from i+1 to n and update the frequency of each color\n        for j in range(i+1, n+1):\n            # If both j and j+1 have the same color, increment the count\n            if freq[j%k] == freq[(j+1)%k]:\n                count += 1\n            # Update the frequency of the color for j+1\n            freq[(j+1)%k] += 1\n    # Return the count of the ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    no_of_ways = [0] * (k + 1)\n    no_of_ways[0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(min(i, k)+1):\n            if i % 2 == 0 and j % 2 == 0:\n                no_of_ways[j] += no_of_ways[j-1]\n            elif i % 2 == 1 and j % 2 == 1:\n                no_of_ways[j] += no_of_ways[j-1]\n            else:\n                no_of_ways[j] += no_of_ways[j-1] * no_of_ways[j]\n                \n    return no_of_ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i] += dp[i-1]\n            else:\n                dp[i] += dp[i-1] * (dp[j-1] - dp[j-2])\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D matrix to store the number of ways of painting the fence\n    ways = [[0 for i in range(n+1)] for j in range(k+1)]\n\n    # Base case: if there are only 1 or 0 colors, then there is only one way to paint the fence\n    ways[1][1] = 1\n    ways[0][1] = 1\n    ways[1][0] = 1\n\n    # Fill the rest of the matrix recursively\n    for j in range(2, k+1):\n        for i in range(2, n+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1] - ways[i-1][j-1]\n\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int((n + m - 1) / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # Integer division to find quotient\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula\n    c = (w**2 + h**2)**0.5\n    s = math.sin(math.acos((w**2 + h**2 - c**2) / (2 * w * h)))\n    return 2 * c * s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = (w**2 + h**2)**0.5\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two parameters, w and h, which represent the lengths of the two sides of a right angled triangle.\n    It returns the third side of the triangle, which is the length of the shorter side of the triangle.\n    '''\n    # Calculate the length of the shorter side\n    if w > h:\n        shorter_side = w\n    else:\n        shorter_side = h\n        \n    # Return the third side of the triangle\n    return shorter_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_1 = math.sqrt(w**2 + h**2)\n    side_2 = math.sqrt(w**2 - h**2)\n    return side_1 + side_2"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    '''\n    # Calculate the length of the triangle base\n    base_length = math.sqrt(w ** 2 + h ** 2)\n    \n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt((w ** 2 + h ** 2) / 2)\n    \n    # Calculate the length of the other side\n    other_side = hypotenuse / math.sin(math.radians(60))\n    \n    # Return the length of the other side\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the length of the other side of the triangle\n    o = math.sqrt(s**2 - w**2)\n\n    # Return the third side of the triangle\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2) # side of the triangle\n    return math.sqrt(w**2 + (h/2)**2) # other side of the triangle"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first element in the list\n    max_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is greater than max_val\n        if listval[i] > max_val:\n            # Update max_val if necessary\n            max_val = listval[i]\n    # Return the max_val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if type(val) == int:\n            max_val = max(max_val, val)\n        elif type(val) == float:\n            max_val = max(max_val, val)\n        elif type(val) == complex:\n            max_val = max(max_val, abs(val))\n        elif type(val) == str:\n            max_val = max(max_val, len(val))\n        else:\n            print(\"Invalid input type\")\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize the sum of divisors to 0\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the given number is divisible by the current number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n\n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            if arr[i] > arr[left]:\n                left += 1\n            elif arr[i] < arr[right]:\n                right -= 1\n            else:\n                inv_count += right - left\n                right -= 1\n                left += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    # Sort the array in ascending order\n    arr.sort()\n    # Iterate over the sorted array\n    for i in range(1, n):\n        # Calculate the inversion count for each pair of elements\n        left = 0\n        right = i - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += right - left + 1\n                left += 1\n            else:\n                right -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize count of inversions to zero\n    count = 0\n\n    # Traverse the array and count inversions\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                count += (i - j)\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Count inversions in an array using merge sort.\n    \"\"\"\n    # base case: empty array or array with one element\n    if len(arr) <= 1:\n        return 0\n    \n    # divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # count inversions in each half recursively\n    left_count = get_Inv_Count(left_half)\n    right_count = get_Inv_Count(right_half)\n    \n    # merge the two halves\n    i, j, k = 0, 0, 0\n    inv_count = left_count + right_count\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n            inv_count += i\n        k += 1\n    \n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n        \n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n\n    # Counting inversions using divide and conquer approach\n    def merge_sort(arr, l, r):\n        if l < r:\n            mid = (l + r) // 2\n            merge_sort(arr, l, mid)\n            merge_sort(arr, mid + 1, r)\n            merge(arr, l, mid, r)\n\n    def merge(arr, l, mid, r):\n        i = l\n        j = mid + 1\n        k = l\n\n        while i <= mid and j <= r:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= r:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n\n    merge_sort(arr, 0, n - 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in non-descending order\n    arr.sort()\n\n    # Initialize the count to 0\n    count = 0\n\n    # Traverse the array and count the inversions\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            # Check if the current element is smaller than the next element\n            if arr[j] > arr[j+1]:\n                count += len(arr) - j - 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n            elif arr[j] > arr[i]:\n                inv_count += j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Finding the largest element in the array\n    largest = max(arr)\n    # Counting the inversions using merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    inversions = 0\n    for i in range(largest, -1, -1):\n        count = 0\n        for j in range(n):\n            if arr[j] > i:\n                count += 1\n        inversions += count\n\n    return inversions"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    # Loop through the list and append each element recursively\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_dict = defaultdict(int)\n    for tup in stdata:\n        num, price = tup\n        max_dict[num] += price\n        if max_dict[num] > max_sum:\n            max_sum = max_dict[num]\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n    # Iterate through the list of tuples and update the maximum aggregate for each item\n    for item, price in stdata:\n        max_agg[item] = max(max_agg[item], price)\n    # Return the maximum aggregate for each item\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the minimum aggregate values\n    agg_min = defaultdict(int)\n\n    # Loop through the list of tuples\n    for tup in stdata:\n        # Update the minimum aggregate values for each transaction\n        agg_min[tup[1]] = max(agg_min[tup[1]], tup[2])\n\n    # Initialize the maximum aggregate value to the minimum value of the first transaction\n    max_agg = agg_min[0]\n\n    # Loop through the second and subsequent transactions\n    for i in range(1, len(stdata)):\n        # Update the maximum aggregate value if the current transaction has a higher aggregate value\n        max_agg = max(max_agg, agg_min[stdata[i][1]])\n\n    # Return the maximum aggregate value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate count for each customer\n    aggregate_counts = defaultdict(int)\n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Extract the customer ID and the order value\n        customer_id, order_value = tup\n        # Increment the aggregate count for the customer ID\n        aggregate_counts[customer_id] += 1\n    # Initialize the maximum aggregate count\n    max_count = 0\n    # Iterate through the customer ID counts dictionary\n    for count in aggregate_counts.values():\n        # Update the maximum aggregate count if the count is greater\n        if count > max_count:\n            max_count = count\n    # Return the maximum aggregate count\n    return max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for item in stdata:\n        agg[item[1]] += item[0]\n    return max(agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the list of tuples to a defaultdict object\n    stdata_dict = defaultdict(int)\n    for item in stdata:\n        stdata_dict[item[0]] += item[1]\n\n    # Find the maximum aggregate from the defaultdict object\n    max_agg = max(stdata_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each product\n    counts = defaultdict(int)\n\n    # Loop through each tuple in the list of tuples\n    for product, price in stdata:\n        # Increment the count of the product in the dictionary\n        counts[product] += 1\n\n    # Calculate the maximum aggregate by looping through the dictionary and finding the maximum count\n    max_count = max(counts.values())\n\n    # Calculate the maximum aggregate by multiplying the product price by the maximum count\n    max_aggregate = max_count * price\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    max_agg = 0\n    customer_agg = defaultdict(int)\n\n    for customer, amount, date in stdata:\n        customer_agg[customer] += 1\n        agg = amount * customer_agg[customer]\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for item in stdata:\n        item_id, item_price = item\n        aggregate_dict[item_id] += item_price\n    max_aggregate = max(aggregate_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for sid, amount in stdata:\n        if amount > max_agg[sid]:\n            max_agg[sid] = amount\n    return max(max_agg.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if i == i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^i^"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        for j in range(2**n): \n            if bin(i).count('1') == bin(j).count('1') and i^j == (1<<n) - 1: \n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = sum([int(digit) for digit in bin(i)[2:]])\n        if sum1 == 0:\n            sum2 = 0\n        else:\n            sum2 = sum([int(digit) for digit in bin((2**n - i - 1)[::-1])[2:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        sum_first = int(binary_seq[:n])\n        sum_last = int(binary_seq[-n:])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # check if the first n bits are equal to the last n bits\n        if bin(i)[2:n+2] == bin(i)[-n-2:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = i >> 1\n        last = (i << 1) - 1\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        seq1 = seq[0:n//2]\n        seq2 = seq[n//2:]\n        if sum(int(x) for x in seq1) == sum(int(x) for x in seq2):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    # Create a list to store the count of binary sequences\n    count = []\n\n    # Iterate from 2^n to 2^(n+1)-1\n    for i in range(2**n, 2**(n+1)-1): \n        # Extract the first n bits and the last n bits from the binary number\n        first_n = i & ((1 << n) - 1)\n        last_n = i >> n\n\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if (first_n & ((1 << n) - 1)) == (last_n & ((1 << n) - 1)): \n            # If yes, then add the count of the binary sequence to the list\n            count.append(i)\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = i // (2**n-1)\n        last = (i % (2**n-1)) + (2**n-1)\n        if sum(bin(first).split('b')[1:]) == sum(bin(last).split('b')[1:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def binary_seq(n, sum_to):\n        '''\n        This function generates all binary sequences of length n such that their sum is equal to sum_to.\n        '''\n        binary_seq = [0] * (2**n)\n        for i in range(2**n):\n            binary_seq[i] = 1\n        for i in range(2**n):\n            if sum(binary_seq[i]) == sum_to:\n                yield binary_seq[i]\n\n    count = 0\n    for i in range(2**n):\n        for seq in binary_seq(2*n, sum(i) - sum(i//2)):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], (list, tuple)):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = dict_depth(d[key])\n        if isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth = dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter to 0\n    depth = 0\n    # loop through the dictionary until the base case is reached\n    while d:\n        # increment depth counter\n        depth += 1\n        # update d to the value of its parent dictionary\n        d = d.get('parent', {})\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # initialize depth to 0\n    depth = 0\n    # loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # if the value is a dictionary, recursively call the function on that dictionary\n        if isinstance(value, dict):\n            sub_depth = dict_depth(value)\n            # update the depth with the maximum of the current depth and the sub-depth\n            depth = max(depth, sub_depth + 1)\n        # if the value is a list, recursively call the function on each element in the list\n        elif isinstance(value, list):\n            for item in value:\n                sub_depth = dict_depth(item)\n                depth = max(depth, sub_depth + 1)\n        # if the value is not a dictionary or a list, increment the depth by 1\n        else:\n            depth += 1\n    # return the final depth\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    n = len(arr)\n    result = []\n\n    # Apply rotations to each element of the array\n    for i in range(n) :\n        # Calculate the rotation index\n        rot_index = (i + rotations[i] - index) % n\n        # Calculate the element after rotation\n        result.append(arr[(rot_index + n - ranges[i]) % n])\n\n    # Return the element at the given index after rotations\n    return result[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array of integers and a list of ranges and rotations, find the element at a given index after the given number of rotations.\n\n    Parameters:\n    - arr: an array of integers\n    - ranges: a list of ranges, where each range is a list of two integers and represents the lower and upper bounds of the range\n    - rotations: an integer representing the number of rotations to apply\n    - index: an integer representing the index at which we want to find the element\n\n    Returns:\n    - The element at the given index after the given number of rotations\n    \"\"\"\n\n    def rotate_left(arr, n):\n        return arr[n:] + arr[:n]\n\n    def rotate_right(arr, n):\n        return arr[n:] + arr[:n]\n\n    def find_in_range(arr, range):\n        lower, upper = range\n        return [x for x in arr if x >= lower and x <= upper]\n\n    # Apply the rotations to the array\n    arr = rotate_right(arr, rotations)\n    for range in ranges:\n        arr = find_in_range(arr, range)\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a list of rotations, and an index as input and returns\n    the element at the given index after applying the given rotations.\n    '''\n\n    # Initialize the variables\n    temp = arr[index]\n    count = 0\n\n    # Apply all the rotations and find the element at the given index\n    for rotation in rotations:\n        arr = [arr[i] for i in range(len(arr)) if (i + count) % rotation == 0]\n        count += rotation\n\n    # Check if the element was found at the end\n    if count == 0:\n        return arr[index]\n    else:\n        # If the element was not found, check if it was found at the start\n        for i in range(len(arr)):\n            if arr[i] == temp:\n                return arr[i]\n        # If the element was not found at the start, return None\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes in the array, range of values for each element, number of rotations required and the index of the element to be searched for.\n    It finds the element at the given index after the number of rotations.\n    '''\n    for i in range(rotations) : \n        for j in range(len(arr)) : \n            if arr[j] >= index : \n                arr[j] -= ranges[j]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the new index after rotations\n    new_index = index + rotations\n\n    # Check if the new index is within the given range\n    if new_index >= len(arr):\n        new_index = new_index % len(arr)\n\n    # Calculate the element at the new index\n    element = arr[new_index]\n\n    # Check if the element is present in the given range\n    if element in ranges:\n        return element\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after performing a given number of rotations.\n    The function takes in four arguments:\n        arr: List of integers representing the array.\n        ranges: List of tuples representing the ranges of the elements in the array.\n        rotations: Integer representing the number of rotations to perform.\n        index: Integer representing the index of the element to be found.\n    The function returns the element at the given index after performing the specified number of rotations.\n    '''\n\n    # Function to find the element at the given index after rotating the array\n    def rotate(arr, index, rotations, ranges):\n        n = len(arr)\n        i = index\n        while rotations > 0:\n            rotations -= 1\n            if i < 0:\n                i = n - 1\n            elif i >= n:\n                i = 0\n            arr[i], arr[index] = arr[index], arr[i]\n            index = i\n            if ranges[i] == 0:\n                return arr[index]\n            i += ranges[i]\n        return arr[index]\n\n    # Find the element at the given index after rotating the array\n    element = rotate(arr.copy(), index, rotations, ranges)\n\n    # Return the element at the given index after rotating the array\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Find the index of the element we need to find\n    target_index = (index + rotations) % len(arr)\n\n    # Check if the element is present at the given index\n    if target_index in ranges:\n        return arr[ranges.index(target_index)]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a set of ranges, a number of rotations and the index of the element to find.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index out of bounds\")\n\n    # Initialize the result variable\n    result = None\n\n    # Initialize the current index\n    current_index = index\n\n    # Perform the specified number of rotations\n    for _ in range(rotations):\n        # Check if the current index is valid\n        if current_index < 0 or current_index >= len(arr):\n            raise ValueError(\"Index out of bounds\")\n\n        # Find the element at the current index\n        current_element = arr[current_index]\n\n        # Perform the binary search for the element in the current range\n        left, right = ranges[current_element]\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == current_element:\n                result = mid\n                right = mid - 1\n            elif arr[mid] < current_element:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        # Update the current index\n        current_index = result\n\n    # Return the element at the final index\n    return arr[result]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after the specified number of rotations.\n    \n    Parameters:\n    arr (list): A list of integers representing the elements to be rotated.\n    ranges (list): A list of tuples representing the ranges of integers to be rotated. Each tuple contains two integers, the starting and ending index of the range to be rotated.\n    rotations (int): The number of rotations to be performed.\n    index (int): The index of the element to be found.\n    \n    Returns:\n    int: The element at the specified index after rotations.\n    '''\n\n    # initialize variables\n    current_index = 0\n    current_range = ranges[0]\n    \n    # loop through the rotations and find the element at the given index\n    for i in range(rotations):\n        # get the starting and ending index of the range to be rotated\n        start = current_range[0]\n        end = current_range[1]\n        \n        # rotate the range by 1 index\n        if current_index >= end:\n            current_index = current_index - (end - start)\n        else:\n            current_index = current_index - (end - current_index)\n        \n        # update the current range\n        current_range = ranges[i + 1]\n    \n    # return the element at the specified index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array, a list of valid ranges, a list of rotations and an index,\n    this function will find the element at the given index after the given number of rotations.\n\n    Args:\n        arr (list): The array to be rotated.\n        ranges (list): A list of valid ranges.\n        rotations (list): A list of rotations.\n        index (int): The index at which the element is to be found.\n\n    Returns:\n        int: The element at the given index after the given number of rotations.\n    \"\"\"\n\n    # Initialize the current element\n    current_element = arr[index]\n\n    # Loop through each range and rotation\n    for range_index, rotation in zip(ranges, rotations):\n        # Calculate the new index after the rotation\n        new_index = (index + range_index + rotation) % len(arr)\n\n        # If the new index is in the range, return the current element\n        if new_index in range(len(arr)):\n            return current_element\n\n        # If the new index is not in the range, update the current element and continue\n        current_element = arr[new_index]\n\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to match words starting with letter 'p'\n    pattern = r'^p'\n\n    # Use re.findall() function to get all the words starting with letter 'p'\n    matches = re.findall(pattern, words)\n\n    # If there are two matches, return them as a tuple\n    if len(matches) == 2:\n        return (matches[0], matches[1])\n    else:\n        return \"No two words starting with letter 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'^p[a-zA-Z]+', words)\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b[Pp]\\w+\\b'\n    result = re.findall(pattern,''.join(words))\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find all the words starting with 'p'\n    p_words = [word for word in words if word[0] == 'p']\n    \n    # Check if there are at least two 'p' words\n    if len(p_words) < 2:\n        return None\n    \n    # Return two words from the list starting with 'p'\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Match all words that start with 'p'\n    pattern = re.compile(r'^p\\w+')\n\n    # Find all matches in the list of words\n    matches = pattern.findall(words)\n\n    # Return the two matches\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression to match words starting with 'p'\n    pattern = r'^p'\n    # use the regular expression to filter the list of words\n    filtered_words = list(filter(lambda x: re.match(pattern, x), words))\n    # return the first two words of the filtered list\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w*$'\n    for word in words:\n        match = re.match(pattern, word)\n        if match:\n            return (word, match.group())\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]+')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize an empty list to store the maximum sum of increasing subsequence\n    max_so_far = []\n    # Initialize a variable to store the current maximum sum of increasing subsequence ending at index i\n    current_max = 0\n    # Iterate through the array from index 0 to k-1\n    for i in range(0, k):\n        # If the current element is greater than the kth element, subtract the current element from the current maximum sum\n        if a[i] > a[k-1]:\n            current_max -= a[i]\n        # Add the current element to the current maximum sum\n        else:\n            current_max += a[i]\n    # Append the current maximum sum to the maximum sum of increasing subsequence\n    max_so_far.append(current_max)\n    # Iterate through the array from index k to n-1\n    for i in range(k, n):\n        # If the current element is greater than the kth element, subtract the current element from the current maximum sum and add the current element to the max sum of increasing subsequence\n        if a[i] > a[k-1]:\n            current_max -= a[i-k]\n            current_max += a[i]\n        # Add the current element to the current maximum sum\n        else:\n            current_max += a[i]\n        # If the current maximum sum is greater than the maximum sum of increasing subsequence so far, update the maximum sum of increasing subsequence\n        if current_max > max_so_far[-1]:\n            max_so_far.append(current_max)\n    # Return the maximum sum of increasing subsequence\n    return max(max_so_far)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize sum with first element\n    sum_curr = a[index]\n    max_sum = sum_curr\n\n    # Initialize prefix sum\n    prefix_sum = 0\n\n    # Initialize i to 1\n    i = 1\n\n    # Traverse the array\n    while i < n:\n        # If the current element is less than or equal to k, then it is part of the increasing subsequence\n        if a[i] <= k:\n            # Calculate sum of increasing subsequence till i\n            sum_i = a[i] + prefix_sum\n            # Update the prefix sum\n            prefix_sum = sum_i\n            # Update the maximum sum if the sum is greater than current maximum sum\n            if sum_i > max_sum:\n                max_sum = sum_i\n        else:\n            # If the current element is greater than k, then it is part of the decreasing subsequence\n            # Update the prefix sum\n            prefix_sum = prefix_sum - a[i - 1]\n        # Increment i\n        i += 1\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    prefix_sum = [0] * (n + 1)\n\n    # Traverse through the array and update the prefix sum\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Initialize a set to store the indices of the increasing subsequence\n    in_set = set()\n\n    # Traverse through the array again and calculate the maximum sum of increasing subsequence\n    for i in range(index, n + 1):\n        # If the element is greater than the kth element, update the current sum\n        if i == k:\n            current_sum = prefix_sum[k]\n\n        # If the element is not greater than the kth element, add its value to the current sum\n        else:\n            current_sum += a[i - 1]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and add the index of the element to the increasing subsequence set\n        if current_sum > max_sum:\n            max_sum = current_sum\n            in_set = {i - 1}\n\n        # If the current sum is equal to the maximum sum, add the index of the element to the increasing subsequence set\n        elif current_sum == max_sum:\n            in_set.add(i - 1)\n\n    # If the maximum sum of increasing subsequence is zero, return an empty list\n    if max_sum == 0:\n        return []\n\n    # Return the indices of the increasing subsequence\n    else:\n        return sorted(list(in_set))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        raise ValueError(\"k must be greater than or equal to index\")\n    if index == 0:\n        return a[index]\n    max_so_far = a[index]\n    for i in range(index):\n        if a[i] <= a[index]:\n            current_sum = a[i] + max_sum_increasing_subseq(a, n, i, k)\n            if current_sum > max_so_far:\n                max_so_far = current_sum\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Create a list to store the sum of increasing subsequences\n    sum_list = []\n\n    # Initialize the maximum sum to be 0\n    max_sum = 0\n\n    # Initialize the current sum to be 0\n    current_sum = 0\n\n    # Iterate over all prefixes up to index\n    for i in range(index):\n        # Check if the current prefix has a lower sum\n        if sum_list[i] > current_sum + a[i]:\n            # Update the current sum\n            current_sum = sum_list[i]\n        else:\n            # Update the current sum\n            current_sum += a[i]\n\n    # Check if the prefix up to the kth element has a lower sum\n    if sum_list[index-1] > current_sum + a[index]:\n        # Update the current sum\n        current_sum = sum_list[index-1]\n\n    # Add the prefix up to the kth element to the sum_list\n    sum_list.append(current_sum + a[index])\n\n    # Iterate over all prefixes from k+1 to n-1\n    for i in range(k+1, n):\n        # Check if the current prefix has a lower sum\n        if sum_list[i-1] > current_sum + a[i]:\n            # Update the current sum\n            current_sum = sum_list[i-1]\n        else:\n            # Update the current sum\n            current_sum += a[i]\n\n        # Add the current sum to the sum_list\n        sum_list.append(current_sum)\n\n    # Find the maximum sum of increasing subsequence\n    for i in range(len(sum_list)-1):\n        if i == 0 or sum_list[i] > max_sum:\n            max_sum = sum_list[i]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if a[index] > a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = dp[index]\n    \n    for i in range(index+1, n):\n        if a[i] > a[index] and k >= i:\n            dp[i] = max(a[index] + dp[i], dp[i-1])\n            max_sum = max(max_sum, dp[i])\n        else:\n            dp[i] = dp[i-1]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * (k+1) for _ in range(n+1)] # initialize the dp table\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(a[i-1] + dp[i-1][j-1], dp[i-1][j])\n\n    max_sum = dp[n][k]\n    max_index = k # index of the maximum sum\n\n    while index > 0 and k < n:\n        if dp[index-1][k] == dp[index-1][k-1]:\n            k += 1 # move to the next element in the increasing subsequence\n        elif dp[index-1][k] > dp[index-1][k-1]:\n            k -= 1\n        else:\n            index -= 1 # move to the previous element in the increasing subsequence\n        if k > max_index:\n            max_sum = dp[index-1][k]\n            max_index = k\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the length of increasing subsequences till the ith index\n    length = [1] * n\n    \n    # Initialize the maximum sum of increasing subsequence to 0\n    max_sum = 0\n    \n    # Traverse through the array starting from index 1\n    for i in range(1, index):\n        \n        # If the value of a[i] is greater than the value of a[i-1], update the length of the increasing subsequence\n        if a[i] > a[i-1]:\n            length[i] = length[i-1] + 1\n        \n        # If the value of a[i] is less than or equal to the value of a[i-1], update the length of the increasing subsequence\n        else:\n            # Initialize a variable to store the length of the increasing subsequence from prefix until i-2\n            temp = 1\n            \n            # Traverse through the array starting from index i-1\n            for j in range(i-1, -1, -1):\n                # If the value of a[j] is greater than the value of a[i-1], update the length of the increasing subsequence\n                if a[j] > a[i-1]:\n                    length[i] = temp\n                    break\n                # If the value of a[j] is less than or equal to the value of a[i-1], increment the variable\n                else:\n                    temp += 1\n            \n            # If the length of the increasing subsequence till the i-th index is greater than the maximum sum of increasing subsequence, update the maximum sum of increasing subsequence\n            if length[i] > max_sum:\n                max_sum = length[i]\n    \n    # Initialize a variable to store the length of the increasing subsequence from prefix until kth index\n    temp = 1\n    \n    # Traverse through the array starting from index k\n    for i in range(k, n):\n        # If the value of a[i] is greater than the value of a[k], update the length of the increasing subsequence\n        if a[i] > a[k]:\n            temp = 1\n        # If the value of a[i] is less than or equal to the value of a[k], increment the variable\n        else:\n            temp += 1\n        \n        # If the length of the increasing subsequence till the kth index is greater than the maximum sum of increasing subsequence, update the maximum sum of increasing subsequence\n        if temp > max_sum:\n            max_sum = temp\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a 2D array to store the maximum sum of increasing subsequence till i and also including the kth element\n    max_sum = [[0] * (n + 1) for i in range(index + 1)]\n    \n    # Initialize the maximum sum of increasing subsequence till i and also including the kth element as negative infinity\n    for i in range(n + 1):\n        max_sum[0][i] = float('-inf')\n    \n    # Initialize the maximum sum of increasing subsequence till i as 0 for all other values of i\n    for i in range(1, index + 1):\n        max_sum[i][0] = 0\n    \n    # Fill the maximum sum of increasing subsequence array using dynamic programming\n    for i in range(1, index + 1):\n        for j in range(1, n + 1):\n            if a[j - 1] <= a[j]:\n                max_sum[i][j] = max(max_sum[i - 1][j], max_sum[i][j - 1]) + a[j - 1]\n            else:\n                max_sum[i][j] = max_sum[i - 1][j]\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including the kth element\n    return max_sum[index][k]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is valid\n    if isinstance(tuplex, tuple) and len(tuplex) == m:\n        # Create a copy of the input\n        tuplex = deepcopy(tuplex)\n        # Get a colon of the tuple\n        colon = (tuplex[i:i+n] for i in range(0, len(tuplex), n))\n        # Return the colon\n        return colon\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Return a tuple representing the colon of the input tuple.\n\n    Parameters:\n    tuplex -- a tuple of length m\n    m -- the length of the input tuple\n    n -- the number of rows in the output colon\n\n    Returns:\n    colon -- a tuple of length n, where each element is a tuple of length m, such that each element i of colon corresponds to the i-th element of tuplex\n    \"\"\"\n    # create a copy of the input tuple\n    colon = deepcopy(tuplex)\n\n    # iterate over each row in the colon\n    for i in range(m):\n        # iterate over each element in the row\n        for j in range(n):\n            # set the element at position (i, j) in the colon to the corresponding element in the input tuple\n            colon[j][i] = tuplex[i]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Iterate over the rows of the tuple\n    for i in range(len(new_tuplex)):\n        # Iterate over the columns of the row\n        for j in range(m):\n            # Check if the current position is within the tuple\n            if i * m + j < len(tuplex):\n                # Set the value of the current position to the value of the tuple\n                new_tuplex[i][j] = tuplex[i * m + j]\n\n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    - tuplex: a tuple\n    - m: the number of rows\n    - n: the number of columns\n\n    Returns:\n    - a colon of the tuple, represented as a list\n\n    '''\n    # create a new list to store the colon\n    colon = []\n\n    # loop through the rows\n    for i in range(m):\n        # loop through the columns\n        for j in range(n):\n            # append the value of the current tuple element to the colon list\n            colon.append(tuplex[i][j])\n\n    # return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    t_new = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(t_new)\n    # Check if the length is greater than the m value\n    if length > m:\n        # Calculate the number of elements in the colon\n        colon_length = m\n        # Check if the m value is greater than the length of the tuple\n        if m > length:\n            # Calculate the number of elements in the colon\n            colon_length = length\n        # Get the indices of the first and last elements of the colon\n        start = n\n        end = n + colon_length - 1\n        # Check if the start index is greater than or equal to the length of the tuple\n        if start >= length:\n            # Set the start index to 0\n            start = 0\n        # Check if the end index is greater than or equal to the length of the tuple\n        if end >= length:\n            # Set the end index to the length of the tuple minus 1\n            end = length - 1\n        # Get the elements of the colon\n        colon = t_new[start:end+1]\n        # Check if the colon is not empty\n        if colon:\n            # Return the colon\n            return colon\n        else:\n            # Return an empty list if the colon is empty\n            return []\n    else:\n        # Return an empty list if the length of the tuple is less than the m value\n        return []"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # if m is greater than n, swap m and n\n    if m>n:\n        m,n=n,m\n        \n    # create a copy of the tuple\n    new_tuplex=deepcopy(tuplex)\n    \n    # split the tuple into two parts using m as the index\n    left_part=new_tuplex[:m]\n    right_part=new_tuplex[m:]\n    \n    # create a new tuple with left_part and colon and right_part\n    new_tuplex=left_part+(n-m)*(':')+right_part\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i][j])\n        col.append(tuple(row))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        Tuple to get the colon from.\n    m : int\n        First row of the colon.\n    n : int\n        Last row of the colon.\n\n    Returns:\n    --------\n    colon : tuple\n        Colon of the tuple.\n    \"\"\"\n    # Make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of columns in the tuple\n    num_cols = len(tuplex[0])\n\n    # Get the number of rows in the tuple\n    num_rows = len(tuplex)\n\n    # Check if the range is valid\n    if m < 0 or m >= num_rows or n < 0 or n >= num_rows:\n        raise ValueError(\"Invalid range.\")\n\n    # Check if the range is valid for the number of rows\n    if n - m + 1 > num_rows:\n        raise ValueError(\"Invalid range.\")\n\n    # Check if the range is valid for the number of columns\n    if n - m + 1 > num_cols:\n        raise ValueError(\"Invalid range.\")\n\n    # Get the rows for the colon\n    colon_rows = new_tuplex[m:n+1]\n\n    # Get the colon\n    colon = tuple(colon_rows[i][j] for i in range(num_cols) for j in range(n-m+1))\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and returns a colon of the tuple,\n    with m columns and n rows. If the length of the input tuple is less than m*n,\n    the function returns the original tuple unchanged.\n    '''\n    if len(tuplex) < m*n:\n        return tuplex\n    \n    # Create a copy of the tuple and transpose it\n    colon = tuple(tuplex[:m*n])\n    colon = zip(*[iter(colon)]*n)\n    colon = list(colon)\n    colon = [tuple(row) for row in colon]\n    colon = colon[0:n]\n    \n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deepcopy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Take the rightmost m elements of the tuple\n    right_m_elements = new_tuplex[-m:]\n    # Remove the rightmost m elements of the tuple\n    new_tuplex = new_tuplex[:-m]\n    # Add the colon of the rightmost m elements to the tuple\n    new_tuplex.extend(right_m_elements)\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the largest factor in each list\n    max_factor1 = max(nums1)\n    max_factor2 = max(nums2)\n\n    # find the largest product of a factor from each list\n    product1 = max_factor1\n    product2 = max_factor2\n    for i in range(max_factor1, max_factor1 * N + 1, max_factor1):\n        product1 *= i\n\n    for i in range(max_factor2, max_factor2 * N + 1, max_factor2):\n        product2 *= i\n\n    # find the largest product of all factors\n    max_product = product1 * product2\n\n    # return the largest product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the largest products\n    largest_products = []\n\n    # Loop through all possible combinations of the two input lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the current combination\n            product = nums1[i] * nums2[j]\n\n            # Check if this product is the largest so far\n            if len(largest_products) < N or product > largest_products[-1]:\n                # If the product is the largest so far, add it to the list\n                largest_products.append(product)\n\n    # Sort the list in descending order and return the first N largest products\n    largest_products.sort(reverse=True)\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return 0\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_product = 0\n    for i in range(N):\n        largest_product = max(largest_product, nums1[i] * nums2[i])\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the maximum value in the two lists\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # create two lists to store the products of each list with the maximum value\n    prod1 = [0] * (max1+1)\n    prod2 = [0] * (max2+1)\n\n    # populate the prod1 and prod2 lists with the product of each list with the maximum value\n    for i in range(1, max1+1):\n        for j in range(1, max2+1):\n            prod1[i] = max(prod1[i], prod1[i-1] + nums1[i-1])\n            prod2[j] = max(prod2[j], prod2[j-1] + nums2[j-1])\n\n    # find the K largest products using binary search\n    K = 2*N\n    result = []\n    lo, hi = 1, max(max1, max2)\n    while len(result) < K:\n        mid = (lo+hi)//2\n        if prod1[mid] >= mid and prod2[mid] >= mid:\n            result.append(prod1[mid])\n            result.append(prod2[mid])\n            lo = mid+1\n        elif prod1[mid] >= mid:\n            hi = mid\n        else:\n            lo = mid\n\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Calculate the maximum value of nums1 and nums2\n    max_value = max(max(nums1), max(nums2))\n    \n    # Initialize the maximum products array with 0s\n    max_products = [0] * N\n    \n    # Iterate through the list of numbers and multiply them to form the products of each factor\n    for i in range(N):\n        for j in range(N):\n            max_products[i] += nums1[j] * nums2[i]\n    \n    # Find the index of the maximum product and store it in the max_product_index variable\n    max_product_index = max_products.index(max(max_products))\n    \n    # Return the maximum product and the index of the factor that generated it\n    return max_products[max_product_index], max_product_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(len(nums1)):\n        max_products.append(max(nums1[i] * nums2[i], nums1[i] * nums2[N - 1 - i], nums2[i] * nums1[N - 1 - i]))\n    return max_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i], nums2[i]))\n    return max(max_products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products found\n    largest1 = 0\n    largest2 = 0\n\n    # Loop through the first N elements of each list\n    for i in range(N):\n        # Find the maximum product of the first list and the second list that includes the i-th element of the first list\n        temp1 = nums1[i] * nums2[i]\n\n        # Find the maximum product of the second list and the first list that includes the i-th element of the second list\n        temp2 = nums2[i] * nums1[i]\n\n        # Update the largest products found if the current product is larger\n        largest1 = max(largest1, temp1)\n        largest2 = max(largest2, temp2)\n\n    # Return the largest products found\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Initialize two pointers for selecting the largest products\n    i, j = 0, 0\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Loop N times to find the specified number of largest products\n    for _ in range(N):\n        # Calculate the product of the current two factors\n        current_product = nums1[i] * nums2[j]\n\n        # Check if the current product is larger than any existing products\n        if len(largest_products) == 0 or current_product > largest_products[-1]:\n            # If it is, append the current product to the list of largest products\n            largest_products.append(current_product)\n\n        # Move the pointers to the next largest products\n        if nums1[i] == largest_products[-1]:\n            i += 1\n        if nums2[j] == largest_products[-1]:\n            j += 1\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(5,10)) # Output: 10\nprint(maximum(10,5)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes in two numbers and returns the maximum of them.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as inputs and returns the maximum of them.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst1 = list(str1)\n    # Convert the list of characters to a tuple of characters\n    tup1 = tuple(lst1)\n    # Return the tuple of characters\n    return tup1"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    t = tuple(lst)\n    return t"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given binary number.\n    \"\"\"\n\n    # Convert binary number to integer\n    n = int(n, 2)\n\n    # Iterate through each bit in the binary number\n    for i in range(31, -1, -1):\n        # If the bit is 0, set the left most unset bit to 1 and break out of the loop\n        if n & (1 << i) == 0:\n            n |= (1 << i)\n            break\n\n    # Convert the integer back to binary\n    return format(n, '032b')"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the leftmost unset bit\n    while n & 1 == 0:\n        n >>= 1\n    \n    # Set the leftmost unset bit\n    n |= 1\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the unset bits from the right of the binary representation of n\n    unset_bits = 0\n    # Loop through the binary representation of n from the right to the left\n    for i in range(31, -1, -1):\n        if (n & (1 << i)) == 0:\n            unset_bits |= 1 << i\n            n &= ~(1 << i)\n    # Return the unset bits\n    return unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a binary number n.\n\n    Args:\n        n (int): a binary number\n\n    Returns:\n        int: the binary number with the left most unset bit set to 1\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit as 1\n    unset_bit = 1\n    # Iterate over all bits in the binary representation of n\n    while n & unset_bit == 0:\n        unset_bit <<= 1\n    # Set the leftmost unset bit\n    n |= unset_bit\n    # Return the modified value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    # Get the binary representation of n\n    binary = bin(n)[2:]\n\n    # Find the left most unset bit\n    index = binary.find('1')\n\n    # If no unset bits are found, return the original n\n    if index == -1:\n        return n\n\n    # Set the left most unset bit to 1\n    binary = binary[:index] + '1' + binary[index+1:]\n\n    # Convert the binary string to decimal\n    new_n = int(binary, 2)\n\n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the rightmost bit to 1 (since it will be the left most unset bit)\n    rightmost_bit = 1\n\n    # Loop through the bits of n from right to left\n    while rightmost_bit & n:\n        # Set the rightmost bit to 0 to unset it\n        rightmost_bit &= rightmost_bit - 1\n\n    # Set the leftmost bit to 1 to set it\n    n |= rightmost_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # check if n is even\n        n = n >> 1 # shift to the right by 1 bit\n    n = n | 1 # set the leftmost bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index variable to 0\n    index = 0\n    # Initialize the mask variable to 1\n    mask = 1\n    # Initialize the count variable to 0\n    count = 0\n    # While the mask is greater than 1\n    while mask > 1:\n        # Check if the least significant bit of n is 1\n        if (n & mask) == mask:\n            # If it is, increment the count and reset the mask\n            count += 1\n            mask = mask ^ mask\n        # If the least significant bit of n is 0, reset the mask\n        else:\n            mask = mask ^ mask\n    # Set the leftmost unset bit to 1\n    n |= mask\n    # Shift the bits to the left by count\n    n <<= count\n    # Return the modified value of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the counter variable\n    count = 0\n    \n    # Iterate through all the bits of the binary representation of n\n    while n:\n        # Increment the counter if the current bit is 1\n        if n & 1:\n            count += 1\n        \n        # Shift the binary representation of n to the left\n        n = n >> 1\n    \n    # Set the left most unset bit to 1\n    n = 1 << count\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius of the cone and its height as input and returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, r and h, which represent the radius and height of a cone.\n    The function returns the volume of the cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius r and height h,\n    and returns the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2 + h**2) / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 1\n    while highestPower <= n:\n        highestPower *= 2\n    return highestPower - 1\n\nprint(highest_Power_of_2(5))"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, return it\n        if i == 2**i:\n            return i\n    # If no power of 2 is found, return -1\n    return -1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while 2**power < n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 and its value\n    highest = 0\n    value = 1\n\n    # Loop through the values from 2 to n\n    while value <= n:\n        # Check if the value is greater than the current highest power of 2\n        if value > highest:\n            # If it is, update the highest power of 2 and its value\n            highest = value\n\n        # Increase the value by 2\n        value *= 2\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the variable to store the highest power of 2\n    highest_power = 1\n\n    # Loop through the integers from 1 to n and find the highest power of 2 that is less than or equal to n\n    for i in range(1, n+1):\n        if i == 1:\n            # If the current number is 1, it is already a power of 2, so it is the highest power of 2\n            highest_power = i\n        elif i == 2:\n            # If the current number is 2, it is also the highest power of 2\n            highest_power = i\n        elif i % 2 == 0:\n            # If the current number is even, it is a power of 2, so update the highest power of 2\n            highest_power = i\n        else:\n            # If the current number is odd, it is not a power of 2, so do nothing\n            pass\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n >= 1:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** ((n-1).bit_length())"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n == 1:\n        return 1\n\n    # Find the highest power of 2 less than or equal to n\n    highest_power = 0\n    while n > 0:\n        highest_power += 1\n        n >>= 1\n\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function finds the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th Lucas number is {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = 2\n        for i in range(2, n+1):\n            lucas = lucas + lucas\n        return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    :param args: One or more lists to convert.\n    :return: A nested dictionary with the lists as keys and their elements as values.\n    \"\"\"\n\n    # Use a list comprehension to iterate over each list and zip it with itself\n    # to create a list of tuples, where the first element of each tuple is\n    # the list itself and the second element is the index of the list in the\n    # original arguments.\n    tuples = [(arg, i) for i, arg in enumerate(args)]\n\n    # Use a dictionary comprehension to create a dictionary with the\n    # keys being the lists and the values being the elements of the lists.\n    result = {key: val for key, val in tuples}\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): The first list to convert.\n        l2 (list): The second list to convert.\n        l3 (list): The third list to convert.\n\n    Returns:\n        dict: A nested dictionary containing the converted lists.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        temp = {}\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                temp[f'list1_{i + 1}_list2_{j + 1}_list3_{k + 1}'] = l1[i] + l2[j] + l3[k]\n        result[f'list1_{i + 1}'] = temp\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize the nested dictionary\n    data = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Assign the i-th list to the corresponding key in the nested dictionary\n        data[i] = {\n            'list1': l1[i],\n            'list2': l2[i],\n            'list3': l3[i]\n        }\n\n    # Return the nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert multiple lists to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for l in args:\n        for i, item in enumerate(l):\n            if i not in nested_dict:\n                nested_dict[i] = []\n            nested_dict[i].append(item)\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = []\n    for i in range(len(l1)):\n        dict_item = {}\n        dict_item[l1[i]] = l2[i]\n        dict_item[l3[i]] = l3[i]\n        dict_list.append(dict_item)\n    return dict_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the final dictionary\n    final_dict = {}\n    \n    # Iterate through each list and add each key-value pair to the final dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2[i])):\n            final_dict[l1[i]][l2[i][j]] = l3[i][j]\n    \n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            if isinstance(item, list):\n                sub_result = {}\n                for sub_item in item:\n                    sub_result[sub_item] = i\n                result[item[0]] = sub_result\n            else:\n                result[item] = i\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Combine the lists\n    combined_list = l1 + l2 + l3\n    \n    # Create an empty dictionary\n    final_dict = {}\n    \n    # Iterate through the combined list and append the values to the dictionary\n    for item in combined_list:\n        # Split the item into key-value pairs\n        key, value = item.split(':')\n        # Add the key-value pair to the dictionary\n        final_dict[key] = value\n    \n    # Return the final dictionary\n    return final_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/4) + n\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 26\n    elif n == 5:\n        return 43\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    # calculate the sum of the first n/2 numbers\n    first_half_sum = n * (n+1) // 2\n    \n    # calculate the sum of the first n/3 numbers\n    third_half_sum = first_half_sum * (n-1) // 3\n    \n    # calculate the sum of the first n/4 numbers\n    fourth_half_sum = third_half_sum * (n-1) // 4\n    \n    # calculate the sum of the first n/5 numbers\n    fifth_half_sum = fourth_half_sum * (n-1) // 5\n    \n    # find the maximum sum among the given sums\n    max_sum = max(first_half_sum, third_half_sum, fourth_half_sum, fifth_half_sum, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(i):\n        if i == 1:\n            return n\n        elif i % 2 == 0:\n            return n - helper(i // 2)\n        else:\n            return n + helper(i // 2)\n\n    return max(helper(i) for i in range(1, n+1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 31\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 21\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 20\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n\n    return f(n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n    return input_list[input_list.index(max(input_list))]\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum and minimum length\n    max_length = 0\n    min_length = float('inf')\n\n    # Iterate through the list and update the minimum and maximum length\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n        elif length < min_length:\n            min_length = length\n\n    # Initialize a new list to store the maximum and minimum length list\n    result_list = []\n\n    # Iterate through the list again and add the maximum and minimum length to the new list\n    for item in input_list:\n        length = len(item)\n        if length == max_length:\n            result_list.append(item)\n        elif length == min_length:\n            result_list.append(item)\n\n    # Return the new list\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum and minimum lengths\n    max_length = 0\n    min_length = float('inf')\n    # Loop through the input list and update the maximum and minimum lengths\n    for length in input_list:\n        if length > max_length:\n            max_length = length\n        if length < min_length:\n            min_length = length\n    # Return the list with the maximum length\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the tuple to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the set is empty (i.e. no duplicates)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set\n    unique_tup = set(test_tup)\n    # check if the set is empty\n    if not unique_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # converting the tuple to a set to remove duplicates\n    set_test_tup = set(test_tup)\n    # checking if the length of the set is equal to the length of the original tuple\n    if len(set_test_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the character has a frequency of 1, return it as the first non-repeating character\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over the dictionary and find the first character with a frequency of 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate over each character in the string again\n    for char in str1:\n        # If the character is not in the dictionary or its count is 1, return the character\n        if char not in char_count or char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize two dictionaries to store the frequency of each character in the string\n    char_freq = {}\n    non_repeating_char = ''\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is already in the dictionary, if not, add it with a frequency of 1\n        if char not in char_freq:\n            char_freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            char_freq[char] += 1\n\n        # If the frequency of the character is 1, set it as the non-repeating character\n        if char_freq[char] == 1:\n            non_repeating_char = char\n\n    # Return the non-repeating character if it exists, otherwise return an empty string\n    return non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeating character by iterating through the dictionary\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character in the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the string again to find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return match"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not re.match(regex, string):\n        return False\n    elif re.search(regex, string):\n        return True\n    else:\n        return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.search(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the length of the numbers list\n    n = len(numbers)\n\n    # Determine if the numbers are even or odd\n    if n % 2 == 0:\n        # If they are even, find the average of the middle two numbers\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        # If they are odd, find the middle number\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = None\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted numbers is even, take the average of the two middle numbers\n        mid = len(sorted_numbers) // 2\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        # If the length of the sorted numbers is odd, take the middle number\n        mid = len(sorted_numbers) // 2\n        median = sorted_numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the list of numbers\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Getting the indices of the two middle numbers\n    mid1 = len(numbers) // 2\n    mid2 = len(numbers) // 2 + 1\n\n    # Calculating the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid1] + numbers[mid2]) / 2\n    else:\n        median = numbers[mid1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1])/2\n    else:\n        median = numbers[len(numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    a_b = a + b\n    c_b = c + b\n    a_c = a + c\n\n    median_a = (a_b + a_c) / 2\n    median_b = (a_b + a_c) / 2\n\n    if median_a < median_b:\n        median = median_a\n    else:\n        median = median_b\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers by sorting them and finding the middle number.\n    \"\"\"\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Determine the median index\n    n = len(nums)\n    if n % 2 == 0:  # Even number of numbers\n        median_index = n // 2\n    else:  # Odd number of numbers\n        median_index = n // 2 + 1\n\n    # Return the median number\n    return nums[median_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    if a < b < c:\n        return (a + b) / 2\n    elif b < a < c:\n        return (b + c) / 2\n    else:\n        return (a + c) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])\n\n    # Determine the length of the array\n    length = len(a)\n\n    # Calculate the middle index\n    middle = length // 2\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If it's even, return the average of the two middle numbers\n        return (a[middle - 1] + a[middle]) / 2\n    else:\n        # If it's odd, return the middle number\n        return a[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # if the numbers have an even number of elements, take the average of the middle two\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # if the numbers have an odd number of elements, take the middle element\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted list\n    mid = len(sorted_numbers) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[mid]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[mid-1] + sorted_numbers[mid]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        # convert the number to a string and then sum its digits\n        digit_sum = sum(int(digit) for digit in str(num))\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the sum of digits of the number\n        digit_sum = sum(int(d) for d in str(num))\n        # Add the sum of digits to a running total\n        total_sum += digit_sum\n    # Return the total sum of digit sums\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum += sum(digits)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits\n    total = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual characters\n        digits = [int(d) for d in str(num)]\n        # compute the sum of digits using a list comprehension\n        total.append(sum(digits))\n    # return the list of total sums\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize the result tuple with all False values\n    result_tup = tuple(False for i in range(len(test_tup1)))\n    \n    # Perform the bitwise xor operation on each element of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = (test_tup1[i] ^ test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bin(x ^ y)[2:].zfill(8) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each element in the first tuple\n    for num1 in test_tup1:\n        # Initialize a variable to store the bitwise xor of the current element with all the elements of the second tuple\n        xor_sum = 0\n        # Iterate through each element in the second tuple\n        for num2 in test_tup2:\n            # Perform the bitwise xor operation between num1 and num2 and add the result to xor_sum\n            xor_sum = xor_sum ^ num1 ^ num2\n        # Append the bitwise xor result of the current element and all the elements in the second tuple to the result list\n        result.append(xor_sum)\n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same number of elements as the first tuple\n    result_tup = (0,) * len(test_tup1)\n\n    # Iterate over the elements of the first tuple and the second tuple\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the current element of the first tuple and the\n        # corresponding element of the second tuple and store the result in the result tuple\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple as the output of the function\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = tuple(0 for i in range(len(test_tup1)))\n    \n    # Perform the bitwise xor operation on each element of the tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n    \n    # Iterate through the list and add each unique tuple to the dictionary\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    \n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        key = tuple(item)\n        if key not in freq_dict:\n            freq_dict[key] = 1\n        else:\n            freq_dict[key] += 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    # Initialize empty dictionary\n    freq_dict = {}\n    \n    # Iterate over the list\n    for item in test_list:\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the tuple is already in the dictionary, increment the count by 1\n        else:\n            freq_dict[item] += 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    unique_tuples = []\n    for key, value in freq_dict.items():\n        unique_tuples.extend([key] * value)\n    \n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        for subitem in item:\n            unique_tuples.add((subitem,))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        temp_list = []\n        for j in range(len(test_tup1[i])):\n            temp_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result_list.append(tuple(temp_list))\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result_list = []\n    \n    # iterate over each tuple in the list\n    for tup in [test_tup1, test_tup2]:\n        # initialize an empty list to store the current tuple element's result\n        current_result = []\n        \n        # iterate over each element in the tuple\n        for i in range(len(tup)):\n            # add the corresponding elements of the two tuples\n            current_result.append(tup[i] + tup[i])\n        \n        # add the current tuple element's result to the result list\n        result_list.append(current_result)\n    \n    # return the result list containing the tuple elements summed up\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples do not have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] += test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        # Get the elements of both tuples and append the sum to the result list\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the two tuples should be same.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the two input tuples and add the corresponding elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create empty nested tuple to store result\n    result = []\n    # Iterate over each element of the first nested tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store result of each index-wise addition\n        index_sum = []\n        # Iterate over each element of the second nested tuple\n        for j in range(len(test_tup2[0])):\n            # Add the element of the first nested tuple at the index i and the element of the second nested tuple at the index j\n            index_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        # Append the list of index-wise additions to the result nested tuple\n        result.append(index_sum)\n    # Return the final result\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n\n    Args:\n    tuplex (tuple): The tuple to search within.\n    tuple1 (tuple): The tuple to search for.\n\n    Returns:\n    bool: True if the element exists within the tuple, False otherwise.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Check if the element is in the tuple\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The number\", x, \"is even.\")\n    else:\n        print(\"The number\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x //= 2\n    return parity % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    if x % 2 == 0:\n        print(x, \"is an even number\")\n    else:\n        print(x, \"is an odd number\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of this number is even.\"\n    else:\n        return \"The parity of this number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: # checking if x is even\n        print(\"The parity of\", x, \"is even.\")\n    else: # x is odd\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or odd\n    if x % 2 == 0: \n        # number is even \n        return \"Even\"\n    else: \n        # number is odd \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = (x & 1) == 0 # bitwise AND operator to find if x is even or odd\n    if parity:\n        print(x, \"is an odd number.\")\n    else:\n        print(x, \"is an even number.\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # convert the string to a list of digits\n    digits = [int(digit) for digit in num]\n    # reverse the digits\n    digits.reverse()\n    # initialize a variable to store the next bigger number\n    next_bigger = 0\n    # loop through the digits\n    for digit in digits:\n        # multiply the digit by 10 raised to the power of its position in the list\n        next_bigger += digit * (10 ** digits.index(digit))\n    # add 1 to the next bigger number to get the next bigger number\n    return next_bigger + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Initialize the result string\n    result = \"\"\n\n    # Loop through the digits of the number\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the next bigger digit\n        next_bigger = digit_int + 1\n\n        # Check if the next bigger digit is greater than 9\n        if next_bigger > 9:\n            # Subtract 9 from the next bigger digit\n            next_bigger -= 9\n\n        # Convert the next bigger digit to a string and add it to the result string\n        result += str(next_bigger)\n\n    # Convert the result string to an integer\n    result = int(result)\n\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the integer to a list of digits\n    digits = list(str(n))\n    # sort the list of digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    # concatenate the sorted digits to form the next bigger number\n    next_bigger = ''.join(sorted_digits)\n    # convert the next bigger number to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    sorted_digits = sorted(digits, reverse=True)\n    bigger_number = int(''.join(sorted_digits))\n    return bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Remove any leading zeroes\n    n = str(n).lstrip('0')\n\n    # Initialize variables for the next bigger number and the carry\n    next_bigger = 0\n    carry = 0\n\n    # Loop through the digits of the original number\n    for digit in n:\n        # Calculate the sum of the digit and the carry\n        digit_sum = int(digit) + carry\n\n        # If the sum is greater than 9, add 1 to the digit and subtract 10 from the carry\n        if digit_sum > 9:\n            digit_sum -= 10\n            carry = 1\n        else:\n            carry = 0\n\n        # Add the digit to the next bigger number\n        next_bigger += digit_sum\n\n    # If there was a carry left over, add it to the next bigger number\n    if carry:\n        next_bigger += carry\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_length = len(n_str)\n    new_str = \"\"\n    for i in range(n_length):\n        if i == 0:\n            new_str += \"9\"\n        elif n_str[i] == \"9\":\n            new_str += \"0\"\n        elif n_str[i] == \"0\":\n            new_str += \"9\"\n        else:\n            new_str += str(int(n_str[i]) + 1)\n    new_num = int(new_str)\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    def num_to_str(num):\n        return str(num)\n\n    def str_to_num(str_num):\n        return int(str_num)\n\n    def rearrange_digits(num):\n        str_num = num_to_str(num)\n        num_list = [int(d) for d in str_num]\n        num_list.sort(reverse=True)\n        new_str_num = \"\".join(str(d) for d in num_list)\n        return str_to_num(new_str_num)\n\n    result = rearrange_digits(n)\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n    \n    # create a list of all possible combinations of digits\n    combinations = []\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)+1):\n            combinations.append([digits[i], digits[j]])\n    \n    # sort the combinations by the length of each combination\n    combinations.sort(key=lambda x: len(x))\n    \n    # find the smallest combination that has the biggest digit\n    for combination in combinations:\n        if combination[0] < combination[1] > digits[-1]:\n            return int(''.join(map(str, combination)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    max_digit = max(digits)\n    if max_digit == 0:\n        return '1'\n    for digit in digits:\n        if int(digit) == max_digit:\n            digits.remove(digit)\n            digits.append(str(max_digit + 1))\n            break\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    n_str = str(n)\n    # Reverse the string\n    n_str = n_str[::-1]\n    # Convert the reversed string back to an integer\n    n_bigger = int(n_str)\n    # Return the next bigger integer\n    return n_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # convert the input arrays to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # sort the input arrays\n    nums1_sorted = sorted(nums1)\n    nums2_sorted = sorted(nums2)\n\n    # initialize a list to store the pairs\n    pairs = []\n\n    # initialize the heap with the smallest elements from both arrays\n    heapq.heappush(pairs, (nums1_sorted[0], nums2_sorted[0]))\n\n    # iterate through the remaining elements in the arrays\n    for i in range(1, len(nums1_sorted)):\n        # pop the smallest pair from the heap\n        pair = heapq.heappop(pairs)\n\n        # check if adding the next element to the pair gives a pair that satisfies the condition\n        if i < k and nums1_sorted[i] + pair[1] in nums2_sorted and nums1_sorted[i] + pair[1] not in pair:\n            # add the pair to the heap\n            heapq.heappush(pairs, (nums1_sorted[i], nums2_sorted[i] + pair[1]))\n\n    # return the top k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a list of tuples containing (value, index) for each element in nums1\n    num1_indices = [(nums1[i], i) for i in range(len(nums1))]\n\n    # Use heapq to find the k smallest pairs\n    heapq.heapify(num1_indices)\n    heapq.heapify(nums2)\n    result = []\n    count = 0\n\n    while k > 0 and count < k:\n        # Find the pair with the smallest value in nums2\n        if not heapq.heappop(nums2):\n            continue\n\n        # Find the pair with the smallest value in num1_indices\n        if not heapq.heappop(num1_indices):\n            continue\n\n        # Combine the two pairs and add it to the result list\n        result.append((heapq.heappop(num1_indices)[0], heapq.heappop(nums2)))\n        count += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to sets to get unique elements\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Create a min heap to store pairs of elements\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (min(num1, num2), (num1, num2)))\n            # Check if we have found k pairs\n            if len(heap) == k:\n                break\n    \n    # Extract the pairs and convert them back to tuples\n    pairs = [heapq.heappop(heap)[1] for _ in range(k)]\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # initialize min_heap and result list\n    min_heap = []\n    result = []\n\n    # iterate over both arrays and push the elements into min_heap\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # check if the size of the heap is greater than k\n            if len(min_heap) > k:\n                # pop the smallest element from the heap and add it to the result list\n                heapq.heappop(min_heap)\n\n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap of size k to store the smallest k elements\n    min_heap = []\n    # Initialize two pointers for iterating through the arrays\n    i = 0\n    j = 0\n\n    # Loop until we have found k elements\n    while len(min_heap) < k:\n        # If the current element of nums1 is smaller than the current element of nums2, add it to the min heap and move to the next element of nums1\n        if len(min_heap) == 0 or nums1[i] < min_heap[0][0]:\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            j += 1\n        # If the current element of nums2 is smaller than the current element of the min heap, add it to the min heap and move to the next element of nums2\n        else:\n            heapq.heappush(min_heap, (min_heap[0][0], nums2[j]))\n            i += 1\n\n    # Create a result list to store the k smallest pairs\n    result = []\n    # Pop the smallest elements from the min heap and add them to the result list\n    while len(min_heap) > 0:\n        result.append((min_heap[0][0], min_heap[0][1]))\n        heapq.heappop(min_heap)\n\n    # Return the k smallest pairs\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Initialize a min heap of size k with the current number\n        heapq.heapify(min_heap, [num1])\n        # Iterate through the second array\n        for num2 in nums2:\n            # If the size of the min heap is less than k, add the pair to the heap and check if it's already the kth smallest\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, [num1, num2])\n                if len(min_heap) == k:\n                    # If it's the kth smallest pair, return it\n                    return min_heap\n            # If the size of the min heap is k, remove the smallest element from the heap and add the next smallest element\n            else:\n                min_num1, min_num2 = heapq.heappop(min_heap)\n                heapq.heappush(min_heap, [min_num1, num2])\n                if len(min_heap) == k:\n                    # If it's the kth smallest pair, return it\n                    return min_heap\n    # If the function reaches this point, there are not enough k smallest pairs\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, 1))\n    \n    count = 0\n    while count < k:\n        if not heap:\n            break\n        num, freq = heapq.heappop(heap)\n        for i, num2 in enumerate(nums2):\n            if freq > 0:\n                heapq.heappush(heap, (num2, freq - 1))\n                count += 1\n                if count == k:\n                    return heap\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    \n    # Create a min heap to store pairs with smaller elements first\n    heap = []\n    \n    # Create a dictionary to store the frequency of each element in the second array\n    freq = {}\n    \n    for num in nums2:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Sort the elements in the second array based on their frequency\n    sorted_nums = sorted(freq.keys(), key=lambda x: (-freq[x], x))\n    \n    # Iterate through the first array and add pairs of elements from the second array\n    for num1 in nums1:\n        # If the heap is full, remove the pair with the smallest element in the second array\n        if len(heap) == k:\n            pair = heapq.heappop(heap)\n            if pair[1]!= sorted_nums[0]:\n                heapq.heappush(heap, pair)\n        \n        # If there are still elements in the heap, compare the frequency of the current element with the frequency of the smallest element in the second array\n        if len(heap) > 0:\n            pair = (num1, sorted_nums[0])\n            if freq[pair[1]] > 0:\n                freq[pair[1]] -= 1\n                heapq.heappush(heap, pair)\n    \n    # Convert the heap to a list of pairs\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a list of tuples containing pairs of elements from nums1 and nums2\n    pairs = [(x, y) for x in nums1 for y in nums2]\n\n    # Sort the list of tuples by the first element of each tuple in ascending order\n    pairs.sort(key=lambda x: x[0])\n\n    # Initialize a min heap of size k\n    min_heap = []\n\n    # Loop through the sorted list of tuples\n    for i in range(k):\n        # If the minimum element in the heap is greater than the current first element in the current pair,\n        # add the current pair to the min heap\n        if not min_heap or min_heap[0][0] > pairs[i][0]:\n            heapq.heappush(min_heap, pairs[i])\n        else:\n            # If the minimum element in the heap is less than the current first element in the current pair,\n            # remove the smallest element from the heap and add the current pair to the heap\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, pairs[i])\n\n    # Initialize a list to store the k smallest pairs\n    result = []\n\n    # Loop through the min heap and add the pairs to the result list\n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize the priority queue\n    min_heap = []\n    # Iterate through both arrays and add elements to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add each element to the heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the size of the heap is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Initialize the result list\n    result = []\n    # Iterate through the heap and add the smallest pairs to the result list\n    while min_heap:\n        _, (num1, num2) = heapq.heappop(min_heap)\n        result.append((min(num1, num2), max(num1, num2)))\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of any two pairs of tuples in the list.\n    \"\"\"\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining elements of the list of tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuple elements and update the minimum product if it is smaller\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input, and returns the minimum product of any pair of tuples within the list.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the two tuples and compare it with the minimum product found so far\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Create a set to store unique tuples in the list\n    unique_tuples = set()\n    # Iterate over each tuple in the list\n    for tuple_ in list1:\n        # Check if the tuple already exists in the set\n        if tuple_ not in unique_tuples:\n            # If not, add it to the set\n            unique_tuples.add(tuple_)\n    # Create an empty dictionary to store the minimum product for each unique tuple\n    min_product_dict = {}\n    # Iterate over the unique tuples in the set\n    for tuple_ in unique_tuples:\n        # Initialize the minimum product to be infinity\n        min_product = float('inf')\n        # Iterate over each pair of tuples in the list\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                # Check if the pair of tuples forms a product that is less than the current minimum product\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    # If it is, update the minimum product\n                    min_product = product\n        # Add the minimum product to the dictionary with the corresponding tuple\n        min_product_dict[tuple_] = min_product\n    # Find the minimum value in the dictionary and return it as the minimum product\n    return min(min_product_dict.values())"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Sort the list of tuples\n    list1.sort()\n\n    # Initialize the minimum product\n    min_product = float('inf')\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the first element and the element after the current index\n        product = list1[i][0] * list1[i+1][1]\n\n        # Update the minimum product if the product is smaller\n        if product < min_product:\n            min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def tuple_product(t):\n        return t[0] * t[1]\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = tuple_product(list1[i]) * tuple_product(list1[j])\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables for minimum product and list of tuples\n    min_product = float('inf')\n    min_pair = []\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it is less than the current minimum product\n            if list1[i][0]*list1[j][1] < min_product:\n                min_product = list1[i][0]*list1[j][1]\n                min_pair = [list1[i], list1[j]]\n\n    # Return the minimum product and list of tuples\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to be the maximum possible integer\n    min_product = 2147483647\n    # loop through all pairs of tuples in the given list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the i-th and j-th tuples\n            product = list1[i][0] * list1[j][1]\n            # check if the product is smaller than the current minimum product\n            if product < min_product:\n                # update the minimum product\n                min_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # create a set of unique values in the list\n    unique_vals = set(listval)\n\n    # find the minimum value in the set\n    min_val = min(unique_vals)\n\n    # convert the minimum value back to its original data type\n    min_val_type = type(min_val)\n    min_val = min_val_type(min_val)\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \n    Parameters:\n    listval (list): a list of heterogeneous values\n    \n    Returns:\n    float: the minimum value in the list\n    \"\"\"\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # loop over the rest of the list\n    for val in listval[1:]:\n        # check if the value is smaller than the current minimum\n        if val < min_val:\n            # if it is, update the minimum value\n            min_val = val\n    \n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_num = float('inf')\n    for item in listval:\n        if type(item) == int or type(item) == float:\n            if item < min_num:\n                min_num = item\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')  # initialize minimum value to infinity\n    for num in listval:\n        if type(num) in [int, float]:\n            if num < min_val:\n                min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize variables to store the minimum value and its index\n    min_val = listval[0]\n    min_idx = 0\n\n    # iterate over the list and update the minimum value and its index\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_idx = i\n\n    # return the minimum value and its index\n    return min_val, min_idx"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, len(listval)):\n\n        # Check if the current element is smaller than the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # assume the first value is the minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val: # if the next value is smaller than the current minimum\n            min_val = listval[i] # update the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n    # Split the word into words using underscore as the delimiter\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word and join them together\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into a list of words\n    words = word.split('_')\n    # Convert the first letter of each word to lowercase and append it to the camel case string\n    camel_case = words[0].lower()\n    # Iterate through the list of words and append each word to the camel case string except the first word\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Define a regular expression pattern for matching snake case words\n    pattern = r'(?<!_)([a-z])'\n    # Split the input string into words using the pattern\n    words = re.findall(pattern, word)\n    # Convert the list of words to camel case\n    camel_case = ''.join([word.capitalize() for word in words])\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual parts based on underscore\n    parts = re.findall(r'(?<=[a-z0-9])_(?=[a-z0-9])', word)\n    \n    # Capitalize the first letter of each part and join them with underscores\n    camel_word = ''.join([part.capitalize() for part in parts])\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all characters in the snake case string to uppercase\n    word = word.upper()\n    # Split the string into words by underscores\n    words = word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Join the words with camel case\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them with an underscore\n    camel_case = ''.join([word.capitalize() for word in words])\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_case = ''.join([w.capitalize() for w in words])\n    # Return the camel case word\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to regular expression pattern\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    # Replace underscores with spaces and convert to camel case\n    camel_case = pattern.sub(r'\\1', word).title()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function takes a snake_case string as input and returns a camelCase string.\n    \"\"\"\n    # Split the word into a list of words\n    word_list = re.findall(r'\\b[a-z]+\\b', word)\n\n    # Convert each word to camelCase\n    camel_case_word = ''.join([word.capitalize() for word in word_list])\n\n    # Return the camelCase string\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all odd numbers from it.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize an empty list to store the nth element\n    extracted_elements = []\n\n    # iterate over the list of tuples and extract the nth element\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            extracted_elements.append(tup[1])\n\n    # return the extracted elements\n    return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"Error: Index out of range.\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if list is empty\n    if not list1:\n        return None\n    \n    # Find the length of the list\n    length = len(list1)\n    \n    # Check if nth element is valid\n    if n > length:\n        return None\n    \n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for value in list1:  \n        if value in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if there is any overlap between them.\n    If there is no overlap, the function returns False.\n    \"\"\"\n    # create a dictionary to store the count of each value in list2\n    count_dict = {}\n    for item in list2:\n        count_dict[item] = count_dict.get(item, 0) + 1\n        \n    # iterate through list1 and check for overlaps\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] -= 1\n        else:\n            # if an item is not in count_dict, it means it is not in list2\n            return False\n        \n    # if all items are checked, there is no overlap\n    return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Convert the lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there are any common elements between the two sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # iterate over each element in the first list\n    for i in list1:\n        # check if the element exists in the second list\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the given array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize two variables to keep track of the maximum product and the pair with that product\n    max_product = arr[0] * arr[1]\n    pair_product = arr[0] * arr[1]\n\n    # Iterate through the sorted array and calculate the pair with highest product\n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i-1]\n        if current_product > max_product:\n            max_product = current_product\n            pair_product = arr[i-1] * arr[i]\n\n    # Return the pair with highest product\n    return pair_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    This function takes a list of integers as input and returns a tuple containing the pair with the highest product.\n    If there are multiple pairs with the same highest product, the function returns the pair with the smallest index.\n    If there are no pairs with the highest product, the function returns None.\n    '''\n    \n    # initialize variables to store the highest and second highest products\n    highest = float('-inf')\n    second_highest = float('-inf')\n    \n    # loop through the list of integers and update the highest and second highest products as needed\n    for i in range(len(arr)):\n        if arr[i] > highest:\n            second_highest = highest\n            highest = arr[i]\n        elif arr[i] > second_highest:\n            second_highest = arr[i]\n    \n    # if there are no pairs with the highest product, return None\n    if highest == float('-inf'):\n        return None\n    \n    # return the pair with the highest product\n    else:\n        return (highest, second_highest)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_val = arr[0]\n    min_val = arr[0]\n    \n    max_pair = arr[0]\n    min_pair = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_pair = (max_val, min_val)\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            min_pair = (min_val, max_val)\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    # Initialize variables\n    max_product = arr[0]\n    max_product_pair = (arr[0], arr[1])\n\n    # Loop through the array\n    for i in range(2, len(arr)):\n        # Update the max product if current element multiplied with previous max product is greater\n        if arr[i] * max_product < max_product:\n            max_product = arr[i]\n            max_product_pair = (max_product, arr[i])\n        # Update the max product if current element multiplied with previous max product is equal to previous max product\n        elif arr[i] * max_product == max_product:\n            max_product = max(max_product, arr[i])\n            max_product_pair = (max_product, arr[i])\n\n    # Return the pair with highest product\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables\n    max_product = -float('inf')\n    max_pair = (-1, -1)\n\n    # Loop through the array and find the maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    # Return the maximum product pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    if max1 * max2 > min1 * min2:\n        print(\"The pair with highest product is\", (max1, max2))\n    else:\n        print(\"The pair with highest product is\", (min1, min2))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0]\n    max_pair = (arr[0], arr[0])\n    min_product = arr[0]\n    min_pair = (arr[0], arr[0])\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair = (arr[i], arr[i])\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_pair = (arr[i], arr[i])\n        else:\n            temp = arr[i]\n            arr[i] = max(max_pair[0], min_pair[0])\n            arr[i] = min(max_pair[1], min_pair[1])\n            arr[i] = temp\n            \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return \"The given array should have at least two elements.\"\n\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = [arr[i], arr[j]]\n                elif product == max_product:\n                    max_pair.append(arr[j])\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product < min_product:\n                    min_product = product\n                    min_pair = [arr[i], arr[j]]\n                elif product == min_product:\n                    min_pair.append(arr[j])\n\n    return max_pair + min_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    Common = None\n    for x in Input:\n        for y in Input:\n            if x[0] == y[0] and x!= y:\n                if Common is None:\n                    Common = [x[0], x[1], y[1]]\n                else:\n                    Common.append(y[1])\n    return Common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_first = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if j!= i:\n                first_element = Input[i][0]\n                if first_element in common_first:\n                    common_first.append((first_element, Input[i], Input[j]))\n                elif first_element not in common_first:\n                    common_first.append(first_element)\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif common_first_element!= tup[0]:\n            return common_first_element\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append((Input[i][0], len(Input[i]), len(Input[j])))\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tuple_ in Input:\n        if len(set(tuple_)) > 1:\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    count = 0\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n            count = 1\n        elif tup[0] == common_element:\n            count += 1\n        elif count > 0:\n            break\n    if count == len(Input):\n        return common_element\n    else:\n        return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples where the first element of each tuple is the common first element in the list.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(set(Input[i]) & set(Input[j])) > 0:\n                common_elements.append((Input[i], Input[j]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for i in Input:\n        if i[0] not in first_element:\n            first_element.append(i[0])\n    return first_element\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary with the common first elements as keys and the count of the number of tuples with that element as value.\n    '''\n    common_first = {}\n    for i in Input:\n        if i[0] in common_first:\n            common_first[i[0]] += 1\n        else:\n            common_first[i[0]] = 1\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Finding the maximum length of the list\n    max_length = max(len(i) for i in lst)\n\n    # Using list comprehension to find the element of maximum length\n    for i in lst:\n        if len(i) == max_length:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for item in lst:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_element = item\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_element = elem\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list1)\n    rounded_list = [round(num) for num in list1]\n    result = total_sum * len(list1)\n    print(result)\n    print(rounded_list)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n        print(rounded_number)\n\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num_rounded = round(num)\n        total_sum += num_rounded\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round each number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Print the total sum multiplied by the length of the list\n    print(sum(list1) * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    total_sum_multiplied_by_length = total_sum * len(list1)\n    print(total_sum_multiplied_by_length)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of the first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to keep track of the cube sum\n    cube_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of each even natural number\n        cube = i ** 3\n        # Add the cube to the cube sum\n        cube_sum += cube\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    cube_sum = sum(i**3 for i in even_numbers)\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i*i*i\n    return result"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    i = 0\n\n    while i < n:\n        sum += i**3\n        i += 2\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing the variable to store the cube sum of even natural numbers\n    cube_sum = 0\n\n    # looping through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # finding the cube of the even natural number\n        cube = i**3\n        # adding the cube to the cube sum variable\n        cube_sum += cube\n\n    # returning the cube sum of even natural numbers\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenates each element of a tuple using the delimiter provided by the user.\n    \"\"\"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    result = []\n    for i in range(len(test_tup)):\n        result.append(str(test_tup[i]))\n        if i < len(test_tup) - 1:\n            result.append(delimiter)\n    return \"\".join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join([str(x) for x in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the given delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += delimiter + str(element)\n        delimiter = ', '\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    \n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    avg_of_cubes = sum_of_cubes / n\n    \n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        total += cube\n        count += 1\n    average = total / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(n):  \n        total += i*i*i  \n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i ** 3)\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_element = element[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_tuple:\n        if type(item) == str:\n            rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string_index in range(len(test_tuple)):\n        rear_index_elements.append(test_tuple[string_index][-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_list = []\n    for item in test_tuple:\n        rear_index_list.append(item[-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, string in enumerate(test_tuple):\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes two arguments: a list and an element x. It returns the count of sublists in the list \n    that contain the element x.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if list1[i:j].count(x) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'([0-9]{4})-([0-9]{2})-([0-9]{2})'\n    year = re.search(pattern, dt).group(1)\n    month = re.search(pattern, dt).group(2)\n    day = re.search(pattern, dt).group(3)\n    return f\"{day}-{month}-{year}\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define regular expression pattern to match the date format\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    \n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    \n    # if match is found, extract the groups and format the date\n    if match:\n        year = match.group('year')\n        month = match.group('month')\n        day = match.group('day')\n        formatted_dt = f\"{day}-{month}-{year}\"\n        return formatted_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching the date format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n\n    # Search for a match in the input string using the pattern\n    match = re.search(pattern, dt)\n\n    # If a match is found, convert the matched groups to the desired format\n    if match:\n        year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n        new_date = '{:02d}-{:02d}-{}'.format(day, month, year)\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # remove all non-digit characters from the date string\n    dt = re.sub(r'[^\\d]', '', dt)\n    # split the date string into year, month, and day components\n    year, month, day = map(int, dt.split('-'))\n    # reverse the order of the day and month components so that they are in the desired order\n    day, month = month, day\n    # convert the date components back to a string with dashes as separators\n    return f'{day}-{month}-{year}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n    result = pattern.sub(r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Find all the occurrences of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    \n    # Convert each matched date to dd-mm-yyyy format\n    for match in matches:\n        dt = dt.replace(match, match.replace('-', '.'))\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of the pattern in the date string\n    matches = re.findall(pattern, dt)\n\n    # If there is only one match, convert it to dd-mm-yyyy format and return it\n    if len(matches) == 1:\n        return f'{matches[0][2]}-{matches[0][1]}-{matches[0][0]}'\n\n    # If there are multiple matches, raise an exception\n    else:\n        raise ValueError('Date format not supported')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the re.sub() function to replace the format with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    year = dt.group(1)\n    month = dt.group(2)\n    day = dt.group(3)\n    return day + '-' + month + '-' + year"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Define the gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Iterate over the array using gap\n        for i in range(gap, n):\n            # Set a temporary variable to the current element\n            temp = my_list[i]\n            # Set the previous gap number to the current gap number\n            gap = i\n            # Move the gap one step closer to the center of the array\n            while gap > 0 and my_list[gap - gap] > temp:\n                my_list[gap] = my_list[gap - gap]\n                gap -= gap - gap\n            # Insert the temporary variable at the correct position\n            my_list[gap] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Sorts the given array using the Shell Sort algorithm.\n\n    The Shell Sort algorithm has a time complexity of O(n log n),\n    where n is the length of the array.\n    '''\n\n    # Find the largest gap (max(n/3, 1))\n    n = len(my_list)\n    gap = n // 3\n\n    # Keep iterating while the gap is greater than 1\n    while gap > 0:\n        # Insertion sort for gap elements\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n\n        # Decrease the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # create an empty list to store the result tuples\n    result_list = []\n    \n    # loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # extract the i-th element from both tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        \n        # apply the elementwise and operator to the elements\n        and_elem = tup1_elem & tup2_elem\n        \n        # append the result to the result list\n        result_list.append(and_elem)\n        \n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize a new list to store the result tuples\n    result_list = []\n    # Loop through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Append the element-wise and of the corresponding elements from the two input tuples to the result list\n        result_list.append(test_tup1[i] & test_tup2[i])\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # extract the elements from the two tuples\n    tup1_elements = [x for x in test_tup1]\n    tup2_elements = [x for x in test_tup2]\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the elements of the two tuples and perform elementwise and\n    for i in range(len(tup1_elements)):\n        result.append(tup1_elements[i] & tup2_elements[i])\n    # return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new tuple to hold the element-wise and tuples\n    new_tup = ()\n    \n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Get the corresponding elements from the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Calculate the element-wise and of the elements and store it in the new tuple\n        new_elem = elem1 & elem2\n        \n        # Add the new element to the new tuple\n        new_tup += (new_elem,)\n    \n    # Return the new tuple of element-wise and tuples\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples do not have the same length.\")\n        return\n\n    # Extract the elementwise and tuples\n    and_tup = tuple(elem1 & elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b > 0:\n            return 'No directrix'\n        else:\n            return 'The root of the quadratic equation is not real'\n    elif b == 0:\n        return 'The directrix is at y-intercept'\n    else:\n        x = (-c) / (2*a)\n        y = a * x**2 + b * x + c\n        return 'The directrix is at x ='+ str(x) +'and y ='+ str(y)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    else:\n        print(\"There are no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    root1 = (-b + determinant**(1/2))/(2*a)\n    root2 = (-b - determinant**(1/2))/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    else:\n        print(\"The parabola does not have a real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n    print('The directrix is:', x1, 'and', x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0: \n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else: \n        print(\"No real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # check if there are real solutions\n    if discriminant > 0:\n        # find the two real solutions to the quadratic equation\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # return the first root (the directrix)\n        return roots[0]\n    else:\n        # there is no unique directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0: \n        print(\"The parabola has no real roots.\")\n    elif discriminant == 0: \n        x1 = -b / (2*a)\n        print(\"The directrix is\", x1)\n    else: \n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix is\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola using its coefficients.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant == 0:\n        x1 = -b / (2*a)\n        x2 = -b / (2*a)\n    elif determinant > 0:\n        x1 = (-b + math.sqrt(determinant)) / (2*a)\n        x2 = (-b - math.sqrt(determinant)) / (2*a)\n    else:\n        print(\"The determinant is negative.\")\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    else:\n        return \"There is no real root\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create a set from list1 and list2 to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if any element in set1 is also in set2\n    for element in set1:\n        if element in set2:\n            return True\n\n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set to store the elements of list1\n    set1 = set(list1)\n    # loop through list2 and check if it exists in set1\n    for element in list2:\n        if element in set1:\n            return True\n    # if we make it this far, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if either list is empty\n    if not list1 or not list2:\n        return False\n    \n    # create a set of the first list\n    set1 = set(list1)\n    \n    # iterate over the second list and check if each element is in the set of the first list\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert the lists to sets to remove duplicates\n    list1_set = set(list1)\n    list2_set = set(list2)\n    \n    # Check if the intersection of the two sets is empty\n    if not list1_set.intersection(list2_set):\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is present in list2\n        if element in list2:\n            return True\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n    \n    # Calculate height of the trapezium\n    trapezium_height = math.sqrt(semi_perimeter * (semi_perimeter - base1) * (semi_perimeter - base2))\n    \n    # Calculate the area of the semi-trapezium\n    semi_area = semi_perimeter * trapezium_height\n    \n    # Calculate the difference between the area of the trapezium and the area of the semi-trapezium\n    difference = abs(area - semi_area)\n    \n    # Calculate the median length of the trapezium\n    median = difference / area\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the base and height\n    base = base1 + base2\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the shorter base\n    if base1 < base2:\n        shorter_base = base1\n    else:\n        shorter_base = base2\n\n    # Calculate the length of the longer base\n    if shorter_base == base1:\n        longer_base = base2\n    else:\n        longer_base = base1\n\n    # Calculate the area of the trapezium\n    trapezium_area = area * (longer_base / shorter_base)\n\n    # Calculate the lengths of the two trapezium sides\n    half_trapezium_area = trapezium_area / 2\n    base1_length = half_trapezium_area / area\n    base2_length = base1_length - half_trapezium_area\n\n    # Calculate the median length of the trapezium\n    if base1_length > base2_length:\n        median = base1_length\n    else:\n        median = base2_length\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the two halves of the trapezium\n    half1 = base1 + base2\n    half2 = height - (base1 + base2)\n    \n    # Sort the two halves in ascending order\n    sorted_half1 = sorted(half1)\n    sorted_half2 = sorted(half2)\n    \n    # Find the median of the two halves\n    median = (sorted_half1[len(sorted_half1)//2] + sorted_half2[len(sorted_half2)//2]) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Find the length of the shorter base\n    shorter_base = min(base1, base2)\n    # Find the length of the longer base\n    longer_base = max(base1, base2)\n    # Find the length of the trapezium base\n    trapezium_base = 0.5 * (shorter_base + longer_base)\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = area * (trapezium_base / longer_base)\n    # Calculate the length of the longer side of the trapezium\n    longer_side = area * (trapezium_base / shorter_base)\n    # Find the length of the trapezium\n    trapezium_length = max(shorter_side, longer_side)\n    # Find the length of the shorter diagonal of the trapezium\n    shorter_diagonal = shorter_side + (height / 2)\n    # Find the length of the longer diagonal of the trapezium\n    longer_diagonal = longer_side + (height / 2)\n    # Find the median length of the trapezium\n    median_length = (shorter_diagonal + longer_diagonal) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    trapezium = (base1 + base2) * height / 2\n    return trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the areas of the trapezium\n    area1 = base1 * height / 2\n    area2 = base2 * height / 2\n\n    # Calculate the median areas\n    median1 = area1 * 1.5\n    median2 = area2 * 1.5\n\n    # Calculate the median length of the trapezium\n    median = median1 + median2\n\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the lengths of the two halves\n    half_base1 = 0.5 * base1\n    half_base2 = 0.5 * base2\n\n    # Calculate the height of the trapezium\n    trapezium_height = height\n\n    # Calculate the length of the trapezium perimeter\n    trapezium_perimeter = half_base1 + half_base2 + trapezium_height\n\n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * trapezium_perimeter * trapezium_height\n\n    # Calculate the difference between the areas\n    difference_area = area1 - area2\n\n    # Calculate the median area of the trapezium\n    median_area = difference_area + area1 + area2\n\n    # Calculate the length of the median\n    median_length = 2 * half_base1 * trapezium_height\n\n    # Calculate the area of the median\n    median_area = median_area / 2\n\n    # Calculate the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1, base2: the lengths of the two sides of the trapezium.\n    height: the height of the trapezium.\n\n    Returns:\n    The median length of the trapezium.\n    '''\n\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * base1 + 0.5 * base2\n\n    # calculate the number of segments to divide the trapezium into\n    num_segments = int(trapezium_length / height)\n\n    # initialize the sum of the lengths of the segments\n    total_length = 0.0\n\n    # iterate over the segments and calculate the length of each segment\n    for i in range(num_segments):\n        segment_length = 0.5 * base1 + 0.5 * base2 + 0.5 * height\n        total_length += segment_length\n\n    # calculate the median length of the trapezium\n    median_length = total_length / num_segments\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the base of the trapezium\n    base_length = 0.5 * area\n\n    # Calculate the length of the top of the trapezium\n    top_length = 0.5 * (area - base1 * base2)\n\n    # Return the median of the base and top lengths\n    return max(base_length, top_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    perimeter = 0.5 * base1 + 0.5 * base2 + height\n\n    return max(0.5 * perimeter * 0.5, 0.5 * area * 0.5)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            print(\"The number is greater than the element.\")\n            return\n    print(\"The number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{number} is greater than {arr[i]} at index {i}\")\n            return True\n    print(f\"{number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than\", i)\n            break\n    else:\n        print(\"The number is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            print(\"The entered number is greater than the element(s) in the array.\")\n            return\n    print(\"The entered number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # iterate through the array and check if the number is greater than the current element\n    for i in arr:\n        if i > number:\n            return True\n    # if the number is not greater than any element, return False\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nmatches = text_match_one(text)\nprint(matches)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba(?=\\w{1,})\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.b*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return 'The string has an a followed by one or more b\\'s.'\n    else:\n        return 'The string does not have an a followed by one or more b\\'s.'"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n % 10 == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    str_num = str(n)\n    # Find the length of the string\n    length = len(str_num)\n    # Return the last character of the string\n    return str_num[length - 1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Take the last digit of a number as the result.\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing only the negative numbers in the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list with only the negative numbers.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = \"\"\n    for char in str1:\n        if char.isalnum() and ord(char) % 2!= 0:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    i = 0\n    while i < len(str1):\n        if str1[i] % 2 == 0:\n            str1.pop(i)\n        else:\n            i += 1\n    return ''.join(str1)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalnum(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    '''\n    This function takes a string as input and returns the string with all odd characters removed.\n    '''\n    new_string = ''\n    for char in string:\n        if ord(char) % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as an argument and returns a new string with all the odd characters removed.\n    \"\"\"\n    return ''.join([char for char in string if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and char.islower())])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            continue\n        str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isdigit() or char.isalpha())"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                if test_list[j] in test_list[i+1:]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n                break\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:] or (test_list[j], test_list[i]) in test_list[:i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]) or \\\n               (test_list[i][1] == test_list[j][0] and test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if type(num) == int and num < 10:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] * multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the list\n    total = 0\n    \n    # Iterate through the list of integers\n    for i in L:\n        # Add the integer to the sum\n        total += i\n    \n    # Return the sum as the single integer\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the single integer with the first element of the list\n    single_int = L[0]\n    # loop through the list\n    for i in range(1, len(L)):\n        # if the current element is a multiple of 5, add it to the single integer\n        if L[i] % 5 == 0:\n            single_int += L[i]\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each element in the list\n    for num in L:\n        # Check if the current element is a multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the result variable\n            result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression pattern for adverbs\n    pattern = r'\\b(really|really\\s+not|totally|definitely|absolutely|amazingly|just|rarely|very|extremely|actually|amazing|amazingly|amaze)[a-zA-Z]*\\b'\n    # search for all occurrences of adverbs in the text using the pattern\n    matches = re.findall(pattern, text)\n    # return a dictionary with adverb and positions as keys and values\n    return {adverb: text.find(adverb) for adverb in matches}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ing\\b', text.lower())\n\n    # loop through each adverb and print its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        print(f'{i+1}. {adverb} found at position {i+text.lower().find(adverb)+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a list of adverbs\n    adverbs = ['amazing', 'amazingly', 'awful', 'awfully', 'badly', 'better', 'bright', 'brilliantly', 'carefully', 'chilly', 'cold', 'comfortably', 'crazy', 'darkly', 'deeply', 'definitely', 'elegantly', 'entirely', 'equally', 'exceptionally', 'extraordinarily', 'fabulously', 'fantastically', 'fast', 'fearlessly', 'fine', 'forever', 'forgettable', 'frankly', 'friendly', 'funnily', 'furthest', 'funny', 'gloriously', 'gloriously', 'greatly', 'greedily', 'guilty', 'hilariously', 'hopefully', 'hugely', 'incredibly', 'innocently', 'interestingly', 'intensely', 'irritatingly', 'jealously', 'jolly', 'joyously', 'kindly', 'kissably', 'kneelingly', 'knowingly', 'laughably', 'laughingly', 'lightly', 'little', 'long', 'loudly', 'luckily', 'lucky','magically','maddeningly','maligned','merrily','miserably','most','mostly','mostly','mysteriously', 'nervously', 'no', 'not', 'notoriously', 'nowhere', 'obviously', 'oddly', 'ok', 'only', 'optimistically', 'overjoyed', 'overwhelmingly', 'passionately', 'peacefully', 'perfectly', 'periodically', 'pleasantly', 'poorly', 'powerfully', 'powerless', 'precious', 'probably', 'quickly', 'quietly', 'quietly', 'quite', 'rarely','really','reasonably','recklessly','remotely','repulsively','revelingly', 'rhythmically','sadly','scandalously','scared','seemingly','seriously','shockingly','silently','simply','slightly','smilingly','so','somehow','somewhat','sparingly','splendidly','spotlessly','steadily','stiff','stupidly','successfully','suspiciously','sweatily', 'tamely', 'terrifically', 'tightly', 'tightly', 'tiny', 'tiny', 'tiredly', 'toothsomely', 'top', 'touchingly', 'uncomfortably', 'uneventfully', 'unfairly', 'unfortunately', 'unpleasantly', 'unreasonably', 'unusually', 'up', 'upbeat', 'upset', 'utterly', 'vaguely', 'vigorously', 'victoriously', 'victoriously', 'vigorously', 'violently', 'wackily', 'warm', 'wasteful', 'weakly', 'weirdly', 'wickedly', 'widely', 'willingly', 'wisely', 'wittily', 'woefully', 'worriedly', 'worshipfully', 'worthily', 'worthwhile', 'worthy', 'wretchedly', 'wrongly', 'zany', 'zealously', 'zestfully', 'zippy', 'zealously', 'zigzag', 'zippy']\n    # create a list of positions for each adverb\n    positions = [i for i in range(len(text) - len(adverb)) if text[i:i+len(adverb)] == adverb]\n    # return a tuple of adverb and position\n    return adverb, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern to find adverbs\n    pattern = r'\\b(?:(?:to|and|but|for|if|nor|or|so|then|yet)\\s+(?:a|an|the)\\b|[a-z][a-z]*\\s+(?:a|an|the)\\b|\\b(?:of|under|against)\\b)'\n\n    # Use the re.finditer() function to search for matches in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Create an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate through the matches and extract the adverbs and their positions\n    for match in matches:\n        # Extract the matched text\n        matched_text = match.group(0)\n\n        # Check if the matched text is an adverb\n        if matched_text.startswith(('to', 'and', 'but', 'for', 'if', 'nor', 'or','so', 'then', 'yet')) or \\\n           (matched_text.lower() in ('of', 'under', 'against') and matched_text.islower()):\n            # Append the matched text and its position to the list of adverbs and their positions\n            adverbs.append((matched_text, match.start()))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a list to store the adverbs and their positions\n    adverbs = []\n    # Use regular expressions to find all adverbs in the sentence\n    matches = re.findall(r'\\b(\\w+)[.!?]\\b', text, re.IGNORECASE)\n    # Iterate through the matches and add them to the adverbs list\n    for match in matches:\n        if match[1] in ['very', 'good','really', 'well', 'enough','much','seriously', 'dramatically']:\n            # Add the adverb and its position to the list\n            adverbs.append((match[0], text.lower().index(match[0])))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(\\w*?)([.,!?])\\s*(adverb|adv)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern to match adverbs\n    pattern = r'\\b(?:adj|adv)\\b'\n    # Find all matches in the text\n    matches = re.finditer(pattern, text)\n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n    # Iterate over all matches and add the adverb and its position to the list\n    for match in matches:\n        adverb = match.group()\n        position = text.find(match.group())\n        adverbs.append((adverb, position))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a sentence as input and returns a list of tuples containing the first adverb and their positions.\n    The function uses regular expressions to search for the adverbs.\n    \"\"\"\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b([a-z]+)est\\b'\n    \n    # Search for adverbs in the sentence\n    matches = re.findall(pattern, text)\n    \n    # Create a list of tuples containing the first adverb and their positions\n    adverb_positions = []\n    for match in matches:\n        adverb = match[0]\n        position = text.find(match[0])\n        adverb_positions.append((adverb, position))\n    \n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b\\w*[a-z]*\\b\\s*(?:[a-z]*\\s+)?adverb\\b\\s*(?:[a-z]*\\s+)?\\b\\w*\\b'\n    \n    # Use the re.findall() method to find all matches in the text\n    adverbs = re.findall(adverb_pattern, text)\n    \n    # If there are no adverbs, return an empty list\n    if not adverbs:\n        return []\n    \n    # Extract the adverb and its position from each match\n    adverb_positions = []\n    for match in adverbs:\n        adverb = match.lower()\n        position = text.lower().find(adverb)\n        \n        # Add the adverb and its position to the list\n        adverb_positions.append((adverb, position))\n        \n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n    text (str): The sentence in which to look for adverbs.\n\n    Returns:\n    adverbs (list of tuples): A list of tuples, where each tuple contains the adverb and its position in the sentence.\n    '''\n\n    # Define a regular expression pattern for adverbs\n    adverb_pattern = r'\\b([a-z]+)ing\\b'\n\n    # Use the regular expression search method to find all occurrences of adverbs in the text\n    matches = re.findall(adverb_pattern, text, re.IGNORECASE)\n\n    # Create a list of tuples to store the adverbs and their positions\n    adverbs = []\n    for i, match in enumerate(matches):\n        adverb = match[0]\n        position = text.lower().find(match.lower())\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l * l + l * l + l * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l * l * l\n    surface_area = 6 * area\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l * l + 2 * l * l * l + l * l * l\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize counters\n    pos = 0\n    neg = 0\n    zero = 0\n    \n    # Loop through the array\n    for num in nums:\n        # Increment positive counter if the number is positive\n        if num > 0:\n            pos += 1\n        # Increment negative counter if the number is negative\n        elif num < 0:\n            neg += 1\n        # Increment zero counter if the number is zero\n        else:\n            zero += 1\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos / len(nums)\n    \n    # Return the positive count and ratio\n    return pos, pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    zero = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        elif num < 0:\n            negative.append(1)\n        else:\n            zero.append(1)\n\n    positive_ratio = len(positive) / (len(positive) + len(negative) + len(zero))\n    negative_ratio = len(negative) / (len(positive) + len(negative) + len(zero))\n    zero_ratio = len(zero) / (len(positive) + len(negative) + len(zero))\n\n    print(f\"Positive: {positive_ratio:.2%}\")\n    print(f\"Negative: {negative_ratio:.2%}\")\n    print(f\"Zero: {zero_ratio:.2%}\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n            \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    zeros = array('i')\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negatives.append(num)\n        else:\n            zeros.append(num)\n    positive_count = (len(positives) / len(nums))\n    negative_count = (len(negatives) / len(nums))\n    zero_count = (len(zeros) / len(nums))\n    print(\"The ration of positive numbers is:\", positive_count)\n    print(\"The ration of negative numbers is:\", negative_count)\n    print(\"The ration of zeros is:\", zero_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n\n    # Initialize variables to count positive and negative numbers\n    positive = 0\n    negative = 0\n\n    # Iterate over the array and count the positive and negative numbers\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n\n    # Calculate the ration of positive numbers\n    if positive == 0:\n        ratio = 0\n    else:\n        ratio = positive / (positive + negative)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = [num for num in nums if num > 0]\n    return len(positive_nums) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # convert the array of integers to a list of integers\n    nums = list(nums)\n\n    # count the number of positive numbers in the list\n    count = sum([1 for num in nums if num > 0])\n\n    # find the total number of integers in the list\n    total = len(nums)\n\n    # calculate the ration of positive numbers\n    ratio = count / total\n\n    # return the ration of positive numbers\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert all negative numbers to positive using the abs function\n    nums = [abs(x) for x in nums]\n    # create an array to store the counts\n    counts = array('i', [0] * len(nums))\n    # iterate over the array and increment the count for positive numbers\n    for num in nums:\n        if num > 0:\n            counts[nums.index(num)] += 1\n    # calculate the ration of positive numbers and return it\n    pos_count = sum(counts)\n    neg_count = len(nums) - pos_count\n    ration = pos_count / float(neg_count)\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    print(\"The ration of positive numbers in the array is:\", pos_ratio)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    largest = list1[0] # initialize largest to be the first element of the list\n    for num in list1:\n        if num < 0 and num > largest: # if the current number is negative and greater than largest\n            largest = num # update largest to be the current number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # initialize largest number to negative infinity\n    largest = float('-inf')\n\n    # iterate through the list and update largest number if necessary\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes in a list as input and returns the largest negative number in the list.\n    '''\n    largest = -1000000  #initialize largest to negative infinity\n    for num in list1:\n        if num < 0:  #if number is negative\n            if num > largest:  #if number is greater than current largest\n                largest = num  #update largest\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_num = list1[0]\n    for i in list1:\n        if i < 0 and i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes in a list of integers and returns the largest negative number in the list.\n    '''\n    max_neg = lst[0] # assume first number is largest negative\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num # update max_neg if new negative number found\n    return max_neg # return largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # If the length of the tuple is greater than K, trim it by k\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n        if len(test_list[i]) < K:\n            test_list[i] += (K - len(test_list[i])) * (None,)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[K:]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = tuple(tup1[i]*tup2[i] for i in range(len(tup1)))\n        return result\n    else:\n        return None"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length\")\n        return\n    \n    # loop through each element in the tuples and multiply\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the multiplication result\n    multiplication_result = []\n\n    # Iterate through the given tuple1 and tuple2 and perform index wise multiplication\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n\n    return multiplication_result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    count_list = []\n    for i in tup: \n        if i in count_dict: \n            count_list.append(count_dict[i]) \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to count the occurence of elements in the list\n    count_dict = Counter(lst)\n\n    # create a new list to store the count of each element in the tuple\n    count_list = []\n\n    # iterate through the tuple elements\n    for elem in tup: \n        # if the element is present in the list, add its count to the count_list\n        if elem in count_dict: \n            count_list.append(count_dict[elem])\n        # if the element is not present in the list, add 0 to the count_list\n        else: \n            count_list.append(0)\n\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict.update(lst)\n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the list to a set for faster counting\n    set_lst = set(lst) \n    # use the Counter method from the Counter class in the collections module to count the occurrence of each element in the tuple\n    counter = Counter(tup) \n    # create a dictionary to store the count of each element in the tuple\n    dict_count = {} \n    # iterate over the elements in the counter object \n    for key, value in counter.items(): \n        # check if the key is present in the list of elements \n        if key in set_lst: \n            # if it is, add the value to the dictionary of count \n            if key in dict_count: \n                dict_count[key] += value \n            else: \n                dict_count[key] = value \n    # return the dictionary of count \n    return dict_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to get rid of duplicate elements\n    tup_set = set(tup)\n    # Iterate over the list and count the occurrence of each element in the tuple\n    count_dict = {}\n    for elem in lst:\n        if elem in tup_set:\n            count = count_dict.get(elem, 0) + 1\n            count_dict[elem] = count\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list and returns a dictionary where the keys are the elements of the tuple and the values are the number of times they occur in the list.\n    '''\n    count_dict = Counter(lst)\n    return {elem: count_dict[elem] for elem in tup}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count = {k:count_dict[k] for k in count_dict}\n    count_tup = tuple(count.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use the Counter function to count the occurrence of all elements in the list in the tuple\n    count = Counter(lst)\n    # Use a dictionary comprehension to create a new tuple with the count of each element\n    new_tup = {k: v for k, v in count.items()}\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    for element in lst:\n        count_lst.append(count_dict[element])\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a Counter object to count the frequency of each element in the list\n    count_dict = Counter(lst)\n\n    # count the frequency of each element in the tuple\n    count_tup = []\n    for elem in tup:\n        count_tup.append(count_dict[elem])\n\n    return count_tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through each perrin number from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of the perrin numbers up to i\n        temp_sum = i * (i+1)\n        # add the sum to the sum variable\n        sum += temp_sum\n\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(n):\n        perrin_numbers.append(i*(i+1))\n    return sum(perrin_numbers)\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_perrin = 0\n\n    for i in range(1, n + 1):\n        sum_perrin += perrin_num\n        perrin_num = perrin_num * 2\n\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 4, 16, 64, 256, 1024]\n    total = 0\n    for i in perrin:\n        total += n // i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 3, 10, 30, 100, 300, 1000]\n    sum_perrin = 0\n    for i in range(n):\n        if i == 0:\n            sum_perrin += 1\n        else:\n            sum_perrin += perrin[i-1]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n * (n-1) // 2 + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sum(perrin_numbers[:n])\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i/2\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_ = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perrin_number(n):\n    '''\n    Check if a number is a Perrin number or not.\n    '''\n    return n == sum([int(digit)**2 for digit in str(n)])\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [i for i in range(1, n+1) if is_perrin_number(i)]\n    return sum(perrin_numbers)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of strings and an integer l as input, and returns a list of size l containing the first l strings from the given list.\n    '''\n    return l[:str.__len__()]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and an integer as arguments and returns a list of strings of the specified size.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of strings and a specified size as input, and returns a list of the specified size strings from the input list.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            extracted_strings.append(l[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a desired size as inputs.\n    It returns a list of string values of the specified size from the input list.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # create an empty list to store extracted strings\n    extracted_strings = []\n\n    # iterate through the list of strings\n    for i in range(len(l)):\n        # check if the length of the current string is greater than or equal to the specified size\n        if len(l[i]) >= l[0]:\n            # if it is, add it to the extracted_strings list\n            extracted_strings.append(l[i])\n\n    # return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and a specified size of string as input.\n    It then extracts the specified size of strings from the given list and returns the list of extracted strings.\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_str_list.append(str_list[i])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size parameter as input, and returns a new list containing\n    the first `size` strings from the input list.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use the regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove all whitespaces from the string using the built-in split() method\n    #text = text.replace(' ', '')\n    #text = text.replace('\\t', '')\n    #text = text.replace('\\n', '')\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespaces from the string\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # use the pattern to remove all matches in the string\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    # Remove all consecutive whitespaces\n    text = re.sub(' +','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text1)\n    \n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1).strip()\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text1 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces from the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0: \n        return abs(actual_cost - sale_amount) \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Calculate loss amount on a sale if the given amount has loss.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_percentage = 10\n    loss_amount = (actual_cost - sale_amount) * loss_percentage / 100\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    #Function to find even factors of a number\n    def evenFactors(num) : \n        \n        #Initialize the sum of even factors to zero\n        evenSum = 0\n        \n        #Loop through the factors of the number\n        for i in range(2, int(math.sqrt(num))+1) : \n            if(num%i == 0) : \n                evenSum += i\n        \n        #Return the sum of even factors\n        return evenSum\n    \n    #Calculate the sum of even factors\n    evenSum = evenFactors(n)\n    \n    #Return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n            \n    if n%2!= 0:\n        sum += n\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #initialize a variable to store the sum of even factors\n    evenSum = 0\n    #loop through the factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        #if the current factor is even, add it to the sum\n        if n % i == 0:\n            evenSum += i\n    #return the sum of even factors\n    return evenSum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        while n%i == 0: \n            sum += i\n            n = n/i\n    if n > 1: \n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize a sum variable to 0\n    even_sum = 0\n    # Iterate through all odd numbers from 3 to n-2\n    for i in range(3, n-1, 2):\n        # Check if i is even\n        if i % 2 == 0:\n            # If i is even, add it to the sum\n            even_sum += i\n    # Return the sum of even factors\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+z\\b'\n    word_regex = re.compile(word_pattern)\n    matched_words = word_regex.findall(text)\n    return matched_words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    result = []\n    for word in words:\n        if 'z' in word:\n            result.append(word)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match the word containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Print the matches\n    print(\"Matches:\", matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w*[zZ]\\w*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w+\\b\\s+\\w+\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*\\bz\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            days = 366\n        else:\n            days = 365\n    else:\n        if monthnum2 % 4 == 0:\n            days = 366\n        else:\n            days = 365\n\n    if monthnum2 % 2 == 0:\n        if days < 28:\n            return False\n        else:\n            return True\n    else:\n        if days < 29:\n            return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31 days\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"30 days\")\n    else:\n        print(\"No valid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 3 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = str(monthnum2)\n    if monthnum == '1' or monthnum == '3' or monthnum == '5' or monthnum == '7' or monthnum == '8' or monthnum == '10' or monthnum == '12':\n        return False\n    elif monthnum == '2':\n        return (True if monthnum2 in [4, 6, 9, 11] else False)\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the input month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    \n    # Check if the input month number contains 31 days\n    if monthnum2 in [4, 6, 9, 11]:\n        return \"31 days\"\n    elif monthnum2 == 2:\n        return \"28/29 days\"\n    else:\n        return \"30 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    elif 4 <= monthnum2 <= 6:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string\n        reversed_string = stringlist[i][::-1]\n        # replace the original string with the reversed string\n        stringlist[i] = reversed_string\n    # return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sublist = lst[i:j]\n            if len(sublist) < min_len: \n                min_len = len(sublist) \n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    min_length = len(lst)\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_sublist = sublist\n            min_length = len(sublist)\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Sort the list in ascending order \n    lst.sort() \n    # Initialize minimum length to infinite \n    min_len = float('inf') \n    # Initialize sublist to be empty \n    sublist = [] \n    # Iterate through the sorted list and find the sublist with minimum length \n    for i in range(len(lst)): \n        # Add the current element to the sublist and check if its length is less than the current minimum length \n        if i == 0 or i == len(lst)-1: \n            sublist.append(lst[i]) \n        elif len(sublist) < min_len: \n            sublist = [lst[i]] \n            min_len = len(sublist) \n        elif len(sublist) == min_len and len(sublist) + 1 < min_len: \n            sublist.append(lst[i]) \n            min_len = len(sublist) \n        elif len(sublist) == min_len and len(sublist) + 1 == min_len: \n            sublist.append(lst[i]) \n            min_len = len(sublist) \n        else: \n            break \n    return sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length as infinity\n    min_len = float('inf')\n    \n    # Initialize a variable to store the sublist having minimum length\n    min_sublist = None\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Calculate the length of the sublist\n        len_sublist = len(sublist)\n        \n        # If the length of the sublist is less than the current minimum length\n        if len_sublist < min_len:\n            # Update the minimum length and the sublist\n            min_len = len_sublist\n            min_sublist = sublist\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    # split the string into words using whitespace as the separator\n    words = str1.split()\n    # loop through each word in the list\n    for word in words:\n        # check if the word contains uppercase letters using the regular expression pattern\n        if pattern.search(word):\n            # if the word contains uppercase letters, remove it from the list\n            words.remove(word)\n    # join the words back into a string with whitespace as the separator\n    result =''.join(words)\n    # return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # define regex pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    # use regex pattern to find all uppercase substrings in the string\n    upper_substrings = re.findall(pattern, str1)\n    # loop through each uppercase substring and remove it from the string\n    for substring in upper_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = r'[A-Z]+'\n    uppercase_substrings = re.findall(uppercase_pattern, string)\n    \n    if len(uppercase_substrings) > 0:\n        for substring in uppercase_substrings:\n            string = re.sub(substring, '', string)\n            \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function will remove all uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the input string\n    upper_subs = pattern.findall(string)\n    # Remove all uppercase substrings from the input string\n    new_string = re.sub(pattern, '', string)\n    # Return the modified string with uppercase substrings removed\n    return new_string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'([a-z])([A-Z])'\n    return re.sub(pattern, r'\\1\\2', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the re.sub() method to replace all uppercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # split the string into substrings\n    substrings = pattern.split(string)\n    # join the substrings into a new string without uppercase substrings\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = re.compile(r'(?<![a-z])([A-Z]+)([a-z]+)')\n    result = pattern.sub(r'\\1\\2', str1)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            lst[i] = lst[i][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        for item in sublist:\n            print(item)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0]) "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n\n    count = 0\n\n    for char in str:\n        if char.isupper():\n            count += 1\n\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    def combine(elements, start, result):\n        if start == len(elements):\n            result.append(elements[:])\n        else:\n            for i in range(start, len(elements)):\n                combine(elements, start + 1, result)\n                elements[start], elements[i] = elements[i], elements[start]\n\n    result = []\n    combine(list1, 0, result)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns all possible combinations of its elements.\n    '''\n    if not lst:\n        return []\n    comb = []\n    for i in range(len(lst)+1):\n        for j in range(len(lst)+1-i):\n            comb.append(lst[j:j+i])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combination = lst[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(1, len(list1)+1):\n            subset = list(itertools.combinations(list1, i))\n            for subset_combination in subset:\n                if sum(subset_combination) == j:\n                    result.append(subset_combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    comb = []\n    for i in range(len(lst)):\n        comb += lst[:i] + lst[i+1:]\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    # base case: if lst is empty, there are no combinations\n    if not lst:\n        return []\n\n    # recursive case:\n    # start with the first element and generate all the combinations of the remaining elements\n    first = lst[0]\n    rest = lst[1:]\n    combs = []\n    for i in range(1, len(lst)+1):\n        # generate all combinations of length i by appending the first element to the combinations of length i-1\n        combs += combinations_list(rest[:i])\n\n    # add the first element to all the combinations of length i-1\n    for comb in combs:\n        comb.insert(0, first)\n\n    return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # base case: if list1 has only one element, return it\n    if len(list1) == 1:\n        return [list1]\n    \n    # recursive case: combine each element of list1 with all remaining elements\n    combinations = []\n    for i in range(len(list1)):\n        for combo in combinations_list(list1[:i] + list1[i+1:]):\n            combinations.append([list1[i]] + combo)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through the list and find all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    if not arr:  # base case\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if not arr:  # base case: empty array\n        return 0\n\n    # find the maximum subarray ending at index i\n    def max_subarray_ending_at_i(i):\n        if i == 0:  # base case: first element\n            return arr[0]\n        elif i == len(arr) - 1:  # base case: last element\n            return arr[i]\n        else:  # recursive case\n            return max(arr[i], arr[i] * max_subarray_ending_at_i(i - 1),\n                       arr[i] * max_subarray_ending_at_i(i - 2))\n\n    return max_subarray_ending_at_i(0)"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n    negative_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = negative_product * num\n            negative_product = 1\n        else:\n            current_product *= num\n            negative_product *= -1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize the maximum and minimum product to be the first element in the array\n    max_product = arr[0]\n    min_product = arr[0]\n\n    # Initialize the index of the maximum and minimum product\n    max_product_index = 0\n    min_product_index = 0\n\n    # Loop through the array and update the maximum and minimum product based on the current element\n    for i in range(1, len(arr)):\n        # Update the maximum and minimum product if the current element is greater than the maximum product\n        if arr[i] * min_product < max_product * arr[i]:\n            max_product = arr[i]\n            max_product_index = i\n        # Update the maximum and minimum product if the current element is less than the minimum product\n        if arr[i] * max_product > min_product * arr[i]:\n            min_product = arr[i]\n            min_product_index = i\n\n    # Return the maximum product subarray based on the index of the maximum and minimum product\n    return arr[max_product_index:min_product_index+1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = dict.values()[0]\n    for val in dict.values():\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the values of the dictionary\n    values = list(dict.values())\n    # Check if all values are same\n    if values.count(values[0]) == n:\n        print(\"All values are same.\")\n    else:\n        print(\"All values are different.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    else:\n        for key in dict:\n            if dict[key]!= dict[key]:\n                return False\n        return check_value(dict.copy(), n-1)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    count = 0\n    for value in dict.values():\n        count += 1\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # convert the dictionary to a list of tuples\n    lst = [(k, v) for k, v in dict.items()]\n    # sort the list of tuples by value in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # check if the length of the list is greater than or equal to n\n    if len(lst) >= n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to keep track of the value\n    value = None\n    \n    # Iterate through the dictionary values\n    for item in dict.values():\n        # If the current value is not equal to the initial value, return False\n        if value!= item:\n            return False\n        # Otherwise, update the value to the current item\n        else:\n            value = item\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if key!= n:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each item in the dictionary\n    for key in dict1:\n        # If the value is an empty string, remove the key-value pair\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is greater than the previous element, update the current product\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        else:\n            # if the current element is less than or equal to the previous element, multiply the current product with the previous element and update the current product\n            current_product *= arr[i-1]\n            max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    if n == 0:\n        return 0\n\n    # Initialize two variables to store the minimum and maximum of the subsequence\n    min_subseq = arr[0]\n    max_subseq = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < min_subseq:\n            min_subseq = arr[i]\n        elif arr[i] > max_subseq:\n            max_subseq = arr[i]\n\n    # Initialize another variable to store the maximum product\n    max_product = max_subseq * min_subseq\n\n    # Initialize a variable to store the product of the subsequences\n    prod_subseq = 1\n\n    # Iterate through the subsequence and find the maximum product\n    for i in range(1, n):\n        prod_subseq *= arr[i]\n        max_product = max(max_product, prod_subseq)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    # Initialize variables\n    min_product = float('-inf')\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Loop through the array and update the current_product\n    for num in arr:\n        current_product *= num\n        \n        # Update the minimum and maximum products\n        min_product = min(min_product, current_product)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    # Initialize variables\n    curr_max = arr[0] * arr[1]\n    prev_max = arr[0]\n    prev_min = arr[1]\n\n    # Iterate through the array\n    for i in range(2, n):\n        # Calculate the maximum product of the current subsequence\n        temp_max = max(prev_max * arr[i], prev_min * arr[i])\n        temp_min = min(prev_max * arr[i], prev_min * arr[i])\n\n        # Update the maximum and minimum values\n        prev_max = temp_max\n        prev_min = temp_min\n\n        # Update the overall maximum product\n        curr_max = max(curr_max, prev_max)\n\n    return curr_max"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def increasing_subsequence_product(arr):\n        n = len(arr)\n        if n == 1:\n            return arr[0]\n        max_product = float('-inf')\n        for i in range(1, n):\n            for j in range(i):\n                max_product = max(max_product, arr[i] * arr[j])\n        return max_product\n\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarr = arr[i:j]\n            product = increasing_subsequence_product(subarr)\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    max_prod = arr[0]\n    min_prod = arr[0]\n    curr_prod = arr[0]\n    \n    # Loop through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_prod = max(arr[i], curr_prod*arr[i])\n        else:\n            curr_prod = min(arr[i], curr_prod*arr[i])\n        max_prod = max(max_prod, curr_prod)\n        min_prod = min(min_prod, curr_prod)\n        \n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables to store the maximum subsequence product and the maximum product\n    max_subseq_product = 0\n    max_product = float('-inf')\n\n    # Initialize variables to store the current subsequence product and the current index\n    curr_subseq_product = 1\n    curr_index = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current element is greater than the current subsequence product, update the current subsequence product\n        if arr[i] > curr_subseq_product:\n            curr_subseq_product = arr[i]\n            curr_index = i\n        # If the current element is less than the current subsequence product, update the maximum subsequence product\n        elif arr[i] < curr_subseq_product:\n            max_subseq_product = max(max_subseq_product, curr_subseq_product)\n            curr_subseq_product = 1\n        # If the current element is equal to the current subsequence product, update the maximum subsequence product\n        else:\n            max_subseq_product = max(max_subseq_product, curr_subseq_product)\n\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, curr_subseq_product * (i - curr_index + 1))\n\n    # Update the maximum subsequence product with the last subsequence product\n    max_subseq_product = max(max_subseq_product, curr_subseq_product)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the pairwise elements to 0\n    result = 0\n    # Loop through the tuple and add the pairwise elements\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    \n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        if i!= n - 1:\n            result.append(test_tup[i] + test_tup[i + 1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    \n    # Initialize the sum of the pairwise additions\n    sum_pairwise = 0\n    \n    # Loop through the tuple\n    for i in range(length-1):\n        # Add the current element and the next element\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    \n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Convert the tuple to a list to make it mutable and change it to a list of pairs\n    test_lst = list(test_tup)\n    # Iterate through the list and compute the sum of the neighboring elements\n    for i in range(len(test_lst)-1):\n        test_lst[i] += test_lst[i+1]\n    # Convert the mutable list back to a tuple and return it\n    return tuple(test_lst)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 2:\n        return test_tup\n    else:\n        return add_pairwise((test_tup[0] + test_tup[1], test_tup[1])) + add_pairwise((test_tup[1], test_tup[2]))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of the array using modular multiplication\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number as inputs and returns the product of the \n    array multiplication modulo n.\n    '''\n\n    # initialize product to 1\n    product = 1\n\n    # iterate through the array and multiply each element with product\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as inputs and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr: a list of integers\n    n: an integer\n\n    Returns:\n    The product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    i = 0\n    \n    while i < n-1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        i += 1\n    \n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]-1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    n = len(l) \n    count = 0\n    for i in range(n): \n        if i == 0: \n            if l[0] == l[1]: \n                count += 1\n        elif l[i] == l[i-1]+1: \n            count += 1\n        else: \n            count = 0\n    if count == n-1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, and False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty\n    if not l: \n        return False\n    \n    # Check if the first element is zero\n    if l[0] == 0: \n        return False\n    \n    # Initialize two pointers\n    i = 0\n    j = 1\n    \n    # Check if the elements at the pointers are consecutive\n    while j < len(l): \n        if l[i] + 1 == l[j]: \n            return True\n        i += 1\n        j += 1\n    \n    # If the loop completes without finding a consecutive pair, return False\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize empty list to store the intersection\n    intersection_list = []\n    # loop through each element in test_list1\n    for element1 in test_list1:\n        # loop through each element in test_list2\n        for element2 in test_list2:\n            # if element1 and element2 are tuples and their elements are equal, add element1 to intersection_list\n            if type(element1) == tuple and type(element2) == tuple and element1 == element2:\n                intersection_list.append(element1)\n    # return the intersection_list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Merge the two tuple lists in a single list\n    merged_list = test_list1 + test_list2\n    # Use a set to remove duplicates\n    unique_list = list(set(merged_list))\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Iterate over the unique list and check if each element is present in both lists\n    for element in unique_list:\n        if element in test_list1 and element in test_list2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # First, we create a set from each list and then we perform set intersection on them\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n    intersection = set_1.intersection(set_2)\n\n    # Finally, we convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create sets to store unique elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # create an empty set to store the intersection of elements from both sets\n    intersection = set()\n\n    # iterate through set1 and check if each element is present in set2\n    for element in set1:\n        if element in set2:\n            # if element is present in both sets, add it to the intersection set\n            intersection.add(element)\n\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Initialize a set to store unique elements from both lists\n    unique_elements = set()\n\n    # Iterate through both lists and add unique elements to the set\n    for item in test_list1 + test_list2:\n        unique_elements.add(item)\n\n    # Initialize an empty set to store the intersection of the two lists\n    intersection_set = set()\n\n    # Iterate through the unique elements and add the intersection to the set\n    for item in test_list1 + test_list2:\n        if item in unique_elements:\n            intersection_set.add(item)\n\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuples as input and returns a new tuple which contains the common elements of the input tuples, irrespective of their order.\n    '''\n    common_elements = set(test_list1) & set(test_list2)\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two tuple lists as input and returns the tuple intersection of elements.\n    \"\"\"\n    # initialize an empty set to store the unique elements of both lists\n    unique_set = set()\n\n    # iterate through the first list and add each element to the set only if it is also present in the second list\n    for element in test_list1:\n        if element in test_list2 and element not in unique_set:\n            unique_set.add(element)\n\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1: str\n        The string to search in.\n    ch: str\n        The character to search for.\n    newch: str\n        The character to replace occurrences of `ch` with.\n\n    Returns:\n    str\n        The modified string.\n    \"\"\"\n    # Use the replace() method to replace all occurrences of `ch` with `newch`\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the given character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into a list of characters\n    lst_ch = list(str1)\n\n    # Iterate through the list of characters and replace the specified character\n    for i in range(len(lst_ch)):\n        if lst_ch[i] == ch:\n            lst_ch[i] = newch\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(lst_ch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through the string and replace the characters as required\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string by iterating over the old string\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in three parameters: the original string, the character to be replaced, and the new character to replace with. \n    The function replaces all occurrences of the character to be replaced with the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count_dict = Counter(dict1)\n    sorted_count = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_count)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    sorted_dict = {k:v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n            \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # find the smallest value\n    smallest = nums[0]\n    # find the largest value\n    largest = nums[-1]\n    # return the sum of the smallest and largest value\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    else:\n        min_val = max_val = nums[0]\n        for num in nums:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return \"Array is empty\"\n\n    smallest = nums[0]\n    largest = nums[0]\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to find all lowercase substrings\n    lower_substrings = re.findall(r'[a-z]+', str1)\n    # Remove all lowercase substrings from the string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'\\b[a-z]\\w+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    \n    # Use the re.sub() function to remove the lowercase substrings from str1\n    str1 = re.sub(pattern, '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns the string with lowercase substrings removed.\n    '''\n    # Use regex to find all lowercase substrings and replace them with an empty string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', string)\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # Find all matches of the pattern in the given string\n    matches = pattern.findall(str1)\n\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # use regular expressions to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # split the string into words\n    words = pattern.split(str1)\n    # remove lowercase substrings from the list of words\n    words = [word for word in words if word.isupper()]\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regex to find all lowercase substrings and replace them with empty strings\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    while n > 0:\n        n = n // 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the input is a positive integer\n    if n >= 0 and int(n) == n:\n        # convert the number to string\n        n = str(n)\n        # get the first digit of the string\n        digit = n[0]\n        # return the first digit\n        return digit\n    else:\n        print(\"Input must be a positive integer.\")"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to string\n    str_num = str(n)\n    # Return the first character of the string\n    return str_num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer n and returns the first digit of n.\n    \"\"\"\n    if n > 0:\n        return n % 10\n    else:\n        return -1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    # Convert the number to string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert n to string and get the first digit\n    digit = str(n)[0]\n    # return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to string\n    str_n = str(n)\n    # Convert the first character of the string to integer and return it\n    return int(str_n[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to string\n    n = str(n)\n    # Return the first digit of the number\n    return n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    # convert the number to a string and take the first character\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers from the input list.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # create an empty list to store odd numbers\n    odd_list = []\n    # loop through each number in the input list\n    for num in list:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is, add it to the odd_list\n            odd_list.append(num)\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_list = []\n    # Iterate over the list\n    for num in list:\n        # Check if the number is odd and append it to the odd list if it is\n        if num % 2 == 1:\n            odd_list.append(num)\n    # Return the odd list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        cubes.append(i*i*i)\n        sum_of_cubes += cubes[-1]\n    sum_of_first_n = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_first_n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    \n    # Sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1,n+1))\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        '''\n        This function takes an integer n as input and returns the sum of cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    def sum_of_numbers(n):\n        '''\n        This function takes an integer n as input and returns the sum of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    return sum_of_cubes(n) - sum_of_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n_cubes = sum(i**3 for i in range(1, n+1))\n    first_n_sum = sum(range(1, n+1))\n    return first_n_cubes - first_n_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(x**3 for x in range(1,n+1))\n    sum_numbers = sum(range(1,n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_cubes(n):\n    \"\"\"\n    Calculate the sum of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(n + 1):\n        sum_cubes += i ** 3\n    return sum_cubes\n\ndef sum_natural_numbers(n):\n    \"\"\"\n    Calculate the sum of first n natural numbers.\n    \"\"\"\n    sum_natural_numbers = 0\n    for i in range(1, n + 1):\n        sum_natural_numbers += i\n    return sum_natural_numbers\n\ndef difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers.\n    \"\"\"\n    sum_cubes_n = sum_cubes(n)\n    sum_natural_numbers_n = sum_natural_numbers(n)\n    return sum_cubes_n - sum_natural_numbers_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = cubes_sum - sum_sum\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # Calculating the sum of cubes and natural numbers\n    cubes = sum_cubes(n)\n    natural_numbers = sum_natural_numbers(n)\n\n    # Calculating the difference between the two sums\n    difference = cubes - natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # XOR of A[0] and A[N-1]\n    xor_value = A[0] ^ A[N-1]\n    \n    # Count the number of odd XOR values in A\n    count = 0\n    for i in range(len(A)):\n        if A[i] ^ A[N-i-1] % 2 == 1:\n            count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i+1, N):\n            xor = xor ^ A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the count of odd pairs in the array.\n    A pair of elements (A[i], A[j]) is considered odd if their XOR value is odd.\n    '''\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through the array A\n    for i in range(N):\n        # Iterate through the rest of the array A\n        for j in range(i+1, N):\n            # XOR the two elements and check if the result is odd\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                # If the XOR result is odd, increment the count\n                count += 1\n    \n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and its size N as input. It returns the number of pairs whose XOR value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N): \n    '''\n    This function takes a list A and its length N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i] ^ A[j]) % 2!= 0: \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "Here is the Python code for the same:"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A of integers and an integer N as input and returns the count of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string += char.upper() if char.islower() else char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char.lower())\n    return ''.join(result)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings and split them into lists of digits\n    s1 = str(n1)\n    s2 = str(n2)\n    digits1 = list(map(int, s1))\n    digits2 = list(map(int, s2))\n\n    # calculate the per-digit difference between the two numbers\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # sum the per-digit differences and return the result\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    for i in range(10):\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        difference += digit_diff\n        n1 //= 10\n        n2 //= 10\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    # Loop through each digit of the two numbers\n    for i in range(len(str(n1))):\n        # Subtract the corresponding digit from each number\n        n1_digit = int(str(n1)[i])\n        n2_digit = int(str(n2)[i])\n        digit_sum += abs(n1_digit - n2_digit)\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize the sum of differences to 0\n    sum_diff = 0\n    \n    # Loop through each digit in each string\n    for i in range(len(str1)):\n        # Find the difference between the digits\n        diff = int(str1[i]) - int(str2[i])\n        # Add the difference to the sum of differences\n        sum_diff += abs(diff)\n    \n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize the sum of differences to 0\n    diff_sum = 0\n    \n    # Convert the two integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Compute the per-digit difference for each pair of digits\n    for i in range(len(digits1)):\n        diff = digits1[i] - digits2[i]\n        diff_sum += diff\n    \n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Calculate the length of the smaller string\n    len_str = min(len(n1_str), len(n2_str))\n    # Initialize a variable to store the sum of differences\n    sum_diff = 0\n    # Loop through the characters in the strings\n    for i in range(len_str):\n        # Convert the current character to integers\n        c1 = int(n1_str[i])\n        c2 = int(n2_str[i])\n        # Calculate the difference between the two characters\n        diff = abs(c1 - c2)\n        # Add the difference to the sum of differences\n        sum_diff += diff\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    \n    for digit in str(diff):\n        sum_diff += int(digit)\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        n1_digit = n1 // (10 ** i) % 10\n        n2_digit = n2 // (10 ** i) % 10\n        sum_diff += abs(n1_digit - n2_digit)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # initialize variables to store the digit counts and sum\n    digit_count = [0] * 10\n    digit_sum = 0\n    \n    # loop through each digit in both numbers and add the difference to the digit_sum and digit_count\n    for digit in str(n1) + str(n2):\n        digit_sum += abs(int(digit) - int(digit[-1]))\n        digit_count[int(digit)] += 1\n    \n    # calculate the per-digit difference and return the sum\n    per_digit_difference = digit_sum // digit_count[0]\n    return per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_of_digits = 0\n    while diff > 0:\n        sum_of_digits += diff % 10\n        diff //= 10\n    return sum_of_digits"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the array\n    for i in range(size):\n        # Calculate the sum of the current subarray\n        curr_sum += a[i]\n\n        # Update the maximum sum\n        max_sum = max(max_sum, curr_sum)\n\n        # If the sum becomes negative, reset the sum to 0\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Returns the maximum sum of any contiguous sublist of size `size` in the given list `a`.\n    \"\"\"\n    if size <= 0:\n        raise ValueError(\"Size must be positive\")\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Creating a set of all the elements in both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # Creating a list of all the elements in both tuples\n    all_elements = sorted(list(all_elements))\n    # Printing the union of the elements in sorted order\n    print(all_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # find the union of the lists\n    union_list = list(set(tup1_list + tup2_list))\n\n    # sort the union list in ascending order\n    union_list.sort()\n\n    # convert the union list back to a tuple\n    union_tuple = tuple(union_list)\n\n    # return the union tuple\n    return union_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    sorted_set = sorted(union_set)\n    return sorted_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the elements of the two given tuples\n    union = list(set(test_tup1 + test_tup2))\n    # sort the union in ascending order\n    union.sort()\n    # output the union in sorted order\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the sets\n    union_set = set1.union(set2)\n\n    # Convert the union set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n\n    # Output the sorted union\n    print(\"Union of elements of the two tuples:\")\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Sort the elements of the union in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Print the union of the elements\n    print(\"Union of the elements:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two lists\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    \n    # sort the list in ascending order\n    union_list.sort()\n    \n    # print the sorted list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples and convert them into a list\n    all_elements = list(test_tup1) + list(test_tup2)\n    \n    # Sort the list\n    all_elements.sort()\n    \n    # Convert the list back into a tuple\n    unique_elements = tuple(all_elements)\n    \n    return unique_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of elements from both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert set to list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(\"Union of the elements in both tuples:\", union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = j-i+1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = []\n    temp_list = []\n    max_length = 0\n\n    for i in lst:\n        if len(temp_list) == 0 or i > temp_list[-1]:\n            temp_list.append(i)\n        elif i < temp_list[-1]:\n            if len(temp_list) > max_length:\n                longest = temp_list\n                max_length = len(temp_list)\n            temp_list = [i]\n\n    if len(temp_list) > max_length:\n        longest = temp_list\n        max_length = len(temp_list)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            sublist = lst[i:j+1]  \n            if len(sublist) > max_length:  \n                max_length = len(sublist)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize the variable to store the maximum length of the sublists\n    max_length = 0\n    # Loop through each sublist\n    for sublist in lst:\n        # Get the length of the sublist\n        length = len(sublist)\n        # Update the maximum length if the current length is greater\n        if length > max_length:\n            max_length = length\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize the length of the longest sublist to zero\n    max_length = 0\n    # loop through each sublist in the list\n    for sublist in lst:\n        # get the length of the sublist\n        length = len(sublist)\n        # update the maximum length if the current sublist has a greater length\n        if length > max_length:\n            max_length = length\n    # return the maximum length of all sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in range(len(lst)):\n        curr_len += 1\n        if i < len(lst) - 1:\n            while lst[i] == lst[i+1]:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            max_length = max(max_length, len(sublist))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1,n):\n            max_len = max(max_len,1+Find_Max_Length(lst[i:]))\n        return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    # initialize variables\n    max_length = 1\n    current_length = 1\n    \n    # loop through the list\n    for i in range(1, len(lst)):\n        # check if the current sublist is longer than the previous sublist\n        if current_length + 1 < len(lst[i]):\n            current_length += 1\n        else:\n            current_length = 1\n        \n        # update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    start_index = 0\n\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                start_index = i - max_length + 1\n        else:\n            current_length = 1\n\n    return max_length, start_index\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"') # Find all quotation marks in the text\n    matches = pattern.findall(text) # Find all matches of the pattern in the text\n    values = [match.strip() for match in matches] # Remove leading and trailing whitespace from each match\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n\n    # Use the pattern to find all matches in the text\n    matches = pattern.findall(text)\n\n    # Convert the matches to a list of values\n    values = [match.strip() for match in matches]\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern for matching quotation marks\n    pattern = re.compile(r'(\".*?\"|\\'.*?\\')')\n    # Use the search() method of the regular expression object to find all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    # Create a list to store the extracted values\n    values = []\n    # Loop through each match and add its value to the values list\n    for match in matches:\n        if match[0] == match[-1] == \"'\":\n            values.append(match[1:-1])\n        else:\n            values.append(match)\n    # Return the values list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?P<value>\"[^\"]*\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    values = [match.strip() for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): The string to extract values from.\n\n    Returns:\n    A list of extracted values.\n    \"\"\"\n\n    # Define a regular expression pattern to match quotation marks.\n    pattern = r'(?<=\\\")\\w+(?:\\s|\\,|\\;|\\:)+(?=\\\")'\n\n    # Use the regular expression to search for matches in the text.\n    matches = re.findall(pattern, text)\n\n    # Return a list of extracted values.\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n):\n    # Sort the list in ascending order\n    arr.sort()\n    # Initialize count to zero\n    count = 0\n    # Traverse through the sorted list and check for pairs\n    for i in range(n-1):\n        # If the current element is equal to the next element, there is no pair\n        if arr[i] == arr[i+1]:\n            continue\n        # If there is a pair, increment count and move to the next element\n        else:\n            count += 1\n            break\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # Loop through all possible pairs of indices\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if both elements in the pair are unequal\n            if arr[i]!= arr[j]:\n                # Increment the counter variable\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes an unordered list of integers and returns the number of possible pairs of elements that are not equal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Initialize variables for count and pairs\n    count = 0\n    pairs = []\n\n    # Loop through the list of integers\n    for i in range(n):\n        # Loop through the list again to find the pairs\n        for j in range(i+1, n):\n            # Check if the elements are equal\n            if arr[i]!= arr[j]:\n                # If they are not, add the pair to the list\n                pairs.append((arr[i], arr[j]))\n                # Increment the count\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit in the integer and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum_val = 0\n    # loop through each digit of the input integer\n    for digit in str(n):\n        # add the digit to the sum\n        sum_val += int(digit)\n    # return the sum of the digits\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and use a loop to sum up the digits\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    else:\n        sum_of_digits = 0\n        while n > 0:\n            sum_of_digits += n % 10\n            n //= 10\n        return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through each character in the string and add its integer value to the sum\n    for digit in num_str:\n        digit_int = int(digit)\n        sum += digit_int\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of characters\n    digits = list(str(n))\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through the digits and add them to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether the specified list is sorted or not.\n\n    Parameters:\n    list1 (list): A list of integers or other comparable items.\n\n    Returns:\n    bool: True if the list is sorted in ascending order, False otherwise.\n\n    \"\"\"\n\n    # check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted or not.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if it is sorted in ascending order,\n    and False otherwise. The function uses the bubble sort algorithm to sort the list.\n    '''\n    n = len(lst)\n    for i in range(n):\n        for j in range(n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    '''\n    Check whether the specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty or not\n    if len(list1) == 0:\n        return True\n    else:\n        # Iterate through the list and check if the elements are in ascending order\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    \"\"\"\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): Number of empty dictionaries to create.\n\n    Returns:\n        list of dictionaries: A list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of the list of lists\n    for sublist in list1:\n        # sort the sublist in ascending order of strings\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the input lists to sets to remove duplicates\n    nums_set = set(nums)\n    \n    # Convert the set back to a list\n    unique_nums = list(nums_set)\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Check if the number is already in the dictionary\n            if num in unique_nums:\n                # If it is, remove the duplicate number from the list\n                num_list.remove(num)\n            # If the number is not in the dictionary, add it to the dictionary\n            else:\n                unique_nums[num] = True\n    # Return the modified lists with unique numbers removed\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    Args:\n        nums: A list of numbers.\n\n    Returns:\n        A list of unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n    - nums (list): a list of lists containing the numbers to be removed from duplicates.\n\n    Returns:\n    - list: a new list with only the unique numbers from the input lists.\n    \"\"\"\n    # initialize an empty set to store the unique numbers\n    unique_set = set()\n    # loop through each list in the input list\n    for sublist in nums:\n        # loop through each number in the sublist\n        for num in sublist:\n            # add the number to the set if it's not already there\n            if num not in unique_set:\n                unique_set.add(num)\n    # return the unique set as a list\n    return list(unique_set)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))  # convert list to set and then back to list\n    unique_list.sort()  # sort the list in ascending order\n    \n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = list(set(list_data)) # Convert the list to a set and remove duplicates using the set() function\n    return unique_list[0] * unique_list[-1] # Multiply the first and last elements of the unique list, which will give the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the given list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    unique_number_list = list(unique_numbers)  # convert the set back to a list\n    unique_product = 1\n    for number in unique_number_list:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the input list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers\n    unique_numbers = set(list_data)\n    # calculate the product of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # S = 2 * pi * r * h\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r**2 + 2*pi*r*h + 2*pi*h**2\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = 2 * 3.14 * r**2 / h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*h*r + 2*math.pi*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Find the surface area of the base\n    surface_area_base = 2 * r * h\n    \n    # Find the surface area of the top\n    surface_area_top = 2 * r * h * 3.14\n    \n    # Return the total surface area of the cylinder\n    return surface_area_base + surface_area_top"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r ** 2 * h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula A = \u03c0r\u00b2h\n    A = 2 * 3.14159 * r ** 2 * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \"\"\"\n    # calculate the base area and volume of the cylinder\n    A_base = 2 * r * h\n    V_base = (1/3) * pi * r**2 * h\n    \n    # calculate the surface area of the base\n    surface_area_base = 2 * pi * r * h\n    \n    # calculate the top and bottom areas\n    A_top = pi * r * r\n    A_bottom = pi * r * r\n    surface_area_top = A_top\n    surface_area_bottom = A_bottom\n    \n    # calculate the overall surface area\n    surface_area = surface_area_base + surface_area_top + surface_area_bottom\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    \"\"\"\n    return 2*math.pi*(r**2) + 2*math.pi*r*h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == []:\n        return True\n    elif A[0] in B:\n        return is_Sub_Array(A[1:], B)\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if the list B is a sublist of A\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B, else False.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if the length of A is greater than or equal to the length of B\n    if len(A) < len(B): \n        return False\n\n    # loop through A to see if B is a sublist of A\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    if len(A)<len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] not in B[i:]:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    for i in range(len(B)):\n        if A.count(B[i]) == len(B):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    '''\n    for i in A:\n        if i in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes in two lists, A and B, and returns True if B is a sublist of A, otherwise False.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Check if list A is a sublist of list B.\n    \"\"\"\n    # Check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] not in A:\n                return False\n        return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Check if the input number is positive\n    if n < 0:\n        raise ValueError(\"Input number must be a positive integer.\")\n    \n    # Initialize the result variable to 1\n    result = 1\n    \n    # Loop through the digits of the input number\n    while n > 0:\n        # Extract the last digit of the input number\n        last_digit = n % 10\n        \n        # Multiply the result by the factorial of the last digit\n        result *= last_digit\n        \n        # Remove the last digit from the input number\n        n //= 10\n    \n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Base case: 0! has no last digit\n    if n == 0:\n        return 0\n\n    # Calculate factorial\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract last digit\n    last_digit = int(factorial % 10)\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n//10) + n%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Find the last digit in the string\n    last_digit = n_str[-1]\n\n    # Convert the last digit to an integer\n    last_digit = int(last_digit)\n\n    # Find the factorial of the number without the last digit\n    factorial = 1\n    for i in range(1, n):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return last_digit, factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        print(\"Factorial of negative number is not defined.\")\n    else:\n        last_digit = 0\n        while n > 0:\n            last_digit = n % 10\n            n = n // 10\n        print(\"The last digit of factorial of\", n, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the factorial of n\n    fact = 1\n    # Loop through each digit of n\n    for i in str(n):\n        # Append the current digit to the factorial\n        fact *= int(i)\n    # Find the last digit of the factorial\n    last_digit = fact % 10\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    i = 1\n    while i <= n:\n        factorial *= i\n        i += 1\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the last digit to be 0\n    last_digit = 0\n\n    # Initialize the factorial of n to be 1\n    factorial = 1\n\n    # Loop through each digit of n\n    for i in range(9, -1, -1):\n        # Calculate the digit of the factorial\n        digit = n // 10**(i+1)\n\n        # Multiply the factorial by the digit\n        factorial *= digit\n\n        # Get the last digit of the factorial\n        last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    for i in range(max(len(list1), len(list2), len(list3))):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    result = []\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the final result\n    result = []\n    \n    # loop through each list in turn\n    for i in range(len(list1)):\n        # add the first element of each list to the result list\n        result.append(list1[i])\n        # add the second element of each list to the result list\n        result.append(list2[i])\n        # add the third element of each list to the result list\n        result.append(list3[i])\n    \n    # return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): list of integers to be interleaved with list2 and list3\n    list2 (list): list of integers to be interleaved with list1 and list3\n    list3 (list): list of integers to be interleaved with list1 and list2\n\n    Returns:\n    list: a single flat list with the integers from the input lists interleaved\n    \"\"\"\n    # Create a list of the integers in list1, list2, and list3\n    combined_list = list1 + list2 + list3\n    # Shuffle the combined list\n    import random\n    random.shuffle(combined_list)\n    # Return the shuffled combined list\n    return combined_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    \n    # Iterate through each element of each list\n    for i in range(len(list1)):\n        # Append the i-th element of each list to the result\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved list\n    interleaved = []\n\n    # iterate through the lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    return interleaved"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # If the element in the first tuple is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the element to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = test_tup1 - common_elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate over the elements in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            # If the element is not present in the second tuple, append it to the dissimilar list\n            dissimilar_list.append(elem1)\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements that are present in one tuple but not in the other.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the elements that are present in test_tup1 but not in test_tup2.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of all the elements in both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # create a set of the common elements in both tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    # subtract the common elements from the set of all elements and return as a list\n    return list(all_elements - common_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Extract even elements from the mixed tuple\n    even_elements = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_elements.append(item)\n    \n    # Return the even elements from the mixed tuple\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Flatten the mixed tuple and filter out non-even elements\n    flattened_tuple = [item for sublist in test_tuple for item in sublist if even_fnc(item)]\n    return flattened_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven_element(elem):\n        '''\n        Helper function to remove uneven elements.\n        '''\n        if isinstance(elem, (list, tuple)):\n            return [remove_uneven_element(e) for e in elem]\n        else:\n            return even_fnc(elem)\n\n    return [remove_uneven_element(t) for t in test_tuple]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n    test_tuple: a nested mixed tuple\n    even_fnc: a function that takes an element of the tuple and returns True if it is even, False otherwise.\n\n    Returns:\n    a new tuple with only the even elements of the original tuple, based on the given function.\n    \"\"\"\n    even_elements = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_elements.append(element)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function to check if the element is even or odd\n    def is_even(x): \n        if x % 2 == 0: \n            return True \n        else: \n            return False \n\n    # Iterate through the elements of the tuple and check if they are even\n    even_list = []\n    for elem in test_tuple: \n        if even_fnc(elem): \n            even_list.append(elem)\n\n    # Return the even list as a tuple\n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        print(\"Input must be a tuple!\")\n        return\n\n    # Check if all elements in the tuple are tuples\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            print(\"All elements in the tuple must be tuples!\")\n            return\n\n    # Check if the function is valid\n    if not callable(even_fnc):\n        print(\"Invalid function!\")\n        return\n\n    # Remove uneven elements using the provided function\n    even_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            even_list.append(i)\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # create an empty list to store even elements\n    even_list = []\n    # loop through the elements of the nested mixed tuple\n    for elem in test_tuple:\n        # if the element is even and the function returns True, append it to the even_list\n        if even_fnc(elem):\n            even_list.append(elem)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple: \n        if even_fnc(i): \n            even_list.append(i)\n    return even_list\n\ndef is_even(num): \n    return num % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    return 2 * (b + s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two parameters: base_edge and height.\n    It then calculates the surface area of a square pyramid and returns the result.\n    '''\n    surface_area = (2 * b * s) + (b * b)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid\n    area = 4*b*s + 6*b*b + 4*s*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * b\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula to calculate surface area of a square pyramid\n    return 2*b*s + 2*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the length of the base of the pyramid\n    length = b + s\n\n    # calculate the area of each half of the pyramid\n    area_half = (b * b) / 2\n    area_side = (s * s) / 2\n\n    # calculate the total surface area of the pyramid\n    surface_area = 6 * area_half + area_side\n\n    # print the surface area of the pyramid\n    print(\"The surface area of the pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * (s**2) + 2 * s * b + 4 * b**2 * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the area of each side of the pyramid. \n    area_1 = b * b\n    area_2 = b * b + b * s\n    area_3 = b * b + s * s\n    area_4 = s * s\n    # Calculating the total surface area of the pyramid. \n    surface_area = area_1 + area_2 + area_3 + area_4\n    # Returning the surface area of the pyramid. \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (b*s)/2\n    return surfaceArea"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as an input and checks if it is empty or not.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes in a dictionary as a parameter and checks if it is empty.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) + catalan_number((n//2)+1)\n    else:\n        return catalan_number(n-1) + catalan_number(n-1) + catalan_number(n-1)\n\nn = int(input(\"Enter a number: \"))\n\nprint(\"The nth Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * 4 - catalan_number(n-2) * 2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * catalan_number(n-1) + (2*n - 1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    num = [1]\n    for i in range(2, n+1):\n        num.append(num[i-1]*(4*i-1)//(i+1))\n    return num[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (1 - (n/2)) / n + catalan_number(n-2) * (n/2) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(\"Please enter a positive integer.\")\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num + 1):\n        catalan.append(2 * catalan[i - 1] + catalan[i - 2])\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth catalan number using recursion.\n\n    :param n: The index of the catalan number to calculate.\n    :return: The nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * catalan_number(n-1) / (2*n+1)\n\nn = int(input(\"Enter the index of the catalan number to calculate: \"))\nprint(\"The {}-th catalan number is: {}\".format(n, catalan_number(n)))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end].lower()\n        print(f'{adverb} found at index {start}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\bly\\b', text)\n    \n    # Loop through each adverb and find its position in the text\n    for i, adv in enumerate(adverbs):\n        # Get the word before the adverb\n        pre_word = text[:text.find(adv)]\n        # Check if the pre-word is a non-vowel\n        if not re.search(r'[aeiou]', pre_word):\n            # If it is, print the adverb and its position\n            print(adv, 'at position', i+1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverb_pattern = re.compile(r\"(?<=[^\\w\\s])(ly)\\b\")\n    matches = adverb_pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = text[start_pos:end_pos]\n        result.append((adverb, start_pos, end_pos))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes in a string and returns a list of tuples containing the adverb ending with \"ly\" and its positions in the string.\n    '''\n    # Define the regular expression pattern for identifying adverbs ending with \"ly\"\n    pattern = r\"\\bly\\b\"\n    \n    # Use the regular expression search method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb ending with \"ly\" and its positions in the string\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    pattern = r'\\bly\\b'\n\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        print(f'{start}: \"{adverb}\"')\n\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Find all instances of words ending with 'ly'\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Initialize an empty dictionary to store the positions of the adverbs\n    positions = {}\n\n    # Iterate over the adverbs and add their positions to the dictionary\n    for i, adverb in enumerate(adverbs):\n        positions[adverb] = i\n\n    # Return the list of adverbs and their positions\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # iterate over the matches and extract the positions of the adverbs ending with ly\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(\\w+)(ly)$'\n    \n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n    \n    # Iterate over the matches and append the adverb and its position to the list\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append((adverb, position))\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for i, match in enumerate(matches):\n            # print the adverb and its position in the text\n            print(match, i+text.find(match))\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef find_n_most_expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in the given dataset.\n\n    Args:\n    - items: a list of items to consider for the calculation\n    - n: the number of items to return\n\n    Returns:\n    - a list of the n most expensive items\n    \"\"\"\n    # Initialize a min heap with the first n items\n    heap = items[:n]\n    for item in items[n:]:\n        if item[1] < heap[0][1]:\n            heapq.heappushpop(heap, item)\n\n    # Extract the n most expensive items from the heap and return them\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to find the n most expensive items in.\n    The function returns a list of the n most expensive items.\n    '''\n    # Initialize a min heap with a default key function (which will be the item itself) and a default value function (which will be set to 0)\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n    \n    # Pop the n most expensive items from the heap and add them to the result list\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of their prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a min heap with n elements to store the n most expensive items\n    heap = []\n    for i in range(n):\n        # If there are less than n elements in the heap, add the current item to the heap\n        if len(heap) < n:\n            heapq.heappush(heap, sorted_items.pop(0))\n        # If there are more than n elements in the heap, compare the current item with the smallest element in the heap\n        else:\n            if sorted_items[0][1] > heap[0][1]:\n                # If the current item has higher price than the smallest element in the heap, replace the smallest element in the heap with the current item\n                heapq.heapreplace(heap, sorted_items.pop(0))\n            else:\n                # If the current item has lower price than the smallest element in the heap, do nothing\n                break\n    # Extract the n most expensive items from the heap\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items into a heap\n    heap = [(-item, item) for item in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    while n > 0:\n        price, item = heapq.heappop(heap)\n        result.append(item)\n        n -= 1\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n largest items\n    heap = []\n    # Initialize the heap with the first n items\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    # Add the remaining items to the heap\n    for item in items[n:]:\n        # If the item is more expensive than the smallest item in the heap,\n        # replace it with the item\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n        # If the item is less expensive than the smallest item in the heap,\n        # do nothing (i.e. leave it in the heap as is)\n    # Return the n largest items in the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of n items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # return the n most expensive items\n    return heap[0:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l)//2\n    if n < mid:\n        split_index = n\n    else:\n        split_index = mid + n - len(l)\n    first_part = l[:split_index]\n    second_part = l[split_index:]\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than the nth element\n    if len(l) < n:\n        print(\"Error: List length is less than the n-th element\")\n        return None\n\n    # split the list at the nth element\n    mid = n // 2\n    first_part = l[:mid]\n    last_part = l[mid:]\n\n    # add the first part to the end of the last part\n    l = last_part + first_part\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return l\n    else:\n        return [l[-1]] + split_Arr(l[:-1], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is at least n+1\n    if len(l) < n+1:\n        raise ValueError(\"The length of the list must be at least n+1.\")\n    \n    # Initialize two empty lists: one to store the first part and one to store the second part\n    part1 = []\n    part2 = []\n    \n    # Loop through the list and split it at the nth element\n    for i in range(n):\n        part1.append(l[i])\n    for i in range(n, len(l)):\n        part2.append(l[i])\n    \n    # Concatenate the first part with the second part and return the result\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Use the list slice method to extract the first n elements from the list\n    first_n_elements = l[:n]\n    # Use the list concatenation method to concatenate the first_n_elements with the rest of the list\n    result = first_n_elements + l[n:]\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Invalid input. The list has less elements than the nth element.\")\n    elif n == 1:\n        return l\n    else:\n        return [l[-n]] + split_Arr(l[:-n], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n < 0:\n        return \"Invalid input\"\n    else:\n        mid = len(l) // 2\n        part1 = l[:mid]\n        part2 = l[mid:]\n        l2 = part1 + part2\n        l3 = l[:n] + l2\n        return l3"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return 'Invalid index'\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 0 or n > len(l):\n        return \"Error: n is out of range.\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        l = second_part + first_part\n        return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # Convert the list to a tuple\n    tuple_x = tuple(listx)\n    return tuple_x"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the difference between the two values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between the largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between\n    the largest and smallest value in the list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Return the difference between the largest and smallest values in the list\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n    # Loop through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    # Return the difference between the largest and smallest values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Get the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the two values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Define a function to check if a number is a perfect square\n    def is_perfect_square(num):\n        sqrt_num = int(num ** 0.5)\n        return sqrt_num ** 2 == num\n\n    # Loop through all numbers between a and b (inclusive)\n    for num in range(a, b + 1):\n        # Check if the current number is a perfect square\n        if is_perfect_square(num):\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through numbers between a and b\n    for i in range(a, b+1):\n        # check if the square is perfect\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a list to store the perfect squares\n    perfect_square_list = []\n\n    # iterate through all the integers between a and b\n    for num in range(a, b+1):\n        # check if the square of the current number is a perfect square\n        square = int(num**0.5) + 1\n        if num == square**2:\n            perfect_square_list.append(num)\n\n    # return the list of perfect squares\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables to store the number of perfect squares between a and b\n    count_a = 0\n    count_b = 0\n\n    # Loop through numbers from a to b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to b\n        if i*i == b:\n            count_a += 1\n        # Check if the square of the current number is equal to a\n        elif i*i == a:\n            count_b += 1\n\n    # Return the number of perfect squares between a and b\n    return count_a + count_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all the numbers from 1 to b\n    numbers = list(range(1, b+1))\n    # Create a list of all the perfect squares of numbers\n    perfect_squares = []\n    for number in numbers:\n        # Calculate the square root of the number and add it to the list if it's a perfect square\n        square_root = int(number**0.5)\n        if square_root*square_root == number:\n            perfect_squares.append(square_root)\n    # Sort the perfect squares list in ascending order\n    perfect_squares.sort()\n    # Create a list of all the perfect squares between a and b\n    result = []\n    for square in perfect_squares:\n        if square**2 >= a**2 and square**2 <= b**2:\n            result.append(square)\n    # Return the list of perfect squares between a and b\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a ** 0.5) + 1):\n        if i ** 2 <= b:\n            squares.append(i ** 2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through the range of numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if the square of the number is equal to the number itself\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        if i**2 == b:\n            print(i)\n        elif i**2 < b:\n            print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find perfect squares between two given numbers using binary search.\n\n    Parameters:\n    a (int): First number to search for squares.\n    b (int): Second number to search for squares.\n\n    Returns:\n    list: List of perfect squares between a and b.\n    \"\"\"\n    # Initialize the search range to be between the two given numbers.\n    low = a\n    high = b\n\n    # Initialize an empty list to store the perfect squares.\n    squares = []\n\n    # Use a while loop to keep searching for perfect squares until a perfect square is found.\n    while low <= high:\n        # Calculate the midpoint of the current search range.\n        mid = (low + high) // 2\n\n        # Check if the midpoint is a perfect square. If so, add it to the list of squares.\n        if mid * mid == low:\n            squares.append(mid)\n            high = mid - 1\n        elif mid * mid > low:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the polar coordinate system.\n    theta (float): The angle of the polar coordinate system in radians.\n    \n    Returns:\n    x (float): The x-coordinate of the rectangular coordinate system.\n    y (float): The y-coordinate of the rectangular coordinate system.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two arguments, r and theta, which represent the\n    magnitude and angle of a complex number respectively. It returns the\n    rectangular coordinates (x, y) of the complex number.\n    \"\"\"\n    # Convert angle to radians\n    theta = cmath.pi * theta / 180\n    \n    # Calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    \n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    \n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle from radians to degrees\n    angle = round(cmath.degrees(cmath.atan2(y, x)), 1)\n\n    # Calculate distance from origin\n    dist = round(cmath.sqrt(x**2 + y**2), 1)\n\n    # Convert the distance to a string with the appropriate number of decimal places\n    dist = '{:.1f}'.format(dist)\n\n    # Combine the angle and distance into a string\n    result = '{} degrees {} units'.format(angle, dist)\n\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    This function takes two arguments: x and y, representing the polar coordinates to be converted.\n    It converts the polar coordinates to rectangular coordinates using the formula:\n    r = abs(x)\n    theta = arg(x)\n    x = r * cos(theta)\n    y = r * sin(theta)\n    \"\"\"\n    r = abs(x)\n    theta = cmath.phase(x)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    (float, float): tuple of (x, y) coordinates in rectangular coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = cmath.rect(x, y)\n    return rect_x"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if not newList: \n        return newList \n\n    # swap the first and last elements\n    first = newList[0] \n    last = newList[-1] \n    newList[0] = last \n    newList[-1] = first \n    return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList \n    else: \n        first_element = newList[0] \n        last_element = newList[-1] \n        newList[0] = last_element \n        newList[-1] = first_element \n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        return \"List must have at least two elements.\"\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Getting the length of the list\n    length = len(newList)\n    # If the list has only one element, there is no need to swap anything\n    if length == 1:\n        return newList\n    # Otherwise, swapping the first and last elements\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Create a temporary variable to store the last element of the list\n    last = newList[-1]\n    # Remove the last element from the list\n    newList.pop()\n    # Add the last element to the beginning of the list\n    newList.insert(0, last)\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): number of terms in the series.\n        k (int): number of terms in the sum.\n\n    Returns:\n        int: the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n\n    # Initialize the sum of the binomial co-efficients\n    sum_binomial = 1\n\n    # Loop through the first k terms in the series\n    for i in range(k):\n\n        # Compute the binomial co-efficient for this term\n        binomial = 1\n        for j in range(1, i+1):\n            binomial *= (n-j+1) // j\n\n        # Add this binomial co-efficient to the sum of the binomial co-efficients\n        sum_binomial += binomial\n\n        # Compute the product of the binomial co-efficient with the series\n        product_binomial = 1\n        for j in range(1, i+1):\n            product_binomial *= j\n\n        # Add this product to the sum of the product of consecutive binomial co-efficients\n        sum_product += product_binomial\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_product + sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        print(\"Error: k should be less than or equal to n.\")\n        return\n    elif k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) * (1-k/(n+1))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): Denominator of the binomial coefficient\n    k (int): Numerator of the binomial coefficient\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    elif k > n:\n        return 0\n\n    # Calculate the coefficients for k\n    a = 1\n    b = 1\n    for i in range(1, k + 1):\n        a *= (n - i + 1) // i\n        b *= i\n    for i in range(k, n - k + 1):\n        a //= i\n        b //= (n - i + 1)\n\n    # Calculate the coefficients for n-k\n    c = 1\n    d = 1\n    for i in range(n - k, n + 1):\n        c *= i\n        d *= (n + 1 - i) // i\n\n    # Add the coefficients and return the sum\n    return a + b + c + d\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable \n    sum = 0 \n\n    # Initialize the factorial variables \n    fact_n = 1 \n    fact_k = 1 \n    fact_n_k = 1 \n\n    # Compute the factorial of n \n    for i in range(1,n+1): \n        fact_n *= i \n\n    # Compute the factorial of k \n    for i in range(1,k+1): \n        fact_k *= i \n\n    # Compute the factorial of n-k \n    for i in range(1,n-k+1): \n        fact_n_k *= i \n\n    # Compute the sum of the product of consecutive binomial co-efficients \n    sum = fact_n_k // fact_n // fact_k // fact_k // fact_n // fact_n\n\n    # Return the sum of the product of consecutive binomial co-efficients \n    return sum "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if n is negative or if k is greater than n\n    if n < 0 or k > n: \n        print(\"Error: n must be non-negative and less than or equal to n.\") \n        return\n    \n    # Initialize the sum to zero\n    sum = 0\n    \n    # Check if k is less than or equal to n/2\n    if k <= n//2: \n        # If k is less than or equal to n/2, calculate the sum of binomial coefficients using the formula\n        # sum = n choose k (k choose 0)\n        # where n is the total number of elements and k is the number of elements in the subset\n        sum = n * (n - 1) // 2 - (n - k + 1) * (k - 1) // 2\n    \n    else: \n        # If k is greater than n/2, calculate the sum of binomial coefficients using the formula\n        # sum = n choose k (k choose (n - k))\n        # where n is the total number of elements and k is the number of elements in the subset\n        sum = n * (n - 1) // 2 - (k * (n - k) - k * (k - 1)) // 2\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if n and k are positive integers\n    if not (isinstance(n,int) and isinstance(k,int)):\n        raise ValueError(\"Both n and k must be positive integers.\")\n    elif n < 1 or k < 1:\n        raise ValueError(\"Both n and k must be positive integers.\")\n\n    # Initialize sum to 0\n    sum_product = 0\n\n    # Calculate the factorial of n\n    fact_n = 1\n    for i in range(1,n+1):\n        fact_n *= i\n\n    # Calculate the factorial of k\n    fact_k = 1\n    for i in range(1,k+1):\n        fact_k *= i\n\n    # Calculate the factorial of (n-k)\n    fact_n_minus_k = 1\n    for i in range(1,n-k+1):\n        fact_n_minus_k *= i\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_product = (fact_n_minus_k * fact_k) // fact_n\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(1, k+1):\n        coeff_sum += n * factorial(n - i) // factorial(i)\n    return coeff_sum\n\ndef factorial(n):\n    \"\"\"\n    Write a python function to find the factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip = re.sub('^0+', '', ip)\n    # remove leading and trailing zeroes from the entire ip address\n    ip = re.sub('^0+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    ip_no_zero = re.sub(pattern, lambda m: str(m.group(0)[1:]), ip)\n    return ip_no_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and removes leading zeroes from it.\n    '''\n    # Remove leading zeros from each octet of the IP address\n    ip = re.sub(r'^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$', r'\\1.\\2.\\3.\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip = ip.replace('0', '')\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.?\\d*', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        return re.sub(r'^0+', '', ip)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        return odd_num - even_num\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - odd_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return even_num - odd_num\n    return None  # no even or odd numbers found in the list"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0:\n            even_index += 1\n        else:\n            odd_index += 1\n\n    if even_index == len(list1):\n        return list1[odd_index]\n    elif odd_index == len(list1):\n        return list1[even_index]\n    else:\n        return list1[odd_index] - list1[even_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # create an empty list to store the difference\n    diff = []\n    # iterate through the list\n    for num in list1:\n        # if the number is even\n        if num % 2 == 0:\n            # add the even number to the list\n            diff.append(num)\n        # if the number is odd\n        elif num % 2 == 1:\n            # add the odd number to the list\n            diff.append(num)\n    # if the length of the difference list is 2, return the difference as an integer\n    if len(diff) == 2:\n        return int(diff[1]) - int(diff[0])\n    # if the length of the difference list is not 2, return False\n    else:\n        return False"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is None:\n        return None\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    even_count = odd_count = 0\n\n    # Loop through the list\n    for num in list1:\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                first_even = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                first_odd = num\n\n        # If both first even and first odd are found, calculate the difference and return it\n        if first_even is not None and first_odd is not None:\n            difference = first_even - first_odd\n            return difference\n\n    # If no even and odd numbers are found, return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers.\n    \"\"\"\n    # Find the first even number in the list\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    # Find the first odd number in the list\n    odd_num = next((num for num in lst if num % 2!= 0), None)\n    # If even_num or odd_num is None, return None\n    if even_num is None or odd_num is None:\n        return None\n    # Return the difference between the even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    swaps = 0\n    \n    # Compare lengths of both binary strings\n    if n1 > n2:\n        n1, n2 = n2, n1\n        \n    # Compare each character of the strings\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # Swap the characters\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n            \n    # Compare the remaining characters\n    for i in range(n1, n2):\n        if str1[i]!= str2[i]:\n            # Swap the characters\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n            \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # If lengths are not equal, it is not possible to convert one binary number to another.\n    if n1!= n2:\n        return -1\n    \n    # Convert both binary numbers to integers.\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Use bitwise XOR to get the difference between the two numbers.\n    diff = num1 ^ num2\n    \n    # Use bitwise AND to get the common bits.\n    common = diff & (-diff)\n    \n    # Initialize the count of swaps.\n    count = 0\n    \n    # Use bitwise AND to find the position of the common bit.\n    for i in range(32):\n        if common & (1 << i):\n            count += 1\n    \n    # Return the count of swaps.\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for counting swaps\n    swaps = 0\n    # Initialize variables for carrying over\n    carry = 0\n\n    # Iterate through each bit of the binary numbers\n    for i in range(32):\n        # Calculate the sum of the current bits\n        current_sum = (num1 >> i) & 1 ^ (num2 >> i) & 1 ^ carry\n\n        # If there is a carry over, add it to the current sum\n        if carry:\n            current_sum += carry\n\n        # If the current sum is greater than 1, there is a swap required\n        if current_sum > 1:\n            swaps += 1\n\n        # Update the carry over for the next iteration\n        carry = current_sum & 1\n\n        # Reset the carry over if the current sum is 0\n        carry = carry & 1 if current_sum == 0 else carry\n\n    # Return the minimum number of swaps required to convert the binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # find the number of set bits in each number\n    count1 = bin(num1).count('1')\n    count2 = bin(num2).count('1')\n\n    # calculate the minimum number of swaps required\n    min_swaps = 0\n    diff = abs(count1 - count2)\n\n    # if the difference is odd, the minimum number of swaps is one more than the difference\n    if diff % 2!= 0:\n        min_swaps = diff + 1\n\n    # if the difference is even, the minimum number of swaps is half the difference\n    else:\n        min_swaps = diff // 2\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # determine the length of the binary numbers\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # check if the binary numbers are of equal length\n    if n1!= n2:\n        print(\"Error: Binary numbers must be of equal length.\")\n        return\n\n    # calculate the maximum possible value for the swaps required\n    max_swaps = n1\n\n    # iterate over all possible swaps\n    for i in range(n1):\n        # calculate the binary representation of i + 1\n        binary_i_plus_1 = bin(i + 1)[2:]\n\n        # check if the swapped binary number is in the list of possible values for str2\n        if binary_i_plus_1 in str2:\n            # calculate the number of swaps required to get the swapped binary number to str2\n            swaps = n2 - str2.index(binary_i_plus_1)\n            # check if the number of swaps is less than the maximum number of swaps\n            if swaps < max_swaps:\n                max_swaps = swaps\n\n    # return the minimum number of swaps required\n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert them.\n    The function uses a greedy algorithm to find the minimum number of swaps required.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Make the strings of the same length\n    if n1 > n2:\n        str1 = str1.zfill(n2)\n    else:\n        str2 = str2.zfill(n1)\n\n    # Initialize the swaps count\n    swaps = 0\n\n    # Check each digit in the strings\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # If the digits are different, swap the digits\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # initialize variables for counting swaps\n    count = 0\n    # iterate through each bit in the binary representation\n    for i in range(32):\n        # if bits don't match, swap bits\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # increment count and invert bit\n            count += 1\n            num1 ^= (1 << i)\n            # if bit is 0, shift the corresponding bit in num2 to the right\n            if num2 & (1 << i) == 0:\n                num2 = num2 << 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Find the number of bits required to represent the smaller number\n    num_bits = len(bin(min(num1, num2))[2:])\n\n    # Initialize a list of zeros to represent each bit of the binary number\n    bit_list = [0] * num_bits\n\n    # Calculate the difference between the binary numbers\n    diff = num1 ^ num2\n\n    # Iterate through each bit of the binary number and add it to the corresponding position of the bit_list\n    for i in range(num_bits):\n        bit_list[i] = diff & 1\n        diff = diff >> 1\n\n    # Initialize the minimum number of swaps required to convert the binary numbers\n    min_swaps = num_bits\n\n    # Iterate through each bit of the bit_list and count the number of swaps required to convert the corresponding binary number to a decimal number\n    for i in range(num_bits):\n        diff = bit_list[i] - i\n        swaps = 0\n        while diff!= 0:\n            diff = diff & (diff - 1)\n            swaps += 1\n        min_swaps = min(min_swaps, swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to lists of digits\n    num1 = [int(x) for x in str1]\n    num2 = [int(x) for x in str2]\n\n    # initialize counters for swaps and differences\n    swaps = 0\n    diff = 0\n\n    # iterate over the digits of the binary numbers\n    for i in range(len(num1)):\n        # compare the digits of the two binary strings\n        if num1[i]!= num2[i]:\n            # increment the swap counter if the digits are different\n            swaps += 1\n        # increment the difference counter if the digits are equal\n        else:\n            diff += 1\n\n    # return the minimum number of swaps required\n    return swaps + diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Convert both integers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Calculate the lengths of the binary strings\n    len1 = len(bin1)\n    len2 = len(bin2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Compare the binary strings from the end\n    for i in range(len1 - 1, -1, -1):\n        if bin1[i] == bin2[i]:\n            continue\n        else:\n            # Swap the characters\n            bin1 = bin1[:i] + bin2[i] + bin1[i+1:]\n            bin2 = bin2[:i] + bin1[i] + bin2[i+1:]\n\n            # Increment the minimum number of swaps\n            min_swaps += 1\n\n            # Break the loop\n            break\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Assuming that each tuple in the list is a fixed size\n    fixed_size = sys.getsizeof(tuple_list[0])\n    \n    # Looping through the list and adding up the size of each tuple\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n        \n    # Returning the total size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n    size = struct.calcsize('i') * len(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k as input and returns the kth smallest element in the two arrays.\n    \"\"\"\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    i = 0\n    j = len(arr1) - 1\n    while i <= j:\n        pivot1 = arr1[i]\n        pivot2 = arr2[j]\n        if pivot1 < pivot2:\n            i += 1\n        elif pivot1 > pivot2:\n            j -= 1\n        else:\n            k -= 1\n            if k == 0:\n                return pivot1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers i, j to traverse both arrays\n    i = 0\n    j = 0\n    # Initialize a counter k to keep track of the elements found\n    kth_count = 0\n    # Loop through both arrays until one of them is empty\n    while arr1 and arr2:\n        # If arr1 is empty and arr2 has elements, move j pointer to the right\n        if not arr1:\n            j += 1\n        # If arr2 is empty and arr1 has elements, move i pointer to the right\n        elif not arr2:\n            i += 1\n        # If both arrays have elements, compare the elements at the i and j pointers\n        elif arr1[i] < arr2[j]:\n            # Increment the kth count\n            kth_count += 1\n            # If kth count is equal to k, return the element at the i pointer\n            if kth_count == k:\n                return arr1[i]\n            # Move the i pointer to the right\n            i += 1\n        else:\n            # Increment the kth count\n            kth_count += 1\n            # If kth count is equal to k, return the element at the j pointer\n            if kth_count == k:\n                return arr2[j]\n            # Move the j pointer to the right\n            j += 1\n    # If kth count is less than k, return None\n    if kth_count < k:\n        return None\n    # If kth count is greater than k, return None\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i-1]\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr1[i], arr2[j]\n            else:\n                return arr1[i], arr2[j], find_kth(arr1[i+1:], arr2[j+1:], k-2)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    return merged\n\ndef find_kth(arr1, arr2, k):\n    m = len(arr1)\n    n = len(arr2)\n\n    # merge the two sorted arrays\n    merged = merge(arr1, arr2)\n\n    # find the kth element\n    index = (m + n + 1) // 2 - 1\n    if k < index:\n        return find_kth(arr1[:k], arr2, k)\n    elif k > index:\n        return find_kth(arr1, arr2[:k - index], k - index)\n    else:\n        return merged[k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays `arr1` and `arr2` and a number `k`, and returns the `k`th smallest element from the arrays.\n    \"\"\"\n    # Find the length of the smaller array\n    n = len(arr1) if len(arr1) <= len(arr2) else len(arr2)\n    \n    # Iterate through the smaller array, comparing the kth element with the remaining elements\n    for i in range(n):\n        if arr1[i] < arr2[i]:\n            return arr1[i]\n        elif arr1[i] > arr2[i]:\n            return arr2[i]\n        else:\n            continue\n    \n    # If the kth element is greater than all the remaining elements, the function returns the last element of the smaller array\n    if k > n:\n        return arr1[n-1]\n    else:\n        return arr2[n-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    # If k is greater than the total number of elements in the arrays, return None\n    if k > len(arr1) + len(arr2):\n        return None\n    # If k is less than the total number of elements in the arrays, return the kth element from arr2\n    elif k < len(arr1) + len(arr2):\n        return arr2[k - len(arr1)]\n    # If k is equal to the total number of elements in the arrays, return None\n    else:\n        return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    return any(n == int(x**len(str(n))) for x in range(10))\n\ndef armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    str_number = str(number)\n    # Initialize a variable to store the sum of the cubes of each digit\n    sum_cubes = 0\n    # Loop through each digit in the number\n    for digit in str_number:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the cube of the digit\n        cube_digit = digit_int ** 3\n        # Add the cube of the digit to the sum_cubes variable\n        sum_cubes += cube_digit\n    # Check if the sum of the cubes of each digit is equal to the original number\n    if sum_cubes == number:\n        # If it is, then the number is an armstrong number\n        print(\"The number is an armstrong number.\")\n    else:\n        # If it's not, then it's not an armstrong number\n        print(\"The number is not an armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    '''\n    Function to check if a given number is an Armstrong number or not.\n    '''\n    if number < 10:\n        return False\n    digits_sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        digits_sum += digit ** 3\n        num //= 10\n    return number == digits_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(n):\n    # convert the number to a string\n    n_str = str(n)\n    # calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(digit)**3 for digit in n_str])\n    # compare the sum with the original number\n    return sum_of_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Function to check whether the given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(number)\n    sum_of_squares = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_squares += digit ** power\n\n    if sum_of_squares == number:\n        return True\n    else:\n        return False\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong(num):\n        print(\"The given number is an Armstrong number.\")\n    else:\n        print(\"The given number is not an Armstrong number.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = \"\".join(filter(str.isdigit, str(number)))\n    # Calculate the sum of the cube of each digit in the number\n    armstrong_sum = sum(int(digit) ** 3 for digit in number_str)\n    # Compare the sum to the original number\n    if armstrong_sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n    \n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n        \n    if temp == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if n is an Armstrong number, else False.\n    \"\"\"\n    if n < 10:\n        return False\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(x**len(digits) for x in digits) == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check if the given number is an Armstrong number or not.\n\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    Args:\n    number: the number to check if it is an Armstrong number or not\n\n    Returns:\n    True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the digits of the number\n    sum_of_digits = sum(int(digit) ** len(number_str) for digit in number_str)\n\n    # Check if the result is equal to the original number\n    return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the length of the number\n    length = len(str(number))\n    \n    # Calculate the sum of the digits of the number\n    sum_of_digits = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_digits += digit ** length\n        number //= 10\n    \n    # Check whether the sum of digits is equal to the number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    for i in range(number):\n        sum_num += i\n    average = sum_num / number\n    print(f\"The sum of the first {number} natural numbers is: {sum_num}\")\n    print(f\"The average of the first {number} natural numbers is: {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"The sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"The average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_val = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_val += i\n        count += 1\n    avg = sum_val / count\n    return sum_val, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    average = 0\n    \n    while count < number:\n        sum_num += count\n        count += 1\n        \n    average = sum_num / number\n    \n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n natural numbers\n    and the average of these numbers.\n    \"\"\"\n    # Calculate sum of the first n natural numbers\n    total = 0\n    for i in range(1, n+1):\n        total += i\n\n    # Calculate average of the first n natural numbers\n    average = total / n\n\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1, number+1):\n        sum += i\n        total += 1\n    average = sum / total\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"Sum of first {} natural numbers is: {}\".format(number, sum))\n    print(\"Average of first {} natural numbers is: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it's even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check if the number is divisible by 2 or not\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through the characters in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the characters in the string again\n    for char in str1:\n        # If the character is already in the dictionary and its count is greater than 1,\n        # return the character as the first repeated character\n        if char in char_count and char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 2:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 2:\n            return char\n\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through the string and update the count of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a variable to store the first repeated character\n    first_char = None\n\n    # Loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            first_char = char\n            break\n\n    # Return the first repeated character\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # Initialize an empty dictionary to store the frequency of characters\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # Otherwise, add it to the dictionary with frequency 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first repeated character by looping through the dictionary\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_number = 0\n        current_number = i\n        while current_number > 0:\n            digit = current_number % 10\n            if digit == 0:\n                break\n            lucid_number = lucid_number * 10 + digit\n            current_number //= 10\n        if lucid_number <= n:\n            lucid_numbers.append(lucid_number)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    This function takes an integer as input and returns a list of all lucid numbers smaller than or equal to n.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if i == 1:\n            ludic_numbers.append(1)\n        elif i > 1 and i % 2 == 0:\n            ludic_numbers.append(2*i)\n        else:\n            ludic_numbers.append(2*(i-1))\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucids.append(i)\n        i += 1\n    return lucids\n\ndef is_lucid(num):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    lucid = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer n.\n    \"\"\"\n    lucids = [x for x in range(n+1) if all(x % i!= 0 for i in range(2, int(x**0.5)+1))]\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or (i % 2 == 1 and i % 5 == 0):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            ludic.append(i)\n        i += 1\n        if i > n:\n            break\n    return ludic\n\ndef is_lucid(n):\n    '''\n    Check if a number is a lucid number.\n    '''\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n ** 0.5:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_list = []\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_list.append(i)\n\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    # Initialize a counter variable to keep track of the number of digits in n\n    num_digits = len(str(n))\n    # Loop through the range of lucid numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is a Lucid number by dividing it by 2 and checking if the quotient is equal to 1\n        if i % 2 == 1:\n            # Check if the current number has the same number of digits as n\n            if len(str(i)) == num_digits:\n                # Add the current number to the lucid_numbers list if it is a Lucid number\n                lucid_numbers.append(i)\n    # Return the list of Lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a number is lucid or not.\n    '''\n    return all(num % i == 0 for i in range(2, int(num**0.5)+1))"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n\n    reversed_string = \" \".join(reversed_words)\n\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    reversed_words = words[::-1] # reverse the list of words using slicing\n    return''.join(reversed_words) # join the reversed words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    reversed_words = []  # initialize an empty list to store the reversed words\n    for word in words:  # iterate over each word in the list\n        reversed_words.append(word[::-1])  # reverse the word and add it to the reversed list\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words together with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is divisible by any number between 2 and the square root of the given number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If none of the above conditions are true, then the given number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Checks if num is a prime number and returns the result.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n    \n    # Check if the number is divisible by any number from 3 to the square root of the number (inclusive)\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    \n    # If the loop completes without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None, None, None\n    else:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.search() method to find the first occurrence of the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If no match is found, return None\n    if not match:\n        return None\n    \n    # Get the matching substring, start index and end index\n    literal = match.group()\n    start = match.start()\n    end = match.end()\n    \n    # Return the matching substring, start index and end index\n    return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            result.append((match, start, end))\n        return result\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes two arguments: a string 'text' and a regex pattern 'pattern'.\n    The function searches for all matches of the pattern in the text, and returns the matching substring, start index, and end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append(match.group())\n        result.append(match.start())\n        result.append(match.end())\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            bell_seq = 1\n            for j in range(1, i):\n                bell_seq *= j\n            bell_seq *= 1/math.factorial(i-1)\n            bell_seq = int(bell_seq)\n            yield bell_seq"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    This function will return the nth Bell number.\n    '''\n    if n < 0:\n        return \"Input must be a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        bell_list = [1]\n        for i in range(1, n):\n            bell_list.append(bell_list[i-1] + bell_list[i-2])\n        return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 1 \n    else: \n        return 2*bell_Number(n-1) + 1 "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return bell_Number(n//2) + bell_Number(n//2)\n    else: \n        return bell_Number(n//2) * bell_Number(n//2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2**n - 1) // (2*n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # check if n is a positive integer\n    if n <= 0:\n        print(\"n should be a positive integer\")\n        return None\n    \n    # initialize variable to keep track of paths ending at each vertex\n    paths = [0] * (n+1)\n    \n    # initialize counter variable to keep track of paths\n    path_count = 0\n    \n    # iterate through all possible paths of length n and count the number of paths that end at each vertex\n    for i in range(1, n+1):\n        paths[i] = paths[i-1]\n        if i % 2 == 0:\n            paths[i] += paths[i//2]\n        else:\n            paths[i] -= paths[i//2]\n            \n        # increment the path count by the number of paths of length n that end at each vertex\n        path_count += paths[i]\n    \n    # return the nth Bell number\n    return path_count"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list with all elements except the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    elif L > 1:\n        return list1[:L-1] + list1[L:]\n    else:\n        return []"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # initialize variables to keep track of the position of the kth element\n    kth_index = 0\n    count = 0\n\n    # iterate through the list to find the kth element\n    for i in range(len(list1)):\n        if count == L:\n            break\n        if list1[i] == list1[kth_index]:\n            kth_index += 1\n        count += 1\n\n    # remove the kth element from the list\n    list1 = list1[:kth_index] + list1[kth_index+1:]\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize an empty list to store the new list with the k'th element removed\n    new_list = []\n    # Loop through the original list\n    for i in range(len(list1)):\n        # If the index is less than L, append the current element to the new list\n        if i < L:\n            new_list.append(list1[i])\n        # If the index is equal to L, skip the current element and move on to the next index\n        elif i == L:\n            continue\n        # If the index is greater than L, skip the current element and append the next element to the new list\n        else:\n            new_list.append(list1[i+1])\n    # Return the new list with the k'th element removed\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    k = L - 1\n    i = 0\n    while i < len(list1) - k:\n        list1[i], list1[i+k] = list1[i+k], list1[i]\n        i += 1\n    return list1[i:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    max_val = 0\n    for i in range(n):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(matrix, N):\n    max_val = 0\n    for i in range(len(matrix)):\n        if matrix[i][N-1] > max_val:\n            max_val = matrix[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # convert the matrix to a 2D array\n    test_arr = [[row[i] for row in test_list] for i in range(len(test_list[0]))]\n    # get then'th column as a list\n    nth_col = [row[N-1] for row in test_arr]\n    # get the maximum value of then'th column\n    max_val = max(nth_col)\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            if max_val < test_list[i][i]:\n                max_val = test_list[i][i]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to store the max values\n    max_values = []\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Append the value of then'th column to the max_values list\n        max_values.append(row[N-1])\n\n    # Return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initialize a counter for the number of columns\n    col_count = 0\n    \n    # initialize a counter for the number of rows\n    row_count = len(test_list)\n    \n    # loop through the matrix\n    for i in range(row_count):\n        \n        # check if we have found the nth column\n        if col_count == N:\n            return max(test_list[i])\n        \n        # increment the counter for the number of columns\n        col_count += 1\n    \n    # if we haven't found the nth column\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the total number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Initialize a variable to store the maximum value of then'th column\n    max_value = float('-inf')\n\n    # Loop through each row of the matrix\n    for row in test_list:\n\n        # Check if the current value of n is within the range of valid column indices\n        if N <= num_cols and N >= 1:\n\n            # If the current value of n is within the valid range, check if the current value is greater than the maximum value\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n\n    # Return the maximum value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_val = None\n    for row in test_list:\n        if max_val is None:\n            max_val = row[N-1]\n        else:\n            max_val = max(row[N-1], max_val)\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    merged_list = []\n    \n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n        \n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for element in test_list:\n        cumulative_sum += element\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[0]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize cumulative sum as empty list\n    cum_sum = []\n    # Loop through the input list\n    for num in test_list:\n        # If the current number is not already in the cumulative sum list, add it\n        if num not in cum_sum:\n            cum_sum.append(num)\n        # Loop through the cumulative sum list to find the sum of all previous numbers\n        for i in range(len(cum_sum)):\n            cum_sum[i] += num\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    # Loop through the list and add the values to the cumulative sum\n    for num in test_list:\n        cumulative_sum += num\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        total_sum += tup[0]\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # iterate over the tuple list and add each element to the cumulative sum\n    for element in test_list:\n        cum_sum += element\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        count = len(num_tuple)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        average = total/len(nums[i])\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        temp_sum = sum(nums[i])\n        temp_length = len(nums[i])\n        averages.append(temp_sum/temp_length)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_num = sum(tup)\n        avg = sum_num/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        averages.append(total/len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for i, num_tuple in enumerate(nums):\n        # Loop through each element in the current tuple\n        for j, num in enumerate(num_tuple):\n            # Add the current number to the running total\n            total += num\n        \n        # Calculate the average and add it to the average list\n        avg = total / len(num_tuple)\n        avg_list.append(avg)\n        \n        # Reset the total for the next tuple\n        total = 0\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_values = []\n    for tup in nums:\n        avg_values.append(sum(tup)/len(tup))\n    return avg_values"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple using the built-in sum and len functions\n        avg = sum(tup) / len(tup)\n        # Add the average to the averages list\n        averages.append(avg)\n\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize a list to store the average values\n    averages = []\n    # loop through each tuple in the list of tuples\n    for tup in nums:\n        # calculate the average of the tuple using the sum and len functions\n        avg = sum(tup) / len(tup)\n        # append the average to the list of averages\n        averages.append(avg)\n    # return the list of averages\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the input tuples have different lengths\")\n        return\n    \n    # create an empty list to store the result of element wise modulo\n    result_list = []\n    \n    # perform element wise modulo and store the result in the result_list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n    \n    # return the result_list\n    return result_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples are not of the same length.\")\n        return None\n    \n    # Perform the element wise modulo operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be the same.\")\n\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # Iterate through both tuples\n        for i in range(len(test_tup1)):\n            # Perform the element wise modulo operation\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n    else:\n        # If the lengths of the tuples are not equal, raise an error\n        print(\"Error: Tuple lengths are not equal.\")\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    # Find the number of jumps required to reach the point (d, 0) from origin \n    jumps = 0\n    for i in range(steps - 1): \n        jumps += 1\n        if d > 0: \n            d -= 1\n\n    # If the last step does not lead to (d, 0), then there are more jumps required \n    if d > 0: \n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    # create a 2d array dp\n    dp = [[float('inf')] * (steps + 1) for _ in range(steps + 1)]\n    \n    # initialize values of dp\n    for i in range(steps + 1):\n        dp[i][0] = 0\n    for j in range(1, steps + 1):\n        dp[0][j] = float('inf')\n    \n    # fill in values of dp\n    for i in range(1, steps + 1):\n        for j in range(1, steps + 1):\n            if i == 1:\n                dp[i][j] = min(dp[i][j], dp[i-1][j])\n            if i == d[0]:\n                dp[i][j] = min(dp[i][j], dp[i][j-1])\n            if i == d[0] and j == d[1]:\n                return 0\n            if i > d[0] and j > d[1]:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + dp[i][j-1])\n    \n    # return minimum number of jumps required to reach destination point\n    return dp[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    x = 0\n    y = 0\n    jumps = 0\n    steps_taken = 0\n\n    # Check if (d, 0) is reachable from origin in the first step\n    if steps_taken == 0:\n        if abs(d) <= x:\n            jumps += 1\n            steps_taken += 1\n            x += d\n        else:\n            return -1\n\n    # Traverse the 2D plane and check for (d, 0) at each step\n    while steps_taken < steps:\n        # Check if (d, 0) is reachable from origin at the current step\n        if abs(d) <= x:\n            jumps += 1\n            steps_taken += 1\n            x += d\n        else:\n            # If (d, 0) is not reachable from origin, check if we can reach (d, 0) from the previous step\n            if abs(d) <= x - d:\n                x -= d\n                steps_taken += 1\n            else:\n                return -1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # check if steps is less than or equal to 0\n    if steps <= 0:\n        return \"Invalid input\"\n\n    # initialize variables for step count and jump count\n    stepCount = 0\n    jumpCount = 0\n\n    # initialize variables for previous step count and distance\n    prevStepCount = 0\n    prevDistance = 0\n\n    # loop through steps\n    for i in range(steps):\n\n        # calculate distance and step count from previous step count and distance\n        distance = i + 1\n        stepCount = distance * d\n\n        # check if step count is less than previous step count\n        if stepCount < prevStepCount:\n            jumpCount += 1\n            prevStepCount = stepCount\n            prevDistance = distance\n\n    # return the jump count\n    return jumpCount"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    pos = (0, 0)\n    step = 1\n    count = 0\n    \n    # Loop until position is (d, 0)\n    while pos[0] < d:\n        \n        # Check if position is (0, 0)\n        if pos[1] == 0:\n            count += 1\n            step = 1\n        \n        # Check if position is not (0, 0)\n        else:\n            step += 1\n        \n        # Move position by step\n        pos = (pos[0], pos[1] + step)\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 1:\n        return 0\n    elif steps == 2:\n        return 1\n    else:\n        # Helper function to check if the point can be reached from (0, 0) in at most k jumps\n        def helper(k):\n            if k == 0:\n                return True\n            elif d == 0:\n                return False\n            else:\n                if d > 0:\n                    return helper(k-1) or helper(k-2)\n                else:\n                    return helper(k-1) or helper(k-2) and helper(k-2)\n\n        # Count the number of jumps required to reach (d, 0) from origin\n        count = 0\n        while steps > 0:\n            if helper(steps):\n                count += steps\n                steps = 1\n            else:\n                steps -= 1\n        return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Check for all possible values of steps that can be taken to reach the point (d, 0) from origin\n    for step in range(1, steps+1):\n        # Check for all possible values of d that can be added to the current step to reach the point (d, 0) from origin\n        for i in range(1, step+1):\n            if d == 0 and i == step:\n                return 0\n            elif d + i == 0:\n                return min_Jumps(steps - step, d + i) + 1\n\n    # If no valid values of d can be found, return -1 to indicate that no valid solution exists\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    i = 1\n    j = 0\n    while (j < steps):\n        # If we have reached (d, 0)\n        if (i == d and j == 0):\n            return count\n        # If we have reached (0, 0)\n        elif (i == 0 and j == 0):\n            return count\n        # If we have not reached (0, 0)\n        else:\n            # If we are moving downwards\n            if (i > 0):\n                # Move downwards\n                i -= 1\n                j += 1\n            # If we are moving rightwards\n            elif (i == 0):\n                # Move rightwards\n                j += 1\n            # If we are moving upwards\n            else:\n                # Move upwards\n                i += 1\n                j += 1\n                count += 1\n    # If we have not reached (d, 0)\n    else:\n        # Return the count of jumps\n        return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = steps + 1\n    jumps = 0\n\n    # Calculate number of jumps\n    while steps > 0:\n        if d >= steps:\n            d -= steps\n            steps = 1\n            jumps += 1\n        else:\n            steps -= d\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps):\n        if i > 0 and i % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their element-wise division.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i] == 0:\n                print(\"Cannot divide by zero.\")\n                return\n            else:\n                result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length.\")\n        return\n    \n    # create a new list to store the result\n    result = []\n    \n    # iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # perform the division and store the result in the new list\n        result.append(nums1[i] / nums2[i])\n    \n    # return the new list as the result\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # create a new list to store the results\n    result = []\n\n    # iterate through each element in the lists\n    for i in range(len(nums1)):\n        # divide the corresponding elements in the lists\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the lists\n    for i in range(len(nums1)):\n        # Divide the element of the first list by the element of the second list\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of the same length\")\n        return\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            test_str = ''.join(num_list) + test_str\n            num_list = []\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    nums = \"\"\n    non_nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            non_nums += char\n    return non_nums + nums"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # define a function to check if a character is a number\n    def is_number(char):\n        try:\n            float(char)\n            return True\n        except ValueError:\n            return False\n\n    # iterate through the string and move all numbers to the end\n    new_str = \"\"\n    for char in test_str:\n        if is_number(char):\n            new_str += char\n        else:\n            new_str += str(char)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    num_list = []\n    \n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the number list\n        if char.isdigit():\n            num_list.append(char)\n    \n    # join the list of numbers into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all the numbers in the string\n    num_list = re.findall(r'\\d+', test_str)\n    \n    # Reverse the list of numbers\n    rev_num_list = num_list[::-1]\n    \n    # Combine the numbers and the string together\n    result = ''.join(rev_num_list + [num.strip() for num in num_list])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if len(num_list) > 0:\n        num_str = ''.join(num_list)\n        return test_str.replace(num_str, '') + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    nums.reverse()\n    num_str = ''.join(nums)\n    return test_str.replace(num_str, '') + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize the index of the last number found\n    last_num_index = -1\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # check if the current character is a number\n        if test_str[i].isdigit():\n            # move the number to the end of the string\n            test_str = test_str[:last_num_index+1] + test_str[i:].replace(test_str[i], '')\n            # update the index of the last number found\n            last_num_index = i\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n\n    n = len(a)\n    m = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            m += 1\n        else:\n            m = 1\n        if m > n:\n            break\n\n    return m"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 0\n    for i in range(n-1):\n        if a[i] % a[i+1] == 0:\n            max_size += 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a list of unique pairs of numbers in the list\n    pairs = set([(a[i], a[j]) for i in range(len(a)) for j in range(i+1, len(a))])\n    # sort the list of pairs in ascending order of their sum\n    pairs = sorted(pairs, key=lambda x: sum(x))\n    # initialize a variable to store the size of the largest subset\n    max_size = 0\n    # loop through the sorted list of pairs\n    for pair in pairs:\n        # if the pair is divisible by 2, update the size of the largest subset\n        if pair[0] % 2 == 0 and pair[1] % 2 == 0:\n            max_size = max(max_size, pair[0], pair[1])\n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    max_subsets = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                if j - i + 1 > max_size:\n                    max_size = j - i + 1\n                    max_subsets = [[a[i], a[j]]]\n                elif j - i + 1 == max_size:\n                    max_subsets.append([a[i], a[j]])\n\n    return max_size, max_subsets"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in non-decreasing order\n    a.sort()\n\n    # Initialize variables\n    count = 0\n    largest = 1\n\n    # Traverse the sorted list\n    for i in range(len(a)):\n        # Increment the count for the current number if it's divisible by the next number\n        if a[i] % a[i+1] == 0:\n            count += 1\n            largest = max(largest, count)\n        else:\n            # Reset the count to 1 if the current number is not divisible by the next number\n            count = 1\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Create a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the largest subset of numbers that are divisible by 2\n    max_subset_size = 0\n    subset = []\n    for i in range(max(a)):\n        if (i + 1) % 2 == 0 and (i + 2) % 2 == 0:\n            subset.append(i + 1)\n            max_subset_size += 1\n        else:\n            subset.append(i)\n    \n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Create a boolean matrix to store the divisibility of every pair of numbers\n    divisibility = [[False] * (n+1) for _ in range(n+1)]\n\n    # Initialize the first row and column of the boolean matrix to True\n    for i in range(1, n+1):\n        divisibility[i][0] = True\n        divisibility[0][i] = True\n\n    # Fill the rest of the matrix using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if a[j-1] % a[i-1] == 0:\n                divisibility[i][j] = divisibility[i-1][j-1]\n            else:\n                divisibility[i][j] = max(divisibility[i][j-1], divisibility[i-1][j])\n\n    # Find the size of the largest subset of a list of numbers divisible by a[i-1]\n    def find_size(i, subset):\n        if subset == [1]:\n            return 1\n        if divisibility[subset[-1]][i]:\n            return find_size(i, subset) + 1\n        else:\n            return max(find_size(i, subset[:-1]), find_size(i, subset))\n\n    size = find_size(n, [1])\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    \n    # Create a list to store the sizes of subsets\n    subset_sizes = []\n    \n    # Initialize the first subset size\n    subset_sizes.append(1)\n    \n    # Create a list to store the remaining numbers in the list\n    remaining_nums = a[:]\n    \n    # Iterate through the remaining numbers\n    for num in remaining_nums:\n        # Initialize a variable to store the largest subset size\n        max_subset_size = 0\n        \n        # Iterate through the subsets of the previous subsets\n        for i in range(len(subset_sizes)):\n            # If the current number is not divisible by the previous subset, skip to the next iteration\n            if num % subset_sizes[i]!= 0:\n                continue\n            \n            # Update the maximum subset size\n            max_subset_size = max(max_subset_size, subset_sizes[i])\n        \n        # If the current number is divisible by all previous subsets, add 1 to the maximum subset size\n        if num % max_subset_size!= 0:\n            max_subset_size += 1\n        \n        # Add the current subset size to the list of subset sizes\n        subset_sizes.append(max_subset_size)\n    \n    # Return the maximum subset size\n    return max(subset_sizes)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables\n    curr_size = 1\n    max_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the difference between the current element and the previous element is divisible by 2, update the current size\n        if a[i] - a[i-1] % 2 == 0:\n            curr_size += 1\n        else:\n            # If the current size is greater than the maximum size, update the maximum size\n            if curr_size > max_size:\n                max_size = curr_size\n            # Reset the current size\n            curr_size = 1\n\n    # If the current size is greater than the maximum size, update the maximum size\n    if curr_size > max_size:\n        max_size = curr_size\n\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    size = 0\n    current_sum = 0\n\n    # Iterate through the list\n    for num in a:\n        # If the sum of the current number and the current subset is less than or equal to the target sum,\n        # add the current number to the current subset\n        if current_sum + num <= 2 * num:\n            current_sum += num\n            size += 1\n        else:\n            # If the sum is greater than the target sum, reset the current subset\n            current_sum = num\n\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists and sort them\n    merged = sorted(arr1 + arr2)\n\n    # Determine the length of the resulting list\n    m = len(merged)\n\n    # If the length of the list is odd, the median is the middle element\n    if m % 2 == 1:\n        return merged[m // 2]\n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (merged[m // 2 - 1] + merged[m // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Calculate the length of the list\n    length = len(sorted_list)\n    \n    # If the length of the list is odd, then the median is the middle element\n    if length % 2!= 0:\n        median = sorted_list[length // 2]\n    # If the length of the list is even, then the median is the average of the two middle elements\n    else:\n        median = (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # merge the two lists into one\n    merged_list = arr1 + arr2\n\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # calculate the median\n    median = sorted_list[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError('Both lists should have the same size.')\n    \n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median index\n    median_index = n // 2\n    \n    if n % 2 == 0:\n        # If the number of elements is even, return the average of the two elements at the median indices\n        median1 = merged_list[median_index - 1]\n        median2 = merged_list[median_index]\n        return (median1 + median2) / 2\n    else:\n        # If the number of elements is odd, return the element at the median index\n        return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid = n // 2\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        mid = (n + 1) // 2\n        return arr1[mid - 1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    # find the median index\n    median_index = n // 2\n    # find the median value\n    if n % 2 == 0:\n        median_value = (sorted_list[median_index - 1] + sorted_list[median_index]) / 2\n    else:\n        median_value = sorted_list[median_index]\n    return median_value"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    arr = arr1 + arr2\n\n    # Find the middle element of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n\n    # If the length of the merged list is even, the median is the average of the middle two elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        median = merged_arr[mid]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for num in nums:\n        power = power * num\n        print(num, end=' ')\n        if n == 1:\n            break\n        n -= 1\n        power = power / num\n        print(power)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Use a list comprehension to iterate over each character in the string\n    # and convert it to uppercase\n    return ''.join([char.upper() for char in string])"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is greater than 1\n    if length > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The length of the list must be greater than 1.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least 2 elements.\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the modified list\n    print(\"Modified list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list is empty\n    if len(newList) == 0: \n        return \"The list is empty.\"\n\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # If the list has more than one element, swap the first and last elements\n    if length > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"The list must have more than one element to swap its elements.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) >= 2:\n        first, last = newList[0], newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list is too short to swap the first and last elements.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # Check if the list has only one element\n    if len(newList) == 1:\n        return newList\n\n    # Check if the list has only two elements\n    elif len(newList) == 2:\n        return [newList[1], newList[0]]\n\n    # Check if the list has three or more elements\n    else:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is greater than 1\n    if length > 1:\n        # Use a loop to iterate over the list and swap the first and last elements\n        for i in range(length-1):\n            # Swap the first and last elements\n            newList[i], newList[length-1-i] = newList[length-1-i], newList[i]\n            \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for the area of a triangle given the semi-circle's radius and its angle\n    area = 0.5 * r * r * (1 + (2 * r) / (3 * pi))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # convert radius to degrees\n    radius_deg = r * 180 / math.pi\n\n    # calculate the area of the largest triangle\n    area_triangle = (math.sqrt(3) / 4) * radius_deg ** 2\n\n    # calculate the area of the smallest semicircle\n    area_semicircle = (math.pi / 2) * radius_deg ** 2\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_inscribed_triangle = area_triangle - area_semicircle\n\n    return area_inscribed_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\n    # Find the area of the smallest square that can be inscribed in the semicircle\n    area = (4/3) * pi * r ** 3\n    \n    # Find the side length of the triangle with the largest area\n    s = (4/3) * pi * r ** 2\n    \n    # Find the side length of the smallest triangle that can form a right triangle with the given side length\n    s2 = (s**2 + area**2)**0.5\n    \n    # Calculate the area of the triangle with the largest side length\n    area2 = (s2/s)**2\n    \n    return area2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r\n    b = math.sqrt(r**2 - a**2)\n    return math.sqrt(a**2 + b**2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    def inscribed_triangle_area(r):\n        '''\n        Write a python function to find the area of an inscribed triangle with a given radius.\n        '''\n        a = 2 * r\n        s = (3 * r**2) / 4\n        return math.sqrt(s) - math.sqrt(a)\n\n    def inscribed_circle_area(r):\n        '''\n        Write a python function to find the area of a circle inscribed in a semicircle with a given radius.\n        '''\n        return math.pi * r**2\n\n    area = inscribed_triangle_area(r) * inscribed_circle_area(r) / (inscribed_triangle_area(r) + inscribed_circle_area(r))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # Calculate the area of a triangle with base a and height h using Heron's formula\n    def triangle_area(a, h):\n        s = (a + h + math.sqrt(a*a + h*h))/2\n        return math.sqrt(s*(s-a)*(s-h)*(s-a))\n\n    # Calculate the area of a semicircle with radius r using the formula for the area of a semicircle\n    def semicircle_area(r):\n        return 2*r*math.pi\n\n    # Calculate the length of the longest side of the largest triangle that can be inscribed in a semicircle with radius r\n    def longest_side_length(r):\n        return 2*r*math.sqrt(3)\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    def largest_triangle_area(r):\n        # Find the length of the longest side of the largest triangle that can be inscribed in a semicircle with radius r\n        l = longest_side_length(r)\n\n        # Calculate the area of the triangle with base l and height r\n        base_area = triangle_area(l, r)\n\n        # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n        triangle_area = base_area * (1/3)\n\n        return triangle_area\n\n    # Call the function to find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = largest_triangle_area(r)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # First, we need to find the length of the semicircle\n    s = 2*r\n    \n    # Next, we can use Heron's formula to find the area of the largest triangle\n    a = 3*r**2\n    s_squared = s**2\n    \n    h = 2*a/s_squared\n    \n    # Finally, we can use the Pythagorean theorem to find the length of the longest side of the triangle\n    longest_side = 2*h\n    return longest_side"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for area of largest triangle inscribed in a semicircle\n    # A = 2 * pi * r * sqrt(r^2 - x^2)\n    # x = (r^2 - sqrt(r^2 - r^2)) / (2 * r)\n    # A = 2 * pi * r * sqrt(x^2 + r^2 - x^2)\n\n    # Calculate x value\n    x = (r**2 - r**2) / (2*r)\n\n    # Calculate area of largest triangle\n    A = 2 * math.pi * r * math.sqrt(x**2 + r**2 - x**2)\n\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius r as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    # Calculating semi-circle area using Heron's formula\n    s = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n\n    # Calculating area of the largest triangle\n    area = (2 * r * s) / math.tan(math.pi / 3)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid > 0 and array[mid] == mid:\n            start = mid + 1\n        elif mid < len(array) - 1 and array[mid + 1] == mid + 1:\n            end = mid - 1\n        else:\n            return mid\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # initialize the missing number to the smallest possible value\n    missing_num = start\n    \n    # check if the array is sorted or not\n    if start > 0 and array[0]!= start:\n        return None\n    \n    # check if the end value is given or not\n    if end is None:\n        end = max(array)\n    \n    # loop through the array and check for missing numbers\n    for num in range(start, end + 1):\n        if num not in array:\n            missing_num = num\n            break\n    \n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the array is empty or contains only zeros, return the smallest number in the array.\n    if len(array) == 0 or (len(array) == 1 and array[0] == 0):\n        return 1\n    # If the array is sorted, check if the last element is missing.\n    elif array[len(array) - 1] == len(array) + 1:\n        return 1\n    else:\n        # If the array is unsorted, find the missing number by iterating through the array.\n        for i in range(start, end if end is not None else len(array)):\n            if i + 1!= array[i]:\n                return i + 1\n        # If the loop completes without finding a missing number, return the last element + 1.\n        return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A list of integers in ascending order.\n        start (int): The starting index of the array. Defaults to 0.\n        end (int): The ending index of the array. If not specified, it is set to the length of the array.\n\n    Returns:\n        int: The smallest missing number in the array.\n    '''\n\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] == array[i + 1]:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    mid = start + (end - start) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array, start, mid - 1)\n    elif array[mid] < mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers sorted in ascending order and returns the smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as an argument and returns a new list containing only the even numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    # initialize a set to store the adjacent elements\n    adj = set()\n\n    # get the x and y coordinates of the current element\n    x, y = ele\n\n    # loop through all the rows and columns of the grid\n    for i in range(max(x-1, 0), min(x+2, 9)):\n        for j in range(max(y-1, 0), min(y+2, 9)):\n            # if the element is adjacent to the current element, add it to the set\n            if i!= x or j!= y:\n                adj.add((i, j))\n    \n    # return the set of adjacent elements\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x > 0 and y < 3:\n        sub.append((x-1, y+1))\n    if x < 3 and y > 0:\n        sub.append((x+1, y-1))\n    if x < 3:\n        sub.append((x+1, y))\n    if x < 3 and y < 3:\n        sub.append((x+1, y+1))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 3:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < 10:\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < 10:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all its adjacent coordinates.\n    If the input is a sub-list, the function will recursively find adjacent coordinates.\n    '''\n    if type(ele) == tuple:\n        x,y = ele\n        sub.append((x-1,y))\n        sub.append((x+1,y))\n        sub.append((x,y-1))\n        sub.append((x,y+1))\n        return sub\n    elif type(ele) == list:\n        for i in range(len(ele)):\n            sub.extend(adjac(ele[i], sub))\n        return sub\n    else:\n        print(\"Invalid input type.\")"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1,y))\n    sub.append((x,y+1))\n    sub.append((x-1,y))\n    sub.append((x,y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x+1 < len(sub):\n        adj.append((x+1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < len(sub[0]):\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0 and j!= 0:\n                adj.append((x, y+j))\n            elif i!= 0 and j == 0:\n                adj.append((x+i, y))\n            else:\n                adj.append((x+i, y+j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    result = [(x+dx, y+dy) for (dx, dy) in result]\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele) # add the current element to the sublist\n    if len(sub) == 4: # if the sublist has 4 elements, it's a corner\n        if (sub[0][0] == 0 and sub[1][0] == 1) or (sub[0][0] == 1 and sub[1][0] == 0): # if top left or bottom right corner\n            yield sub[2:] # add the adjacent coordinates to the sublist\n        elif (sub[0][1] == 0 and sub[1][1] == 1) or (sub[0][1] == 1 and sub[1][1] == 0): # if top right or bottom left corner\n            yield sub[:-2] # add the adjacent coordinates to the sublist\n        else:\n            return # return if not a corner\n    else: # if the sublist has less than 4 elements, it's not a corner\n        for x in range(len(ele)): # iterate over each coordinate in the current element\n            for y in range(len(ele)): # iterate over each coordinate in the current element\n                if x!= y: # if the coordinates are not equal, add them to the sublist\n                    temp = (ele[0], ele[1], x, y) # create a tuple of the new coordinates\n                    if temp not in sub: # if the new coordinates are not in the sublist yet\n                        sub.append(temp) # add them to the sublist\n                        temp = adjac(temp) # call the adjac function recursively with the new coordinates\n                        for t in temp: # iterate over the returned values of the adjac function\n                            yield t # yield the coordinates to the caller function"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1,y))\n    if x+1 < len(map):\n        adj.append((x+1,y))\n    if y-1 >= 0:\n        adj.append((x,y-1))\n    if y+1 < len(map[0]):\n        adj.append((x,y+1))\n    return adj + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"_\":\n            result += \" \"\n        else:\n            result += text[i]\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char =='':\n            text = text.replace(char, '_')\n        elif char == '_':\n            text = text.replace(char,'')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_') # Replace spaces with underscores\n    text = text.replace('_','') # Replace underscores with spaces\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero values\n    non_zero_list = []\n\n    # iterate over the input list\n    for num in num_list:\n        # if the current value is not zero\n        if num!= 0:\n            # append it to the non-zero list\n            non_zero_list.append(num)\n\n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    if i == len(num_list):\n        return num_list\n    \n    for j in range(i, len(num_list)):\n        num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    num_list = num_list[:count]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Using two pointers to move all non-zero numbers to the end of the list\n    i = 0  # initialize i to 0 to move all non-zero numbers to the end of the list\n    j = 0  # initialize j to 0 to move all zeroes to the end of the list\n    while i < len(num_list):\n        if num_list[i]!= 0:  # move all non-zero numbers to the end of the list\n            temp = num_list[i]\n            num_list[i] = num_list[j]\n            num_list[j] = temp\n            i += 1\n            j += 1\n        else:  # move all zeroes to the end of the list\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # find the first non-zero index\n    i = 0\n    while i < len(num_list) and num_list[i]!= 0:\n        i += 1\n    \n    # move all zeroes to the end of the list\n    while i < len(num_list):\n        temp = num_list[i]\n        num_list[i] = num_list[i+1]\n        num_list[i+1] = temp\n        i += 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and move the zeroes to the end of the list\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            # Move the zero to the end of the list\n            num_list.insert(i, 0)\n            # Remove the zero from the original list\n            num_list.pop()\n            # Increment the loop index to start from the next element\n            i -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create an empty list to store non-zero elements\n    non_zero_list = []\n    \n    # iterate through the given list\n    for num in num_list:\n        # if the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # append all zeroes to the non-zero list\n    non_zero_list += [0] * sum([1 for num in num_list if num == 0])\n    \n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n): \n    # initialize variables\n    xor_sum = 0 \n    count = 0 \n\n    # calculate xor sum and count of pairs\n    for i in range(n-1): \n        xor_sum += arr[i] ^ arr[i+1]\n        count += 1\n\n    # return xor sum and count of pairs\n    return xor_sum, count"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the sum of the xor of all pairs of the integers.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    xor_sum = 0\n\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    # XOR operation for two numbers\n    def xor(a, b):\n        return a ^ b\n\n    # XOR of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += xor(arr[i], arr[j])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # Convert the given iterable to a list and sort it using heap sort\n    lst = list(iterable)\n    hq.heapify(lst)\n    hq.heapify(lst, 0, len(lst)-1)\n    for i in range(len(lst)-1, 0, -1):\n        hq.heapreplace(lst, lst[i])\n        yield lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input, and sorts it using the heapsort algorithm.\n    '''\n    # Create a max heap from the iterable\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n    \n    # Create a new list to store the sorted elements\n    sorted_list = []\n    \n    # Extract elements from the heap in sorted order\n    while heap:\n        # Extract the maximum element from the heap\n        max_val = hq.heappop(heap)\n        \n        # Add it to the sorted list\n        sorted_list.append(max_val)\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n    '''\n    # Convert the input list to a min-heap\n    hq.heapify(iterable)\n    \n    # Extract the elements from the heap one by one\n    result = []\n    while hq.heapq:\n        result.append(hq.heappop(iterable))\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for element in iterable:\n        heapq.heappush(heap, element)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # create a max-heap from the input list\n    hq.heapify(iterable)\n\n    # remove the maximum element from the heap\n    result = []\n    while iterable:\n        result.append(iterable.pop())\n\n    # return the sorted list\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # Convert the iterable to a list\n    lst = list(iterable)\n\n    # Build a max heap\n    hq.heapify(lst)\n\n    # Extract and return the max element until the heap is empty\n    while lst:\n        yield lst.pop()\n\n    return"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Create a max-heap from the input list\n    hq.heapify(iterable)\n    # Create an empty list to store the sorted elements\n    sorted_list = []\n    # Iterate over the elements of the input list\n    for i in iterable:\n        # Extract the maximum element from the heap and append it to the sorted list\n        sorted_list.append(hq.heappop(iterable))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return \"No profit and no loss\"\n    else:\n        return \"Profitable sale\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost - sale_amount <= 0:\n        return \"No profit and no loss\"\n    else:\n        return \"Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost: # if the sale amount is equal to or more than the actual cost, then no profit and no loss\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # if actual cost is greater than the sale amount, then no profit and no loss\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n        return True\n    else:\n        print(\"Profitable or Loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n        actual_cost (int): The actual cost of the sale\n        sale_amount (int): The amount that was sold\n    \n    Return:\n        bool: True if the amount has no profit and no loss, False otherwise\n    '''\n\n    if sale_amount < 0:\n        return False\n    if sale_amount == actual_cost:\n        return True\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit > 0 and loss > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert the temperature to Fahrenheit\n    t = (t * 9/5) + 32\n\n    # Calculate the wind chill index using the formula:\n    # W = (V^0.16) \u00d7 (T^0.15)\n    W = (v ** 0.16) * (t ** 0.15)\n\n    # Round the wind chill index to the nearest integer\n    W = math.ceil(W)\n\n    # Return the wind chill index rounded to the nearest integer\n    return W"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the temperature in fahrenheit\n    fahrenheit = (t * 1.8) + 32\n    \n    # calculate the wind chill temperature in fahrenheit\n    wct = 13.12 + (0.6215 * v) - (11.37 * t) + (0.3965 * (t ** 2))\n    \n    # calculate the wind chill index using the formula: wci = 100 * (wct - fahrenheit) / (fahrenheit + 459.67)\n    wci = 100 * (wct - fahrenheit) / (fahrenheit + 459.67)\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_index = round(wci)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the heat index in celsius\n    heat_index = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * math.sqrt(t)\n    \n    # Calculate the wind chill index rounded to the next integer\n    wind_chill_index = round((heat_index - 32) * 5/9)\n    \n    # Return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be positive\")\n    elif t < -273.15 or t > 100:\n        raise ValueError(\"Temperature must be between -273.15 and 100\")\n    else:\n        # Convert temperature to Fahrenheit and calculate the wind speed in m/s\n        fahrenheit = (t * 1.8) + 32\n        speed = fahrenheit / 1.8\n\n        # Calculate the wind chill index using the formula from the website\n        wci = (speed - 5) * 1.8 + 32\n        wci = round(wci)\n\n        return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 1.8) + 32\n    # Calculate wind chill index using the formulae\n    wc = 35.74 + 0.6215 * v + (0.4275 * t) - 35.75 * (math.log(v))\n    # Round wind chill index to the nearest integer\n    wc = round(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc = 35.72 + 0.6215*t - 35.75*math.pow(t,0.16) + 0.4275*math.pow(t,0.16)\n    # Calculate the temperature difference\n    delta_t = v/(math.sqrt(1.0+0.14*math.pow(v,0.16)))\n    # Calculate the wind chill index\n    wci = (wc - 273.15)/(delta_t-32.0)\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t = t * 9/5 + 32\n\n    # convert wind speed to miles per hour\n    v = v * 1.60934\n\n    # calculate the wind chill index\n    ci = 0.25 * (t - 32) + 25.0 * math.log(v)\n\n    # round the wind chill index to the nearest integer\n    ci = round(ci)\n\n    return ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    t = t + 273.15\n\n    # Calculate the heat capacity at constant pressure\n    cp = 0.018 * 10**6  # J/(kg K)\n    # cp = 0.018 * math.pow(10,6)  # J/(kg K) for Python 3.5\n\n    # Calculate the specific heat at constant pressure\n    h = cp * t / (273.15 + t)\n    # h = cp * math.pow(t,0.5) / (273.15 + t)  # J/(kg K) for Python 3.5\n\n    # Calculate the dew point temperature\n    dp = 273.15 + 0.6215 * t  # Kelvin\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * (v * 1.609344) / (h * (dp - t))  # K\n\n    # Round wind chill index to the next integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 25.0  # the constant used in the calculation\n    t_celsius = t + 273.15  # convert the temperature to celsius\n    k = 1.3  # the factor to multiply by in the calculation\n    psi = (c * t_celsius) / v**2  # the pressure at sea level in Pascals\n    chill = (13.12 + 0.6215 * psi + 11.37 * (psi**1.5) - 0.3965 * (psi**2.5)) / (22.75 - 0.1002 * psi + 5.375 * (psi**1.5) - 0.1082 * (psi**2.5))\n    chill = round(chill)  # round the result to the nearest integer\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill temperature in celsius\n    wct = 35.74 + 0.6215 * v - 35.75 * math.log(t) + 0.4275 * t**2\n    \n    # Round the wind chill temperature to the nearest integer\n    wct_int = int(round(wct))\n    \n    return wct_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the first letter is uppercase\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to 0\n    total_length = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # if the name does not start with a lowercase letter, add its length to the sum\n        total_length += len(name)\n    # return the total length of the names that did not start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():  # Check if the first letter is uppercase\n            continue\n        else:\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of names\n    total_length = 0\n\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if name[0].islower():\n            continue\n        # Add the length of the name to the total\n        total_length += len(name)\n\n    # Return the total length of names after removing lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of names length to zero\n    total = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # Otherwise, add its length to the total\n        else:\n            total += len(name)\n    \n    # Return the total\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize the sum of names lengths to zero\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n\n        # Remove the first character (which should be a letter) from the name and convert it to lowercase\n        name = name.lower()[1:]\n\n        # If the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n\n    # Return the total length of the names in the list after removing lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in sample_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum to 0\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name and move on to the next one\n            continue\n        # if the name doesn't start with a lowercase letter, add its length to the sum\n        total_length += len(name)\n        \n    # return the sum\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes all the parenthesis from it.\n    '''\n    # Replace all the parenthesis with nothing\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function will remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r\"\\(.*?\\)\"\n    result = re.sub(pattern, \"\", items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to remove parenthesis and what is inbetween them\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern for matching parenthesis\n    pattern = re.compile(r'\\([^)]+\\)')\n    # Use the pattern to replace the parenthesis with an empty string\n    items = pattern.sub('', items)\n    # Return the modified string with parenthesis removed\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match parentheses and what is between them\n    pattern = r'\\([^)]*\\)'\n\n    # Iterate over the items in the list and replace the matching parenthesis with an empty string\n    for i in range(len(items)):\n        items[i] = re.sub(pattern, '', items[i])\n\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num1 = 1\n    num2 = 1\n    count = 0\n\n    while count < n:\n        if num1!= 1:\n            num1 = num1 + num2\n        num2 = num1 + num2\n        count = count + 1\n\n    return num1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 0\n    nonagonal = 0\n    while i < n:\n        nonagonal += 4*i**2\n        i += 1\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the nonagonal number\n    nonagonal = 0\n\n    # Initialize the counter variable\n    count = 1\n\n    # Loop until the nth nonagonal number is found\n    while count <= n:\n        # Add the current count to the nonagonal number\n        nonagonal += count\n        # Increment the count by 2\n        count += 2\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first nonagonal number to 1\n    current = 1\n\n    # Calculate the nth nonagonal number\n    for i in range(1, n + 1):\n        # Update the current nonagonal number\n        current += 2 * (n - i + 1)\n\n    return current"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result = (2 * i - 1) * result\n        return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 1\n    while count < n:\n        a += 1\n        b += 1\n        count += 1\n    return a\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the first and second nonagonal numbers\n    a = 1\n    b = 1\n    # Initialize the sum to 0\n    sum = 0\n    # Calculate the sum of the first n-1 nonagonal numbers\n    for i in range(2, n):\n        # Calculate the sum of the current nonagonal number\n        c = a + b\n        # Update the variables for the next iteration\n        a = b\n        b = c\n        # Add the current nonagonal number to the sum\n        sum += c\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if the nth nonagonal number is prime, False otherwise.\n    '''\n\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to generate the nth nonagonal number\n    def nth_nonagonal(n):\n        a = 1\n        b = 2\n        count = 1\n        while count < n:\n            a, b = b, a+b\n            count += 1\n        return a\n\n    # Check if the nth nonagonal number is prime\n    nth = nth_nonagonal(n)\n    if is_prime(nth):\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    A function to check if a number is a nonagonal number or not.\n    \"\"\"\n    if n < 2:\n        return False\n    else:\n        return (2 * n - 1) ** 2 + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * (n+1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    wordz_middle = r'(?<![A-Za-z])[zZ](?=[A-Za-z])'\n    return re.search(wordz_middle, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through the words\n    for word in words:\n\n        # Check if the first character is a vowel and the last character is 'z'\n        if word[0] in ['a', 'e', 'i', 'o', 'u'] and word[-1] == 'z':\n\n            # Check if the middle characters are 'z'\n            if all(char == 'z' for char in word[1:-1]):\n                return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b(z)\\w+\\b'\n\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Convert the string to lowercase to make the search case-insensitive\n    text = text.lower()\n\n    # Define a regular expression pattern for finding 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\w+\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # If a match is found, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile('^(?!\\bword\\b)(?!.*\\bword\\b).*z(?!\\bword\\b)(?!.*\\bword\\b)$', re.IGNORECASE)\n    match = regex.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*[zZ]\\w*[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if the first and last words in the list have 'z' except at the start and end of the word\n    if words[0][-1] == 'z' and words[-1][-1] == 'z':\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern for matching words with 'z' except at the start and end of the word\n    pattern = r'\\b(?!.*[a-zA-Z])[z]\\w*\\b'\n\n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n\n    # If the pattern is not found, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\s|^)z(?=\\s|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two pointers, one at the start of the array and the other at the end of the array.\n    i = 0\n    j = len(input) - 1\n    \n    # Swap elements until j reaches k-1\n    while i < j:\n        # Swap the elements at i and j\n        input[i], input[j] = input[j], input[i]\n        \n        # Move i and j towards each other\n        i += 1\n        j -= 1\n    \n    # Reverse the elements from 0 to k-1\n    if k!= 0:\n        input = input[0:k] + input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k:\n        return input\n    else:\n        reversed_part = input[:k]\n        original_part = input[k:]\n        reversed_part.reverse()\n        return reversed_part + original_part"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize the variables\n    start = 0\n    end = k - 1\n    temp = 0\n\n    # swap the elements at the start and end position\n    input[start], input[end] = input[end], input[start]\n\n    # reverse the array from the start position to k-1\n    for i in range(start+1, end):\n        temp = input[i]\n        input[i] = input[start]\n        input[start] = temp\n        start += 1\n\n    # reverse the array from k to end position\n    for i in range(k, end):\n        temp = input[i]\n        input[i] = input[start]\n        input[start] = temp\n        start += 1\n\n    # reverse the array from start to k-1\n    for i in range(start, end):\n        temp = input[i]\n        input[i] = input[start]\n        input[start] = temp\n        start += 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k < 1:\n        raise ValueError(\"k should be atleast 1\")\n    elif k > len(input):\n        raise ValueError(\"k should be less than or equal to length of input array\")\n    else:\n        # create a new list to store the reversed array\n        reversed_array = []\n        # reverse the array from the given position to the end of the array\n        for i in range(k-1, len(input)):\n            reversed_array.append(input[i])\n        # reverse the array from the start to the given position\n        for i in range(0, k-1):\n            reversed_array.append(input[i])\n        # reverse the reversed array\n        reversed_array = reversed_array[::-1]\n        # reverse the original array\n        input[:] = reversed_array[::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # finding the length of the input array \n    n = len(input) \n\n    # swapping the first and kth element \n    input[0], input[k-1] = input[k-1], input[0] \n\n    # reversing the remaining array \n    for i in range(1, k): \n        input[i], input[n-1-i] = input[n-1-i], input[i] \n\n    # printing the reversed array \n    print(\"Reversed array is: \", input) "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k > n:\n        return None\n    \n    # reverse all elements from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the array from index 0 to k-1 \n    for i in range(k): \n        temp = input[i] \n        input[i] = input[k-1-i] \n        input[k-1-i] = temp \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, n-k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input): \n        print(\"The given position is greater than the length of the array.\")\n        return \n    else: \n        start = 0\n        end = k - 1\n        while start < end: \n            temp = input[start] \n            input[start] = input[end] \n            input[end] = temp \n            start += 1\n            end -= 1\n        print(\"Array after reversing upto kth position:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # Reverse the array from k to n-1\n    for i in range(k, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # Reverse the array from n-1 to k-1\n    for i in range(len(input)-1, k-1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the same keys as the dictionary to be added\n    new_dict = {k:v for k, v in test_dict.items()}\n    # add the new dictionary to the tuple\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Concatenate the tuple and dictionary using the + operator\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup, test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}  # unpacks the dictionary to create a new dictionary with the same keys as the original dictionary\n    return tuple(test_tup + new_dict.items())  # concatenates the items of the original tuple and the new dictionary items"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize the first cell of the first row as the start of the path\n    path = [(0, 0)]\n\n    # Initialize the cost of the first cell as the cost of the path\n    cost[0][0] = 0\n\n    # Initialize the maximum average and the number of cells visited\n    max_avg = 0\n    num_cells = 1\n\n    # Loop through all other cells of the matrix\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[0])):\n            # Calculate the cost of the next cell of the path\n            if i == len(cost) - 1:\n                cost[i][j] += cost[i][j - 1]\n            else:\n                cost[i][j] += min(cost[i][j], cost[i + 1][j])\n\n            # Update the current path with the next cell\n            path.append((i, j))\n\n            # Update the maximum average and number of cells visited if necessary\n            if cost[i][j] > max_avg:\n                max_avg = cost[i][j]\n                num_cells = 1\n            elif cost[i][j] == max_avg:\n                num_cells += 1\n\n    # Return the maximum average and number of cells visited\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def bfs(cost, start, end, visited, queue, path, visited_paths):\n        if start == end:\n            visited_paths.add(tuple(path))\n            return visited_paths\n\n        visited.add(start)\n        queue.append((start, path + [start]))\n\n        while queue:\n            curr, path_ = queue.pop(0)\n\n            if (curr[0] + 1, curr[1]) not in visited and (curr[0], curr[1] + 1) not in visited:\n                if cost[curr[0]][curr[1]] < cost[curr[0] + 1][curr[1]] and \\\n                   cost[curr[0]][curr[1]] < cost[curr[0]][curr[1] + 1]:\n                    queue.append((curr[0] + 1, curr[1], path_ + [(curr[0] + 1, curr[1])]))\n                else:\n                    queue.append((curr[0], curr[1] + 1, path_ + [(curr[0], curr[1] + 1)]))\n\n        visited.remove(start)\n        return visited_paths\n\n    def find_max_average(cost, start, end):\n        max_avg = 0\n        visited_paths = set()\n\n        for i in range(len(cost)):\n            for j in range(len(cost[i])):\n                visited_paths = bfs(cost, (i, j), (i, j), set(), [], [], visited_paths)\n\n        for path in visited_paths:\n            path_cost = sum(cost[i][j] for i, j in path)\n            path_length = len(path)\n            avg = path_cost / path_length\n            max_avg = max(max_avg, avg)\n\n        return max_avg\n\n    n = len(cost)\n    return find_max_average(cost, (0, 0), (n - 1, n - 1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the base cases\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n\n    # Initialize the rest of the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(cost[i][j] + dp[i-1][j], cost[i][j] + dp[i][j-1])\n\n    # Find the maximum average\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg / (n * n)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, cost[i][i])\n    \n    for length in range(2, N):\n        for i in range(N-length):\n            j = i + length\n            if i == 0:\n                dp[i][j] = dp[i+1][j] + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j] - dp[i-1][j]\n                max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg/length"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_average = float('-inf')\n    max_path = []\n\n    for i in range(N - 1, -1, -1):\n        for j in range(N - 1, -1, -1):\n            path = [(i, j)]\n            while True:\n                top, left = path[-1]\n                if top == N - 1 and left == N - 1:\n                    break\n                if top < N - 1:\n                    path.append((top + 1, left))\n                if left < N - 1:\n                    path.append((top, left + 1))\n\n            if path not in max_path:\n                total_cost = sum(cost[i][j] for i, j in path)\n                num_cells = len(path)\n                average_cost = total_cost / num_cells\n                if average_cost > max_average:\n                    max_average = average_cost\n                    max_path = path\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i][j-1])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j])\n            else:\n                dp[i][j] = max(dp[i][j], cost[i][j] + min(dp[i][j-1], dp[i-1][j]))\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i-1], cost[0][i])\n        max_avg = max(max_avg, dp[0][i])\n    for j in range(1, N):\n        dp[j][0] = max(dp[j-1][0], cost[j][0])\n        max_avg = max(max_avg, dp[j][0])\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg/((N-1)*(N-1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    max_avg = float('-inf')\n\n    # Calculate the maximum average path\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                # Base case\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                # Moving only down\n                dp[i][j] = max(dp[i][j], dp[i][j-1])\n            elif j == 0:\n                # Moving only right\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n            else:\n                # Moving both up and right\n                dp[i][j] = max(dp[i][j], dp[i-1][j], dp[i][j-1])\n\n    # Find the maximum average\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                # Base case\n                continue\n            elif i == 0:\n                # Moving only down\n                if dp[i][j] > dp[i][j-1]:\n                    max_avg = max(max_avg, dp[i][j])\n            elif j == 0:\n                # Moving only right\n                if dp[i][j] > dp[i-1][j]:\n                    max_avg = max(max_avg, dp[i][j])\n            else:\n                # Moving both up and right\n                if dp[i][j] > dp[i-1][j] and dp[i][j] > dp[i][j-1]:\n                    max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    total_cost = 0\n    visited_cells = 0\n    max_avg = 0\n    \n    # Iterate over all paths in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if we need to move down\n            if j < len(cost[0]) - 1 and cost[i][j] < cost[i][j+1]:\n                down = cost[i][j] + cost[i+1][j+1]\n                total_cost += down\n                visited_cells += 2\n                if down > max_avg:\n                    max_avg = down\n            # Check if we need to move right\n            if i < len(cost) - 1 and cost[i][j] < cost[i+1][j]:\n                right = cost[i][j] + cost[i+1][j]\n                total_cost += right\n                visited_cells += 2\n                if right > max_avg:\n                    max_avg = right\n    \n    # Compute average and return maximum\n    average = total_cost / visited_cells\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(cost[i][j], dp[i][j-1])\n            elif j == 0:\n                dp[i][j] = max(cost[i][j], dp[i-1][j])\n            else:\n                dp[i][j] = max(cost[i][j], dp[i-1][j], dp[i][j-1])\n\n    max_sum = 0\n    max_path = []\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n                max_path = []\n                max_path.append((i, j))\n            elif dp[i][j] == max_sum:\n                max_path.append((i, j))\n\n    total_cost = 0\n    for i, j in max_path:\n        total_cost += cost[i][j]\n\n    return total_cost / len(max_path)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            result[name] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # initialize a dictionary to store the count of each value\n    count_dict = {}\n\n    # loop through each element in the lists\n    for i in range(len(nums1)):\n        # if the value is already in the dictionary, increment its count\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        # otherwise, add the value to the dictionary with a count of 1\n        else:\n            count_dict[nums1[i]] = 1\n\n    # initialize an empty list to store the indices where the lists have the same values\n    indices = []\n\n    # loop through each element in the second list\n    for i in range(len(nums2)):\n        # if the value is in the dictionary and its count is 1, append the index to the indices list\n        if nums2[i] in count_dict and count_dict[nums2[i]] == 1:\n            indices.append(i)\n\n    # return the list of indices where the lists have the same values\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # creating a dictionary to store the count of each element in the first list\n    count = {}\n    for i in range(len(nums1)):\n        if nums1[i] in count:\n            count[nums1[i]] += 1\n        else:\n            count[nums1[i]] = 1\n    \n    # initializing the count of the same elements in the second list\n    same_count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in count and nums1[i] == nums2[i]:\n            same_count += 1\n            \n    return same_count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    num = base\n    while num > 0:\n        digit = num % 10\n        total += digit ** power\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Calculate the sum of all digits of the base to the specified power\n    total_sum = 0\n    for digit in base_str:\n        digit_int = int(digit)\n        total_sum += digit_int ** power\n    \n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base = base // 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # convert each digit to an integer and add it to the sum variable\n        sum += int(digit) ** power\n    # return the sum of all digits raised to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n    # loop through each character in the string\n    for char in base_str:\n        # convert the character to an integer and add it to the sum of digits\n        digit_sum += int(char)\n    # calculate the power of the sum of digits\n    power_sum = digit_sum ** power\n    # return the power of the sum of digits\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the current digit raised to the power\n        digit_sum = digit_int ** power\n        # Add the digit sum to the sum variable\n        sum_digits += digit_sum\n    # Return the sum of all digits raised to the power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n        \n    # Calculate the sum to the specified power\n    result = sum ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to hold the sum of digits\n    sum_digits = 0\n    # Loop through each digit of the base and add it to the sum\n    for digit in base_str:\n        sum_digits += int(digit)\n    # Calculate the sum of digits raised to the power of the power argument\n    result = sum_digits ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through each digit in the base\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        total_sum += int(digit)\n    \n    # Calculate the sum of digits raised to the specified power\n    sum_power = 0\n    for _ in range(power):\n        sum_power += total_sum\n    \n    return sum_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    # Initialize sum variable\n    sum = 0\n    # Convert base to a string\n    base_str = str(base)\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Calculate the result and return it\n    return sum ** power"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to find all occurrences of the pattern \" \" in the string\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Extracting values between quotation marks\n    extracted_values = []\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    match = pattern.search(text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\\\").*(?=\\\")'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=^| )(\"(?:\\\\.|[^\"])*\")(?=$| )'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    result_tup += (test_tup[-1]*test_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    result_tup.append(test_tup[-1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the length of the output tuple to the length of the input tuple\n    output_len = len(test_tup)\n    \n    # create an empty output tuple\n    output_tup = ()\n    \n    # loop through the input tuple and multiply each element by the next element in the tuple\n    for i in range(output_len-1):\n        output_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # add the last element of the input tuple to the output tuple\n    output_tup += (test_tup[-1],)\n    \n    # return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result + (test_tup[-1]*test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple with the first element of the input tuple\n    result_tup = (test_tup[0],)\n    # loop through the remaining elements of the input tuple\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next element in the input tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) // 2\n    result_tup = ()\n    \n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+N],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup) - 1\n    # Create the new tuple with the required values\n    new_tup = tuple(t1 * t2 for t1, t2 in zip(test_tup, test_tup[1:]))\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initializing an empty list to store the sum of the two lists\n    result = []\n    # iterating through each element of the first list\n    for i in lst1:\n        # adding each element of the second list to the first element of the first list\n        result.append(i+lst2[0])\n        # removing the first element of the second list because we have used it in the above step\n        lst2 = lst2[1:]\n    # returning the resulting list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i in lst1 for j in lst2]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the sum of the two lists\n    sum_lst = []\n    # iterate over the two lists using a for loop\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    # return the sum_lst list as the result\n    return sum_lst"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group by the consecutive numbers\n    groups = groupby(enumerate(nums), lambda x: x[1] - x[0] == 1)\n    # remove the groups\n    return [group[1] for group in groups if not group[0]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(lambda x: list(x), groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: not x[1], groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use itertools to group the consecutive duplicates\n    grouped_nums = groupby(nums)\n    # Use a list comprehension to remove consecutive duplicates\n    consecutive_nums = [num for _, num_group in grouped_nums if len(num_group) == 1]\n    # Return the list of consecutive duplicates\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    nums: A list of integers.\n\n    Returns:\n    A list of integers with consecutive duplicates removed.\n    \"\"\"\n    return [num for num, group in groupby(nums) if not (num == group[-1] - 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() function to group the list by consecutive duplicates\n    # Return a generator object\n    group_obj = groupby(nums)\n    # Initialize a new list to store unique elements\n    unique_nums = []\n    # Loop through each group and append each unique element to the new list\n    for _, group in group_obj:\n        unique_nums.extend(list(group))\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(enumerate(nums), lambda x: x[0] == x[1])]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2 * r * h) / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the base of the cone\n    base = r * math.sin(math.pi/3)\n    \n    # Calculate the height of the cone (using the law of cosines)\n    cone_height = h * math.sqrt(3)\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * base * cone_height\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given the radius r and the height h.\n    '''\n    # Calculate the base area of the cone\n    area_base = math.pi * r ** 2\n    \n    # Calculate the side area of the cone\n    area_side = math.pi * r * h\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = area_base + area_side\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (2*r*h) / 3\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * math.sin(math.pi/6)\n    return s * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area using the formula: lateral surface area = 2 * pi * r * (h/2)\n    # and return the value\n    return 2 * math.pi * r * (h/2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given radius r and height h.\n    '''\n    area = math.pi * (r**2 + (h/2)**2)\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\. ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    new_text = pattern.sub(':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    text = pattern.sub('', text)\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s\\.,]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[\\s,\\.]')\n    new_text = pattern.sub(':', text)\n    return new_text\n\ntext = \"This is a sample text with some spaces, commas, and dots\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for finding all occurrences of spaces, commas, or dots\n    pattern = r'[., ]'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]+', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return None\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A) - 1\n    if x < A[0]:\n        return None\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # If the element is not found in the array."
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x is not present in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost element that is greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    # If x is not present, return -1\n    if i == len(A):\n        return -1\n\n    # Find the index of the first occurrence of x in the remaining unsorted portion of the array\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index to None\n    index = None\n\n    # iterate over the array\n    for i in range(len(A)):\n        # if the current element is equal to the target number, update the index\n        if A[i] == x:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: A sorted array of integers.\n    :param x: An integer to search for in the array.\n    :return: The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n    n = len(A)\n    for i in range(n):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize sum to 0\n    sum_of_prod = 0\n\n    # Create a list of all possible sublists of the given list\n    sublist = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist.append(arr[i:j])\n\n    # Loop through all possible sublists\n    for i in range(len(sublist)):\n\n        # Calculate the product of each element in the sublist\n        prod = 1\n        for j in sublist[i]:\n            prod *= j\n\n        # Add the product of the sublist to the sum_of_prod\n        sum_of_prod += prod\n\n    # Return the sum of products of all sublists\n    return sum_of_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # length of the list\n    n = len(arr)\n\n    # initialize the sum of products and the result\n    result = 0\n    sum_prod = 0\n\n    # loop for all possible sublists of length 1 to n\n    for i in range(1, n+1):\n        # loop for all possible starting points of sublists\n        for j in range(0, n-i+1):\n            # find the product of the sublist\n            prod = 1\n            for k in range(j, j+i):\n                prod *= arr[k]\n            # add the product of the sublist to the sum of products\n            sum_prod += prod\n        # add the sum of products of the sublist to the result\n        result += sum_prod\n        # reset the sum of products to 0\n        sum_prod = 0\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_sum = 0\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n    max_product = 1\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    for i in range(n - 1, -1, -1):\n        suffix_sum[i] = suffix_sum[i + 1] + arr[i]\n\n    for i in range(1, n - 1):\n        max_product = max(max_product, prefix_sum[i] * suffix_sum[i + 1])\n        max_sum = max(max_sum, max_product)\n\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # create a list to store the products of subarrays\n    sub_prod_list = [1] * n\n    # loop through all possible sublists\n    for i in range(1, n):\n        for j in range(i):\n            # calculate the product of the subarray from index i to j\n            sub_prod = 1\n            for k in range(i, j+1):\n                sub_prod *= arr[k]\n            # store the product in the list\n            sub_prod_list[i] *= sub_prod\n            # update the sub_prod_list[j]\n            sub_prod_list[j] *= arr[j]\n    # calculate the sum of products of subarrays\n    total_sum = 0\n    for i in range(n):\n        total_sum += sub_prod_list[i]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] * arr[i]\n    subarray_prod = 1\n    total_sum = 0\n    for i in range(n):\n        total_sum += dp[i]\n        subarray_prod *= dp[i]\n        subarray_sum = total_sum - subarray_prod\n        for j in range(i+1, n):\n            subarray_sum -= dp[j]\n            if subarray_sum == 0:\n                total_sum -= dp[j-i]\n                break\n            elif subarray_sum > 0:\n                subarray_prod *= subarray_sum\n                subarray_sum -= dp[j]\n                break\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n    \n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # initialize variables for left and right sublists\n    left = [1]\n    for i in range(1, n):\n        left.append(left[i-1]*arr[i-1])\n    \n    right = [1]\n    for i in range(n-2, -1, -1):\n        right.append(right[i+1]*arr[i+1])\n    \n    # initialize variables for subarray products\n    prod = [1]\n    prod.extend([left[i]*right[n-i-1] for i in range(n)])\n    \n    # calculate sum of subarray products\n    sum_prod = sum(prod)\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            res += arr[i] * arr[j]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            if prod > max_sum:\n                max_sum = prod\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] * arr[i]\n        \n    sub_sum = dp[n-1]\n    sub_prod = 1\n    for i in range(n-2, -1, -1):\n        sub_sum += dp[i]\n        sub_prod *= (arr[i+1] + sub_sum)\n        \n    return sub_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # length of the list\n    n = len(arr)\n    \n    # initialize variables\n    sum_products = 0\n    products = []\n    \n    # calculate product of first element\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        products.append(product)\n    \n    # calculate sum of products of subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # calculate product of subarray\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            sum_products += product\n    \n    # return sum of products\n    return sum_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with its middle bits toggled.\n    The middle bits are the bits that are not the first and last bits.\n    \"\"\"\n    # Find the position of the first and last bits\n    first_bit_index = 0\n    while n & (1 << first_bit_index) == 0:\n        first_bit_index += 1\n    \n    last_bit_index = 0\n    while n & (1 << (last_bit_index + 31)) == 0:\n        last_bit_index += 1\n    \n    # Set the middle bits to 0\n    n = n & ~(~0 << (last_bit_index - first_bit_index + 1))\n    \n    # Toggle the middle bits\n    for i in range(first_bit_index + 1, last_bit_index):\n        if n & (1 << i):\n            n = n ^ (1 << i)\n    \n    # Return the modified integer\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**31-1)\n    # Toggle all bits except first and last bits\n    n = (n & (2**31-2)) ^ first_bit ^ last_bit\n    # Combine first and last bits back into the number\n    return n ^ first_bit ^ last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XOR operation on the middle bits of the number\n    n ^= 0x5555555555555555 # bitwise XOR of all ones\n    n &= 0xaaaaaaaaaaaaaaaa # bitwise AND of all ones\n    n = n >> 1 # shift the bits to the right by 1\n    n = n ^ n # bitwise XOR of the shifted bits and itself\n\n    # XOR operation on the first and the last bits of the number\n    n ^= 0x0101010101010101 # bitwise XOR of all ones\n    n = n >> 1 # shift the bits to the right by 1\n    n = n ^ n # bitwise XOR of the shifted bits and itself\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    n_bits = len(bin(n)[2:])\n    if n_bits % 2 == 0:\n        return 0\n    \n    first_bit_mask = 1 << (n_bits - 1)\n    last_bit_mask = 1 << (n_bits - 2)\n    \n    return n ^ (first_bit_mask | last_bit_mask)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    mask1 = ~(1 << 0)\n    mask2 = ~(1 << (n.bit_length() - 1))\n    n1 = n & mask1\n    n2 = n & mask2\n    n1 = n1 | n2\n    return n1"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(0b11111111 << 1) # 0b01111111111111111111111111111110000000000000000000000000000000000000\n    return (n ^ mask) & mask # XOR the original number with a mask and take the result and apply another mask to get the middle bits toggled"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Calculate the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Calculate the number of bits to toggle\n    num_to_toggle = num_bits - 2\n    \n    # Initialize the counter for bits to toggle\n    toggle_count = 0\n    \n    # Iterate over the bits of the number\n    for i in range(num_bits):\n        # If the counter is equal to the number of bits to toggle, \n        # toggle the first and last bits and increment the toggle count\n        if toggle_count == num_to_toggle:\n            if i == 0 or i == num_bits - 1:\n                result |= 1 << (num_bits - 1)\n            else:\n                result ^= 1 << i\n            toggle_count = 0\n        \n        # If the counter is less than the number of bits to toggle, toggle the bit\n        if i < num_to_toggle:\n            if n & (1 << i):\n                result |= 1 << i\n            else:\n                result &= ~(1 << i)\n        \n        # Increment the counter\n        toggle_count += 1\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    n = n ^ (n & ((n+1) // 2))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 1 & 1\n\n    # Toggle the middle bits\n    middle_bits = (n >> 1) & 15\n\n    # Combine the first and last bits and middle bits\n    toggled_number = first_bit ^ middle_bits ^ last_bit\n\n    # Return the toggled number\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    n = n[:n.index('1')] + '0' + n[n.index('1')+1:]\n    n = n[:n.index('1')+1] + n[n.index('1')+1:][::-1] + n[n.index('1')+1:]\n    return int(n, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Returns the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            # We found the value, but we need to find its leftmost occurrence\n            while mid > 0 and a[mid] == a[mid - 1]:\n                mid -= 1\n            return mid\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    # Use bisect function to find the left insertion point\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): List of sorted elements.\n        x (int): Value to be inserted.\n\n    Returns:\n        int: Index of the left insertion point.\n\n    Raises:\n        TypeError: If `a` is not a list.\n        ValueError: If `a` is empty or `a` is not sorted.\n\n    Examples:\n        >>> left_insertion([1, 3, 5, 7], 4)\n        2\n        >>> left_insertion([1, 3, 5, 7], 0)\n        0\n        >>> left_insertion([1, 3, 5, 7], 8)\n        4\n    \"\"\"\n\n    if not isinstance(a, list):\n        raise TypeError(\"`a` must be a list.\")\n\n    if not a:\n        raise ValueError(\"`a` must not be empty.\")\n\n    if len(a)!= len(set(a)):\n        raise ValueError(\"`a` must be sorted.\")\n\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index!= 0 and a[index-1] == x:\n        return index-1\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n    return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index-1]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function checks whether the given string is starting with a vowel or not using regex.\n    '''\n\n    # check if the string matches the regex pattern\n    match = re.match(regex, string)\n    \n    # if the match is None, return False\n    if match is None:\n        return False\n    \n    # if the match is not None, return True\n    else:\n        return True"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1 recursively.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    # base case\n    if n == 1:\n        return 0\n    # recursive case\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * (1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    # Calculate the required number of digits\n    num_digits = len(str(math.factorial(n)))\n\n    # Initialize the result with the last digit of the factorial\n    result = math.factorial(n) % 10\n\n    # Initialize the current number with the first digit of the factorial\n    current = math.factorial(n) // 10\n\n    # Iterate until the last digit of the factorial is less than or equal to n\n    while num_digits <= n:\n        # Calculate the next number\n        next_num = current * (10 ** (num_digits + 1))\n\n        # If the next number is less than the current result, update the result\n        if next_num < result:\n            result = next_num\n\n        # Update the current number and num_digits\n        current = next_num % 10\n        num_digits += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n):\n    def helper(n, index, count):\n        if n == 0:\n            return count\n        count += 1\n        return helper(n-1, count, 0)\n\n    def is_triangular(num):\n        return num == triangular_sum(num)\n\n    def triangular_sum(num):\n        return num * (num+1) // 2\n\n    index = helper(n, 0, 0)\n    triangular_num = index_to_triangular(index, n)\n    while not is_triangular(triangular_num):\n        index += 1\n        triangular_num = index_to_triangular(index, n)\n\n    return index\n\ndef index_to_triangular(index, n):\n    triangular_num = 0\n    for i in range(n):\n        triangular_num = triangular_num * 10 + index % 10\n        index = index // 10\n    return triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the smallest index to infinity\n    smallest_index = float('inf')\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the triangular number\n        triangular_num = int(i*math.factorial(n))\n        # Check if the triangular number is less than the current smallest index\n        if triangular_num < smallest_index:\n            # Update the smallest index\n            smallest_index = triangular_num\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    return int(math.pow(n, 2))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # initializing a variable to store the sum of digits of n\n    sum = 0\n    # loop to add up the digits of n\n    for i in range(n):\n        sum += int(math.log10(n))\n        # setting n to the sum of digits\n        n = sum\n\n    # initializing a variable to store the smallest triangular number with n digits\n    smallest_triangular_number = 10**(n-1)\n\n    # loop to find the smallest triangular number with n digits\n    for i in range(smallest_triangular_number, 1, -1):\n        # checking if the triangular number is a perfect square\n        if math.isqrt(i) == math.floor(math.sqrt(i)):\n            # checking if the sum of digits of the triangular number is equal to n\n            if sum_of_digits(i) == n:\n                return i\n\ndef sum_of_digits(num):\n    '''\n    This function takes a number and returns the sum of its digits.\n    '''\n    # initializing a variable to store the sum of digits\n    sum = 0\n    # loop to add up the digits of the number\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    def helper(start, end):\n        if start == end:\n            return start\n\n        mid = (start + end) // 2\n\n        if is_triangular(mid):\n            return helper(start, mid)\n        else:\n            return helper(mid + 1, end)\n\n    def is_triangular(n):\n        return n * (n + 1) == 2 * n + 1\n\n    left_digit = 1\n    while True:\n        index = helper(left_digit, n)\n        if is_triangular(index):\n            return index\n        else:\n            left_digit += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the first n digits of the smallest triangular number\n    triangular = 0\n    while len(str(triangular)) < n:\n        triangular += 1\n\n    # calculate the largest triangular number with n digits\n    max_triangular = triangular * triangular\n    for i in range(2, triangular):\n        if len(str(max_triangular)) < n:\n            max_triangular *= i\n        else:\n            break\n\n    # calculate the index of the smallest triangular number with n digits\n    index = 0\n    while triangular <= max_triangular:\n        index += 1\n        triangular += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    # Function to find the index of smallest triangular number with n digits \n    def triangular_index(n): \n        triangular_numbers = [0] * (n+1) \n        triangular_numbers[0] = 0 \n        for i in range(1, n+1): \n            triangular_numbers[i] = math.floor(math.sqrt(i*(i+1))) \n        return triangular_numbers[n] \n\n    # Find the index of smallest triangular number with n digits \n    index = triangular_index(n) \n\n    # Return the index of smallest triangular number with n digits \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to generate all triangular numbers with n digits\n    def generate_Triangular(n):\n        triangular = [0]*(n+1)\n        triangular[0] = 0\n        triangular[1] = 1\n        for i in range(2, n+1):\n            triangular[i] = (triangular[i-1]**2 + triangular[i-2]**2)**0.5\n        return triangular\n\n    # Function to find the smallest triangular number with n digits\n    def find_SmallestTriangular(n):\n        triangular = generate_Triangular(n)\n        smallest_triangular = triangular[0]\n        for i in range(2, len(triangular)):\n            if triangular[i] < smallest_triangular:\n                smallest_triangular = triangular[i]\n        return smallest_triangular\n\n    # Call the function to find the index of the smallest triangular number with n digits\n    index = n - int(math.log10(find_SmallestTriangular(n)))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 0\n\n    for i in range(2, int(math.log10(n) + 1)):\n        triangular = i*i*i\n        if triangular >= n:\n            return i\n\n    return math.ceil(math.log10(n)*math.log10(n)/3) + 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # convert the tuple to a dictionary\n    d = dict(zip(test_tup[::2], test_tup[1::2]))\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    count = 0\n    for item in test_tup:\n        dict_[count] = item\n        count += 1\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dict_data = {}\n    for i in range(len(test_tup)-1):\n        dict_data[test_tup[i]] = test_tup[i+1]\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        d[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    if len(test_tup) % 2 == 0:\n        return dict(zip(test_tup[::2], test_tup[1::2]))\n    else:\n        return dict(zip(test_tup[0::2], test_tup[1:]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for val in count.values():\n        if val > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_count = {}\n    \n    # count the frequency of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # check if all the characters have the same frequency\n    same_count = True\n    for count in char_count.values():\n        if count!= 1:\n            same_count = False\n            break\n    \n    # return the result\n    return same_count"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the length of the string is 0 or 1\n    if len(s) == 0 or len(s) == 1:\n        # if length is 0 or 1, all characters are same\n        return True\n    else:\n        # if length is greater than 1, check if all characters are same\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                # if any character is different, return False\n                return False\n        # if all characters are same, return True\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s:\n        if count == 0:\n            count = 1\n        elif count!= 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    # check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        return True\n\n    # get the first character\n    first_char = s[0]\n\n    # loop through the rest of the string\n    for char in s[1:]:\n        # if the current character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n\n    # if we make it through the loop without returning False, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) if s[0] == s[1] else False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # checking the length of the string\n    if len(s) == 0:\n        return True\n    else:\n        # checking each character\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        # if the loop completes without returning False, all characters are same\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Convert the string to a list\n    s = list(s)\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Iterate over the list and compare the first character of the list with the rest of the list\n    for i in range(1, len(s)):\n        if s[0]!= s[i]:\n            # If any character is not same, return False\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2 * math.sin(math.pi/3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the semi-perimeter\n    semi_perimeter = (3 * side) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 - (side / 3) ** 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side + math.sqrt(3)*side**2) / 2\n    \n    # Calculate the area of the triangle with sides a, b, and c\n    a = 0.5*side**2\n    b = 0.5*semi_perimeter**2\n    c = 0.5*math.sqrt(3)*semi_perimeter**2\n    s = (a + b + c)**0.5\n    \n    # Calculate the area of the tetrahedron\n    area = (0.25*s*math.sqrt(3))**2\n    \n    # Return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Convert the side length to radians\n    angle = math.radians(60)\n\n    # Use Heron's formula to calculate the area\n    area = (side ** 2) * math.sin(angle)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2 # half side of each triangle\n    area = (s**2) * (s**2) * (s**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/3 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (1/3) * side * side * side\n    a = (1/4) * math.pi * side * side * side\n    return s + a"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 2\n    area = (1/6) * side * (side + base * math.tan(math.pi/3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * (3 * (math.sqrt(5) - 1)) / 5\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Calculate the total number of items in the list\n    n = len(list)\n\n    # If m is greater than or equal to n, then rotate to the left\n    if m >= n:\n        m = m - n\n\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    i = 0\n    j = n - 1\n\n    # Swap the elements at the beginning and end of the list\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i += 1\n        j -= 1\n\n    # Swap the elements at the end and m-th element from the end of the list to the end of the list\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i += 1\n        j -= 1\n\n    # Swap the elements at the beginning and m-th element from the end of the list to the beginning of the list\n    i = 0\n    j = n - 1\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i += 1\n        j -= 1\n\n    # Reverse the first m elements of the list\n    i = 0\n    j = m - 1\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i += 1\n        j -= 1\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input and returns the list after rotating it by m positions to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input and rotates the list by m items to the right.\n    \"\"\"\n    n = len(list)\n    m = m % n # to handle case when m > n\n    list[:m] = list[m:] + list[:m] # rotate the list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Finding the starting index of the first element after rotating\n    start_index = (n - m) % n\n    \n    # Swapping the first element with the last element\n    list[0], list[start_index] = list[start_index], list[0]\n    \n    # Traversing the list from the second element to the last element\n    for i in range(1, n - start_index):\n        j = (i + start_index) % n\n        list[i], list[j] = list[j], list[i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # check if m is valid\n    if m > n or m < 0:\n        return list\n    \n    # rotate by m elements\n    list.extend(list[:m])\n    list = list[m:]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if list is empty\n    if not list:\n        return []\n\n    # Get length of the list\n    n = len(list)\n\n    # If m is greater than or equal to length of the list, no rotation is required\n    if m >= n:\n        return list\n\n    # Find the element to be rotated\n    x = list[m]\n\n    # Find the position of the element to be rotated\n    for i in range(m, n):\n        if list[i] == x:\n            pos = i\n            break\n\n    # Create a new list to store the rotated elements\n    rotated_list = [0] * n\n\n    # Copy the elements from the right of the list to the new list\n    for i in range(n - m):\n        rotated_list[i] = list[i + pos]\n\n    # Copy the elements from the right of the list to the new list\n    for i in range(n - m, n):\n        rotated_list[i] = list[i - m]\n\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n    # Calculate the number of rotations required\n    rotations = n // m\n    # If there are not enough elements to rotate by m, return the original list\n    if n % m!= 0:\n        return list\n    # Create an empty list to hold the rotated elements\n    rotated_list = []\n    # Iterate through the list and append the elements to the rotated list\n    for i in range(rotations):\n        for j in range(m):\n            rotated_list.append(list[j])\n        # Move the last element to the first position\n        last = list[m-1]\n        for k in range(m-1):\n            list[k] = list[k+1]\n        list[m-1] = last\n    # Append the remaining elements to the rotated list\n    for i in range(m, n):\n        rotated_list.append(list[i])\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n):\n        # Move items from the right end of list to the front\n        temp = list[i]\n        j = i - m\n        if j < 0:\n            j += n\n        list[i] = list[j]\n        list[j] = temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Calculate the number of rotations required to make the list circular\n    rotations = m % n\n    # If m is more than or equal to n, no rotation is required\n    if rotations == 0:\n        return list\n    # Reverse the first n - rotations elements of the list\n    list = list[-rotations:] + list[:-rotations]\n    # Reverse the whole list\n    list = list[::-1]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def check_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        digit_sum = sum(int(digit) for digit in str(num))\n        return num % digit_sum == 0\n    \n    return [num for num in range(startnum, endnum+1) if check_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = filter(lambda num: all(int(digit) % int(num) == 0 for digit in str(num)), range(startnum, endnum + 1))\n    return list(divisible_by_digits)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num, digits):\n        for digit in digits:\n            if num % int(digit)!= 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [str(num)[i] for i in range(len(str(num)))]\n        if is_divisible(num, digits):\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(endnum)]\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits_in_num = [int(d) for d in str(num)]\n        if all(d in digits for d in digits_in_num):\n            divisible_nums.append(num)\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(num % digit == 0 for digit in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return sorted(set(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1))))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit not in digits:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    return list(filter(is_divisible, range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the range of 0 to 360 degrees\n    if a < 0 or a > 360:\n        print(\"Error: Angle should be between 0 and 360 degrees.\")\n        return None\n\n    # Convert angle from degrees to radians\n    angle_rad = math.radians(a)\n\n    # Calculate area using formula A = pi*r^2 * cos(A)\n    area = math.pi * r ** 2 * math.cos(angle_rad)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # check if angle is valid\n    if a <= 360 and a >= 0:\n        # calculate area\n        area = math.pi * r * r * a / 360\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should be less than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r * (math.sin(math.radians(a)))\n        print(\"Area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should be less than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r * (math.sin(math.radians(a/2))) ** 2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    angle_radians = math.radians(a)\n    area = r * r * angle_radians\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    s = math.sin(math.radians(a/2))\n    area = r*s\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)] \n\n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    lcs = \"\" \n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    dp = [[0]*(p+1) for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            elif Y[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i][j-1])\n    \n    lcs = ''\n    i = m\n    j = p\n    \n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif Y[i-1] == Z[j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[[0]*(p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the matrix in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # backtrack to find the LCS\n    L = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            L.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(L))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    # Creating a 3D table to store LCS values of all possible prefixes \n    L = [[[0]*(p+1) for j in range(n+1)] for i in range(m+1)] \n    \n    # Following steps build L[m+1][n+1] in bottom up fashion. \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1]) \n    # Backtracking to find the LCS \n    i = m \n    j = n \n    k = p \n    lcs = [] \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i-1][j][k-1]: \n            i -= 1 \n        elif L[i][j-1][k] == L[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n    return ''.join(lcs[::-1]) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)] \n  \n    # Step 1 \n    for i in range(n + 1): \n        p[i][0] = 0 \n  \n    for j in range(m + 1): \n        p[0][j] = 0 \n  \n    # Step 2 \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n  \n            # If the current characters of X and Y match \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1\n  \n            # If not, then find the length of LCS of X[0..i-1] \n            # and Y[0..j-1] and take the maximum of two values. \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 3 \n    lcs = [] \n    i = n \n    j = m \n  \n    # Reconstruct the LCS \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Reverse the LCS \n    lcs.reverse() \n  \n    # Return the LCS \n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common subsequences of prefixes of X, Y and Z\n    L = [[[0] * (o+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the L[][] table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j][k] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n\n    # print the L[][] table to get the lengths of longest common subsequences\n    # for i in range(1, n+1):\n    #     for j in range(1, m+1):\n    #         for k in range(1, o+1):\n    #             print(L[i][j][k], end=\" \")\n    #     print()\n\n    # find the index of the longest common subsequence using the L[][] table\n    i = n\n    j = m\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m+1) for i in range(n+1)] \n\n    # Build LCS matrix in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    # Extract LCS from LCS matrix \n    lcs = \"\" \n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS for all prefixes of X, Y and Z\n    L = [[0] * (n + 1) for i in range(m + 1)]\n\n    # Fill in the table L[i][j] with length of LCS of X[:i], Y[:j], and Z[:p]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the LCS\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store the length of LCS of all prefixes\n    table = [[0] * (o+1) for _ in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = 1 + table[i-1][j-1][k-1]\n                elif X[i-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i][j-1][k]\n                else:\n                    table[i][j][k] = table[i][j][k-1]\n\n    # Print the length of LCS of all prefixes\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                print(table[i][j][k], end=' ')\n            print()\n\n    # Find the index of last common element in the LCS of all prefixes\n    i, j, k = m, n, o\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = [[0] * (n + 1) for _ in range(m + 1)] \n  \n    # Traverse the matrix to find the length of LCS \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n  \n    # Print LCS \n    lcs = [] \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return \"\".join(lcs[::-1])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word and join the words back together\n    new_str =''.join([word.capitalize() for word in words])\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([a-z])([A-Z]+)', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # create a regular expression pattern to match words that start with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # use the re.sub() method to replace the pattern with a single space and return the modified string\n    return re.sub(pattern, r'\\1', string)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all non-alphanumeric characters from the string and convert to lowercase\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1).lower()\n\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Iterate over the list of words and check if the first letter is capitalized\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it is, add a space before it\n            words[i] ='' + words[i]\n\n    # Join the words back together into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'(?<=[A-Z])[A-Z](?=[a-z])')\n    # Split the string into words\n    words = re.findall(pattern, str1)\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n\n    Args:\n        str1 (str): The input string\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters\n    \"\"\"\n    # Split the string by whitespace\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Split the string into words using regular expression\n    words = re.findall('\\b\\w+\\b', string)\n    \n    # Create a list to store the new string with spaces between words\n    new_string = []\n    \n    # Loop through each word and append it to the new string with a space if it starts with capital letter\n    for word in words:\n        if word.istitle():\n            new_string.append(word +'')\n        else:\n            new_string.append(word)\n    \n    # Join the new string with spaces\n    new_string =''.join(new_string)\n    \n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the list of words\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # Add a space between the capital letter and the rest of the word\n            words[i] ='' + words[i]\n    \n    # Join the list of words into a single string with spaces between them\n    result = ''.join(words)\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the string into a list of strings\n    nums_list = nums_str.split(\",\")\n\n    # Converting the list of strings to list of integers\n    nums_int = [int(num) for num in nums_list]\n\n    # Sorting the list of integers in ascending order\n    nums_int.sort()\n\n    # Converting the list of integers back to list of strings\n    nums_str = [str(num) for num in nums_int]\n\n    # Joining the list of strings into a string\n    nums_str = \",\".join(nums_str)\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the list of integers in numerical order\n    nums_int.sort()\n\n    # Convert the list of integers back to a list of strings\n    nums_str = [str(num) for num in nums_int]\n\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Define a function to check if a string is numeric\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    # Filter out the non-numeric strings\n    nums = list(filter(is_numeric, nums_str))\n\n    # Convert the remaining strings to floats\n    nums = [float(num) for num in nums]\n\n    # Sort the list numerically using the built-in `sorted()` function\n    nums = sorted(nums)\n\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = [int(x) for x in nums_str] # convert all strings to integers\n    nums.sort() # sort the list\n    sorted_nums_str = [str(x) for x in nums] # convert all integers back to strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert all numbers in the list to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the list of floats in ascending order\n    nums_float.sort()\n    # Convert the sorted list back to strings and return the result\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to numeric\n    nums = [int(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        for tup_item in test_tup:\n            if item == tup_item:\n                return \"The tuple is already present in the list.\"\n    for tup_item in test_tup:\n        if tup_item not in test_list:\n            test_list.append(tup_item)\n    return \"The tuple has been added to the list successfully.\""
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    # Add the tuple to the set\n    test_set.add(test_tup)\n    # Convert the set back to a list and return it\n    return list(test_set)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 1:\n        return True\n    \n    # Get the parent of the current node\n    parent = i // 2\n    \n    # Check if the parent is a min heap or not\n    if arr[i] < arr[parent]:\n        return False\n    \n    # Recursively check the parent node and the current node\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Get the last index of the array\n    n = len(arr)\n    \n    # Check the first node and its children recursively\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case: if the current index is greater than or equal to the length of the array, the array is a min heap\n    if i >= len(arr):\n        return True\n    \n    # Otherwise, check if the left child and right child of the current index are less than or equal to their parent index\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    \n    # Recursively call the function for the left and right children of the current index\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes in an array and checks if it represents a min heap or not.\n    '''\n    \n    # Call the helper function to check if the array represents a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n\n    # Helper function to check if the left child is smaller than the current node\n    def is_smaller(parent, child):\n        return arr[parent] > arr[child]\n\n    # Traverse the array from the first non-leaf node\n    for i in range(1, n // 2 + 1):\n        # Check if the left child is smaller than the current node\n        if is_smaller(2 * i - 1, 2 * i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case: if i is the last element, then it is a min heap\n    if i == len(arr) - 1:\n        return True\n\n    # Recursive case: if the value at index i is less than the value at index 2*i + 1, then it is a min heap\n    if arr[i] < arr[2*i + 1]:\n        return False\n    else:\n        # If the value at index i is greater than the value at index 2*i + 1, then check if it is a min heap\n        # in the left subtree recursively\n        return check_min_heap_helper(arr, 2*i + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the array contains only one element, which is always a min heap\n    if len(arr) == 1:\n        return True\n\n    # Check if the array contains only two elements, which are always a min heap\n    if len(arr) == 2:\n        return True\n\n    # Check if the array contains only three elements, which are always a min heap\n    if len(arr) == 3:\n        return True\n\n    # Check if the array contains only four elements, which are always a min heap\n    if len(arr) == 4:\n        return True\n\n    # Call the helper function to check if the array represents a min heap or not\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n\n    if arr[i] < arr[0]:\n        return False\n\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 0:\n        return check_min_heap_helper(arr, len(arr) // 2 - 1)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)\n\narr = [10, 7, 8, 9, 1, 2, 3, 4, 5]\nif check_min_heap(arr):\n    print(\"Array is a min heap\")\nelse:\n    print(\"Array is not a min heap\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n\n    # Traverse through array from last to first\n    for i in range(n//2 - 1, -1, -1):\n        # If left child is smaller than root, swap them\n        if arr[i][0] > arr[i*2][0]:\n            arr[i], arr[i*2] = arr[i*2], arr[i]\n\n        # If right child is smaller than root, swap them\n        if i*2 + 1 < n and arr[i][0] > arr[i*2 + 1][0]:\n            arr[i], arr[i*2 + 1] = arr[i*2 + 1], arr[i]\n\n    # If the last element is greater than its parent, return False\n    if n > 1 and arr[0][0] > arr[n-1][0]:\n        return False\n\n    # If all elements are smaller than or equal to their parent, return True\n    for i in range(1, n):\n        if arr[i][0] >= arr[i//2][0]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array and returns True if it represents a min heap and False otherwise.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # check if the current index is greater than the parent index\n    if i > 0 and arr[i] < arr[parent_index(i)]:\n        return False\n    \n    # check if the left child index is less than the right child index\n    if i < len(arr) // 2:\n        if arr[i] > arr[left_child_index(i)]:\n            return False\n    \n    # check if the right child index is less than the left child index\n    if i + len(arr) // 2 < len(arr):\n        if arr[i] > arr[right_child_index(i)]:\n            return False\n    \n    # if all the conditions are true, the array is a min heap\n    return True\n\ndef parent_index(i):\n    return (i - 1) // 2\n\ndef left_child_index(i):\n    return 2 * i + 1\n\ndef right_child_index(i):\n    return 2 * i + 2"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] <= arr[parent(i)]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two terms of the series\n    jacobsthal_num = 0\n    lucas_num = 1\n\n    # Loop through n-2 terms\n    for i in range(n-2):\n        # Calculate the next term of the series\n        jacobsthal_num = jacobsthal_num + lucas_num\n        lucas_num = lucas_num + 2*jacobsthal_num\n\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_n_minus_1 = jacobsthal_num(n - 1)\n        jacobsthal_n = jacobsthal_num(n - 2)\n        return jacobsthal_n_minus_1 + jacobsthal_n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398102, 2796205, 5592411, 11184821, 22369643, 44739286, 89478572, 178957144, 357914288, 715828576, 1431657152, 2863314304, 5726628608, 11453257216, 22906514432, 45813028864, 91626057728, 183252115456, 366504230913, 733008461825, 1466016923651, 2932033847302, 5864067694605, 11728135389210, 23456270778421, 46912541556842, 93825083113684, 187650166227369, 375300332454738, 750600664909477, 1501201329818954, 3002402659637908, 6004805319275817, 12009610638551634, 24019221277103269, 48038442554206538, 96076885108413077, 192153770216826154, 384307540433652309, 768615080867304618, 1537230161734609237, 3074460323469218475, 6148920646938436950, 12297841293876873900, 24595682587753747801, 49191365175507495602, 98382730351014991204, 196765460702029982409, 393530921404059964818, 78706"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return 2 * jacobsthal_num((n-1)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 4 * jacobsthal_num(n//2) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) - 1) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize variables\n    jacob = 0\n    lucas = 1\n\n    # loop through n times to generate jacobsthal number\n    for i in range(n):\n        # calculate the sum of jacob and lucas numbers\n        jacob += lucas\n        # update lucas number\n        lucas = jacob - lucas\n\n        # print jacobsthal number for each iteration\n        print(jacob)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 43\n    elif n == 8:\n        return 85\n    elif n == 9:\n        return 171\n    elif n == 10:\n        return 341\n    elif n == 11:\n        return 683\n    elif n == 12:\n        return 1365\n    elif n == 13:\n        return 2731\n    elif n == 14:\n        return 5461\n    elif n == 15:\n        return 10923\n    elif n == 16:\n        return 21845\n    elif n == 17:\n        return 43691\n    elif n == 18:\n        return 87382\n    elif n == 19:\n        return 174764\n    elif n == 20:\n        return 349529\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # sort the list based on second element\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize minimum count and minimum value\n    count = 0\n    minimum = None\n\n    # iterate through the list and keep track of minimum count and minimum value\n    for record in test_list:\n        if count < K:\n            count += 1\n            if minimum is None or record[1] < minimum[1]:\n                minimum = record\n        else:\n            break\n\n    # return the minimum count and minimum value\n    return count, minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for tup in test_list:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # Initialize the minimum count and the minimum key\n    min_count = float('inf')\n    min_key = None\n    \n    # Iterate through the dictionary and find the minimum k records\n    for key, value in count_dict.items():\n        if value < min_count:\n            min_count = value\n            min_key = key\n        elif value == min_count and key < min_key:\n            min_key = key\n    \n    # Return the minimum k records\n    return [test_list[i] for i in range(len(test_list)) if test_list[i][0] == min_key]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    count = [0] * len(test_list)\n    min_count = min(K, len(test_list))\n\n    for i in range(len(test_list)):\n        count[i] = 1\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                count[j] += 1\n                if count[j] == min_count:\n                    return test_list[j]\n\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n\n    Input:\n    test_list: A list of tuples containing name and age of people.\n    K: An integer indicating the minimum number of records required.\n\n    Output:\n    A list of tuples containing name and age of the minimum k records.\n\n    Example:\n    >>> test_list = [('John', 25), ('Jane', 30), ('Bob', 28), ('Alice', 23), ('Bob', 25)]\n    >>> min_k(test_list, 2)\n    [('Bob', 25), ('Alice', 23)]\n    '''\n\n    # Sort the list of tuples by age in ascending order\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_list = []\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # If the list of tuples is not exhausted yet, check if the length of min_k_list is less than K\n        if len(min_k_list) < K:\n            # If the length of min_k_list is less than K, add the current tuple to min_k_list\n            min_k_list.append(test_list[i])\n        # If the length of min_k_list is equal to K, check if the age of the current tuple is greater than the age of the oldest tuple in min_k_list\n        elif test_list[i][1] > min_k_list[0][1]:\n            # If the age of the current tuple is greater than the age of the oldest tuple in min_k_list, remove the oldest tuple from min_k_list and add the current tuple to min_k_list\n            min_k_list.pop(0)\n            min_k_list.append(test_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    min_heap = []\n    for record in test_list:\n        if len(min_heap) < K:\n            min_heap.append(record)\n        else:\n            min_heap[0] = record\n            min_heap.pop()\n    return min_heap"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    min_lst = []\n    for tup in test_list:\n        if len(min_lst) < K:\n            min_lst.append(tup)\n        elif min(min_lst)[1] > tup[1]:\n            min_lst = [tup]\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum k records\n    min_list = []\n\n    # Traverse the sorted list from the end and keep track of the minimum k records\n    for i in range(len(test_list)-K, -1, -1):\n        min_list.append(test_list[i])\n\n        # If the length of the minimum k records is equal to K, return the list\n        if len(min_list) == K:\n            return min_list\n\n    # If the length of the minimum k records is less than K, return an empty list\n    return []"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list of tuples): A list of tuples. Each tuple contains the values of k records that we need to find.\n    K (int): The number of records that we need to find.\n    \n    Returns:\n    int: The minimum number of records that we need to find.\n    \n    Example:\n    test_list = [(5, 10), (8, 7), (12, 15), (13, 20)]\n    K = 2\n    Output: 5\n    '''\n    \n    # Initialize variables for the minimum and count\n    min_val = float('inf')\n    count = 0\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the count is less than K, add the value of the tuple to the count\n        if count < K:\n            count += tup[0]\n        # If the count is equal to K, compare the value of the tuple to the minimum\n        elif count == K:\n            if tup[0] < min_val:\n                min_val = tup[0]\n            elif tup[0] == min_val:\n                min_val = min_val + tup[1]\n            count = 0\n    \n    # Return the minimum number of records that we need to find\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input. \n    It returns a tuple of the minimum K records from the list.\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i][0])\n    return tuple(min_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list (list of tuples): a list of tuples containing data (id, value)\n    K (integer): the number of records to find\n    \n    Returns:\n    (tuple): the minimum k records from the list\n    '''\n    \n    # Sort the list in ascending order based on the value of the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize an empty list to store the minimum k records\n    min_k_list = []\n    \n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        \n        # If the length of the current list is greater than or equal to K, add the first K elements to the min_k_list\n        if len(min_k_list) < K:\n            min_k_list.append(sorted_list[i])\n        \n        # If the length of the min_k_list is equal to K, add the current element to the min_k_list\n        elif len(min_k_list) == K:\n            min_k_list.append(sorted_list[i])\n        \n        # If the length of the current list is less than K, continue iterating\n        else:\n            continue\n    \n    # Return the min_k_list\n    return tuple(min_k_list)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create a dictionary to store the count of each element in each list\n    l1_count = {}\n    l2_count = {}\n    l3_count = {}\n\n    # Iterate through each element in l1\n    for element in l1:\n        # If the element is already in the dictionary, increment its count\n        if element in l1_count:\n            l1_count[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            l1_count[element] = 1\n\n    # Iterate through each element in l2\n    for element in l2:\n        # If the element is already in the dictionary, increment its count\n        if element in l2_count:\n            l2_count[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            l2_count[element] = 1\n\n    # Iterate through each element in l3\n    for element in l3:\n        # If the element is already in the dictionary, increment its count\n        if element in l3_count:\n            l3_count[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            l3_count[element] = 1\n\n    # Create a list to store the common elements\n    common_elements = []\n\n    # Iterate through each element in l1\n    for element in l1:\n        # If the element is also in l2 and l3, and has the same count in all three lists, add it to the common_elements list\n        if element in l2_count and element in l3_count and l1_count[element] == l2_count[element] == l3_count[element]:\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common_list = []\n    \n    # Iterate through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is common for all three lists\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty dictionary to store the index lists\n    index_list = {}\n    \n    # Loop through each list\n    for list in [l1, l2, l3]:\n        # Loop through each element in the list\n        for element in list:\n            # If the element has not been seen before, add it to the dictionary\n            if element not in index_list:\n                index_list[element] = []\n            # Append the index of the list to which the element belongs\n            index_list[element].append(list.index(element))\n    \n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through the dictionary\n    for element in index_list:\n        # If the element appears in all three lists, add it to the list\n        if element in l1 and element in l2 and element in l3:\n            common_elements.append(element)\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Define an empty list to store the common elements\n    common = []\n    # Iterate through each index of the first list\n    for i in range(len(l1)):\n        # If the element at the current index is present in all three lists, add it to the common list\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n        elif l1[i] in l2:\n            common.append(l1[i])\n        elif l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    common_indices = set()  # set to store the indices where the elements are common\n\n    for index in range(len(l1)):\n        if l1[index] in l2[index] and l1[index] in l3[index]:\n            common_indices.add(index)\n\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through each index of l1, l2, and l3\n    for i in range(len(l1)):\n        \n        # If the element at the current index is equal in all three lists, add it to the common_elements list\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            common_list.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            common_list.append(l3[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a set to store the common elements\n    common = set()\n    \n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # Add the element to the set\n            common.add(l1[i])\n    \n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list should have at least two elements.\"\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        return min(numbers[0], smallest)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if the list is empty\n    if len(numbers) < 2:\n        return None\n    \n    # sort the list in descending order\n    numbers.sort(reverse=True)\n    \n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest and num!= smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a\\b+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    match = pattern.match(text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*){1,}'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n\n    pattern = r'a(b|){1,}'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*){0,1}'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create a dictionary to store the counts of reverse pairs\n    reverse_dict = {}\n\n    # iterate over the given list of strings\n    for string in test_list:\n        # reverse the string and store the count in the dictionary\n        reverse_dict[string[::-1]] = reverse_dict.get(string[::-1], 0) + 1\n\n    # initialize the count of reverse pairs\n    count = 0\n\n    # iterate over the dictionary and add the pairs to the count if their counts are equal\n    for key, value in reverse_dict.items():\n        if value % 2 == 0:\n            count += value\n\n    # return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # create a dictionary to store the count of reverse strings\n    reverse_dict = {}\n\n    # loop through each string in the list\n    for string in test_list:\n        # reverse the string\n        reversed_string = string[::-1]\n        # check if the reversed string already exists in the dictionary\n        if reversed_string in reverse_dict:\n            # increment the count of the reverse string in the dictionary\n            reverse_dict[reversed_string] += 1\n        else:\n            # add the reversed string to the dictionary with a count of 1\n            reverse_dict[reversed_string] = 1\n\n    # loop through each string in the list again\n    count = 0\n    for string in test_list:\n        # reverse the string and check if it exists in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string in reverse_dict:\n            # decrement the count of the original string in the dictionary\n            reverse_dict[reversed_string] -= 1\n            if reverse_dict[reversed_string] == 0:\n                # if the count becomes 0, remove the string from the dictionary\n                del reverse_dict[reversed_string]\n            # add the count of the original string to the count\n            count += reverse_dict[reversed_string]\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert all lists in the list1 to tuples\n    list1_tuples = tuple(tuple(x) for x in list1)\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    # Iterate over each tuple in the list1_tuples\n    for tup in list1_tuples:\n        # If the tuple is not already in the count_dict, add it with a value of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the count_dict, increment its value by 1\n        else:\n            count_dict[tup] += 1\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    counts = {}\n\n    # Iterate through the list\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist = tuple(sublist)\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if sublist not in counts:\n            counts[sublist] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[sublist] += 1\n\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert all lists in list1 to tuples\n    list1 = tuple(list1)\n    # Create an empty dictionary to store the count of each unique tuple\n    counts = {}\n    # Loop over all tuples in list1 and count their occurrences in the original list\n    for tup in list1:\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = list1.count(tup)\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        count = 0\n        for item in list1:\n            if sublist == item:\n                count += 1\n        sublist_count[tuple(sublist)] = count\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary\n    sublist_count = {}\n\n    # loop through each list in the input list\n    for lst in list1:\n\n        # convert the list to a tuple\n        tup = tuple(lst)\n\n        # check if the tuple is already in the dictionary\n        if tup in sublist_count:\n            # if it is, increment its count by 1\n            sublist_count[tup] += 1\n        else:\n            # if not, add the tuple and set its count to 1\n            sublist_count[tup] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Step 1: Convert the list to tuples\n    list2 = [(tuple(i)) for i in list1]\n\n    # Step 2: Create a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Step 3: Loop through the tuples and count their occurencies\n    for tup in list2:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    counts = {}\n    # loop through each element in the list\n    for element in list1:\n        # convert each element to a tuple and check if it is already in the counts dictionary\n        if tuple(element) in counts:\n            # if it is, increment its count\n            counts[tuple(element)] += 1\n        else:\n            # if it's not, add it to the counts dictionary with a count of 1\n            counts[tuple(element)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts of sublists\n    counts = {}\n    # loop through each sublist in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            # if it does, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist = tuple(sorted(sublist))\n            if sublist in sublists_count:\n                sublists_count[sublist] += 1\n            else:\n                sublists_count[sublist] = 1\n    return sublists_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = tuple(tuple(x) for x in list1) # Convert each list in the list1 to a tuple\n    count_dict = {} # Initialize an empty dictionary to store the count of each tuple\n    \n    # Iterate through the list of tuples\n    for tup in list1_tuples:\n        if tup in count_dict:\n            count_dict[tup] += 1 # Increment the count of the tuple if it already exists in the dictionary\n        else:\n            count_dict[tup] = 1 # Add a new key-value pair to the dictionary with the tuple as the key and the count of 1 as the value\n    \n    # Return the dictionary of count of tuples\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input string starts with a digit\n    if not num.startswith('0') and num[0].isdigit():\n        # Check if the string has a decimal point and is followed by exactly 2 digits\n        if '.' in num and num.split('.')[-1].isdigit() and len(num.split('.')[-1]) == 2:\n            # Check if the decimal point is followed by exactly 2 digits\n            decimal_point = num.split('.')[-1]\n            if len(decimal_point) == 2 and decimal_point[0] == '0' and decimal_point[1] in '01':\n                return True\n        return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        num = float(num)\n        if '.' in str(num):\n            if str(num).count('.') == 1 and int(str(num).split('.')[1]) < 10:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function checks whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if num.replace('.', '', 1).isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num == int(num) and num % 1 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit() or int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    if len(num.split('.'))!= 2:\n        return False\n    int_part, dec_part = num.split('.')\n    if int_part.isdigit() and dec_part.isdigit():\n        if len(dec_part) > 2:\n            return False\n        for digit in dec_part:\n            if digit not in '0123456789':\n                return False\n        return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the string only contains digits\n    if not num.isdigit():\n        return False\n\n    # convert the string to a float with a precision of 2\n    float_num = float(num)\n\n    # check if the float is within the precision of 2\n    if abs(float_num % 0.01) < 0.001:\n        return True\n\n    # if the float is not within the precision of 2, the string is not a decimal number\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) > 2 or len(parts[1]) > 2:\n        return False\n    if len(parts[0]) == 2 and len(parts[1]) == 2 and not parts[0].isdigit() and not parts[1].isdigit():\n        return False\n    try:\n        float(parts[0])\n        float(parts[1])\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            # check if it contains at least one digit after the decimal point\n            if len(num.split('.')[-1]) > 1:\n                return True\n        else:\n            # check if it contains only one digit\n            if len(num) > 1:\n                return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n    else:\n        return False if len(set(arr)) == len(arr) else False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] == arr[1]:\n        return False\n    if arr[1] == arr[2]:\n        return False\n    if arr[2] == arr[3]:\n        return False\n    if arr[0] == arr[1] and arr[1] == arr[2]:\n        return False\n    for i in range(3, len(arr)):\n        if arr[i] == arr[i-1]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the length of the list is 0 or 1\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    \n    # create a set to store the elements of the list\n    unique_set = set(arr)\n    \n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) > 1:\n        if arr[0] == arr[1]:\n            return unique_Element(arr[1:])\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n        else:\n            break\n    return count == 1"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"This month has 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if 1 <= monthnum3 <= 3:\n        print(\"30 days in March, April and May.\")\n    elif 4 <= monthnum3 <= 6:\n        print(\"30 days in June, July, August and September.\")\n    elif 7 <= monthnum3 <= 9:\n        print(\"30 days in October and November.\")\n    elif 10 <= monthnum3 <= 12:\n        print(\"30 days in December.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days:\n        if days[monthnum3] == 31:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check if the given month number is valid\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # check if the given month contains 30 days\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        if 1 <= date.today().month <= 2:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # dictionary to store the number of days in each month\n    days_in_month = {\n        1: 31,\n        2: 28,  # leap year\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # check if the given month number is in the dictionary\n    if monthnum3 in days_in_month:\n        # if it is, check if the number of days is 30\n        if days_in_month[monthnum3] == 30:\n            print(\"The given month number contains 30 days.\")\n        else:\n            print(\"The given month number does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum3 in month_dict:\n        if month_dict[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns\n    the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize variables\n    min_diff = float('inf')\n    curr_diff = float('inf')\n    prev_num = arr[0]\n\n    # Iterate over the array\n    for i in range(1, n):\n        # Calculate the current difference\n        curr_diff = arr[i] - prev_num\n\n        # If the current difference is smaller than the minimum difference,\n        # update the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n        # Update the previous number\n        prev_num = arr[i]\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n): \n    # Sort the array in non-decreasing order \n    arr.sort() \n\n    # Initialize two variables to store the minimum and maximum elements of the array \n    min_elem = arr[0] \n    max_elem = arr[-1] \n\n    # Initialize a variable to store the minimum difference found so far \n    min_diff = float('inf') \n\n    # Traverse the array from both ends \n    for i in range(n-1): \n        for j in range(i+1, n): \n            # Calculate the difference between the current element and the minimum element \n            diff = max_elem - arr[j] \n            # Update the minimum difference if the difference is smaller than the current minimum difference \n            if diff < min_diff: \n                min_diff = diff \n\n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function takes an array of integers and its size n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n <= 1:\n        return 0\n    \n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    \n    for i in range(1, n-1):\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): List of integers\n    n (int): Number of elements in the array\n\n    Returns:\n    int: The minimum difference between any two elements in the array\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables for the minimum difference and the two elements with the minimum difference\n    min_diff = float('inf')\n    min_1 = None\n    min_2 = None\n\n    # Iterate over the sorted array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous one\n        diff = arr[i] - arr[i-1]\n\n        # If the current difference is smaller than the minimum difference, update the minimum difference and the two elements with the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            min_1 = arr[i-1]\n            min_2 = arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        curr_diff = arr[n-i] - arr[i-1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize minimum difference to the maximum possible integer value\n    diff = float('inf')\n    # Initialize variables to keep track of the current minimum and maximum elements\n    min_elem = arr[0]\n    max_elem = arr[n-1]\n    # Loop through the array and find the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            # Update minimum difference if necessary\n            if diff < diff:\n                diff = abs(arr[i] - arr[j])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference and initialize a variable to mark the position of the current minimum difference\n    min_diff = float('inf')\n    min_index = -1\n\n    # Traverse through the sorted array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # If the current difference is smaller than the minimum difference or if the current difference is equal to the minimum difference and the current element is smaller than the minimum element, update the minimum difference and the position of the current minimum difference\n        if diff < min_diff or (diff == min_diff and arr[i + 1] < arr[min_index]):\n            min_diff = diff\n            min_index = i\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: Input array\n    :param n: Size of array\n    :return: Minimum difference between any two elements in the array\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Loop through all pairs of adjacent elements\n    for i in range(n-1):\n        # Calculate the difference between adjacent elements\n        diff = arr[i+1] - arr[i]\n        # Update minimum difference if current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\nprint(number_ctr(\"Hello, world!\"))  # Output: 10\nprint(number_ctr(\"1234567890\"))  # Output: 10\nprint(number_ctr(\"123a456b789c0\"))  # Output: 12"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits it contains.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def nth_polite_num(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return 2 * (nth_polite_num(n-1) - nth_polite_num(n-2))\n\n    return nth_polite_num(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    # Check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return False\n    \n    # Initialize polite number\n    polite = 1\n    \n    # Check if n is even\n    if n % 2 == 0:\n        # If n is even, initialize the next polite number as 3\n        next_polite = 3\n    else:\n        # If n is odd, initialize the next polite number as 5\n        next_polite = 5\n    \n    # Loop through each number from 1 to n\n    for i in range(2, n+1):\n        # Update polite number\n        polite += next_polite\n        \n        # Check if the polite number is greater than 1000\n        if polite > 1000:\n            # If it is, update the polite number to 1000\n            polite = 1000\n        \n        # Check if the polite number is greater than the current i\n        if polite > i:\n            # If it is, update the next polite number to i\n            next_polite = i\n    \n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if the nth polite number exists, False otherwise.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        Returns the nth prime number.\n        \"\"\"\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    def nth_polite(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function finds the nth polite number using the Sieve of Eratosthenes algorithm.\n    '''\n\n    def sieve(n):\n        primes = [True] * (n+1)\n        p = 2\n        while p**2 <= n:\n            if primes[p]:\n                for i in range(p**2, n+1, p):\n                    primes[i] = False\n            p += 1\n        return primes\n    \n    def nth_prime(n):\n        primes = sieve(n)\n        prime = 2\n        count = 0\n        while count < n:\n            if primes[prime]:\n                count += 1\n            prime += 1\n        return prime\n    \n    polite_number = nth_prime(n)\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Returns True if num is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of a and b.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def is_maximally_polite(num):\n        \"\"\"\n        Returns True if num is maximally polite, False otherwise.\n        \"\"\"\n        def is_multiple_of_2(num):\n            \"\"\"\n            Returns True if num is a multiple of 2, False otherwise.\n            \"\"\"\n            return num % 2 == 0\n        \n        max_multiple = 2\n        while max_multiple * max_multiple <= num:\n            if is_prime(max_multiple):\n                return False\n            if is_multiple_of_2(max_multiple):\n                max_multiple *= 2\n            else:\n                max_multiple += 1\n        return True\n    \n    def nth_polite(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        if n < 1:\n            return \"Invalid input\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        i = 2\n        while True:\n            i += 2\n            if is_polite(i):\n                return i\n    \n    nth_polite_num = nth_polite(n)\n    if nth_polite_num == \"Invalid input\":\n        print(\"Invalid input\")\n    else:\n        print(nth_polite_num)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Returns True if the number is prime, False otherwise\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_polite_prime(num):\n        \"\"\"\n        Returns True if the number is a polite prime, False otherwise\n        \"\"\"\n        if num == 1:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(num))+1, 2):\n                if num % i == 0:\n                    return False\n            return True\n\n    \"\"\"\n    Main function to find nth polite number.\n    \"\"\"\n    i = 1\n    polite_prime = 0\n    while True:\n        if is_polite_prime(i):\n            polite_prime += 1\n            if polite_prime == n:\n                return i\n        i += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # initialize variables\n    i = 1\n    j = 1\n    is_prime_i = is_prime(i)\n    is_prime_j = is_prime(j)\n    is_prime_k = is_prime(n)\n    \n    # iterate until we find the nth polite number\n    while i < n:\n        k = 2\n        while k * k <= n:\n            if k < i:\n                j = i - k\n                if is_prime_j:\n                    break\n                k += 1\n            elif k * k < n:\n                j = k * k\n                if is_prime_j:\n                    break\n            k += 1\n        if is_prime_k:\n            return True\n        i += 1\n        is_prime_i = is_prime(i)\n        \n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    else:\n        a = 2\n        b = 1\n        while b < n:\n            a, b = b, a+b\n        return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize the first polite number\n    a = 1\n    b = 2\n    # Iterate through the numbers to find nth polite number\n    for i in range(2, n):\n        # Calculate the next polite number\n        c = a + b\n        # Update the values for the next iteration\n        a = b\n        b = c\n        # Check if the next polite number is a multiple of 4\n        if c % 4 == 0:\n            return True\n    # If we reach here, the nth polite number is not found\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        Return the next prime number after num.\n        \"\"\"\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    polite_num = 1\n    i = 1\n    while i <= n:\n        polite_num = next_prime(polite_num)\n        i += 1\n\n    return polite_num"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as an input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and the sum as inputs and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    arr.sort()\n    for i in range(n-1):\n        j = i+1\n        while j < n and arr[i]+arr[j] <= sum:\n            j += 1\n        count += j-i-1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists and returns the difference between them.\n\n    Parameters:\n    li1 (list): First list to be compared.\n    li2 (list): Second list to be compared.\n\n    Returns:\n    list: A list containing the elements that are in only one of the input lists.\n    \"\"\"\n\n    diff = []\n\n    # Loop through each element in the first list\n    for elem in li1:\n\n        # If the element is not in the second list, add it to the diff list\n        if elem not in li2:\n            diff.append(elem)\n\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the differences\n    diff_list = []\n    # iterate through each element in the first list\n    for item1 in li1:\n        # check if the element is in the second list\n        if item1 not in li2:\n            # if not, add it to the diff_list\n            diff_list.append(item1)\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the elements of the first list that are not present in the second list.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_power = 0\n    for i in range(2, n+1):\n        sum_of_power += i**4\n    return sum_of_power\n\nn = 5\nprint(odd_num_sum(n)) # Output: 3849"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Calculate the sum of fourth power of first n odd natural numbers\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i ** 4\n\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth_powers = 0\n    num = 1\n    while num <= n:\n        fourth_power = num ** 4\n        sum_fourth_powers += fourth_power\n        num += 1\n    return sum_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum = 0\n    while count < n:\n        count += 1\n        num = count*2\n        fourth_pow = num**4\n        sum += fourth_pow\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if (exp[i], stack[-1]) in [('(', ')'), ('[', ']'), ('{', '}'), ('(', '['), ('[', '{'), ('(', '{')]:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_brackets = {')', ']'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            last_bracket = stack.pop()\n            if bracket == ')' and last_bracket!= '(':\n                return False\n            if bracket == ']' and last_bracket!= '[':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_par = {'(':1, '{':2, '[':3}\n    close_par = {')':1, '}':2, ']':3}\n    \n    for char in exp:\n        if char in open_par:\n            stack.append(char)\n        elif char in close_par:\n            if not stack:\n                return False\n            last_open_par = stack.pop()\n            if open_par[char]!= close_par[last_open_par]:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char.isspace():\n            continue\n        \n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                continue\n            else:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for token in exp:\n        if token in \"([{\":\n            stack.append(token)\n        elif token in \")]}\":\n            if not stack:\n                return False\n            if token == \")\":\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            elif token == \"}\":\n                if stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    brackets = ['(', '[', '{']\n    for i in range(len(exp)):\n        if exp[i] in brackets:\n            stack.append(exp[i])\n        elif exp[i] in ['+', '-', '*', '/']:\n            if not stack:\n                return False\n            last_char = stack[-1]\n            if last_char in ['(', '[', '{']:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return \"Not balanced\"\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return \"Not balanced\"\n    if len(stack)!= 0:\n        return \"Not balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack:\n                return False\n            opening_bracket = stack.pop()\n            if bracket!= opening_bracket:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split() # split the string into words\n    \n    # remove words with k length\n    new_str = []\n    for word in test_str:\n        if len(word)!= K:\n            new_str.append(word)\n    \n    # join the words back into a string\n    return''.join(new_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            del words[i]\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store words without length K\n    without_length_K = []\n    # loop through each word\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # if it's not, add it to the list without length K\n            without_length_K.append(word)\n    # join the words without length K into a string and return it\n    return''.join(without_length_K)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into a list of words\n    new_words = [] # initialize an empty list to hold the new words\n    for word in words:\n        if len(word)!= K: # if the length of the word is not equal to K\n            new_words.append(word) # append the word to the new list if it has a length of K or less\n    return''.join(new_words) # join the new list of words into a string with spaces between them"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Iterate through each word and check if its length is equal to K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            # If it is, remove the word from the list\n            words.pop(i)\n            i -= 1\n            \n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If there is a match, return a tuple of the occurrence and position\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    if matches:\n        # Initialize the list to store the result\n        result = []\n        # Loop through each match and store the occurrence and position in the list\n        for match in matches:\n            result.append((match.start(), match.end()))\n        return result\n    else:\n        # If there is no match, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], matches[0].start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    for matchNum, match in enumerate(matches, start=1):\n        print(f'Match {matchNum}: {match.group()}')\n        print(f'Match {matchNum}: Start index: {match.start()}')\n        print(f'Match {matchNum}: End index: {match.end()}')\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            index = text.find(match)\n            print(\"Match found at position:\", index)\n        return matches\n    else:\n        print(\"No matches found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n\n    for match in matches:\n        match_index = text.find(match)\n        print(\"Substring '{}' found at index {} in the text '{}'\".format(match, match_index, text))\n\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use the re module to search for the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If the pattern is found, return a list of tuples containing the occurrence and position of the substring\n    if matches:\n        return [(match.start(), match.end()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    :param nums: A list of numbers.\n    :return: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 1 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Loop through the list and check if the odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if sum(set(nums[i])) % 2 == 1:\n            return False\n\n    # If the loop completes without returning False, then all odd indexes contain odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(set([nums[i], nums[i+1]])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # iterate through the string and count vowels as neighbors\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # loop through the list and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n    \n    # return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_elements = set(arr)\n    # initialize a variable to store the sum of unique elements\n    unique_sum = 0\n    # loop through each element in the set\n    for element in unique_elements: \n        # add the element to the sum\n        unique_sum += element\n    # return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # Using set to remove duplicates from the list\n    unique_arr = list(set(arr))\n    # Initializing the sum variable\n    total_sum = 0\n    # Looping through the unique list and adding the elements to the sum\n    for num in unique_arr:\n        total_sum += num\n    # Returning the sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    \n    # Calculate the sum of the unique elements in the array\n    sum_of_unique = sum(unique_set)\n    \n    # Return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Convert the set back to a list\n    unique_elements = list(unique_elements)\n    # Initialize the sum to 0\n    sum_of_unique_elements = 0\n    # Iterate through the list and add the sum of unique elements to the sum_of_unique_elements\n    for element in arr:\n        if element in unique_elements:\n            sum_of_unique_elements += element\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = list(set(arr))  # remove duplicates\n    arr.sort()  # sort the list\n    non_repeats_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            non_repeats_sum += arr[i]\n    return non_repeats_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr: \n        if element not in unique_elements: \n            unique_elements.append(element) \n    return sum(unique_elements) "
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # Initialize a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_sum = 0\n\n    # Iterate through the unique set and add its values to the sum_sum variable\n    for value in unique_set:\n        sum_sum += value\n\n    # Return the sum_sum variable\n    return sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Find the sum of unique elements\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Convert the set to a list to find the sum\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_list)\n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(list1)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using itertools.groupby to group consecutive duplicates\n    grouped = groupby(lst)\n    # Filtering out groups with a single element\n    non_singles = filter(lambda x: len(list(x)) > 1, grouped)\n    # Converting the filtered groups to lists\n    packed = [list(g) for g in non_singles]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            yield group"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped = groupby(enumerate(lst), key=lambda x: x[0] - x[1])\n    return [list(group) for key, group in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(lst):\n        if len(list(g)) > 1:\n            result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    pack = []\n    for item, group in groupby(lst):\n        if item == next(group)[0]:\n            pack.append(list(group))\n    return pack"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, key=lambda x: (x, x)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [''.join(list(group)) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # If it is, increment the count by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it's not, add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary containing the count of each tuple\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the sublist counts\n    sublist_counts = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(element, list):\n            element_tuple = tuple(element)\n            if element_tuple not in sublist_counts:\n                sublist_counts[element_tuple] = 1\n            else:\n                sublist_counts[element_tuple] += 1\n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Count the number of unique sublists in a given list.\n    '''\n    # convert the list to tuples\n    lst = [(x,) for x in lst]\n    # convert tuples to sets to remove duplicates\n    lst = set(lst)\n    # count the number of sublists\n    count = len(lst)\n    # create a dictionary with the counts of the sublists\n    sublist_count = {}\n    for i in range(1, len(lst) + 1):\n        sublist_count[i] = len([y for y in lst if len(y) == i])\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            count_dict[sublist] = count_dict.get(sublist, 0) + 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        tuple_list = tuple(list1[i])\n        if tuple_list in count_dict:\n            count_dict[tuple_list] += 1\n        else:\n            count_dict[tuple_list] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)-i):\n            sublist = list1[j:j+i+1]\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Using a set to remove duplicates from the list\n    set_list1 = set(list1)\n    # Creating an empty dictionary to store the count of each list\n    dict_count = {}\n    # Iterating through the set and adding the list to the dictionary\n    for lst in set_list1:\n        dict_count[lst] = list1.count(lst)\n    # Returning the dictionary\n    return dict_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    count_dict = {}\n\n    # Iterate through each list in the input list\n    for sublist in list1:\n        # Turn the list into a tuple to use as a key in the dictionary\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuples = set(test_list)\n    total = sum(tuples)\n    combs = []\n    for i in range(1, total+1):\n        for comb in combinations(tuples, i):\n            combs.append(tuple(comb))\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function finds the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Function to find the combinations of sums with tuples in the given tuple list\n    def find_combination(lst, target):\n        \"\"\"\n        This function finds the combinations of sums with tuples in the given tuple list.\n        \"\"\"\n        # Create a list to store the combinations\n        comb_list = []\n        # Sort the list in ascending order\n        lst.sort()\n        # Iterate through the list and create all combinations with duplicates\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                # Check if the sum of the current combination is equal to the target\n                if sum(lst[i:j]) == target:\n                    # If yes, add the current combination to the list\n                    comb_list.append(lst[i:j])\n        # Return the list of combinations\n        return comb_list\n\n    # Find all the unique tuples in the given list\n    tuples = list(set(tuple(x) for x in test_list))\n\n    # Find all the combinations of sums with tuples in the list\n    combinations_list = []\n    for t in tuples:\n        combinations_list.extend(find_combination(test_list, sum(t)))\n\n    # Return the list of combinations\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                print(tuple(test_list[i]), tuple(test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # initialize an empty list to store all the combinations\n    combinations_list = []\n\n    # loop through all the tuples in the given tuple list\n    for tup in test_list:\n\n        # find all the possible pairs of numbers from the given tuple\n        pairs = combinations(tup, 2)\n\n        # loop through all the pairs and calculate their sum\n        for pair in pairs:\n            if sum(pair) in tup:\n                # if the sum is present in the given tuple, add the pair to the list\n                combinations_list.append(pair)\n\n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list of tuples in non-descending order\n    sorted_list = sorted(test_list, key=lambda x: sum(x))\n    # use itertools to generate combinations\n    result = combinations(sorted_list, len(sorted_list[0]))\n    # convert the combinations to a list of tuples\n    combined_list = list(result)\n    return combined_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the input list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            # Calculate the sum of two tuples in the current combination\n            current_sum = sorted_list[i][0] + sorted_list[j][0]\n            # If the current sum is present in the given list, then add the current combination to the list\n            if current_sum in test_list:\n                combinations_list.append((sorted_list[i], sorted_list[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(test_list[i:j]) == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    # Creating all possible combinations of tuples\n    all_combinations = combinations(range(n), n)\n    # Finding the combinations of sums\n    combinations_of_sums = []\n    for comb in all_combinations:\n        current_sum = 0\n        for num in comb:\n            current_sum += test_list[num]\n        combinations_of_sums.append(current_sum)\n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_sum(combination):\n        '''\n        Helper function to find the sum of the tuples in a combination.\n        '''\n        return sum(combination)\n\n    def is_valid(combination):\n        '''\n        Helper function to check if a combination is valid or not.\n        '''\n        return all(sum(combination) == total_sum for total_sum in test_list)\n\n    total_sum = sum(test_list)\n    combinations_list = []\n    for i in range(1, total_sum+1):\n        for j in range(i, total_sum+1):\n            combination = tuple(sorted([i, j]))\n            if is_valid(combination):\n                combinations_list.append(combination)\n\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find all possible combinations of sums\n    all_combinations = combinations(test_list, len(test_list))\n    # Find the combinations of sums that have tuples in them\n    combinations_with_tuples = [combo for combo in all_combinations if any(isinstance(x, tuple) for x in combo)]\n    return combinations_with_tuples"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    divisors.append(n)\n    divisors.sort()\n    even_divisors = 0\n    odd_divisors = 0\n    for divisor in divisors:\n        if divisor == divisors[-1]:\n            even_divisors += 1\n        else:\n            odd_divisors += 1\n    if even_divisors % 2 == 0 and odd_divisors % 2 == 0:\n        return \"The count of even and odd divisors are both even.\"\n    elif even_divisors % 2 == 0 and odd_divisors % 2 == 1:\n        return \"The count of even and odd divisors are both odd.\"\n    else:\n        return \"The count of even and odd divisors are both odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function returns True if the count of divisors of a number is even, and False otherwise.\n    '''\n    \n    # count of divisors\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            count += 1\n            n //= i\n        else:\n            i += 1\n    \n    # check if count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n // i: \n                divisors.append(n // i) \n    if len(divisors) % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to check whether the count of divisors is even.\n    \"\"\"\n    # Calculate the sum of all integers up to n\n    sum_of_integers = sum(range(1, n+1))\n\n    # Calculate the count of divisors of n\n    count_of_divisors = math.factorial(n) // (math.factorial(sum_of_integers - n) * math.factorial(n - 1))\n\n    # Check if the count of divisors is even\n    if count_of_divisors % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, else False.\n    '''\n    # Calculate the number of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 1\n    \n    # Check if the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 2\n            if i!= n//i:\n                divisor_count += 1\n    return divisor_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        print(n, \"has even count of divisors\")\n    else:\n        print(n, \"has odd count of divisors\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = set()\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.add(i)\n            n //= i\n    if n > 1:\n        divisors.add(n)\n    return sum(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and checks whether the count of its divisors is even or odd.\n    If the count of divisors is even, the function returns True. Otherwise, it returns False.\n    '''\n    if n < 2:\n        return False\n    else:\n        divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n        return len(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    # calculate the sum of all even length subarrays\n    even_sum = sum([x for x in arr if len(str(x)) % 2 == 0])\n    # calculate the sum of all odd length subarrays\n    odd_sum = sum([x for x in arr if len(str(x)) % 2!= 0])\n    return even_sum + odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            result += arr[j-1]\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1]\n        \n    odd_sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd_sum += dp[i + 1]\n            \n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    prefix_sum[0] = 0\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    odd_sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            odd_sum += prefix_sum[i+1] - prefix_sum[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0] * n\n\n    for i in range(1, n):\n        if i % 2 == 1:\n            sum_arr[i] = sum_arr[i - 1] + arr[i]\n\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd_subarrays = 0\n    \n    # Iterate over each subarray of length odd\n    for i in range(1, len(arr), 2):\n        # Add the sum of the odd elements in the subarray to the sum_odd_subarrays variable\n        sum_odd_subarrays += sum(arr[i:])\n    \n    # Return the sum_odd_subarrays variable\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    sum_odd = 0\n    count_odd = 0\n    current_sum = 0\n    \n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        if i % 2!= 0:\n            if count_odd == 0:\n                sum_odd = current_sum\n            else:\n                sum_odd += current_sum\n            \n            count_odd += 1\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum variable with 0\n    sum_odd_subarrays = 0\n    # Traverse through the array\n    for i in range(n):\n        # Check if the current element is odd\n        if arr[i] % 2!= 0:\n            # If it is odd, initialize the sum variable with the current element\n            sum_odd_subarrays = arr[i]\n            # Traverse through the remaining elements of the array\n            for j in range(i+1, n):\n                # Check if the current element is odd\n                if arr[j] % 2!= 0:\n                    # If it is odd, add it to the sum variable\n                    sum_odd_subarrays += arr[j]\n                else:\n                    # If it is even, exit the loop\n                    break\n    # Return the sum of all odd length subarrays\n    return sum_odd_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb to r,g,b fractions\n    r_frac = r / 255.0\n    g_frac = g / 255.0\n    b_frac = b / 255.0\n    \n    # Find min, max, and delta values\n    min_val = min(r_frac, g_frac, b_frac)\n    max_val = max(r_frac, g_frac, b_frac)\n    delta = max_val - min_val\n    \n    # Convert hsv from max to min\n    h = 0\n    if max_val == r_frac:\n        h = 60 * ((g_frac - b_frac) / delta)\n    elif max_val == g_frac:\n        h = 60 * ((b_frac - r_frac) / delta) + 120\n    elif max_val == b_frac:\n        h = 60 * ((r_frac - g_frac) / delta) + 240\n    \n    # Convert hsv from min to max\n    if delta == 0:\n        h = 0\n    elif delta == max_val:\n        h = h\n    else:\n        h = h / 60\n    \n    # Convert hsv to hsv fractions\n    h_frac = h / 60.0\n    s_frac = delta / max_val\n    \n    # Convert hsv fractions to hsv values\n    h = 60 * h_frac\n    s = 100 * s_frac\n    v = max_val * 100\n    \n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red color component (0-255).\n        g (int): Green color component (0-255).\n        b (int): Blue color component (0-255).\n\n    Returns:\n        h (float): Hue (0-360).\n        s (float): Saturation (0-1).\n        v (float): Value (0-1).\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60 if h < 0 else h * 60\n    s = delta / (1 - abs(2 * cmax - 1)) if cmax!= 0 else 0\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the given RGB color to HSV color.\n\n    Parameters:\n    r (int): Red color value\n    g (int): Green color value\n    b (int): Blue color value\n\n    Returns:\n    h (float): Hue value in degrees\n    s (float): Saturation value (percentage)\n    v (float): Value (percentage)\n\n    \"\"\"\n\n    # Convert RGB to HSV color model\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        elif max_val == b:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h = h * 60\n\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n    v = max_val * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes RGB color values as input and returns HSV values as output.\n    '''\n\n    # Convert RGB to Hue, Saturation, Value\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0.0\n    s = 0.0\n    v = max_val\n    if max_val!= 0:\n        s = delta / max_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n\n        if h < 0:\n            h += 6.0\n\n        h /= 6.0\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r,g,b to float values\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Find the maximum value in the RGB color\n    max_val = max(r, g, b)\n    \n    # Find the minimum value in the RGB color\n    min_val = min(r, g, b)\n    \n    # Find the delta value between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Find the hue value\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # Find the saturation value\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Find the value value\n    v = max_val\n    \n    # Convert hue from degrees to radians\n    h = h * 60\n    h = h if 0 <= h < 360 else h % 360\n    \n    # Return the hsv color as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb to float\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Convert to hsv\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    if max_val == 0:\n        v = 0\n    else:\n        if max_val == r:\n            v = (g - b) / delta\n        elif max_val == g:\n            v = (b - r) / delta\n        else:\n            v = (r - g) / delta\n\n    # Convert to hsv and return\n    h, s, v = h * 60, s * 100, v * 100\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, and b to float values and normalize them to be between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the minimum and maximum values in the RGB color space\n    min_val, max_val = min(r, g, b), max(r, g, b)\n\n    # Find the delta value between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the hue value\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2.0 + (b - r) / delta\n    else:\n        hue = 4.0 + (r - g) / delta\n\n    # Normalize the hue value to be between 0 and 1\n    hue = min(hue, 1.0)\n\n    # Calculate the saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the value value\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h = 0.0\n    s = 0.0\n    v = max_value\n    \n    delta = max_value - min_value\n    if delta == 0.0:\n        h = 0.0\n    else:\n        if max_value == r:\n            h = ((g - b) / delta) % 6.0\n        elif max_value == g:\n            h = (b - r) / delta + 2.0\n        else:\n            h = (r - g) / delta + 4.0\n        \n        h = h / 6.0\n        \n        if h < 0.0:\n            h = h + 1.0\n        \n        s = delta / max_value\n    \n    # Convert HSV to RGB\n    if s == 0.0:\n        r = v\n        g = v\n        b = v\n    else:\n        if v == r:\n            i = (g - b) / delta\n            f = 6.0 * (g - b) / delta\n        elif v == g:\n            i = (b - r) / delta + 2.0\n            f = 6.0 * (b - r) / delta\n        else:\n            i = (r - g) / delta + 4.0\n            f = 6.0 * (r - g) / delta\n        \n        i = int(i)\n        f = int(f)\n        \n        if i == 1:\n            f = 6.0 - f\n        \n        p = v * (1.0 - s)\n        q = v * (1.0 - (s * f))\n        t = v * (1.0 - (s * (1.0 - f)))\n        \n        if i == 0:\n            r = v\n            g = t\n            b = p\n        elif i == 1:\n            r = q\n            g = v\n            b = p\n        elif i == 2:\n            r = p\n            g = v\n            b = t\n        elif i == 3:\n            r = p\n            g = q\n            b = v\n        elif i == 4:\n            r = t\n            g = p\n            b = v\n        elif i == 5:\n            r = v\n            g = p\n            b = q\n            \n    return (int(r*255), int(g*255), int(b*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        h = s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_val\n    v = max_val\n    hsv_color = (h, s, v)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = 60 * ((g - b) / delta)\n    elif max_rgb == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif max_rgb == b:\n        h = 60 * ((r - g) / delta) + 240\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta / max_rgb\n    v = max_rgb\n    \n    # Convert HSV to HSL\n    h = h / 360\n    if s == 0:\n        l = 0\n    else:\n        l = (max_rgb + min_rgb) / 2\n    \n    # Convert HSV to RGB\n    r = int(hsv_to_rgb(h, s, l)[0] * 255)\n    g = int(hsv_to_rgb(h, s, l)[1] * 255)\n    b = int(hsv_to_rgb(h, s, l)[2] * 255)\n    \n    return (r, g, b)\n\ndef hsv_to_rgb(h, s, v):\n    if s == 0:\n        return (v, v, v)\n    i = int(h * 6)\n    f = h * 6 - i\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    if i == 0:\n        return (v, t, p)\n    elif i == 1:\n        return (q, v, p)\n    elif i == 2:\n        return (p, v, t)\n    elif i == 3:\n        return (p, q, v)\n    elif i == 4:\n        return (t, p, v)\n    else:\n        return (v, p, q)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    # Initialize two variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n    # Iterate through the list and check if each number is even or odd\n    for num in list1:\n        if num % 2 == 0:  # Check if the number is even\n            even_num += num  # If it is, add it to the even variable\n        else:  # If the number is odd\n            odd_num += num  # Add it to the odd variable\n    # Calculate the product of the even and odd numbers and return it\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = num\n            break\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Check if the list is empty or not\n    if not list1:\n        return \"The list is empty.\"\n    \n    # Initialize variables for even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list and check if the current element is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    # Check if both even and odd numbers exist\n    if even_num == 0 or odd_num == 0:\n        return \"The list doesn't contain both even and odd numbers.\"\n    \n    # Calculate the product of even and odd numbers\n    product = even_num * odd_num\n    \n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += num\n        else:\n            count += num\n    return count * 2"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += i\n    return count * list1[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number in the list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The product of the first even and first odd number in the list.\n\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count * odd_count)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    return even * odd"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for element in test_str:\n        if isinstance(element, str):\n            try:\n                result.append(int(element))\n            except ValueError:\n                print(f'Could not convert \"{element}\" to integer.')\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Use split() to split the string into a list of words\n    words = test_str.split()\n    # Create an empty list to store the integer tuples\n    int_tuples = []\n    # Use a for loop to iterate over each word in the list\n    for word in words:\n        # Check if the word is a valid integer string\n        try:\n            # Convert the word to an integer and append it to the int_tuples list\n            int_tuples.append(int(word))\n        except ValueError:\n            # If the word is not a valid integer string, print an error message\n            print(f\"Error: '{word}' is not a valid integer string.\")\n    # Return the integer tuples list\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result_tuple = []\n    for word in test_str:\n        if word.isdigit():\n            result_tuple.append(int(word))\n        else:\n            result_tuple.append(word)\n    return tuple(result_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty list to store the integer values\n    int_list = []\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is an integer\n        if char.isdigit():\n            # convert the character to an integer and add it to the list\n            int_list.append(int(char))\n        # if the character is not an integer, ignore it\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    \n    # Initializing an empty integer tuple\n    int_tuple = ()\n    \n    # Looping through each word in the tuple string\n    for word in words:\n        # Checking if the word is an integer\n        try:\n            # Converting the word to integer and appending it to the integer tuple\n            int_tuple += (int(word),)\n        except ValueError:\n            # If the word is not an integer, ignore it\n            continue\n    \n    # Returning the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of integers\n    int_list = [int(i) for i in test_str.split(',')]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by ','\n    str_list = test_str.split(',')\n    \n    # Convert each string to integer\n    int_list = [int(x) for x in str_list]\n    \n    # Convert the integer list to tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        str_tuple = eval(test_str)\n        if isinstance(str_tuple, tuple):\n            int_tuple = [int(x) for x in str_tuple]\n            return int_tuple\n        else:\n            raise TypeError('Input is not a tuple')\n    except (SyntaxError, TypeError):\n        print('Invalid input')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple([int(i) for i in test_str.split(',')])\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index!= 0 and a[index-1] < x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] > x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\1{3}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return re.findall(pattern, text)\n\ntext = 'a1b2b3c'\nresult = text_match_three(text)\nprint(result)  # Output: ['a1b2b3']"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    if match:\n        print('The string matches the pattern.')\n    else:\n        print('The string does not match the pattern.')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a\\w{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    \n    # Convert the string to a tuple\n    new_str = tuple(test_str)\n    \n    # Combine the tuples\n    combined = (new_list, new_str)\n    \n    return combined"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the two lists into a single list\n    combined_list = test_list + [test_str]\n    # convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert list to tuple\n    new_tuple_list = tuple(test_list)\n    # add string to tuple\n    new_tuple_list += (test_str,)\n    # convert tuple to new tuple\n    new_tuple = tuple(new_tuple_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Convert the string to a list\n    new_str = list(test_str)\n    # Concatenate the two lists and create a tuple\n    new_tuple = tuple(new_list + new_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and concatenate with the string\n    new_tuple = (tuple(test_list), test_str)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if count > 1:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n\n    # check if every even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through each even index of the list\n    for i in range(0, len(nums), 2):\n        # Check if the even index contains even numbers\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            # If it does, return True\n            return True\n        # If it doesn't, return False\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        count += nums[i]\n    return count == 0"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            continue\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            count += 1\n    if count == 0:\n        print(\"All even positions have even numbers.\")\n    else:\n        print(f\"There are {count} odd even positions in the list.\")"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_tup)):\n            test_tup[i] = remove_nested(test_tup[i])\n        return tuple(test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            nested_tup.append(item)\n    return tuple(nested_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [elem for sublist in test_tup for elem in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Define a function to check if a tuple is empty\n    def is_empty(t):\n        \"\"\"\n        Check if a tuple is empty.\n        \"\"\"\n        return len(t) == 0\n    \n    # Define a function to remove nested tuples\n    def remove_nested_tuples(t):\n        \"\"\"\n        Remove nested tuples from the given tuple.\n        \"\"\"\n        # Check if the tuple is empty\n        if is_empty(t):\n            # Return an empty tuple\n            return ()\n        # Check if the tuple has only one element\n        elif len(t) == 1:\n            # Return the only element\n            return t[0]\n        # Check if the tuple has more than one element\n        else:\n            # Define a new list to store the elements of the tuple\n            new_t = []\n            # Loop through each element in the tuple\n            for elem in t:\n                # Check if the element is a tuple\n                if isinstance(elem, tuple):\n                    # Remove the nested tuple and append its elements to the new list\n                    new_t.extend(remove_nested_tuples(elem))\n                # If the element is not a tuple, append it to the new list\n                else:\n                    new_t.append(elem)\n            # Return the new list of elements\n            return new_t\n    \n    # Call the remove_nested_tuples function on the test_tup\n    return remove_nested_tuples(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Using list comprehension to remove nested tuples\n    test_list = [item for sublist in test_tup for item in sublist]\n    return test_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # creating a list to store the non-nested tuples\n    result = []\n    # iterating through each element of the tuple\n    for element in test_tup:\n        # if the element is a tuple, calling the recursive function\n        if isinstance(element, tuple):\n            result.extend(remove_nested(element))\n        # if the element is not a tuple, adding it to the result list\n        else:\n            result.append(element)\n    # returning the final result list with non-nested tuples removed\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            nested_list.extend(item)\n        else:\n            nested_list.append(item)\n    return tuple(nested_list)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n\n    Args:\n        input_list: a list of lists.\n\n    Returns:\n        The number of lists in the given list of lists.\n    \"\"\"\n\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1 # element not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n\n    Args:\n        arr: sorted array of integers\n        x: integer element to find the last occurrence of\n\n    Returns:\n        index of last occurrence of x in the array\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i >= 0:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments, an array and an element x, and returns the index of the last occurrence of x in the array.\n    If x is not found in the array, it returns -1.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and a target element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid] == arr[mid+1]:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            # If we find x, then move right pointer to find last occurrence of x\n            while mid < right and arr[mid + 1] == x:\n                mid += 1\n\n            # If we find last occurrence of x, then return its index\n            if mid == right:\n                return mid\n            else:\n                return right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters - the sorted array and the element for which the last position is to be found.\n    The function uses binary search to find the last position of the element in the array.\n    If the element is not present in the array, the function returns -1.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1  # Move the right pointer to the left of the middle element\n        elif arr[mid] < x:\n            left = mid + 1  # Move the left pointer to the right of the middle element\n        else:\n            right = mid - 1  # If the middle element is greater than the target, move the right pointer to the left of the middle element\n\n    if left >= right:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = left + (right - left) // 2\n\n        # If the middle element is equal to the x element\n        if arr[mid] == x:\n            # Set the left pointer to the mid+1 index\n            left = mid + 1\n        # If the middle element is greater than the x element\n        elif arr[mid] > x:\n            # Set the right pointer to the mid-1 index\n            right = mid - 1\n        # If the middle element is less than the x element\n        else:\n            # Set the left pointer to the mid+1 index\n            left = mid + 1\n\n    # If the x element is not found in the array\n    if left > len(arr) or arr[left - 1]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i] <= x:\n        i += 1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    This function takes in two parameters:\n    arr: the sorted array\n    x: the element that we want to find the last position of\n    '''\n\n    # Initialize the left and right pointers to the first and last indices of the array\n    left, right = 0, len(arr)-1\n\n    # Keep searching until we find the last occurrence of x\n    while arr[left]!= x:\n        left += 1\n\n    # Reset the left pointer to the last occurrence of x\n    left = right\n\n    # Keep searching until we find the first occurrence of x\n    while arr[right]!= x:\n        right -= 1\n\n    # Return the position of the first occurrence of x\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(matches[0])\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'(?<=\\ba)[^b]*b(?=\\b)'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<![a-z])a\\w+b(?![a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\w*b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dictionary.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dictionary.values():\n        sum_of_items += item\n    return sum_of_items\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    total = 0\n    for i in range(2, n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum_of_odds = 0\n    # loop through all odd natural numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # add each odd natural number to the sum\n        sum_of_odds += i\n    # return the sum of all odd natural numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two parameters l and r and returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum_val = 0\n    \n    # loop through the range of numbers\n    for i in range(2, n, 2):\n        # add the odd numbers to the sum\n        sum_val += i\n    \n    # return the sum\n    return sum_val"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n  # set the lower and upper bounds\n    sum = 0  # initialize the sum to zero\n    for i in range(l, r+1):  # iterate through all numbers between l and r inclusive\n        if i % 2!= 0:  # check if the number is odd\n            sum += i  # add the number to the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the range of natural numbers from l to r\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n    # return the sum of odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Define the range\n    l = 1\n    r = n\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the range and add odd numbers to the sum\n    for i in range(l, r+1, 2):\n        sum += i\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): a list of numbers to be summed\n\n    Returns:\n    int: the sum of the array elements\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Get the length of the binary representation of the number\n    length = len(bin(n)[2:])\n\n    # Calculate the position of the last bit that needs to be rotated\n    rotate_position = length - d\n\n    # Reverse the binary representation of the number\n    reversed_bin = bin(n)[::-1]\n\n    # Pad the last bit to the left with zeros\n    last_bit = reversed_bin[0]\n    padded_reversed_bin = '0' * (rotate_position - 1) + last_bit + reversed_bin[1:]\n\n    # Convert the padded binary representation back to an integer\n    rotated_number = int(padded_reversed_bin, 2)\n\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n    # Mask to get the least significant bits\n    mask = (1 << d) - 1\n    \n    # Extract the least significant bits of n\n    left = n & mask\n    \n    # Shift n to the right by d bits\n    n >>= d\n    \n    # Shift the remaining bits to the left by d bits\n    n |= (left << (32 - d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the left shift amount (d % 32)\n    shift_amount = d % 32\n    # Calculate the number of bits to rotate\n    rotate_bits = 32 - shift_amount\n    \n    # Rotate the bits to the left\n    rotated_bits = (n >> shift_amount) | (n << rotate_bits)\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    elif d >= 32:\n        return left_rotate(n << (d - 32), 0)\n    else:\n        return left_rotate((n << d) | (n >> (32 - d)), 0)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<32)-1\n    while d > 0:\n        if d % 2 == 1:\n            n = (n<<d) & mask\n        d //= 2\n        mask = (mask<<d) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    if d >= 32:\n        return 0\n    n = n & mask\n    d = d % 32\n    if d == 0:\n        return n\n    else:\n        shift = 32 - d\n        return ((n << shift) | (n >> d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    d %= num_bits\n\n    # Calculate the mask for the rotation\n    mask = (1 << d) - 1\n\n    # Rotate the bits\n    rotated_bits = (n << d) & mask | (n >> (num_bits - d))\n\n    # Return the rotated number\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) & 0xFFFFFFFF) | ((n & 0xFFFFFFFF) >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the text\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespace characters from a given string.\n    \"\"\"\n    # Use regular expressions to replace all whitespace characters with a single space\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # Iterating through the three given integers\n    for i in range(x, y+1):\n        for j in range(i, y+1):\n            for k in range(j, y+1):\n                # Checking if the three numbers are equal\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # iterating through all the numbers from x to z\n    for i in range(x, z+1):\n        # checking if the current number is equal to all the others\n        if i == x or i == y or i == z:\n            # if it is, incrementing the count by 1\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            if i == j:\n                continue\n            for k in range(z):\n                if i == k or j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    # Create a dictionary to store the counts of each number\n    counts = {}\n    \n    # Loop over all possible pairs of numbers and increment the count for each pair\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        for j in range(i, min(x, y, z)):\n            counts[i] = counts.get(i, 0) + (j == i)\n            counts[j] = counts.get(j, 0) + (i == j)\n    \n    # Return the number of pairs with a count of 2\n    return sum(1 for count in counts.values() if count == 2)"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            # check if the left half is sorted\n            left_sorted = True\n            for j in range(i, i+n//2):\n                if arr[j] > arr[j+1]:\n                    left_sorted = False\n                    break\n            if left_sorted:\n                # check if the right half is sorted\n                right_sorted = True\n                for j in range(i+n//2, n):\n                    if arr[j] > arr[j-1]:\n                        right_sorted = False\n                        break\n                if right_sorted:\n                    # if both halves are sorted, the array is already sorted and no rotations are required\n                    return 0\n            # if the left half is not sorted or the right half is not sorted, a rotation is required\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # we need to find the largest and smallest element\n    max_elem = max(arr)\n    min_elem = min(arr)\n    # if the array is already sorted\n    if min_elem <= max_elem:\n        return 0\n    # if the array is not sorted, we need to find the pivot element\n    pivot = min_elem\n    # we initialize the count variable\n    count = 0\n    # we loop through all the elements in the array\n    for i in range(n):\n        # if the current element is greater than the pivot element\n        if arr[i] > pivot:\n            # we increment the count variable\n            count += 1\n            # we update the pivot element to the current element\n            pivot = arr[i]\n    # we return the count variable\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is sorted or not\n    if sorted(arr) == arr:\n        return 0\n    # Check if the array is already sorted in descending order\n    elif arr == sorted(arr, reverse=True):\n        return n\n    # If the array is not sorted, find the minimum element in the array\n    else:\n        min_element = min(arr)\n        # Initialize the count of rotations to zero\n        count = 0\n        # Traverse through the array starting from the second element\n        for i in range(1, n):\n            # If the current element is greater than the minimum element, increment the count\n            if arr[i] > min_element:\n                count += 1\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    arr.sort()\n    n = len(arr)\n    target = arr[n//2]\n    low = 0\n    high = n - 1\n    count = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            count = n - mid\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    if count == 0:\n        return -1\n    else:\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # check if array is already sorted in reverse\n    if arr == sorted(arr, reverse=True):\n        return 0\n\n    # find the minimum element in the array\n    min_element = min(arr)\n\n    # check if the first element is the minimum element\n    if arr[0] == min_element:\n        return 0\n\n    # check if the last element is the minimum element\n    if arr[-1] == min_element:\n        return 0\n\n    # check if the array has at least two minimum elements\n    if min_element == arr[1]:\n        return 1\n\n    # check if the array has at least three minimum elements\n    if min_element == arr[2]:\n        return 2\n\n    # check if the array has at least four minimum elements\n    if min_element == arr[3]:\n        return 3\n\n    # check if the array has at least five minimum elements\n    if min_element == arr[4]:\n        return 4\n\n    # check if the array has at least six minimum elements\n    if min_element == arr[5]:\n        return 5\n\n    # check if the array has at least seven minimum elements\n    if min_element == arr[6]:\n        return 6\n\n    # check if the array has at least eight minimum elements\n    if min_element == arr[7]:\n        return 7\n\n    # check if the array has at least nine minimum elements\n    if min_element == arr[8]:\n        return 8\n\n    # check if the array has at least ten minimum elements\n    if min_element == arr[9]:\n        return 9\n\n    # check if the array has at least eleven minimum elements\n    if min_element == arr[10]:\n        return 10\n\n    # check if the array has at least twelve minimum elements\n    if min_element == arr[11]:\n        return 11\n\n    # check if the array has at least thirteen minimum elements\n    if min_element == arr[12]:\n        return 12\n\n    # check if the array has at least fourteen minimum elements\n    if min_element == arr[13]:\n        return 13\n\n    # check if the array has at least fifteen minimum elements\n    if min_element == arr[14]:\n        return 14\n\n    # check if the array has at least sixteen minimum elements\n    if min_element == arr[15]:\n        return 15\n\n    # check if the array has at least seventeen minimum elements\n    if min_element == arr[16]:\n        return 16\n\n    # check if the array has at least eighteen minimum elements\n    if min_element == arr[17]:\n        return 17\n\n    # check if the array has at least nineteen minimum elements\n    if min_element == arr[18]:\n        return 18\n\n    # check if the array has at least twenty minimum elements\n    if min_element == arr[19]:\n        return 19\n\n    # check if the array has at least twenty-one minimum elements\n    if min_element == arr[20]:\n        return 20\n\n    # check if the array has at least twenty-two minimum elements\n    if min_element == arr[21]:\n        return 21\n\n    # check if the array has at least twenty-three minimum elements\n    if min_element == arr[22]:\n        return 22\n\n    # check if the array has at least twenty-four minimum elements\n    if min_element == arr[23]:\n        return 23\n\n    # check if the array has at least twenty-five minimum elements\n    if min_element == arr[24]:\n        return 24\n\n    # check if the array has at least twenty-six minimum elements\n    if min_element == arr[25]:\n        return 25\n\n    # check if the array has at least twenty-seven minimum elements\n    if min_element == arr[26]:\n        return 26\n\n    # check if the array has at least twenty-eight minimum elements\n    if min_element == arr[27]:\n        return 27\n\n    # check if the array has at least twenty-nine minimum elements\n    "
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the maximum element in the array\n    max_val = max(arr)\n    # find the minimum element in the array\n    min_val = min(arr)\n    # check if the array is sorted or not\n    if arr[0] <= arr[n-1]:\n        return 0\n    # if the array is not sorted, check if it can be sorted by swapping the minimum and maximum element\n    if arr[0] < max_val:\n        arr[0], arr[arr.index(min_val)] = arr[arr.index(min_val)], arr[0]\n        return 1 + count_rotation(arr)\n    # if the array cannot be sorted by swapping the minimum and maximum element, check if it can be sorted by swapping the first and last element\n    if arr[n-1] > min_val:\n        arr[n-1], arr[0] = arr[0], arr[n-1]\n        return 1 + count_rotation(arr)\n    # if the array cannot be sorted by swapping the first and last element, check if it can be sorted by reversing the array\n    arr = arr[::-1]\n    return 1 + count_rotation(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Base case: If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Traverse through the array in reverse order\n    for i in range(n - 1, 0, -1):\n\n        # If the element at the current index is smaller than its adjacent element\n        if arr[i] < arr[i - 1]:\n\n            # Calculate the number of rotations required to sort the sub-array\n            count = 0\n            temp = arr[i - 1]\n            while temp > arr[i]:\n                count += 1\n                temp = arr[temp - 1]\n\n            return count + 1\n\n    # If no rotation is found, return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # counting the number of inversions in the array\n    inversions = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            inversions += min(j, n-1) - max(i, 0)\n\n    # counting the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n-1):\n        count += n - i - 1\n\n    return inversions, count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import itertools\n\ndef count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # base case: array with only one element is sorted\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    \n    # recursive case: generate all possible rotations of the array\n    rotations = []\n    for perm in itertools.permutations(arr):\n        rotations.append(perm)\n    \n    # find the minimum number of rotations required to generate a sorted array\n    min_rotations = float('inf')\n    for perm in rotations:\n        rot_arr = list(perm)\n        min_rot = count_rotation(rot_arr)\n        if min_rot < min_rotations:\n            min_rotations = min_rot\n            \n    return min_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the smallest element in the array\n    smallest = min(arr)\n    # find the index of the smallest element in the array\n    index = arr.index(smallest)\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    while index!= 0:\n        # update the count and move the index to the next smallest element\n        count += 1\n        smallest = arr[smallest]\n        index = arr.index(smallest)\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the number is greater than 0\n    if n <= 0:\n        return False\n\n    # Get the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root of the given number is an integer\n    if sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid*mid == n:\n                return True\n            elif mid*mid < n:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    root = math.sqrt(n)\n    return round(root) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        sqrt_n = int(n ** 0.5)\n        return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # initialize a variable to store the square root\n    sqrt_n = n ** 0.5\n    \n    # check if the square root is an integer\n    if sqrt_n.is_integer():\n        # if it is, then the square is a perfect square\n        return True\n    else:\n        # if not, then the square is not a perfect square\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First, check if the given number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Calculate the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Now check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    \n    # If the given number is not a perfect square, it must be a prime number\n    if is_prime(sqrt_n):\n        return False\n    \n    # If the given number is not a perfect square or a prime number, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    \n    # Check if the number is equal to 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # Check if the number is equal to 2\n    if n == 2:\n        return True\n    \n    # Check if the number is divisible by 2\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    sqrt_n = math.sqrt(n)\n    return sqrt_n == int(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    # if the number is less than 1, return False\n    if n < 1:\n        return False\n    # initialize a variable to keep track of the current square root\n    current_sqrt = n\n    # iterate until the current square root is less than or equal to 1\n    while current_sqrt > 1:\n        # check if the current square root is an integer\n        if current_sqrt == int(current_sqrt):\n            # if it is, return True\n            return True\n        # update the current square root by half\n        current_sqrt = (current_sqrt + n // current_sqrt) // 2\n    # if the loop completes without returning True, the given number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    # Calculate the product of all the elements in the array\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product and flag variables\n    product = 1\n    is_even = True\n    \n    # Iterate through the list and multiply each element with the product\n    for num in arr:\n        product *= num\n    \n    # If the product is odd, return False\n    if product % 2!= 0:\n        return False\n    \n    # If the product is even, return True\n    else:\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # initializing the variables for even and odd product\n    even_product = odd_product = 1\n    \n    # iterating over the list and checking for even and odd products\n    for num in arr:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    # checking if the even and odd products are equal\n    if even_product == odd_product:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # calculate the product of the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize maximum sum and corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through each list in the input list of lists\n    for sublist in lists:\n        # Initialize a running sum to 0\n        running_sum = 0\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the running sum\n            running_sum += element\n            \n            # Check if the running sum is greater than the current maximum sum\n            if running_sum > max_sum:\n                # Update the maximum sum and corresponding list\n                max_sum = running_sum\n                max_list = sublist\n    \n    # Return the maximum sum and corresponding list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 or j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + lists[i][j-1] + lists[i-1][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j > 0 and lists[i][j] == lists[i][j-1]:\n                continue\n            sub_sum = 0\n            for k in range(j, len(lists[i])):\n                sub_sum += lists[i][k]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_list = [lists[i][j]]\n            elif sub_sum == max_sum:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [lists[i]]\n        elif current_sum == max_sum:\n            max_lists.append(lists[i])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # if yes, increment the current run count\n            current_run += 1\n        else:\n            # if no, reset the current run count to 0\n            current_run = 0\n        # update the maximum run if necessary\n        if current_run > max_run:\n            max_run = current_run\n    # return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start_index = 0\n    max_run = ''\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_run = test_str[start_index:i+1]\n            count = 0\n            start_index = i+1\n    if count > max_count:\n        max_count = count\n        max_run = test_str[start_index:]\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_length = 0\n    current_run = 0\n    prev_char = None\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase and the previous character was uppercase,\n        # check if the current run is longer than the maximum run found so far\n        elif prev_char is not None and prev_char.isupper() and current_run > max_length:\n            max_length = current_run\n        # Reset the current run if the current character is not uppercase\n        else:\n            current_run = 0\n\n        # Update the previous character\n        prev_char = char\n\n    # Return the maximum run of uppercase characters\n    return max_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the uppercase count and reset the current run\n        if char.isupper():\n            uppercase_count += 1\n            current_run = 0\n        else:\n            # If the character is not uppercase, update the current run and compare it to the maximum run\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            run_length += 1\n        else:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 0\n    if run_length > max_run:\n        max_run = run_length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Create an empty list to store the maximum run of uppercase characters\n    max_run = []\n\n    # Initialize variables to track the current run and the start index of the current run\n    current_run = ''\n    start_index = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, add it to the current run\n        if test_str[i].isupper():\n            current_run += test_str[i]\n        # If the character is not uppercase, check if the current run is longer than the previous maximum run\n        elif len(current_run) > len(max_run) or (len(current_run) == len(max_run) and test_str[start_index:i+1].isupper()):\n            # If the current run is longer than the previous maximum run, update the max_run with the current run\n            max_run = current_run\n            # Set the start index to the index of the current run\n            start_index = i\n        # If the character is not uppercase and the current run is not longer than the previous maximum run, reset the current run and start index\n        else:\n            current_run = ''\n            start_index = i\n\n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    current_run = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            if prev_char is None or prev_char.islower():\n                current_run += 1\n            else:\n                max_length = max(max_length, current_run)\n                current_run = 1\n        else:\n            max_length = max(max_length, current_run)\n            current_run = 0\n        prev_char = char\n    \n    max_length = max(max_length, current_run)\n    return max_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            uppercase_count = max(uppercase_count, current_run)\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initializing variables\n    max_run = 0\n    current_run = 0\n    # iterating through the string\n    for i in range(len(test_str)):\n        # checking if the character is uppercase\n        if test_str[i].isupper():\n            # incrementing the current run\n            current_run += 1\n            # updating the maximum run if necessary\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # resetting the current run if it is not uppercase\n            current_run = 0\n    # returning the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_is_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if prev_is_uppercase:\n                max_run = max(max_run, current_run)\n            prev_is_uppercase = char.isupper()\n            current_run = 1\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # iterate through the list of numbers and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # if no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K+1):\n        if test_tup[i:i+K] == K*test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        if all(elem in K for elem in test_tup):\n            return True\n        else:\n            return False\n    else:\n        if any(elem in K for elem in test_tup):\n            return True\n        else:\n            return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return [x[K] in test_tup for x in test_tup]"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for num in test_tup:\n        if K == num:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == 1 and len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n\n    Args:\n        test_tup (tuple): A tuple of strings.\n        K (int): The value to check for in the tuples.\n\n    Returns:\n        bool: True if the given tuple contains the k, False otherwise.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: First tuple has an element larger than the corresponding element in the second tuple\")\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples do not have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element at index {} of the second tuple is not smaller than the element at index {} of the first tuple.\".format(i, i))\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        # iterate through the two tuples and compare the corresponding elements\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n    # if no element is greater than or equal to the corresponding element, the two tuples are smaller\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]