[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the unique elements from both lists\n    unique_elements1 = list(set(test_tup1))\n    unique_elements2 = list(set(test_tup2))\n\n    # Find the common elements\n    shared_elements = []\n    for element in unique_elements1:\n        if element in unique_elements2:\n            shared_elements.append(element)\n\n    # Return the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_list:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the intersection back to a list\n    shared_elements = list(common_elements)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the elements from both lists\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    \n    # Get the intersection of the two sets of elements\n    intersection = set(common_elements) & set(test_tup2)\n    \n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists for easier manipulation\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Find the intersection of the two lists\n    shared_list = [x for x in test_list1 if x in test_list2]\n\n    # Return the shared elements as a list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # create sets of the two lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether n is a prime number or not.\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n == 2:\n        return False\n    elif n <= 1 or n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number n as input and returns True if it is not a prime number,\n    and False otherwise.\n\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n from the list of numbers\n    hq.heapify(nums)\n    # Remove the smallest element from the heap and append it to the result list\n    result = []\n    while n > 0:\n        result.append(nums[0])\n        # Remove the smallest element from the heap\n        nums[0] = nums[-1]\n        # Reduce the size of the heap by 1\n        nums.pop()\n        # Rebuild the heap with the reduced size\n        hq.heapify(nums)\n        # Decrement n by 1 to find the next n largest elements\n        n -= 1\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build the max heap from the first n elements of the list\n    max_heap = hq.nlargest(n, nums)\n    # Return the n largest elements from the heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in nums[n:]:\n        if hq.heappushpop(heap, i)!= i:\n            hq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n to store the n largest integers\n    hq.heapify(nums[:n])\n    # remove the minimum integer from the min-heap and add it to the result list\n    result = [hq.heappop(nums) for _ in range(n)]\n    # add the remaining integers to the min-heap\n    hq.heapify(nums)\n    # return the result list\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of n largest integers\n    hq.heapify(nums)\n    # Pop the smallest n integers from the heap and return them in descending order\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    \n    # initialize the max_heap with the first n elements of nums\n    for i in range(n):\n        max_heap.append(nums[i])\n        hq.heapify(max_heap)\n    \n    # remove the largest element from the max_heap and add it to the result list\n    for i in range(n,len(nums)):\n        if nums[i] > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, nums[i])\n        else:\n            break\n    \n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    hq.heapify(nums)\n    # remove the smallest element from the heap and append it to a new list\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # Check if x has only one bit set\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is power of 2 or not\n    while x & (x-1)!= 0: \n        x &= x-1  # Clear the least significant set bit \n    if x == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n\n    Parameters:\n    x (int): An integer value.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, else False.\n    \"\"\"\n\n    count = 0\n    while x > 1:\n        count += 1\n        x = x // 2\n\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n\n    if x == 1:\n        return True\n\n    if x % 2 == 0:\n        return False\n\n    if x % 2 == 1:\n        return True\n\n    while x > 0:\n        if x % 2 == 0:\n            x = x//2\n        else:\n            return False\n        if x == 1:\n            return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Get the binary representation of x and y\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n\n    # Check if the numbers differ at one bit position only\n    if x_bin!= y_bin[1:]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    \n    if x & (x-1) == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two or not\n    if (x & (x - 1)) == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Create an empty list to store the words that are at least 4 characters long\n    long_words = []\n\n    # Loop through each word\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # Add the word to the long_words list\n            long_words.append(word)\n\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    long_words = [word for word in matches if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the regular expression pattern to find all occurrences of words that match the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function finds all words in a given string that are at least 4 characters long.\n    \"\"\"\n    # Define a regular expression pattern to match words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all the words that match the pattern\n    words = re.findall(pattern, text)\n    # Return the list of words that match the pattern\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the string into words\n    words = text.split()\n    # Filter out words with length less than 4\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Define a regular expression pattern to match words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Create a list to store the long words\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # If the word is long enough, add it to the list\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    # We need to find the minimum number of rotations required to get the same string\n    min_rotations = 0\n    # Check if the first character is a character that appears more than once in the string\n    for i in range(1, str_len):\n        if str[i] == str[0]:\n            min_rotations += 1\n            # Check if the remaining characters are also rotations of the first character\n            for j in range(i+1, str_len):\n                if str[j] == str[0]:\n                    min_rotations += 1\n                    break\n                else:\n                    min_rotations -= 1\n                    break\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string and finds the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize the minimum rotations to infinity\n    min_rotations = float('inf')\n\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the rotations are equal to the original string\n            if str[i:j] == str:\n                # If they are, calculate the number of rotations and update the minimum rotations if necessary\n                rotations = j - i\n                if rotations < min_rotations:\n                    min_rotations = rotations\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    # Initialize variables to store the counts of each character in the string\n    char_counts = [0] * 26\n    for char in str:\n        char_counts[ord(char) - ord('a')] += 1\n    \n    # Initialize variables to store the prefix sums of the counts\n    prefix_sums = [0] * (n+1)\n    for i in range(n):\n        prefix_sums[i+1] = prefix_sums[i] + char_counts[i]\n    \n    # Initialize variables to store the number of rotations and the maximum number of rotations\n    rotations = 0\n    max_rotations = 0\n    \n    # Calculate the number of rotations required to get the same string\n    for i in range(n):\n        rotations += prefix_sums[n] - prefix_sums[i]\n        max_rotations = max(max_rotations, rotations)\n    \n    return max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Convert the string to lowercase to make it case-insensitive\n    str = str.lower()\n    \n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the maximum frequency of any character in the string\n    max_freq = max(char_freq.values())\n    \n    # Initialize the minimum number of rotations to be infinity\n    min_rot = float('inf')\n    \n    # Iterate through each character in the string\n    for i in range(len(str)):\n        \n        # If the frequency of the current character is greater than the maximum frequency, we can rotate the string\n        if char_freq[str[i]] > max_freq:\n            \n            # Create a new string by rotating the current character i-1 times to the left\n            new_str = str[i-1:] + str[:i-1]\n            \n            # Calculate the frequency of each character in the new string\n            char_freq_new = {}\n            for char in new_str:\n                if char in char_freq_new:\n                    char_freq_new[char] += 1\n                else:\n                    char_freq_new[char] = 1\n            \n            # Find the minimum number of rotations required to get the same string\n            min_rot_new = find_Rotations(new_str)\n            \n            # Update the minimum number of rotations if necessary\n            if min_rot_new < min_rot:\n                min_rot = min_rot_new\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        str: A string\n\n    Returns:\n        int: The minimum number of rotations required to get the same string\n    \"\"\"\n    # Find the length of the string\n    n = len(str)\n\n    # Create a list of all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(n):\n            rotations.append(str[i:j+1] + str[j:i+1])\n\n    # Find the number of rotations that result in the same string\n    count = 0\n    for rotation in rotations:\n        if rotation == str:\n            count += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # find the length of the string\n    n = len(str)\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a list to store the characters that need to be rotated\n    rotate_chars = []\n    \n    # iterate through the frequency dictionary\n    for char in freq:\n        # check if the frequency of the character is greater than 1\n        if freq[char] > 1:\n            # check if the frequency of the character is greater than 2\n            if freq[char] > 2:\n                # if the frequency of the character is greater than 2, add the characters to the rotate_chars list\n                rotate_chars.append(char)\n                rotate_chars.append(char)\n            # if the frequency of the character is 2, add the first character to the rotate_chars list and the second character to the end of the list\n            else:\n                rotate_chars.append(char)\n                rotate_chars.append(char)\n    \n    # sort the rotate_chars list in alphabetical order\n    rotate_chars.sort()\n    \n    # create a list to store the characters that need to be rotated\n    rotations = []\n    \n    # iterate through the rotate_chars list\n    for char in rotate_chars:\n        # check if the length of the rotations list is equal to the length of the string\n        if len(rotations) == n:\n            break\n        # if the length of the rotations list is less than the length of the string, add the character to the rotations list\n        else:\n            rotations.append(char)\n    \n    # check if the length of the rotations list is less than the length of the string\n    if len(rotations) < n:\n        # add the remaining characters to the rotations list\n        for i in range(n - len(rotations)):\n            rotations.append(str[i])\n    \n    # find the minimum number of rotations required to get the same string\n    min_rotations = len(str) - len(rotations) + 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    rot = 0\n    for i in range(n):\n        if str[i]!= str[(i + rot) % n]:\n            rot = (rot + 1) % n\n            min_rotations = min(min_rotations, rot)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Calculate the length of the string\n    length = len(str)\n\n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n\n    # Loop through the string and check if the substring is present\n    for i in range(length):\n        substring = str[i:] + str[:i]\n        if substring in str:\n            min_rotations += 1\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n\n    :param str: A string\n    :return: The minimum number of rotations required to get the same string.\n    \"\"\"\n    length = len(str)\n    count = 0\n\n    while length > 1:\n        mid = length // 2\n        if str[:mid] == str[mid:]:\n            count += mid\n            length //= 2\n        else:\n            length = mid\n\n    return count + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # check if the string has more than one character\n    if len(str) <= 1:\n        return 0\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a dictionary to store the frequency of each character after rotating the string\n    new_freq = {}\n    for i in range(len(str)):\n        new_freq[str[(i+1)%len(str)]] = new_freq.get(str[(i+1)%len(str)], 0) + freq[str[i]]\n    \n    # find the minimum number of rotations required to get the same string\n    min_rot = 0\n    for i in range(len(str)):\n        if new_freq[str[i]] > 0:\n            min_rot = min(min_rot, new_freq[str[i]] + i)\n        else:\n            min_rot = min(min_rot, i)\n    \n    return min_rot"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Find the first occurrence of the character\n    index = s.find(ch)\n\n    # If character is not found, return the original string\n    if index == -1:\n        return s\n\n    # Remove the first occurrence of the character\n    s = s[:index] + s[(index+1):]\n\n    # Find the last occurrence of the character\n    index = s.rfind(ch)\n\n    # If character is not found, return the modified string\n    if index == -1:\n        return s\n\n    # Remove the last occurrence of the character\n    s = s[:index] + s[(index+1):]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    j = len(s)-1\n    while i<j:\n        if s[i] == ch:\n            i+=1\n        elif s[j] == ch:\n            j-=1\n        else:\n            i+=1\n            j-=1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # Check if the string contains the character to remove\n    if ch not in s:\n        return s\n    # Remove the first and last occurrences of the character\n    return s[:s.find(ch) + len(ch)] + s[s.find(ch) + len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        s = s[1:]\n    elif s.find(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return s\n\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Check if the character to be removed is not present in the string\n    if ch not in s:\n        print(\"Character not found in the string\")\n        return s\n\n    # Find the index of first occurrence of the character\n    index = s.index(ch)\n\n    # Remove the first occurrence of the character\n    s = s[:index]\n\n    # Find the index of last occurrence of the character\n    index = s.rindex(ch)\n\n    # Remove the last occurrence of the character\n    s = s[:index]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    s = s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the index of first occurrence of the character\n    first_index = s.find(ch)\n    # If there is no first occurrence, return the original string\n    if first_index == -1:\n        return s\n\n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    # If there is no last occurrence, return the original string\n    if last_index == -1:\n        return s\n\n    # If both first and last occurrences are found, remove both\n    if first_index == 0 and last_index == len(s)-1:\n        return ''\n    # If only the first occurrence is found, remove the first character\n    elif first_index == 0:\n        return s[1:]\n    # If only the last occurrence is found, remove the last character\n    elif last_index == len(s)-1:\n        return s[:last_index]\n    # If both first and last occurrences are found, remove the first and last characters\n    else:\n        return s[:first_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    s = s[1:-1]\n    s = s.replace(ch,\"\")\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            # calculate the sum of the current row\n            current_sum = sum(M[i])\n            # if the current element is greater than the current sum, swap it with the first element of the row\n            if M[i][j] > current_sum:\n                M[i][j], M[i][0] = M[i][0], M[i][j]\n            # if the current element is equal to the current sum, set the first element of the row to 0\n            else:\n                M[i][0] = 0\n    \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Initialize the sum of the row to be the value of the first element in the row\n        row_sum = M[i][0]\n        # Iterate through the remaining elements in the row\n        for j in range(1, n):\n            # If the element is smaller than the current sum, update the sum\n            if M[i][j] < row_sum:\n                row_sum = M[i][j]\n        # Iterate through the remaining elements in the row again\n        for j in range(1, n):\n            # If the element is greater than the current sum, swap it with the element in the previous row\n            if M[i][j] > row_sum:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    # Initialize the length of the longest row\n    max_row_length = len(M[0])\n\n    # Sort the rows based on the sum of each row\n    for i in range(len(M)):\n        M[i].sort()\n\n    # Now we need to check if the sum of each row is the same\n    for i in range(len(M)):\n        for j in range(max_row_length):\n            # If the sum of the i-th row is different from the sum of the j-th row,\n            # then we need to swap the rows\n            if sum(M[i])!= sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    matrix_sorted = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Find the sum of each row\n    row_sum = [sum(row) for row in M]\n\n    # Sort the matrix based on the row sums\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(rows):\n                if row_sum[i] > row_sum[k]:\n                    row_sum[i], row_sum[k] = row_sum[k], row_sum[i]\n\n    # Copy the sorted matrix into a new matrix\n    for i in range(rows):\n        for j in range(cols):\n            matrix_sorted[i][j] = M[row_sum.index(row_sum.index(sum(M[i])))][j]\n\n    return matrix_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables\n    n = len(M)\n    count = 0\n    max_sum = float('-inf')\n    min_sum = float('inf')\n\n    # loop through matrix\n    for i in range(n):\n        row_sum = sum(M[i])\n\n        # update min and max sums\n        if row_sum > max_sum:\n            max_sum = row_sum\n        if row_sum < min_sum:\n            min_sum = row_sum\n\n        # update count of sorted elements\n        count += row_sum\n\n    # sort matrix in ascending order\n    sorted_M = sorted(M, key=lambda x: sum(x))\n\n    # return sorted matrix\n    return sorted_M, count, min_sum, max_sum"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a new list to store the sorted matrix\n    sorted_M = []\n\n    # Iterate through each row of the matrix and append the minimum element to the sorted_M list\n    for row in M:\n        row_sum = sum(row)\n        min_element = min(row)\n        sorted_M.append(min_element)\n\n    # Iterate through the rows of the sorted_M list and find the index of the first occurrence of each row element\n    row_indices = []\n    for i, row in enumerate(sorted_M):\n        row_indices.append(M.index(row))\n\n    # Reorder the rows of the matrix based on the sorted_M list\n    reordered_M = []\n    for i, index in enumerate(row_indices):\n        reordered_M.append(M[index])\n\n    return reordered_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the sum of each row\n    row_sums = []\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        row_sums.append(row_sum)\n    \n    # Sort the matrix by the row sums in ascending order\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    \n    # Remove the row sums from the sorted matrix\n    for i in range(len(M)):\n        row_sums[i] = sorted_matrix[i]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create an empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for i in range(rows):\n        # Initialize the sum of the current row to 0\n        current_row_sum = 0\n        \n        # Loop through each column of the current row\n        for j in range(cols):\n            # Add the value of the current cell to the current row sum\n            current_row_sum += M[i][j]\n        \n        # Add the current row sum to the sorted matrix list\n        sorted_matrix.append(current_row_sum)\n    \n    # Sort the sorted matrix in ascending order\n    sorted_matrix.sort()\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(j+1, len(M[i])):\n                if M[i][k] < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    # Initialize the min_sum as the maximum value\n    min_sum = float('inf')\n    # Initialize the result matrix as a copy of the input matrix\n    result = [list(row) for row in M]\n    # Loop through all possible pairs of rows\n    for i in range(rows):\n        for j in range(i+1, rows):\n            # Calculate the sum of the current row and the next row\n            current_sum = sum(M[i]) + sum(M[j])\n            # Update the min_sum if the current_sum is smaller\n            if current_sum < min_sum:\n                min_sum = current_sum\n                # Swap the elements of the rows if the current_sum is equal to min_sum\n                for k in range(cols):\n                    result[i][k], result[j][k] = result[j][k], result[i][k]\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume using the formula\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # Volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(a, b, c):\n    s = (a + b + c) / 2\n    Volume = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculating the volume of the prism\n    volume = l * b * h\n    # printing the volume of the prism\n    print(\"The volume of the triangular prism is:\", volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l*b*h)/2 # calculate the area of the prism\n    volume = area * l # calculate the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism using the formula: \n    # V = (1/3) * l * b * h\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b)[a-z](?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use the re.search() method to search for matches in the input string\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True. Otherwise, return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[a-z])'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern to check for lowercase letters followed by underscore\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])|_(?=[a-z])'\n    \n    # Use the re.search() method to search for matches in the input string\n    matches = re.search(pattern, text)\n    \n    # If there are matches, return True, otherwise False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z][a-z_]*[a-z]$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<=[a-z])[A-Z](?=[a-z])|([A-Z])(?=[A-Z][a-z])')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<!_)([a-z]+(?!_))_')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=[A-Z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Remove all non-letter and non-underscore characters\n    pattern = r\"[^a-zA-Z_]\"\n    text = re.sub(pattern, \"\", text)\n    # Split the text into words and check if there are any lowercase sequences separated by underscores\n    if len(text.split(\"_\")) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if string_list.count(chr(i)) > 0:\n            string_list.remove(chr(i))\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # convert the string to a list of characters\n    char_list = list(string)\n\n    # remove characters from the first string which are present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n\n    # convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Initialize an empty list to store the resulting string\n    result = []\n\n    # Iterate over each character in the first string\n    for char in string:\n\n        # If the character is not present in the second string, append it to the result list\n        if char not in string:\n            result.append(char)\n\n        # If the length of the result list exceeds the limit of 256 characters, break out of the loop\n        if len(result) == NO_OF_CHARS:\n            break\n\n    # Return the resulting list of characters\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    result = \"\"\n    for char in string:\n        if char not in char_list:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string, no_of_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    char_set = set(string)\n    for char in char_set:\n        if char in string:\n            list_of_chars.remove(char)\n    result = ''.join(list_of_chars[:no_of_chars])\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    char_list = list(char_set)\n\n    for i in range(len(string)):\n        if string[i] in char_set:\n            char_list.remove(string[i])\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 2:\n        return string\n    \n    for i in range(NO_OF_CHARS):\n        if chr(i) not in string:\n            return string\n    \n    return \"\""
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    list_string = list(string)\n    for char in char_list:\n        if char in list_string:\n            list_string.remove(char)\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if string_list[i] in string:\n            string_list.pop(i)\n    return string_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # Create a list of all possible characters in the string\n    all_chars = list(string)\n    \n    # Create a list to store the characters that are present in the second string\n    present_chars = []\n    \n    # Loop through all possible characters in the string\n    for char in all_chars:\n        # If the character is present in the second string, add it to the present_chars list\n        if char in string:\n            present_chars.append(char)\n    \n    # Remove the characters from the first string that are present in the present_chars list\n    for char in string:\n        if char in present_chars:\n            string = string.replace(char, \"\")\n    \n    # Return the updated string\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # iterate through each element in the array and update the count in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # iterate through the dictionary and check if any element has a count greater than 1\n    for key in count_dict:\n        if count_dict[key] > 1:\n            return True\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Use a dictionary to keep track of the frequency of each number in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            # If the number has already appeared in the dictionary, return True\n            return True\n        else:\n            # If the number has not appeared in the dictionary, add it to the dictionary with a frequency of 1\n            freq[num] = 1\n    # If the loop completes without finding any duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty set\n    duplicate_set = set()\n\n    # Iterate over each element in the array\n    for num in arraynums:\n        # If the element is already in the set, return True\n        if num in duplicate_set:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            duplicate_set.add(num)\n\n    # If all elements in the array have been checked and none have been found to be duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the number and its count\n    count = {}\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Check if there are any duplicate numbers in the dictionary\n    for num in count:\n        if count[num] > 1:\n            return True\n\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        print(x, \"is a woodball.\") \n    else: \n        print(x, \"is not a woodball.\") "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0: \n        return 'Woodall' \n    else: \n        return 'Not Woodall'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 10 == 0 and x % 5 == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"The number is even and therefore not a woodball.\"\n    else:\n        return \"The number is odd and therefore a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    if reverse + 1 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    #Reverse the input number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n        \n    #Check if the reverse is one less than twice the original number\n    if rev_num > num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reverse = str(num)[::-1]\n    # Convert the reverse number to an integer\n    reverse_num = int(reverse)\n    # Calculate the difference between the original number and the reverse number\n    diff = num - reverse_num\n    # If the difference is less than 2, then the original number is one less than twice its reverse\n    if diff < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert number to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n\n    # convert the reverse number back to an integer and calculate the difference\n    num_rev = int(num_str_rev)\n    diff = num - num_rev\n\n    # check if the difference is less than or equal to zero\n    if diff <= 0:\n        print(num, \"is not one less than twice its reverse.\")\n    else:\n        print(num, \"is one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + (num % 10)\n        num //= 10\n    return True if abs(rev_num - num) == 1 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n\n    num_str = str(num)\n    reverse_num_str = num_str[::-1]\n\n    reverse_num = int(reverse_num_str)\n\n    if num - reverse_num == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return True if num == rev_num and num - rev_num < 2 * rev_num else False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num_rev = num[::-1]\n    num_rev_int = int(num_rev)\n    if num_rev_int - num == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n\n    max_num = 0\n\n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            if i!= j and arr[i] + arr[j] > max_num : \n                max_num = arr[i] + arr[j]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_num = 0\n        else:\n            max_num = max(max_num, int(arr[i]) * 10**(n-1-i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(1, len(arr)+1):\n        max_num += (9**i) * arr[i-1]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Sort the list of digits in descending order\n    arr.sort(reverse=True)\n    # Create a string of digits from the sorted array\n    digits = ''.join(str(digit) for digit in arr)\n    # Convert the string to integer\n    num = int(digits)\n    # Return the largest number that can be formed with the given digits\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum possible sum that can be formed with those digits.\n    \"\"\"\n    # create a dictionary to store the sum of each length\n    sum_dict = {}\n    # initialize the largest number to be 0\n    max_num = 0\n    # iterate through all possible lengths of digits\n    for length in range(1, len(arr)+1):\n        # calculate the sum of all digits of the current length\n        current_sum = sum(arr[:length])\n        # check if the sum is less than the current largest number\n        if current_sum < max_num:\n            # if it is, update the largest number\n            max_num = current_sum\n        # check if the current sum is already present in the dictionary\n        if current_sum in sum_dict:\n            # if it is, add the current length to the list of lengths with the same sum\n            sum_dict[current_sum].append(length)\n        else:\n            # if it's not, add the current length as a new key with its own list of lengths\n            sum_dict[current_sum] = [length]\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sorting the list in descending order\n    \n    n = len(arr) # getting the length of the sorted list\n    \n    max_num = 0\n    \n    for i in range(n) : # iterating through the sorted list\n        \n        for j in range(i+1,n) : # iterating through the remaining part of the list\n            \n            num = (arr[i] * 100) + arr[j] # calculating the sum of digits of each number\n            \n            if num > max_num : # comparing the sum with the current maximum number found\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    if n == 1:\n        return int(arr[0])\n    elif n == 2:\n        return int(arr[0]) * 10 + int(arr[1])\n    else:\n        max_num = 0\n        for i in range(n):\n            if arr[i] == '0':\n                continue\n            elif arr[i] == '1':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100)\n            elif arr[i] == '2':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000)\n            elif arr[i] == '3':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000)\n            elif arr[i] == '4':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000)\n            elif arr[i] == '5':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000 + int(arr[i+4]) * 1000000)\n            elif arr[i] == '6':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000 + int(arr[i+4]) * 1000000 + int(arr[i+5]) * 10000000)\n            elif arr[i] == '7':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000 + int(arr[i+4]) * 1000000 + int(arr[i+5]) * 10000000 + int(arr[i+6]) * 100000000)\n            elif arr[i] == '8':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000 + int(arr[i+4]) * 1000000 + int(arr[i+5]) * 10000000 + int(arr[i+6]) * 100000000 + int(arr[i+7]) * 1000000000)\n            elif arr[i] == '9':\n                max_num = max(max_num, int(arr[0]) * 10 + int(arr[i]) * 100 + int(arr[i+1]) * 1000 + int(arr[i+2]) * 10000 + int(arr[i+3]) * 100000 + int("
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as an input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the list of digits in non-decreasing order\n    arr.sort(reverse=True)\n    # Initialize the largest number to 0\n    max_num = 0\n    # Traverse through the sorted list of digits\n    for i in range(len(arr)):\n        # Multiply the current number with 10 raised to the power of i\n        num = 10**(i)\n        # Multiply the current number with the largest number found so far\n        max_num = max(max_num, num*arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == 9:\n                return arr[i] + arr[j]"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if x and y have opposite signs, \n    otherwise it returns False.\n    \"\"\"\n\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    if x == 0 or y == 0:\n        return False\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return \"The signs are opposite.\"\n    else:\n        return \"The signs are not opposite.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"Both numbers have opposite signs\")\n    else:\n        print(\"Both numbers have same signs\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    elif x == 0 and y == 0: \n        return False\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(\"The integers have opposite signs\")\n    else:\n        print(\"The integers have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0): \n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # To check if a number is octagonal or not\n    if n % 2 == 0:\n        return False\n    elif n > 0:\n        return is_octagonal(n - 1)\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n\n    # initialize the sum of squares of odd integers\n    sum_of_squares = 0\n\n    # loop through odd integers up to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return \"Invalid input. Please enter an odd integer.\"\n        elif i**2 <= n:\n            sum_of_squares += i**2\n\n    # check if the sum of squares is greater than or equal to n\n    if sum_of_squares < n:\n        return \"Invalid input. Please enter an odd integer.\"\n\n    # calculate the nth octagonal number\n    octagonal_num = (n * (n+1) * (2*n+1)) // 6\n\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 1\n    while i <= n:\n        octagonal = 14 * i ** 2 - 6 * i + 1\n        print(octagonal)\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the first octagonal number\n    first_octagonal = 0\n    for i in range(1, n+1):\n        first_octagonal += i**2\n    return first_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # We start with 1\n    i = 1\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # While i is less than n, we calculate the sum of the squares of i, j, and k\n    while i < n:\n        j = 1\n        k = 1\n\n        # While j is less than i, we calculate the sum of the squares of i, j, and k\n        while j < i:\n            sum += i**2 + j**2 + k**2\n            j += 1\n        i += 1\n\n    # If the sum is equal to n^2, then we have found the nth octagonal number\n    if sum == n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    # Using the formula for nth octagonal number\n    octagonal = n * (3 * n - 1) // 2\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        num = 1\n        while num * (num + 1) <= 2 * n:\n            num += 1\n        return (n - num + 1) / 2 == (num - 1) / 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer as input and returns True if it is an octagonal number, False otherwise.\n    An octagonal number is a positive integer such that the sum of its first n odd numbers is equal to n^2.\n    For example, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21,...\n    '''\n\n    # Check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return False\n\n    # Initialize variables\n    odd_sum = 0\n    count = 1\n\n    # Calculate the sum of the first n odd numbers\n    while count <= n:\n        odd_sum += count\n        count += 2\n\n    # Check if the sum of the first n odd numbers is equal to n^2\n    if odd_sum == n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # function to check if a number is octagonal or not\n    def is_octagonal_helper(num):\n        # base case\n        if num < 0:\n            return False\n        # check if the number is divisible by 8\n        if num % 8 == 0:\n            return True\n        # check if the number is divisible by 9\n        if num % 9 == 0:\n            return False\n        # if the number is not divisible by 8 or 9, then it is not octagonal\n        return False\n    \n    # find the nth octagonal number using binary search\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if is_octagonal_helper(mid):\n            return mid\n        elif mid * 8 > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    # if we reach here, then the nth octagonal number does not exist\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Find the value of n^3\n    n3 = n ** 3\n\n    # If n is odd, the nth octagonal number is n^3 + 1\n    if n % 2!= 0:\n        return n3 + 1\n\n    # If n is even, the nth octagonal number is 2n^3 + 1\n    else:\n        return 2 * n3 + 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            if sum(int(d) for d in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    \n    for i in range(n):\n        dp[i] = s[i]\n\n    for i in range(1, n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the frequency of digits in the string\n    digit_freq = defaultdict(int)\n    for char in s:\n        if char.isdigit():\n            digit_freq[int(char)] += 1\n\n    # Initialize a counter for the number of substrings with the sum of digits equal to their length\n    count = 0\n\n    # Iterate over all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits in the substring is equal to its length\n            sum_of_digits = sum(digit_freq[int(char)] for char in s[i:j+1])\n            if sum_of_digits == len(s[i:j+1]):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the sum of digits and its count\n    sum_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # check if the sum of digits is equal to its length\n        if sum_dict[len(s) - i] == 0:\n            # add 1 to the count for the substring with the given sum of digits\n            sum_dict[len(s) - i] = 1\n        else:\n            # increment the count for the substring with the given sum of digits\n            sum_dict[len(s) - i] += 1\n\n    # loop through each substring in the string\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits is equal to the substring length\n            if sum_dict[j - i] == len(s) - i:\n                # increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the counts of substrings with the given condition\n    counts = defaultdict(int)\n\n    # iterate through the string and for each character, check if its length is equal to the digit sum\n    for i, c in enumerate(s):\n        if c.isdigit():\n            count = sum(int(d) for d in s[i:i+len(c)])\n            counts[count] += 1\n\n    # return the counts of all substrings with the given condition\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                num_substrings[sub_str] += 1\n\n    return num_substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        dp[i] = dp[i-1]\n        if s[i].isdigit():\n            dp[i] += i+1\n    \n    count = sum(dp.values())\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit():\n                count += len(s[i:j+1])\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a defaultdict to store the count of substrings for each substring\n    substring_counts = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each substring that starts from i and has at least one character\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits for the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # If the substring sum is equal to its length, increment the count\n            if substring_sum == j-i:\n                substring_counts[s[i:j]] += 1\n                \n    # Return the count of substrings\n    return sum(substring_counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of each substring with the sum of digits equal to its length\n    substrings = defaultdict(int)\n    n = len(s)\n\n    # loop through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # if the substring contains only digits, add it to the dictionary\n            if all(c.isdigit() for c in s[i:j+1]):\n                substrings[s[i:j+1]] += 1\n\n    # return the sum of all the values in the dictionary\n    return sum(substrings.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        return min(xs[0], smallest)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the variables to keep track of the minimum and maximum values\n    min_val = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the values and check if it is larger than the current maximum difference\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return \"The list should have at least 2 elements to calculate the maximum difference.\"\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][1] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][1] - test_list[i][1]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i][0], test_list[j][0]))\n    max_diff = 0\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the first element\n    test_list = sorted(test_list)\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = test_list[i + 1][0] - test_list[i][0]\n\n        # Update the maximum difference if the current difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    test_list.sort()  # Sort the list of tuples in ascending order\n    \n    max_diff = 0\n    prev_diff = float('-inf')\n    \n    for i in range(len(test_list)-1):\n        curr_diff = test_list[i+1][0] - test_list[i][1]\n        max_diff = max(max_diff, curr_diff)\n        \n        if curr_diff > prev_diff:\n            prev_diff = curr_diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order\n    test_list.sort()\n\n    # initialize maximum difference to be 0\n    max_diff = 0\n\n    # loop through the list\n    for i in range(len(test_list)):\n        # loop through the remaining list starting from i+1\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the elements\n            diff = test_list[j] - test_list[i]\n            # update the maximum difference if current difference is greater than max_diff\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add(tuple(sorted((test_list[i], test_list[j]))))\n    return max(pairs)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n\n    Args:\n        subjectmarks (list of tuples): A list of tuples containing subject and marks.\n\n    Returns:\n        list of tuples: A sorted list of tuples containing subject and marks.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # recursive case: add the first element of the list to the sum of the remaining elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(data_list):\n        \"\"\"\n        Flatten a list by recursively calling the function.\n        \"\"\"\n        if not data_list:\n            return []\n        elif isinstance(data_list[0], list):\n            return flatten_list(data_list[0]) + flatten_list(data_list[1:])\n        else:\n            return [data_list[0]] + flatten_list(data_list[1:])\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the result of the recursive call on the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return sum(recursive_list_sum(sublist) for sublist in data_list)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return the element\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: add the first element to the sum of the recursive call\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(data_list):\n        \"\"\"\n        Helper function to flatten a list.\n        \"\"\"\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list, current_level=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if there are no more elements in the list, return 0\n    if current_level == len(data_list):\n        return 0\n    # Recursive case: add the current element to the sum of elements from the next level up\n    else:\n        return data_list[current_level] + recursive_list_sum(data_list, current_level + 1)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element to the sum of the rest of the elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define a helper function that will flatten the list recursively\n    def flatten(lst):\n        # If the list is empty, return an empty list\n        if not lst:\n            return []\n        # If the list has only one element, return the element as a list\n        elif len(lst) == 1:\n            return [lst[0]]\n        # If the list has more than one element, return a flattened list containing the elements from both halves\n        else:\n            return flatten(lst[1:]) + [lst[0]]\n    \n    # Flatten the list and sum all of its elements recursively\n    return sum(flatten(data_list))"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables to keep track of the number of ways and the number of Bell numbers\n    ways = 0\n    bell_count = 1\n    \n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # If the current number is a Bell number, increment the bell_count and update the number of ways\n        if i == bell_count:\n            ways += 1\n            bell_count += 2\n        \n        # If the current number is not a Bell number, increment the bell_count\n        else:\n            bell_count += 1\n    \n    # Return the number of ways to partition a set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Define a function to generate the Bell numbers\n    def generate_bell_numbers(n):\n        bell_numbers = [0] * (n + 1)\n        bell_numbers[0] = 1\n        bell_numbers[1] = 1\n        for i in range(2, n + 1):\n            bell_numbers[i] = bell_numbers[i - 1] + bell_numbers[i - 2]\n        return bell_numbers\n\n    # Calculate the Bell numbers\n    bell_numbers = generate_bell_numbers(n)\n\n    # Define a function to generate the partition combinations\n    def generate_partition_combinations(n, k):\n        partition_combinations = [0] * (n + 1)\n        partition_combinations[0] = 0\n        partition_combinations[1] = 1\n        partition_combinations[2] = 2\n        for i in range(3, n + 1):\n            partition_combinations[i] = partition_combinations[i - 1] + partition_combinations[i - 2]\n        for i in range(k, n + 1):\n            partition_combinations[i] = partition_combinations[i - 1]\n        return partition_combinations\n\n    # Calculate the partition combinations\n    partition_combinations = generate_partition_combinations(n, n)\n\n    # Calculate the number of ways to partition\n    ways_to_partition = 0\n    for i in range(n + 1):\n        ways_to_partition += partition_combinations[i] * bell_numbers[i]\n\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of ways to partition a set of Bell numbers:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition\n    ways = 1\n\n    # Iterate through all Bell numbers less than or equal to n\n    for i in range(1, n + 1):\n        # Add 1 to the number of ways if i is a Bell number\n        ways += 1\n        # Add the number of ways to partition if i is not a Bell number\n        if i not in range(2, int(i ** 0.5) + 1):\n            ways *= i\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = [1] * (n+1)   # create list of Bell numbers\n    for i in range(2, n+1):   # calculate Bell numbers from 2 to n\n        bell_num[i] = bell_num[i-1] + bell_num[i-2]   # formula for Bell numbers\n    return bell_num[n]   # return the number of ways to partition the set of Bell numbers\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize a list to store the number of ways to partition the set of Bell numbers\n    count = [0] * (n+1)\n    count[0] = 1\n    count[1] = 1\n    # loop through all the values of n and update the count list accordingly\n    for i in range(2, n+1):\n        count[i] = (count[i-1] + count[i-2]) % 1000000007\n    # return the count list\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(2, n+1):\n            for j in range(1, i):\n                if i%j == 0:\n                    break\n            else:\n                result += 1\n        return result\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 1, there is only one way to partition into two sets\n    if n == 1:\n        return 1\n    # Base case: if n is 2, there are two ways to partition into one set\n    elif n == 2:\n        return 2\n    # Recursive case: if n is odd, there is a way to partition into two sets, and then another way to partition the remaining set into two sets.\n    # If n is even, there is a way to partition into two sets, and then the remaining set is split into two halves, each with one element.\n    else:\n        return (bell_number(n-1) + bell_number(n-2)) % 1000000007 # In case n is too large for an integer"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    \n    if A[0] < A[1] and A[1] < A[2]: \n        return True\n    \n    if A[0] > A[1] and A[1] > A[2]: \n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # compare the first and last element of the array\n    if A[0] < A[-1]:\n        return True\n    elif A[0] > A[-1]:\n        return False\n    else:\n        # check if the array is monotonic\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] and A[i] < A[i+1]:\n                return True\n            elif A[i] < A[i-1] and A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if array is empty \n    if len(A) == 0: \n        return True\n\n    # Check if array is of odd length \n    if len(A) % 2 == 1: \n        return False \n\n    # Initialize variables \n    n = len(A) \n    prev_elem = A[0] \n    is_monotonic = True \n\n    # Traverse through the array \n    for i in range(1, n): \n        if A[i] < prev_elem: \n            is_monotonic = False \n            break \n        elif A[i] > prev_elem: \n            break \n        else: \n            continue \n\n    return is_monotonic "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] >= A[-1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic, \n    otherwise it returns False.\n    \n    A monotonic array is an array where each element is either an increasing or \n    decreasing sequence. In other words, the difference between any two adjacent \n    elements in the array is always positive or negative, respectively.\n    \n    For example:\n    [1, 2, 3, 4, 5] is a monotonic array because it is a sequence of increasing \n    numbers.\n    [1, 5, 3, 2, 4] is also a monotonic array because it is a sequence of increasing \n    numbers.\n    [1, 3, 5, 4, 2] is not a monotonic array because it is a sequence of decreasing \n    numbers.\n    '''\n    if len(A) < 2:\n        return False\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    if len(A) == 1: \n        return True\n    \n    is_monotonic = True\n    for i in range(1, len(A)): \n        if A[i] < A[i-1]: \n            is_monotonic = False\n            break\n    \n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    if A[0] < A[1]:\n        return all(A[i] < A[i+1] for i in range(n-1))\n    else:\n        return all(A[i] > A[i+1] for i in range(n-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:]) and is_Monotonic([A[0]] + A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:]) and is_Monotonic([A[0]] + A[1:])\n    else:\n        return is_Monotonic(A[1:]) and is_Monotonic(A)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if the array is monotonic (increasing or decreasing) and False otherwise.\n    '''\n    # check if all elements in the array are the same\n    if len(A) == 1:\n        return True\n    # check if the array is monotonic by comparing adjacent elements\n    elif A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    # check if the array is monotonic by comparing adjacent elements\n    elif A[0] > A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    # check if the array is neither increasing nor decreasing\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    # create a set of elements in the sublist\n    sublist = set(s)\n\n    # iterate through the list and check if all elements in the sublist are present in the list\n    for elem in l:\n        if elem not in sublist:\n            return False\n\n    # if all elements in the list are present in the sublist, then the sublist is present in the list\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the sublist is present in the list\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n            \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty or the length of the list is less than the length of the sublist\n    if len(s) > len(l) or len(s) == 0:\n        return False\n    # Traverse the list until the sublist is found\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist is a subsequence of the list from index i\n        if l[i:i+len(s)] == s:\n            return True\n    # If no sublist is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n\n    l.sort()\n    s.sort()\n\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if l[i:].count(s[0]) == len(s):\n                return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_tuples = [tuple(x) for x in Input]\n    all_lengths = [len(x) for x in all_tuples]\n    return all(len(t) == all_lengths[0] for t in all_tuples)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Convert the input list to a set to remove duplicates\n    unique_tuples = set(Input)\n\n    # Loop through the unique tuples and check if all have equal length\n    for i in unique_tuples:\n        if len(i)!= len(unique_tuples.pop()):\n            return False\n\n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise False.\n    '''\n\n    # Iterate over the list of tuples\n    for i in range(len(Input)):\n        # Get the length of the current tuple\n        length = len(Input[i])\n        # Check if all the tuples have the same length\n        if length!= len(Input[0]):\n            # If any tuple has different length, return False\n            return False\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuples = Input\n    for i in range(len(tuples)):\n        if len(tuples[i])!= len(tuples[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Initialize a counter to keep track of the number of tuples with equal length\n    count = 0\n    \n    # Iterate through the input list of tuples\n    for i in Input:\n        # Check if all the tuples have equal length\n        if len(set(len(t) for t in i)) == 1:\n            count += 1\n    \n    # Return the number of tuples with equal length\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # convert list of tuples to set of tuples to remove duplicates\n    unique_tuples = set(Input)\n    # check if all tuples have the same length\n    if len(unique_tuples) == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input[0])!= len(Input[1]):\n        return False\n    else:\n        for i in range(len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n        return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define helper function for counting swaps\n    def count_swaps(nums):\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    count += 1\n        return count\n\n    # check for base case where the list is already sorted\n    if count_swaps(nums) == 0:\n        return nums\n\n    # define a function to partition the list\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n\n        nums[i + 1], nums[high] = nums[high], nums[i + 1]\n        return i + 1\n\n    # initialize the gap and a boolean flag to track swaps\n    gap = len(nums) // 2\n    swapped = True\n\n    # while swapped is True, perform the following steps\n    while swapped:\n        swapped = False\n\n        # partition the list\n        low = 0\n        high = gap - 1\n\n        while low < high:\n            pivot_index = partition(nums, low, high)\n\n            # if a swap was made, update swapped and break out of the loop\n            if pivot_index!= low:\n                swapped = True\n                low = pivot_index + 1\n            else:\n                high = pivot_index\n\n        gap = 3 * gap + 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            if j!= i:\n                nums[j], nums[i] = nums[i], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize variables\n    swapped = True\n    steps = 0\n\n    # while swapped is True, do the following:\n    while swapped:\n        # initialize swapped to False\n        swapped = False\n\n        # iterate over the array\n        for i in range(len(nums)-1):\n            # if the current number is greater than the next number, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # set swapped to True\n                swapped = True\n\n        # if no swaps were made in the inner loop, break out of the outer loop\n        if not swapped:\n            break\n\n        # increment the step count\n        steps += 1\n\n    # return the sorted array and the number of steps taken\n    return nums, steps"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n            "
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = min(gap, n // 2)\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 10\n\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # loop until no swaps are made\n    while swapped:\n        swapped = False\n\n        # calculate the new gap\n        if gap == 1:\n            break\n        elif gap == n:\n            gap = 1\n        else:\n            gap = (gap * 10) // 13\n\n        # loop over the list\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Find the square of the given number\n    square = n * n\n\n    # Check if the square can be represented as the difference of two squares\n    if square < 100:\n        return True\n    elif 100 <= square < 1000:\n        return False\n    else:\n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_square(n):\n    return n**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    if is_square(n):\n        return False\n    elif is_square(n-1):\n        return True\n    else:\n        for i in range(2, int(n**(1/2))+1):\n            if n-i*i == 0:\n                return True\n            elif n-i*i == i*i:\n                return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return False\n    i = 1\n    while i * i <= n: \n        if n % i == 0 and n % (i**2) == 0: \n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is greater than 1\n    if n > 1: \n        # Initialize two variables a and b\n        a = n // 2\n        b = n - a\n        # Check if the difference between squares is a square\n        while b**2 > a:\n            a += 1\n            b = n - a\n        # If the difference between squares is a square, then the given number is possible\n        if b**2 == a:\n            return True\n        else:\n            return False\n    else:\n        # If the given number is less than or equal to 1, then it cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if i*i + i == n or i*i - i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # To check whether the given number is a square or not, we can use the math module's sqrt() function\n    # to calculate the square root of the given number. If the square root is an integer, then the number is a square.\n    import math\n    \n    sqrt_n = math.sqrt(n)\n    \n    # If the square root is an integer, then the number is a square\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        if n-i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # checking whether the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # calculating the square root of the given number\n    sqrt_n = int(n**0.5)\n\n    # checking whether the square root is a perfect square or not\n    if int(sqrt_n**2) == sqrt_n:\n        return True\n\n    # checking whether the difference of squares of two perfect squares is also a perfect square or not\n    diff = sqrt_n**2 - n\n    if int(diff**2) == diff:\n        return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # We start by checking whether the number is divisible by 4 or not\n    if n % 4 == 0:\n        return \"Not Possible\"\n\n    # We then calculate the difference of the squares of the given number and 1\n    diff_square = (n**2) - (1**2)\n\n    # If the difference is 0, then the given number can be represented as the difference of two squares\n    if diff_square == 0:\n        return \"Yes\"\n\n    # If the difference is not 0, then the given number cannot be represented as the difference of two squares\n    else:\n        return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n\n    sqrt_n = int(n ** 0.5) + 1\n\n    for i in range(sqrt_n):\n        if n % (i * i) == 0:\n            return True\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if the colors in the list match the patterns in the patterns list.\n    The patterns are given in the format of [[color1, color2, color3], [color4, color5, color6],...]\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n\n        for color in colors:\n            if color not in pattern:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    pattern_index = 0\n    current_pattern = patterns[pattern_index]\n\n    # loop through the colors and check if they match the current pattern\n    for color in colors:\n        if color == current_pattern[0]:\n            current_pattern = current_pattern[1:]\n        else:\n            return False\n\n    # if we've reached the end of the current pattern, check if it matches the next pattern\n    if current_pattern == patterns[pattern_index + 1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a dictionary to store the counts of each pattern\n    pattern_count = {}\n    # loop through each color in the colors array\n    for color in colors:\n        # check if the color exists in the patterns array\n        if color in patterns:\n            # if it does, add 1 to the count for that pattern in the dictionary\n            if color in pattern_count:\n                pattern_count[color] += 1\n            else:\n                pattern_count[color] = 1\n\n    # loop through each pattern in the patterns array\n    for pattern in patterns:\n        # check if the pattern exists in the dictionary\n        if pattern in pattern_count:\n            # if it does, check if the count for that pattern matches the number of times the pattern appears in the colors array\n            if pattern_count[pattern] == len(colors) // len(patterns):\n                # if the pattern count matches the number of times the pattern appears in the colors array, remove it from the dictionary\n                del pattern_count[pattern]\n        else:\n            # if the pattern does not exist in the dictionary, it does not follow the sequence given in the patterns array\n            return False\n\n    # if the loop completes without finding any patterns that do not follow the sequence, it follows the sequence given in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    count = 0\n    max_count = 0\n    pattern = []\n    \n    # Loop through the colors array\n    for i in range(len(colors)):\n        # Check if the current color matches the current pattern\n        if colors[i] == pattern[-1]:\n            # If it does, increment the count\n            count += 1\n            # If the count is greater than the max_count, update the max_count\n            if count > max_count:\n                max_count = count\n        else:\n            # If it doesn't, reset the count to 0 and append the current color to the pattern\n            count = 1\n            pattern.append(colors[i])\n    \n    # Check if all patterns were used in the colors array\n    if max_count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if the number of patterns is less than or equal to the number of colors\n    if len(patterns) > len(colors):\n        return False\n\n    # check if the colors in the patterns array match the colors in the colors array\n    pattern_colors = set(patterns)\n    color_count = {}\n    for color in colors:\n        if color in pattern_colors:\n            color_count[color] = color_count.get(color, 0) + 1\n            pattern_colors.remove(color)\n        else:\n            return False\n\n    # check if the patterns array contains all unique patterns\n    if len(pattern_colors) > 0:\n        return False\n\n    # check if the number of occurrences of each pattern in the patterns array is the same as the number of times it appears in the colors array\n    for pattern, count in color_count.items():\n        if count > patterns.count(pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    color_count = {}\n\n    for pattern in patterns:\n        for color in pattern:\n            if color not in color_count:\n                color_count[color] = 1\n            else:\n                color_count[color] += 1\n\n    for color in color_count:\n        if color_count[color]!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    pattern_lengths = [len(pattern) for pattern in patterns]\n    pattern_sum = sum(pattern_lengths)\n    \n    if pattern_sum > n:\n        return False\n    \n    pattern_count = 0\n    color_index = 0\n    while pattern_count < pattern_sum and color_index < n:\n        pattern_length = pattern_lengths[pattern_count]\n        if color_index + pattern_length > n:\n            return False\n        if colors[color_index:color_index+pattern_length] == patterns[pattern_count]:\n            pattern_count += 1\n        color_index += 1\n    \n    return pattern_count == pattern_sum"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        test_list (list of tuples): list of tuples to search in\n        K (int): divisor for checking divisibility\n\n    Returns:\n        list of tuples: list of tuples found whose elements are divisible by K\n\n    \"\"\"\n    tuples_found = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            tuples_found.append(tup)\n    return tuples_found"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input.\n    It returns a list of tuples that have all elements divisible by K from the input list.\n    \"\"\"\n    result = []\n\n    for tup in test_list:\n        all_divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if all(num % K == 0 for num in i):\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer k as inputs and returns a list of tuples that have all \n    elements divisible by k from the input list.\n    '''\n    # Initialize an empty list to store the tuples that satisfy the condition\n    result = []\n    \n    # Iterate through the input list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(i % K == 0 for i in tup):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list of tuples that have all elements divisible by k\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples as input and an integer K as input.\n    It returns a list of tuples that have all elements divisible by K from the input list of tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the input list\n    for i in test_list:\n        # Check if all elements are divisible by K\n        if all(x % K == 0 for x in i):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(i)\n            \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    for word in s:\n        if len(word) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns a boolean value indicating whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    for i in range(len(s)):\n        if len(s[i]) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        print(f\"{word} is even length\")\n    else:\n        print(f\"{word} is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split() #splitting the string into words\n    for w in word:\n        if len(w)%2!=0: #checking whether the length of the word is odd or even\n            return False\n    return True #if all the words are even length, then the function will return True\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word.\")\n        else:\n            print(word, \"is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(n):\n        a, b, c, d = d, a + b + c + d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = []\n    for i in range(1, n+1):\n        tetrahedral_numbers.append(i*(i+1)*(i+2)*(i+3))\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return n * (10*n - 5) / 2 + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a variable to store the current tetrahedral number\n    tetrahedral_number = 0\n    # Initialize a variable to store the number of sides of each triangle\n    sides = [3, 4, 5]\n    # Loop through each triangle and add up the number of sides\n    for i in range(n):\n        tetrahedral_number += sides[i]\n    # Return the nth tetrahedral number\n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first three terms\n    a, b, c = 1, 1, 1\n    # Initialize the first four terms\n    A, B, C, D = 1, 2, 3, 4\n    # Initialize the first five terms\n    E, F, G, H, I = 1, 3, 6, 10, 15\n    # Initialize the first six terms\n    J, K, L, M, N, O = 1, 4, 10, 20, 35, 56\n    # Initialize the first seven terms\n    P, Q, R, S, T, U, V = 1, 5, 15, 30, 55, 94, 156\n    \n    # Loop through each term\n    for i in range(n):\n        # Increment the variables for the next term\n        A = A + B\n        B = B + C\n        C = C + D\n        D = D + E\n        E = E + F\n        F = F + G\n        G = G + H\n        H = H + I\n        I = I + J\n        J = J + K\n        K = K + L\n        L = L + M\n        M = M + N\n        N = N + O\n        O = O + P\n        P = P + Q\n        Q = Q + R\n        R = R + S\n        S = S + T\n        T = T + U\n        U = U + V\n        V = V + W\n        \n        # Check if the term is a tetrahedral number\n        if (A*B*C*D) == (A*B*C*E) == (A*B*D*E) == (A*B*E*F) == (A*C*D*E) == (A*C*E*F) == (A*D*E*F) == (B*C*D*E) == (B*C*E*F) == (B*D*E*F) == (C*D*E*F) == (A*B*C*D*E) == (B*C*D*E*F) == (C*D*E*F*G) == (D*E*F*G*H) == (E*F*G*H*I) == (A*B*C*D*E*F) == (B*C*D*E*F*G) == (C*D*E*F*G*H) == (D*E*F*G*H*I) == (E*F*G*H*I*J) == (A*B*C*D*E*F*G) == (B*C*D*E*F*G*H) == (C*D*E*F*G*H*I) == (D*E*F*G*H*I*J) == (E*F*G*H*I*J*K) == (A*B*C*D*E*F*G*H) == (B*C*D*E*F*G*H*I) == (C*D*E*F*G*H*I*J) == (D*E*F*G*H*I*J*K) == (E*F*G*H*I*J*K*L) == (A*B*C*D*E*F*G*H*I) == (B*C*D*E*F*G*H*I*J) == (C*D*E*F*G*H*I*J*K) == (D*E*F*G*H*I*J*K*L) == (E*F*G*H*I*J*K*L*M) == (A*B*C*D*E*F*G*H*I*J) == (B*C*D*E*F*G*H*I*J*K) == (C*D*E*F*G*H*I*J*K*L) == (D*E*F*G*H*I*J*K*L*M) == (E*F*G*H*I*J*K*L*M*N) == (A*B*C*D*E*F*"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n    sum = 0\n    for i in range(1, n+1):\n        sum += a + b + c + d\n        a += 4\n        b += 4\n        c += 4\n        d += 4\n    return sum - n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two terms of the sequence\n    a = 1\n    b = 4\n    # Compute the remaining terms of the sequence using the formula a^n - b^n + c^n + d^n\n    sequence = []\n    for i in range(n):\n        c = (a * a + b * b + a * b - 2 * a * b * b) / (2 * a * b)\n        d = (a * a + b * b + c * c - 2 * a * b * c) / (2 * a * c)\n        sequence.append(a ** i - b ** i + c ** i + d ** i)\n        # Update the values of a, b for the next iteration\n        a, b = b, a + b\n    return sequence"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + (1/n) * sum([tetrahedral_number(i) for i in range(n-1)])"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def helper(a, b, c):\n        if a + b + c > 2 * max(a, b, c):\n            return 0\n        return 1 + helper(a + 1, b, c) + helper(a, b + 1, c) + helper(a, b, c + 1)\n\n    return helper(0, 0, 0) + helper(1, 0, 0) + helper(0, 1, 0) + helper(0, 0, 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    i = 1\n    while i <= n:\n        result += i*4\n        i += 1\n    return result"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume using the formula V = 4/3 * \u03c0 * r^3\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # initialize the result variable\n    result = \"\"\n    \n    # loop through each character of the string\n    for char in strr:\n        # convert each character to its ASCII value\n        ascii_value = ord(char)\n        \n        # add the ASCII value to the result variable\n        result += chr(((ascii_value - ord('a') + 13) % 26) + ord('a'))\n    \n    # return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(c) for c in strr)\n    char_value = ascii_sum % 26\n    char = chr(char_value + ord('a'))\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return (ascii_val % 26) + 97"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n    char_result = (char_sum % 26) + 65\n    return chr(char_result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n    char_sum %= 26\n    char = chr(char_sum + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for i in range(len(strr)):\n        char_value += ord(strr[i])\n    return chr((char_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize the character variable\n    char = \"\"\n\n    # Loop through each character of the string\n    for i in strr:\n        # Add the ASCII value of the character to the character variable\n        char += chr(ord(i) + 1)\n\n    # Return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with the first two numbers\n    sequence = [1, 1]\n\n    # Find the nth number in the sequence using the formula\n    for i in range(2, n + 1):\n        # Create a new sequence by combining the previous two\n        new_sequence = [sequence[-1] + sequence[-2], sequence[-1] - sequence[-2]]\n        # Add the new sequence to the previous sequence\n        sequence.append(new_sequence[1])\n        # Check if the nth number is reached\n        if sequence[-1] == n:\n            # Return the nth number from the sequence\n            return sequence[-1]\n\n    # If the nth number is not reached, raise a ValueError\n    raise ValueError(\"The nth number is not found in the sequence.\")"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nprint(sequence(5)) # Output: 28"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] * 3)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    sequence = [1]\n    while len(sequence) < n:\n        next_number = 4 * sequence[-1] - sequence[-2] + i\n        sequence.append(next_number)\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n): \n        print(a, end=' ') \n        a, b = b, a + b "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445]\n    if n >= len(sequence):\n        return \"Invalid input. n must be less than or equal to {}.\".format(len(sequence))\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with the first two numbers\n    seq = [1, 1]\n\n    # loop through the sequence to generate the next number\n    for i in range(2, n + 1):\n        # determine the next number in the sequence\n        if i % 2 == 0:\n            seq.append(seq[i - 1] + seq[i - 2])\n        else:\n            seq.append(seq[i - 1] - seq[i - 2])\n\n    # return the nth number in the sequence\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 0\n    elif n % 2 == 0:\n        return sequence(n/2) + sequence(n/2)\n    else:\n        return sequence(n/2) + sequence(n/2) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using Heron's formula\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the surface area of a sphere\n    area = 4 * math.pi * r * r\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere with radius r.\n    '''\n    # Using the formula for the surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(num):\n        return (num + 1) * ((num * (3 * num - 1)) // 2)\n\n    centered_num = centered_hexagonal(n)\n    return centered_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the center and radius of the hexagon\n    center = 1\n    radius = 1\n\n    # Calculate the number of times the radius needs to be increased\n    times = int((n - 1) // 2)\n\n    # Iterate over the number of times radius needs to be increased\n    for i in range(times):\n        # Calculate the radius of the next hexagon\n        radius *= 3\n\n        # Move the center of the next hexagon\n        center += radius - 1\n\n    # Return the centered hexagonal number\n    return center"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Convert n to a floating point number and round it to the nearest integer\n    n = round(float(n))\n\n    # Initialize variables to calculate centered hexagonal number\n    num = 1\n    den = 1\n\n    # Calculate the centered hexagonal number using the formula:\n    # numerator = 2n + 1\n    # denominator = 6n^2 + 3n - 1\n    # centered_hexagonal = numerator / denominator\n    while num < n:\n        num += 2 * n + 1\n        den += 6 * n**2 + 3 * n - 1\n\n    # Return the centered hexagonal number\n    return num / den"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    return ((n - 1) * (n + 1) + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        a = (2 * a ** 2) - 1\n        b = (2 * b ** 2) - 3\n    return a // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_numbers = [1]\n    for i in range(1, n+1):\n        hex_numbers.append(3*hex_numbers[-1] - 1)\n    return hex_numbers[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 16\n    f = 32\n    hexagonal_number = 0\n\n    # Calculate the centered hexagonal number using recursion\n    for i in range(n):\n        hexagonal_number += a\n        a, b, c = b, c, d\n        d, e, f = e, f, hexagonal_number\n\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 1\n\n    # Find the nth centered hexagonal number\n    for i in range(1, n+1):\n        print(a)\n        temp = a + b\n        a = b\n        b = c\n        c = temp"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return n * (n + 1) * ((2 * n) + 1) // 6"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1.keys():\n        result[key] = dict1[key]\n    for key in dict2.keys():\n        result[key] = dict2[key]\n    for key in dict3.keys():\n        result[key] = dict3[key]\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    # Iterate over the keys of the first dictionary\n    for key in dict1:\n        # Check if the key exists in the merged dictionary\n        if key in merged_dict:\n            # If it does, add the values from the second and third dictionaries\n            merged_dict[key].update(dict2[key])\n            merged_dict[key].update(dict3[key])\n        else:\n            # If it doesn't, add the key and values from the second and third dictionaries\n            merged_dict[key] = dict2[key].copy()\n            merged_dict[key].update(dict3[key])\n            \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new dictionary to store merged dictionaries\n    merged_dict = {}\n    # iterate through dictionaries and merge their values\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # return merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    smaller = float('inf')\n    for num in range(1, N):\n        if num < smaller:\n            smaller = num\n    return smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # initialize variables\n    closest_num = N\n    smallest_num = N\n    \n    # iterate through the numbers from 1 to N\n    for i in range(1, N+1):\n        # if the current number is smaller than the closest smaller number, update the closest smaller number\n        if i < smallest_num:\n            closest_num = i\n            smallest_num = i\n        # if the current number is between the closest smaller and closest larger number, update the closest smaller number\n        elif i > closest_num:\n            closest_num = i\n            \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    smallest = n\n    \n    for i in range(1, N+1):\n        if i <= smallest:\n            smallest = i\n    \n    print(\"The closest smaller number is:\", smallest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(N // 2)\n    else:\n        return closest_num((N - 1) // 2) + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    result = 0\n    \n    for i in range(1, N+1):\n        if i < N and abs(i - N) < min_diff:\n            min_diff = abs(i - N)\n            result = i\n    \n    return result"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    # Initialize the smallest and largest numbers to be found so far\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # Loop through each number from 1 to N\n    for num in range(1, N+1):\n        # If the current number is smaller than the smallest number, update smallest\n        if num < smallest:\n            smallest = num\n        \n        # If the current number is larger than the largest number, update largest\n        if num > largest:\n            largest = num\n    \n    # Find the smallest difference between smallest and largest\n    diff = largest - smallest\n    \n    # Return the smallest number that is smaller than N\n    return smallest - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower = 1\n    upper = N\n    diff = float('inf')\n    while lower <= upper:\n        mid = (lower + upper) // 2\n        if mid * mid < N * N:\n            diff = abs(mid * mid - N * N)\n            lower = mid + 1\n        else:\n            upper = mid - 1\n    return diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # create a list of integers from 1 to N\n    nums = [i for i in range(1, N+1)]\n\n    # find the difference between the smallest and largest numbers in the list\n    diff = max(nums) - min(nums)\n\n    # initialize the closest number to the smallest number in the list\n    closest = min(nums)\n\n    # loop through the list of integers, comparing each number to the closest number\n    for num in nums:\n        if abs(num - closest) < abs(num - N):\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    closest = N\n\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n            closest = smallest\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = abs(N - N//2)\n    if N % 2 == 0:\n        return N//2 + diff\n    else:\n        return (N//2 + 1) + diff"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize variable to store the length of the longest word\n    longest_word_length = 0\n    \n    # Loop through the list and find the length of the longest word\n    for word in list1:\n        word_length = len(word)\n        if word_length > longest_word_length:\n            longest_word_length = word_length\n    \n    # Return the length of the longest word\n    return longest_word_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize variables\n    longest_word = \"\"\n    current_word = \"\"\n\n    # loop through the list of words\n    for word in list1:\n\n        # check if the current word is longer than the longest word\n        if len(word) > len(longest_word):\n\n            # update the longest word with the current word\n            longest_word = word\n\n    # return the length of the longest word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variable to store longest word length\n    longest = 0\n    # Loop through the list of words\n    for word in list1:\n        # Check if the current word is longer than the current longest word\n        if len(word) > longest:\n            # Update the longest word length to be the length of the current word\n            longest = len(word)\n    # Return the length of the longest word found\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(lst):\n    if not lst:  # base case\n        return 0\n    elif isinstance(lst[0], str):  # recursive case\n        return max(len(word) for word in lst) + len_log(lst[1:])\n    else:  # non-string element in list\n        return len_log(lst[1:])"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #initialize a variable to hold the longest word length\n    max_length = 0\n    #iterate through each word in the list\n    for word in list1:\n        #convert the word to lowercase and split it into individual characters\n        word = word.lower()\n        word_list = list(word)\n        #initialize a variable to hold the current word length\n        current_length = 0\n        #iterate through each character in the word and add it to the length\n        for char in word_list:\n            current_length += 1\n        #update the max length if the current word length is greater\n        if current_length > max_length:\n            max_length = current_length\n    #return the maximum length of the word in the list\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if isinstance(item, str) and sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1)!= str or type(sub_str)!= str:\n        raise TypeError(\"Both arguments must be strings\")\n    if sub_str not in str1:\n        return False\n    return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}.\")\n    else:\n        print(f\"{sub_str} is not present in {str1}.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        print(\"Input should be a list\")\n        return\n    if type(sub_str)!= str:\n        print(\"Second input should be a string\")\n        return\n    for item in str1:\n        if sub_str in item:\n            print(item)\n    return"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of strings to a set to remove duplicates\n    str1_set = set(str1)\n    # Loop through the list of strings and check if the substring is present\n    for s in str1_set:\n        if s.find(sub_str)!= -1:\n            return True\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= type(sub_str):\n        return False\n\n    if sub_str not in str1:\n        return False\n    \n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function will check whether a given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Initialize variables\n    even_sum = 0\n    odd_sum = 0\n\n    # Loop through the digits of the number\n    for digit in str(n):\n        # Check if the digit is even or odd\n        if int(digit) % 2 == 0:\n            # If it's even, add it to the even sum\n            even_sum += int(digit)\n        else:\n            # If it's odd, add it to the odd sum\n            odd_sum += int(digit)\n\n    # Check if the sum is greater than the original number\n    if even_sum > n or odd_sum > n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0 and n < 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Not undulating\"\n    else:\n        return \"Undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # if the number is odd, it is not undulating\n    if n % 2 == 1:\n        return False\n    # if the number is even, it is undulating\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'The number is even and undulating'\n    else:\n        return 'The number is odd and not undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # If it is even, then it is not undulating\n        return False\n    else:\n        # If it is odd, then it is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is odd or even\n    if n % 2 == 0:\n        print(f\"{n} is not undulating.\")\n    else:\n        print(f\"{n} is undulating.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_prime(num):\n        '''\n        Write a helper function to check whether a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n) and n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    smallest = float('inf')\n    for i, x in enumerate(test_list):\n        if x[1] < smallest:\n            smallest = x[1]\n            index = i\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = test_list[i]\n    return minimum"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list in ascending order of second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to select the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for index, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = index\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list in ascending order based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the first tuple (since tuples are immutable)\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length as positive infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list of lists.\n    '''\n\n    # Initialize a variable to store the length of the smallest list\n    smallest_length = float('inf')\n\n    # Loop through each list in the input list of lists\n    for i in range(len(lst)):\n        # Check if the length of the current list is less than the current smallest length\n        if len(lst[i]) < smallest_length:\n            # If the length of the current list is less than the current smallest length, update the smallest length\n            smallest_length = len(lst[i])\n\n    # Return the smallest length found\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    This function takes in a list of lists and finds the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for sublist in lst:\n        min_length = min(min_length, len(sublist))\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    if len(lst) == 0:\n        return 0\n\n    if len(lst) == 1:\n        return len(lst[0])\n\n    if len(lst[0]) < len(lst[1]):\n        return Find_Min_Length(lst[0:]) + 1\n    else:\n        return Find_Min_Length(lst[1:]) + 1"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # loop through each list in the list of lists\n    for sub_list in lst:\n\n        # initialize a variable to keep track of the smallest length found so far\n        min_length = len(sub_list)\n\n        # loop through each element in the sub_list\n        for element in sub_list:\n\n            # check if the current element is shorter than the current smallest length\n            if len(str(element)) < min_length:\n                min_length = len(str(element))\n\n        # return the smallest length found so far\n        return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of \n    divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function finds the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    i = 1\n    \n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list of lists\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq_dict[element] = 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency\n    freq = {}\n\n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function on the list\n        if isinstance(element, list):\n            # if the element is a list of lists, flatten it and call the function on the flattened list\n            if all(isinstance(item, list) for item in element):\n                # flatten the list of lists\n                flattened = [item for sublist in element for item in sublist]\n                # call the function recursively on the flattened list\n                frequency_lists(flattened)\n            else:\n                # if the element is a list of non-lists, add it to the frequency dictionary as a value with a frequency of 1\n                if element not in freq:\n                    freq[element] = 1\n                else:\n                    freq[element] += 1\n        # if the element is not a list, add it to the frequency dictionary as a value with a frequency of 1\n        else:\n            if element not in freq:\n                freq[element] = 1\n            else:\n                freq[element] += 1\n\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Creating an empty dictionary to store the frequency of each element\n    frequency_dict = {}\n\n    # Using a for loop to iterate over each element in the flattened list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        # If the element is not in the dictionary, add it to the dictionary with count 1\n        else:\n            frequency_dict[element] = 1\n\n    # Returning the dictionary of frequency of each element in the flattened list\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    # Loop through each element in the list and update the frequency in the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # Return the dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n    # Iterate through the flattened list and count frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for item in list1:\n        # If the item is not already in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # Otherwise, increment the frequency of the item in the dictionary by 1\n        else:\n            freq_dict[item] += 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # divide by the length of the list\n    result /= len(numbers)\n\n    # return the result\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store binary equivalent\n    binary = \"\"\n    # initialize a variable to keep track of the remainder of n/2\n    half = n // 2\n    # loop until half becomes 0\n    while half > 0:\n        # get the last digit of n\n        last_digit = n % 2\n        # convert last_digit to binary and append it to binary\n        binary = str(last_digit) + binary\n        # divide n by 2 and get the new value of n\n        n = half\n        half = n // 2\n    # append the last digit of n to binary\n    binary = str(n) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using a loop\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    # Remove leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # create an empty string to store the binary equivalent\n    binary = ''\n\n    # iterate over the digits of the decimal number\n    for digit in str(n):\n\n        # add the corresponding binary digit to the string\n        if digit == '0':\n            binary += '000'\n        elif digit == '1':\n            binary += '001'\n        elif digit == '2':\n            binary += '010'\n        elif digit == '3':\n            binary += '011'\n        elif digit == '4':\n            binary += '100'\n        elif digit == '5':\n            binary += '101'\n        elif digit == '6':\n            binary += '110'\n        elif digit == '7':\n            binary += '111'\n\n    # return the binary string without leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n\n    # loop through the digits of the decimal number in reverse order\n    for digit in str(n)[::-1]:\n        # convert each digit to its binary equivalent and add it to the binary string\n        binary += str(bin(int(digit))[2:].zfill(8))\n\n    # return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty list to store the binary digits\n    binary = []\n\n    # While n is greater than zero, append the remainder of n divided by 2 to binary\n    while n > 0:\n        binary.append(n % 2)\n        n //= 2\n\n    # Reverse the binary list to get the digits in the correct order\n    binary.reverse()\n\n    # Join the binary digits into a string and return it\n    return ''.join(map(str, binary))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # convert decimal to binary using bitwise operations\n    binary = \"\"\n    while n > 0:\n        binary = str(n & 1) + binary\n        n >>= 1\n    # remove leading zeros from binary\n    while binary.startswith(\"0\"):\n        binary = binary[1:]\n    # convert binary to string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary_representation = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n    return binary_representation"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    if not is_prime(num):\n        return None\n\n    if num < 10:\n        return 10\n\n    for i in range(10, 1, -1):\n        if is_palindrome(num - i) and is_prime(i):\n            return num - i\n\n    return None\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n\n    result = next_smallest_palindrome(num)\n    if result is not None:\n        print(f\"Next smallest palindrome of {num} is {result}\")\n    else:\n        print(f\"There is no next smallest palindrome of {num}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize a variable to store the next smallest palindrome\n    next_palindrome = num + 1\n\n    # Initialize a variable to store the length of the palindrome\n    length = 1\n\n    # Iterate through each digit of the palindrome\n    while next_palindrome // 10 > 0:\n        # Check if the current digit of the palindrome is odd or even\n        if next_palindrome % 10 % 2 == 0:\n            # If it's even, increment the palindrome by 1\n            next_palindrome += 1\n            length += 1\n        else:\n            # If it's odd, decrement the palindrome by 1\n            next_palindrome -= 1\n\n        # Check if the length of the palindrome is greater than the length of the next smallest palindrome found so far\n        if length > len(str(next_palindrome)):\n            break\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Loop through all possible palindromes of the form n*k+d for d from 0 to 9\n    for d in range(10):\n        # Check if n*k+d is a palindrome\n        s = str(num*10+d)\n        if s == s[::-1]:\n            # If so, return n*k+d\n            return num*10+d\n    # If no palindrome is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Reverse the string and reverse the reversed string\n    rev_num_str = num_str[::-1]\n    rev_rev_num_str = rev_num_str[::-1]\n\n    # Compare the two strings\n    if num_str < rev_num_str:\n        return int(rev_rev_num_str)\n    else:\n        return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input is a positive integer\n    if not isinstance(num, int) or num < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        sys.exit()\n\n    # initialize variables\n    palindrome = num\n    is_palindrome = True\n    next_palindrome = 0\n\n    # check if the number is already a palindrome\n    while is_palindrome:\n        next_palindrome = palindrome * 10 + 10\n        is_palindrome = True if str(palindrome) == str(next_palindrome)[::-1] else False\n        palindrome = next_palindrome\n\n    # return the next smallest palindrome\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n <= 9:\n        return n * 10\n    for i in range(10, 100):\n        if is_palindrome(n * 10 + i):\n            return n * 10 + i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    def is_palindrome(n):\n        \"\"\"Return True if n is a palindrome\"\"\"\n        return str(n) == str(n)[::-1]\n\n    # check if num is a palindrome\n    if is_palindrome(num):\n        return num + 1\n    else:\n        # check if num is odd\n        if num % 2 == 1:\n            # if num is odd, find the next smallest even number\n            while True:\n                num += 1\n                if num % 2 == 0:\n                    return num\n        # if num is even, find the next smallest odd number\n        else:\n            while True:\n                num += 1\n                if num % 2 == 1:\n                    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Convert the string to a list of integers\n    num_list = [int(char) for char in num_str]\n    # Reverse the list\n    num_list.reverse()\n    # Convert the list back to a string\n    num_str = ''.join(map(str, num_list))\n    # Convert the string back to an integer\n    next_num = int(num_str)\n    # Check if the next number is a palindrome\n    while str(next_num)!= str(next_num)[::-1]:\n        next_num += 1\n    # Return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Find the length of the string\n    length = len(num_str)\n    # Iterate through all possible palindromes of the same length as the given integer\n    for i in range(length):\n        # Find the corresponding integer for the palindrome\n        palindrome = int(num_str[i:i+length])\n        # Check if the palindrome is greater than the given integer\n        if palindrome > num:\n            # Return the palindrome\n            return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    # Generate all palindromes up to num\n    palindromes = [x for x in range(10**num, -10**num-1, -1)]\n\n    # Find the smallest palindrome in the generated list\n    smallest_palindrome = min(palindromes)\n\n    # Find the smallest palindrome that is greater than the smallest palindrome we found\n    next_smallest_palindrome = 10**(num-1) + 1\n\n    while True:\n        if next_smallest_palindrome not in palindromes:\n            return next_smallest_palindrome\n        next_smallest_palindrome += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is less than or equal to 1\n    if len(arr) <= 1:\n        return None\n    \n    # Find the middle index of the array\n    mid = len(arr) // 2\n    \n    # If k is less than or equal to the middle index, recursively call the function on the left half of the array\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n    \n    # If k is greater than the middle index, recursively call the function on the right half of the array\n    return kth_element(arr[mid:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif len(arr) == k:\n        return arr[k-1]\n    else:\n        pivot = partition(arr, 0, len(arr)-1)\n        if k == pivot+1:\n            return arr[k-1]\n        elif k < pivot+1:\n            return kth_element(arr[:pivot], k)\n        else:\n            return kth_element(arr[pivot+1:], k-pivot-1)\n\ndef partition(arr, low, high):\n    pivot = arr[low]\n    i = low+1\n    j = high\n    while True:\n        while i <= j and arr[i] <= pivot:\n            i = i+1\n        while i <= j and arr[j] >= pivot:\n            j = j-1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n        else:\n            break\n    arr[low], arr[j] = arr[j], arr[low]\n    return j"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid == k - 1:\n                return arr[mid - 1]\n            elif mid < k - 1:\n                low = mid + 1\n            else:\n                high = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the number of elements in the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k:\n                return arr[mid-1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    if k == 1:\n        return arr[0]\n    elif k == len(arr):\n        return arr[-1]\n    else:\n        mid = len(arr) // 2\n        if k < mid:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and word[i-1] == '_':\n            camel_case += char.upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back together with underscores\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            if i > 0 and word[i-1].islower():\n                result += '_'\n            result += word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all the underscores to spaces\n    word = word.replace(\"_\", \" \")\n\n    # Split the word into words based on spaces\n    words = word.split()\n\n    # Capitalize the first letter of each word\n    result = []\n    for word in words:\n        if len(word) > 1:\n            result.append(word[0].upper() + word[1:])\n        else:\n            result.append(word)\n\n    # Join the words back into a string\n    result = \" \".join(result)\n\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # split the word into parts using underscore as separator\n    parts = word.split('_')\n    # capitalize the first letter of each part and join them using an underscore\n    return ''.join([part.capitalize() for part in parts])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into its components\n    components = word.split('_')\n    \n    # Convert each component to camel case\n    result = []\n    for component in components:\n        # If the component is capitalized, convert to lowercase\n        if component[0].isupper():\n            result.append(component.lower())\n        else:\n            result.append(component)\n    \n    # Join the components back into a single string\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n        word: A string in snake case format.\n\n    Returns:\n        A string in camel case format.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case_words = []\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_words.append(words[i].lower())\n        else:\n            camel_case_words.append(words[i].capitalize())\n    return \"\".join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to camel case\n    camel_word = words[0].lower()\n    # Loop through the rest of the words and convert them to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    return ''.join(p.capitalize() for p in parts)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of rows and columns in the matrix\n    rows = n\n    cols = m\n\n    # Initialize a 2D array to store the Eulerian numbers\n    a = [[0 for i in range(cols)] for j in range(rows)]\n\n    # Calculate the Eulerian numbers using a 2D loop\n    for i in range(rows):\n        for j in range(cols):\n            # If the number at (i, j) is 0, then a(i, j) is 1\n            if a[i][j] == 0:\n                a[i][j] = 1\n                # If the number at (i, j) is 1, then find its neighbouring 0s and flip them to 1\n                else:\n                    # Check for the neighbours on the top row\n                    if i > 0:\n                        if a[i-1][j] == 0:\n                            a[i-1][j] = 1\n                    # Check for the neighbours on the left column\n                    if j > 0:\n                        if a[i][j-1] == 0:\n                            a[i][j-1] = 1\n                    # Check for the neighbours on the right column\n                    if j < cols-1:\n                        if a[i][j+1] == 0:\n                            a[i][j+1] = 1\n                    # Check for the neighbours on the bottom row\n                    if i < rows-1:\n                        if a[i+1][j] == 0:\n                            a[i+1][j] = 1\n\n    # Return the final Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix with zeros\n    matrix = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the matrix with numbers\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i % 2 == 0 and j % 2 == 0:\n                matrix[i][j] = 1\n            elif i % 2 == 1 and j % 2 == 0:\n                matrix[i][j] = 1\n            elif i % 2 == 0 and j % 2 == 1:\n                matrix[i][j] = 1\n            elif i % 2 == 1 and j % 2 == 1:\n                matrix[i][j] = 1\n\n    # Calculate the Eulerian number a(n, m)\n    a = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if matrix[i][j] == 1:\n                a += 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    E = (n-1) * m\n    N = (n * (n-1)) // 2\n    D = n * (n-1) * m\n    S = (n * (n-1) * m) // 2\n    P = E * (D - S)\n    a = P / N\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n        a //= m\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the sum of the first and second terms\n    sum_first_term = n * m\n\n    # Initialize the sum of the even terms\n    sum_even_terms = 0\n\n    # Initialize the sum of the odd terms\n    sum_odd_terms = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is even, add it to the sum of even terms\n        if i % 2 == 0:\n            sum_even_terms += i**m\n        \n        # If the number is odd, add it to the sum of odd terms\n        else:\n            sum_odd_terms += i**m\n\n    # Return the sum of the first and second terms and the sum of the even and odd terms\n    return sum_first_term + sum_even_terms + sum_odd_terms"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a = a * (m-i+1) // i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    a = 0\n    for i in range(1, n+1):\n        a += ((m*i - (n-i+1)*(i-1))//(i-1))\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the matrix of Eulerian numbers\n    euler = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Set the diagonal elements to 1\n    for i in range(1, m + 1):\n        euler[i][i] = 1\n    \n    # Fill the rest of the matrix\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j % 2 == 0:\n                euler[i][j] = euler[i - 1][j] + euler[i][j - 1]\n            else:\n                euler[i][j] = euler[i - 1][j - 1]\n    \n    # Return the final element of the matrix\n    return euler[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \n    Parameters:\n    - n: int, size of the graph (number of vertices)\n    - m: int, number of edges\n    \n    Returns:\n    - a: int, Eulerian number\n    \n    Examples:\n    >>> eulerian_num(5, 3)\n    4\n    \"\"\"\n\n    # Initialize the adjacency list\n    adj_list = [[0] * m for i in range(n)]\n\n    # Generate the adjacency list\n    for i in range(m):\n        u, v = map(int, input().split())\n        adj_list[u][v - 1] = 1\n        adj_list[v - 1][u] = 1\n\n    # Initialize the degree sequence and the indegrees\n    degree_sequence = [0] * n\n    indegrees = [0] * n\n\n    # Compute the degree sequence and indegrees\n    for i in range(n):\n        for j in range(m):\n            if adj_list[i][j]:\n                degree_sequence[i] += 1\n                indegrees[i] += 1\n\n    # Find the first node with zero degree\n    for i in range(n):\n        if degree_sequence[i] == 0:\n            first_node = i\n            break\n\n    # Compute the Eulerian number\n    a = first_node * (m - 1)\n\n    # Compute the remaining Eulerian numbers\n    for i in range(m):\n        a += (n - 1) * degree_sequence[first_node] * (m - i)\n\n    # Compute the final Eulerian number\n    for i in range(n):\n        if indegrees[i] > 0:\n            a += i * (m - indegrees[i])\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the sum of the first n terms of the Fibonacci sequence\n    a_sum = (5 * (n * (n + 1)) ** 2) // 4\n    \n    # Calculate the number of Fibonacci terms needed to reach a(n, m)\n    m_sum = ((n + 1) * (2 * m - 1) * n) // 6\n    \n    # Calculate the difference between the two sums\n    diff = a_sum - m_sum\n    \n    # Return the Eulerian number a(n, m)\n    return diff"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += int(i)\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) is bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the end of the tuple\n    test_tup = test_tup + tuple(test_list)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_list_tuple = tuple(test_list)\n    \n    # Append the list to the tuple\n    test_tup_list = list(test_tup) + test_list_tuple\n    \n    # Convert the updated list back to a tuple\n    test_tup_list_tuple = tuple(test_tup_list)\n    \n    # Return the updated tuple\n    return test_tup_list_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple using the + operator\n    new_tup = (test_tup + test_list)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists using the + operator\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all lists into one\n    all_nums = num1 + num2 + num3\n    \n    # Create a min-heap to keep track of the smallest element\n    min_heap = []\n    \n    # Iterate through the combined list and add each element to the min-heap\n    for num in all_nums:\n        heapq.heappush(min_heap, num)\n    \n    # Create a new list to hold the sorted elements from the min-heap\n    sorted_nums = []\n    \n    # Iterate through the min-heap and add each element to the sorted_nums list\n    while min_heap:\n        sorted_nums.append(heapq.heappop(min_heap))\n    \n    return sorted_nums"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate all the lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # sort the merged list using heapq module\n    heapq.heapify(merged_list)\n    \n    # convert the heap back to a list\n    sorted_list = heapq.heappop(merged_list)\n    while merged_list:\n        sorted_list = heapq.heappush(sorted_list, heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): The first sorted list.\n    num2 (list): The second sorted list.\n    num3 (list): The third sorted list.\n\n    Returns:\n    list: A single sorted list containing all the elements of num1, num2, and num3.\n    \"\"\"\n    # Combine the three lists into a single list\n    all_nums = num1 + num2 + num3\n\n    # Use heapq to sort the list\n    sorted_list = []\n    while all_nums:\n        num = heapq.heappop(all_nums)\n        heapq.heappush(sorted_list, num)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge two lists into a single sorted list\n    merged_list = merge_lists(num1, num2)\n    \n    # merge the merged list with the third list\n    merged_list = merge_lists(merged_list, num3)\n    \n    # return the merged list\n    return merged_list\n\ndef merge_lists(list1, list2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    # initialize a min heap to store the elements of the second list\n    min_heap = []\n    for element in list2:\n        heapq.heappush(min_heap, element)\n    \n    # initialize a list to store the merged elements\n    merged_list = []\n    \n    # merge the first list with the elements in the min heap\n    for element in list1:\n        if element == heapq.heappop(min_heap):\n            merged_list.append(element)\n    \n    # if there are still elements in the min heap, they must be in the second list\n    for element in min_heap:\n        merged_list.append(element)\n    \n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one\n    combined_list = num1 + num2 + num3\n\n    # Use a min heap to sort the combined list\n    min_heap = []\n    heapq.heapify(min_heap)\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n\n    # Create an empty list to store the sorted merged list\n    sorted_list = []\n\n    # Pop the minimum elements from the heap and add them to the sorted list\n    while len(min_heap) > 0:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = [num1, num2, num3]\n    merged_list = []\n    while len(heap) > 1:\n        if heapq.heappop(heap) < heapq.heappop(heap):\n            heapq.heappush(heap, heapq.heappop(heap))\n        else:\n            heapq.heappush(heap, heapq.heappop(heap))\n    merged_list.append(heap[0])\n    merged_list.append(heapq.heappop(heap))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    # Create a min heap of size 3 and initialize it with the three input lists\n    min_heap = [num1[0], num2[0], num3[0]]\n\n    # Initialize pointers for each list to traverse through it\n    i, j, k = 0, 0, 0\n\n    # Traverse through the three lists and add the smallest element to the min heap\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            heapq.heappush(min_heap, num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            heapq.heappush(min_heap, num2[j])\n            j += 1\n        else:\n            heapq.heappush(min_heap, num3[k])\n            k += 1\n\n    # Add the remaining elements of the three lists to the min heap\n    while i < len(num1):\n        heapq.heappush(min_heap, num1[i])\n        i += 1\n    while j < len(num2):\n        heapq.heappush(min_heap, num2[j])\n        j += 1\n    while k < len(num3):\n        heapq.heappush(min_heap, num3[k])\n        k += 1\n\n    # Convert the min heap to a single sorted list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge three lists into a single sorted list\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the two smallest lists\n    merged_list = sorted(num1 + num2)\n\n    # Merge the three remaining lists\n    for num in num3:\n        heapq.heappush(merged_list, num)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n    sorted_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            sorted_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) <= heapq.heappop(num3):\n            sorted_list.append(heapq.heappop(num2))\n        else:\n            sorted_list.append(heapq.heappop(num3))\n\n    while len(num1) > 0:\n        sorted_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        sorted_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        sorted_list.append(heapq.heappop(num3))\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    nums = [int(bit) for bit in s]\n\n    # Rotate the list of integers n times\n    for i in range(n):\n        nums.append(nums.pop(0))\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize a list to store the odd numbers\n    odd_nums = []\n\n    # Loop through the binary string s and check if each number is odd or even\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            odd_nums.append(int(s[i]))\n\n    # Rotate the odd_nums list the given number of times\n    odd_nums = odd_nums[::-1]\n    for _ in range(n):\n        odd_nums = odd_nums[1:] + odd_nums[:1]\n\n    # Count the number of odd numbers in the rotated list\n    count = len(odd_nums)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    # Count the number of odd numbers in the binary string s after rotating it n times. \n    count = 0\n    for i in range(n): \n        s = s[::-1] # reverse the binary string \n        for j in range(len(s)): \n            if int(s[j]) % 2!= 0: \n                count += 1\n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1] # rotate the binary string by n-1 times\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0: # check if the current digit is odd\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = s.replace(\" \", \"\")  # remove spaces and convert to binary string\n    binary_string = binary_string.zfill(len(binary_string))  # make string of length equal to max(binary string length)\n    rotated_binary_string = \"\"\n    for _ in range(n):\n        rotated_binary_string += binary_string[-1] + binary_string[:-1]\n    return rotated_binary_string.count(\"1\")"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize a variable to store the count of odd numbers in the binary string\n    count = 0\n    \n    # Initialize a variable to store the binary string with the given number of rotations\n    binary_string = s\n    \n    # Loop through each rotation of the binary string\n    for i in range(n):\n        # Convert the binary string into a list of binary digits\n        binary_list = [int(d) for d in binary_string]\n        \n        # Count the number of odd numbers in the binary list\n        odd_count = sum([1 for d in binary_list if d % 2 == 1])\n        \n        # Add the odd count to the total count\n        count += odd_count\n        \n        # Rotate the binary list\n        binary_list.rotate(1)\n        \n        # Convert the rotated binary list back into a binary string\n        binary_string = ''.join([str(d) for d in binary_list])\n    \n    # Return the total count of odd numbers after the rotations\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize a variable to keep track of the current odd value\n    curr_odd = 1\n\n    # Convert the binary string into a list of digits\n    binary_list = [int(x) for x in list(s)]\n\n    # Loop through each digit in the list\n    for digit in binary_list:\n\n        # Check if the current digit is odd\n        if digit % 2!= 0:\n\n            # If the current digit is odd, add it to the count\n            count += 1\n\n        # Rotate the binary string n times\n        for i in range(n-1):\n            binary_list.append(0)\n\n        # Remove the last digit from the binary string\n        del binary_list[-1]\n\n    # Return the count of odd values after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s[::-1]\n    count = 0\n    for i in range(n):\n        s = ''.join(sorted(s, reverse=True))\n    for i in range(n):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the given binary string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    # Check if the binary string is odd\n    def is_odd(s):\n        return sum(int(digit) for digit in s) % 2 == 1\n\n    # Find the total number of odd digits in the binary string\n    def count_odd_digits(s):\n        return sum(int(digit) for digit in s if int(digit) % 2 == 1)\n\n    # Rotate the binary string by n times\n    def rotate(s, n):\n        if n == 0:\n            return s\n        elif n % len(s) == 0:\n            return s[n:] + s[:n]\n        else:\n            return s[-n:] + s[:-n]\n\n    # Main function to count the number of odd digits after rotating the binary string n times\n    def count_odd_after_rotation(s, n):\n        if is_palindrome(s):\n            if is_odd(s):\n                return count_odd_digits(s)\n            else:\n                return 0\n        else:\n            s = rotate(s, n)\n            if is_odd(s):\n                return count_odd_digits(s)\n            else:\n                return count_odd_after_rotation(s, n) + count_odd_digits(s)\n\n    # Main function call to test the function\n    print(\"Number of odd digits after rotating the binary string by\", n, \"times:\", count_odd_after_rotation(s, n))"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        s = s[::-1] + s\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            result += 1\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        common.extend(set(lst).intersection(set(common)))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements |= set(sublist)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for lst in nestedlist:\n        for item in lst:\n            common_elements.add(item)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty list to store common elements\n    common_elements = []\n    # loop through each element in the outer list\n    for outer in nestedlist:\n        # loop through each element in the inner list\n        for inner in outer:\n            # check if the inner element is in the outer list\n            if inner in outer:\n                # if it is, add it to the common_elements list\n                common_elements.append(inner)\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in seen:\n                seen.add(item)\n    return seen"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common_elements:\n                common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty list to store the common elements\n    common = []\n    # loop through each nested list\n    for lst in nestedlist:\n        # loop through each element in the nested list\n        for item in lst:\n            # check if the item is already in the common list\n            if item not in common:\n                # if not, add it to the list of common elements\n                common.append(item)\n    # return the list of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Loop through each sub-list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sub-list\n        for element in sublist:\n            # Check if the element is already in the common list\n            if element in common:\n                # If it is, skip to the next iteration of the loop\n                continue\n            # If the element is not in the common list, add it to the list\n            else:\n                common.append(element)\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common_elements = nestedlist[0]\n    for i in range(1, len(nestedlist)):\n        common_elements = list(set(common_elements) & set(nestedlist[i]))\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(text)\n    # Initialize variables to keep track of the number of digits and the sign of the number\n    digits = 0\n    sign = True\n    # Loop through the list of characters and update the variables accordingly\n    for char in chars:\n        if char.isdigit():\n            digits += 1\n            if digits > 1 and sign:\n                return False\n        elif char == '-':\n            sign = False\n        else:\n            return False\n    # If we reach here, the string represents an integer\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the string only contains digits\n    if text.isdigit():\n        # Convert the string to integer and return True\n        return int(text)\n    else:\n        # Return False if the string does not contain only digits\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    if not list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not all(isinstance(d, dict) and not d for d in list1):\n        return False\n    else:\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Check if all elements in the list are dictionaries\n    if not all(isinstance(x, dict) for x in list1):\n        raise TypeError('All elements in the list must be dictionaries.')\n\n    # Check if all dictionaries in the list are empty\n    for x in list1:\n        if not x:\n            return True\n\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Check if the list contains only dictionaries\n    if not all(isinstance(x, dict) for x in list1):\n        return \"The list contains non-dictionary elements.\"\n\n    # Check if all the dictionaries in the list are empty\n    for d in list1:\n        if d:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the numbers in the tuple\n    total = 0\n    \n    # Iterate through each number in the tuple\n    for num in nums:\n        # Add the number to the total\n        total += num\n        \n    # Return the total sum as the result\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate over the list of numbers and add them to the result\n    for num in nums_list:\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate over the list of integers\n    for num in nums_list:\n        # Add the integer to the result\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of positive integers into a list\n    nums_list = list(nums)\n    # Initialize a variable to store the final sum\n    final_sum = 0\n    # Iterate through the list of integers\n    for num in nums_list:\n        # Add each integer to the final sum\n        final_sum += num\n    # Return the final sum\n    return final_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                new_item = float(item)\n                new_list.append(new_item)\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, val in enumerate(row):\n            if isinstance(val, str) or isinstance(val, bool):\n                try:\n                    test_list[i][j] = float(val)\n                except ValueError:\n                    continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                sublist.remove(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float, bool)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist[test_list.index(sublist)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and store the result in a list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if i+1 == len(arr) or arr[i]!= arr[i+1]:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of elements in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once in the array\n    only_once = None\n    for num, freq in freq.items():\n        if freq == 1:\n            only_once = num\n            break\n    \n    return only_once"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return \"Array is empty\"\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize two pointers - one at the start of the array and one at the end\n        left = 0\n        right = n-1\n        \n        # Check if the first element of the array is the only element that appears only once\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            # Traverse the array until the second element that appears only once is found\n            while left < right:\n                mid = (left + right) // 2\n                count = 1\n                for i in range(mid, n):\n                    if arr[mid] == arr[i]:\n                        count += 1\n                        if count == 2:\n                            return arr[mid]\n                if arr[mid] < arr[left]:\n                    left = mid + 1\n                else:\n                    right = mid\n            # If the second element that appears only once is not found, return the first element that appears only once\n            return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    if count == 1:\n        return arr[0]\n    else:\n        return \"No such element\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the indices of each element in the array\n    index_dict = {}\n\n    # Loop through the array and check if the current element is already present in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in index_dict:\n            # If the element is already present in the dictionary, update the index of the first occurrence\n            index_dict[arr[i]] = i\n        else:\n            # If the element is not present in the dictionary, add it to the dictionary with its index as the value\n            index_dict[arr[i]] = i\n\n    # Loop through the array again and return the first element that appears only once\n    for i in range(len(arr)):\n        if arr[i] in index_dict and index_dict[arr[i]]!= i:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Find the element that appears only once in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Return the element that appears only once in the array\n    for key in count:\n        if count[key] == 1:\n            return key\n\n    # If no element appears only once in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is already in the count variable, decrement the count variable\n        if arr[i] == count:\n            count -= 1\n        # If the current element is not in the count variable, add the current element to the count variable\n        else:\n            count = arr[i]\n    \n    # Return the element that appears only once in the array\n    return count"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"No unique element found\"\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return arr[i]\n        return \"No unique element found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize the count and element variables\n    count = 0\n    element = None\n\n    # Loop through the array and count the occurrences of the element\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n        elif arr[i]!= element:\n            element = arr[i]\n            count = 1\n\n    # If the count is still 1, the element appears only once in the array\n    if count == 1:\n        return element\n    else:\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Step 1: Find the maximum absolute difference between adjacent elements in the list\n    max_diff = max(abs(list1[i] - list1[i+1]) for i in range(len(list1)-1))\n\n    # Step 2: Iterate through the list and find the pairs of elements that have the maximum absolute difference between them\n    max_product = float('-inf')\n    pairs = []\n    for i in range(len(list1)-1):\n        for j in range(i+2, len(list1)):\n            if abs(list1[i] - list1[j]) == max_diff:\n                pairs.append((list1[i], list1[j]))\n                max_product = max(max_product, abs(list1[i] * list1[j]))\n\n    # Step 3: Return the maximum product of the pairs found in Step 2\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') # Initialize max_product as negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_tuple = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = tuple(sorted([list1[i], list1[j]]))\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n                max_tuple = pair\n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_abs_product:\n                max_abs_product = product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if abs(product) > max_product:\n                max_product = abs(product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    \n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize maximum absolute product and minimum product variables\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Check if the maximum absolute product is greater than the current product of the current tuple\n        if abs(list1[i][0]) * abs(list1[i][1]) > max_product:\n            max_product = abs(list1[i][0]) * abs(list1[i][1])\n\n        # Check if the minimum product is less than the current product of the current tuple\n        if abs(list1[i][0]) * abs(list1[i][1]) < min_product:\n            min_product = abs(list1[i][0]) * abs(list1[i][1])\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            amicable_sum += i\n        else:\n            if i in amicable_numbers(i):\n                amicable_sum += i\n    return amicable_sum\n\ndef amicable_numbers(n):\n    '''\n    Helper function to find all amicable numbers from 1 to n.\n    '''\n    amicable = []\n    for i in range(1, n):\n        if n % i == 0 and i!= n/i:\n            if i in amicable_numbers(i):\n                amicable.append(n)\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    \"\"\"\n    Write a function to calculate the sum of all divisors of a specified number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(number):\n    \"\"\"\n    Check if a number is an amicable number.\n    \"\"\"\n    if number == 1:\n        return False\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            return False\n    return number == sum([i for i in range(1, int(number**0.5)+1) if number % i == 0])"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    # initialize the sum to zero\n    amicable_sum = 0\n\n    # loop through all numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # check if the number is amicable\n        if i == sum_of_divisors(i):\n            amicable_sum += i\n\n    return amicable_sum\n\n\ndef sum_of_divisors(n):\n    # initialize the sum to zero\n    sum_of_divisors = 0\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a divisor of n\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_pairs = {}\n    for i in range(1, limit + 1):\n        for j in range(i + 1, limit + 1):\n            if i!= j and is_amicable(i, j):\n                amicable_pairs[(i, j)] = (i, j)\n                amicable_pairs[(j, i)] = (j, i)\n    return sum(pair[0] + pair[1] for pair in amicable_pairs.values())\n\ndef is_amicable(a, b):\n    \"\"\"\n    Helper function to check if two numbers are amicable.\n    \"\"\"\n    if a == b:\n        return False\n    common_divisor = gcd(a, b)\n    if common_divisor == 1:\n        return False\n    return True\n\ndef gcd(a, b):\n    \"\"\"\n    Helper function to find the greatest common divisor of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    # Sum of all the even numbers from 2 to limit\n    even_sum = sum(i for i in range(2, limit+1, 2))\n\n    # Find the difference between the sum of the squares of even numbers and the sum of the squares of odd numbers\n    diff = abs(even_sum**2 - sum(i**2 for i in range(3, limit+1, 2)))\n\n    # Sum of all the amicable numbers from 1 to limit\n    amicable_sum = sum(i for i in range(1, limit+1) if i!= diff)\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a positive integer as input and returns the sum of all amicable numbers from 1 to the input number.\n    '''\n    # Create a list of all numbers from 1 to the input number\n    numbers = list(range(1, limit + 1))\n    amicable_numbers = []\n    \n    # Loop through the list of numbers and check if each number is amicable\n    for number in numbers:\n        if is_amicable(number):\n            amicable_numbers.append(number)\n    \n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(number):\n    '''\n    This function takes a positive integer as input and returns True if the number is amicable and False otherwise.\n    An amicable number is defined as a number that is equal to the sum of two proper divisors of itself.\n    '''\n    # Check if the number is equal to any of the divisors of itself\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num in amicable_numbers(num):\n            sum += num\n    return sum\n\n\ndef amicable_numbers(n):\n    '''\n    Returns a list of all the amicable numbers to a given number n.\n    '''\n    amicable_list = []\n    for i in range(1, n):\n        if n % i == 0 and i!= n:\n            if i == amicable_numbers(i)[0]:\n                amicable_list.append(i)\n    return amicable_list"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    \n    # iterate over numbers up to the limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            # add it to the sum\n            total += i\n    \n    return total\n\ndef is_amicable(n):\n    \"\"\"\n    Check if a given number is amicable to any number in the given range.\n    \"\"\"\n    # iterate over all numbers up to the square root of the given number\n    for i in range(1, int(n**0.5) + 1):\n        # check if the number is divisible by i or n//i\n        if n % i == 0 or n // i == i:\n            # if so, return False (not amicable)\n            return False\n    \n    # if we get here, the number is amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a given number is amicable.\n    \"\"\"\n    if num < 2:\n        return False\n    sum_of_divisors = sum([i for i in range(1, int(num ** 0.5) + 1) if num % i == 0])\n    return sum_of_divisors == num\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj*cmath.sqrt(a**2 + b**2)\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * (180/cmath.pi)\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle_rad = cmath.phase(a + b * 1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the complex conjugate of the input complex number\n    conj = cmath.conjugate(complex(a,b))\n    \n    # calculate the angle of the conjugate\n    angle = cmath.phase(conj)\n    \n    # convert the angle to radians and return it\n    return cmath.degrees(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    # calculate the angle using the argument of the modulus\n    angle = cmath.phase(modulus)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    conjugate = a.conj()\n    angle = cmath.phase(conjugate)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 > count_1:\n            diff = count_0 - count_1\n            max_diff = max(max_diff, diff)\n        else:\n            diff = count_1 - count_0\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of number of 0s and number of 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate over all sub-strings of the binary string\n    for i in range(len(string)):\n        # Count the number of 0s and 1s in the current sub-string\n        count_0 += string.count('0', i, i+1)\n        count_1 += string.count('1', i, i+1)\n        \n        # Calculate the maximum difference between the number of 0s and number of 1s\n        max_diff = max(abs(count_0 - count_1), max_diff)\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    num_0s = 0\n    num_1s = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            num_0s += 1\n        elif char == '1':\n            num_1s += 1\n        diff = abs(num_0s - num_1s)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    dp = [[0]*length for _ in range(length)]\n    max_diff = 0\n    \n    for i in range(length):\n        for j in range(i+1, length):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            \n            if string[i] == '0' and string[j] == '1':\n                dp[i][j] += 1\n            \n            if i == j:\n                if string[i] == '0':\n                    dp[i][j] += 1\n            \n            if dp[i][j] > max_diff:\n                max_diff = dp[i][j]\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            diff = sum(string[i:j]) - sum(string[i:i+1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        diff = max(max_diff, count - 1)\n        max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count = {'0': 0, '1': 0}\n    max_diff = 0\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n        diff = max(0, count['0'] - count['1'])\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count = 1\n        else:\n            count = 0\n        for j in range(i+1, len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count > 0:\n                max_diff = max(max_diff, count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables to keep track of 0s and 1s\n    zeros = ones = 0\n    \n    # Iterate through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the number of zeros\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the number of ones\n        else:\n            ones += 1\n            \n    # Calculate the maximum difference between the number of zeros and ones\n    max_diff = max(zeros - ones, ones - zeros)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of 0s and 1s\n    count0 = 0\n    count1 = 0\n\n    # Initialize variables to keep track of the maximum difference between 0s and 1s\n    max_diff = 0\n    curr_diff = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the current character is a 0 or a 1\n        if char == '0':\n            count0 += 1\n        else:\n            count1 += 1\n\n        # Update the current difference between 0s and 1s\n        curr_diff = abs(count0 - count1)\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference between 0s and 1s\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b+1):\n        if b % i == 0 and a % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the greatest common divisor (GCD) of two numbers using Euclidean algorithm\n    def gcd(a, b):\n        \"\"\"\n        Finds the greatest common divisor of two numbers using Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the list of common divisors of two numbers\n    def common_divisors(a, b):\n        \"\"\"\n        Finds the list of common divisors of two numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Finding the sum of common divisors of two numbers\n    def sum_common_divisors(a, b):\n        \"\"\"\n        Finds the sum of common divisors of two numbers.\n        \"\"\"\n        divisors_list = common_divisors(a, b)\n        sum_of_divisors = sum(divisors_list)\n        return sum_of_divisors\n\n    # Testing the function\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(\"Sum of common divisors of\", a, \"and\", b, \"is\", sum_common_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Calculate the sum of common divisors\n    total_sum = 0\n    for num in common_divisors:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the maximum divisor of a and b\n    max_divisor = max(a, b)\n    \n    # Initialize the sum of common divisors\n    sum_cd = 0\n    \n    # Loop through the divisors of max_divisor and add all the divisors of a and b to the sum_cd variable\n    for i in range(1, max_divisor + 1):\n        if (a % i == 0) and (b % i == 0):\n            sum_cd += i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Find the common divisors of the two numbers\n    common_divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \n    Parameters:\n    a (int): first number\n    b (int): second number\n    \n    Returns:\n    int: the sum of the common divisors of a and b\n    \"\"\"\n    # find the common divisors of a and b\n    common_divisors = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # calculate the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def gcd(a, b):\n        '''\n        Function to find the greatest common divisor of two numbers.\n        '''\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def sum_of_common_divisors(n):\n        '''\n        Recursive function to find the sum of all common divisors of a given number n.\n        '''\n        if n == 1:\n            return 0\n        else:\n            return n + sum_of_common_divisors(gcd(n, n-1))\n\n    sum_a = sum_of_common_divisors(a)\n    sum_b = sum_of_common_divisors(b)\n\n    return sum_a + sum_b"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    if a == 0 or b == 0:\n        return 0\n    elif a % b == 0:\n        return a + sum(b, a % b)\n    else:\n        return sum(a, b - 1)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    This function finds the common divisor of two given numbers.\n    \"\"\"\n    if a == b:\n        return a\n    else:\n        for i in range(1, a+1):\n            if a % i == 0 and b % i == 0:\n                return i"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(5, 10)) # Output: 50"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result = result ^ x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    long_words = [] # initialize an empty list to store long words\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the word to the list if it is\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the string into a list of words\n    words = str.split()\n    # create an empty list to store words that are longer than n characters\n    long_words_list = []\n    # loop through the words list\n    for word in words:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # if the word is longer than n characters, add it to the long_words_list\n            long_words_list.append(word)\n    # return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    \n    # Initialize an empty list to store words that are longer than n characters\n    long_words_list = []\n    \n    # Loop through the words and check if each one is longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    \n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # check rows\n        for j in range(n):\n            sum_row = 0\n            for k in range(n):\n                sum_row += my_matrix[i][k]\n            if sum_row!= n * (n + 1) // 2:\n                return False\n            # check cols\n            sum_col = 0\n            for k in range(n):\n                sum_col += my_matrix[k][j]\n            if sum_col!= n * (n + 1) // 2:\n                return False\n    # check diagonals\n    sum_diag = 0\n    for i in range(n):\n        sum_diag += my_matrix[i][i]\n    if sum_diag!= n * (n + 1) // 2:\n        return False\n    sum_diag = 0\n    for i in range(n):\n        sum_diag += my_matrix[i][n - i - 1]\n    if sum_diag!= n * (n + 1) // 2:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= len(set(map(tuple, my_matrix))):\n        return False\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(n)]\n    # Check if the row and column sums are the same for each row and column\n    if row_sums!= col_sums:\n        return False\n    # Calculate the sum of the diagonal elements\n    diag1 = sum(my_matrix[i][i] for i in range(n))\n    diag2 = sum(my_matrix[i][n-1-i] for i in range(n))\n    # Check if the diagonal elements are the same for each diagonal\n    if diag1!= diag2:\n        return False\n    # If all the above conditions are met, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # check if the input matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the input matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n\n    # calculate the sum of the elements of the matrix\n    matrix_sum = sum(sum(row) for row in my_matrix)\n\n    # calculate the sum of the elements of the magic square\n    magic_square_sum = 1 + 14 + 36 + 49 + 61 + 73\n\n    # check if the matrix sum is equal to the magic square sum\n    return matrix_sum == magic_square_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is a list of lists\n    if not all(isinstance(row, list) for row in my_matrix):\n        return False\n\n    # Check that each row and each column has the same length\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n    for col in range(len(my_matrix[0])):\n        if len(set(row[col] for row in my_matrix))!= len(my_matrix):\n            return False\n\n    # Check that the diagonal elements are equal\n    diagonal = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if diagonal!= my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2]:\n        return False\n\n    # Check that the other elements are distinct\n    for row in my_matrix:\n        for col in range(len(row)):\n            if (row[col] == my_matrix[0][0] or row[col] == my_matrix[1][1] or row[col] == my_matrix[2][2]):\n                continue\n            if (col == 0 and row[col] == my_matrix[1][0] + my_matrix[0][1]) or \\\n               (col == 1 and row[col] == my_matrix[2][0] + my_matrix[0][2]) or \\\n               (col == 2 and row[col] == my_matrix[0][0] + my_matrix[2][1]):\n                continue\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of each row and column\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix[0])\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n    \n    # check if the sum of the diagonal elements is equal to zero\n    if row_sum[0] == col_sum[0] == row_sum[len(my_matrix)-1] == col_sum[len(my_matrix[0])-1]:\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    main_diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    secondary_diagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    if row_sums == col_sums == main_diagonal_sum == secondary_diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        row = my_matrix[i]\n        row.sort()\n        for j in range(n-1):\n            if row[j]!= row[j+1] or row[i]!= row[i+j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check for symmetry\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix[0])-i-1]:\n            return False\n        if my_matrix[i][len(my_matrix[0])-i-1]!= my_matrix[len(my_matrix)-i-1][i]:\n            return False\n\n    # Check for diagonals\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[len(my_matrix)-i-1][len(my_matrix[0])-i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the rows and columns have the same values\n    for i in range(len(my_matrix)):\n        row = my_matrix[i]\n        if row!= sorted(row):\n            return False\n\n    # Check if the main diagonal has the same values as the secondary diagonal\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix)-1-i]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        if my_matrix[i] == row_sum or my_matrix[i] == col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = [key for key, value in freq_dict.items() if value == max_freq][0]\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers as input and returns the item with maximum frequency.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_freq = max(count.values())\n    max_freq_item = [num for num, freq in count.items() if freq == max_freq]\n    return max_freq_item[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    \n    # count the frequency of each item in the input list\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    # find the item with the maximum frequency\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    \n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        The item with maximum frequency in the list.\n    \"\"\"\n    frequency = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_freq:\n            max_freq = frequency[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [x for x in str1 if x in vowels]\n    reversed_vowels = vowel_list[::-1]\n    reversed_str = \"\"\n    for i in reversed_vowels:\n        reversed_str += i\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    \n    # iterate through the string and count the number of vowels\n    for i in str1:\n        if i in vowels:\n            vowel_count += 1\n            \n    # if there are no vowels in the string, return it as is\n    if vowel_count == 0:\n        return str1\n    \n    # initialize a new string to store the reversed vowels\n    reversed_str = ''\n    \n    # iterate through the string again and append the vowels to the new string\n    for i in str1:\n        if i in vowels:\n            reversed_str += i\n            \n    # append the remaining characters to the new string\n    reversed_str += str1[vowel_count:]\n    \n    # return the reversed string\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_index = 0\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n        else:\n            if vowel_index == 0:\n                new_str += char\n            elif vowel_index % 2 == 0:\n                new_str += str1[-(vowel_index - 1)]\n            else:\n                new_str += str1[vowel_index - 1]\n        vowel_index += 1\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_set = set(vowels)\n    vowels_set.discard('y')\n    vowels_set = sorted(vowels_set, reverse=True)\n\n    reversed_str = ''\n    for char in str1:\n        if char in vowels_set:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    new_str = new_str[::-1]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    reversed_string = ''\n    for char in string:\n        if char in vowels_set:\n            if reversed_string == '':\n                reversed_string += char\n            else:\n                reversed_string = char + reversed_string\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # using the join() method to convert tuple to string\n    return \", \".join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # check if the input is a tuple\n    if not isinstance(tup1, tuple):\n        print(\"Error: input must be a tuple.\")\n        return\n    \n    # convert the tuple to a string and return it\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_list = []\n    for item in tup1:\n        str_list.append(str(item))\n    return ','.join(str_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Join the elements of the tuple with a comma and space\n    result = ', '.join(str(elem) for elem in tup)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the list of numbers\n    for num in nums:\n\n        # check if the number is negative\n        if num < 0:\n\n            # add the number to the sum\n            sum += num\n\n    # return the sum\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    \n    # loop through the list of numbers\n    for num in nums:\n        # if the number is negative, add it to the neg_sum variable\n        if num < 0:\n            neg_sum += num\n            \n    # return the neg_sum variable\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_count = 0\n    side_length = 1\n\n    while hexagonal_count < n:\n        hexagonal_count += 6 * side_length - 6\n        side_length += 2\n\n    return hexagonal_count"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the number of rows and columns for the hexagon\n    rows = 2 * n - 1\n    cols = 2 * n - 1\n\n    # Initialize the hexagonal number and a counter for the number of digits\n    hex_num = 0\n    count = 0\n\n    # Loop through the rows and columns of the hexagon\n    for i in range(rows):\n        for j in range(cols):\n            # If the current position is a right side hexagon, add the current row number to the hexagonal number\n            if i == j or i == rows - j - 1:\n                hex_num += (i + 1) * (i + 1)\n\n            # If the current position is a left side hexagon, subtract the current row number from the hexagonal number\n            if i == cols - j - 1 or i == rows - j:\n                hex_num -= (i + 1) * (i + 1)\n\n            # Increment the counter for the number of digits in the hexagonal number\n            count += 1\n\n    # Return the hexagonal number\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6 "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define the hexagon shape\n    side = 1.5 * sqrt(3)\n    angle = 60 / 6\n    \n    # Calculate the number of squares in the shape\n    num_squares = 4 * ((n + 1) // 2)\n    \n    # Calculate the number of diagonals in the shape\n    num_diagonals = 3 * (num_squares - 1)\n    \n    # Calculate the angle of each diagonal\n    diag_angle = angle / num_diagonals\n    \n    # Find the x, y coordinates of each corner of the shape\n    x1 = -side / 2\n    y1 = side / 2\n    x2 = side / 2\n    y2 = side / 2\n    x3 = side / 2 - 2 * side / sqrt(3)\n    y3 = side / 2 + 2 * side / sqrt(3)\n    x4 = side / 2 + 2 * side / sqrt(3)\n    y4 = side / 2 - 2 * side / sqrt(3)\n    x5 = -side / 2\n    y5 = -side / 2\n    \n    # Calculate the angle of each corner\n    corner_angles = []\n    for i in range(6):\n        corner_angle = 180 - i * diag_angle\n        corner_angles.append(corner_angle)\n    \n    # Calculate the coordinates of each corner in the shape\n    corner_coords = []\n    for i in range(num_squares):\n        for j in range(num_squares):\n            corner_angle = corner_angles[i * num_squares + j]\n            x = x1 * cos(corner_angle * pi / 180) - y1 * sin(corner_angle * pi / 180)\n            y = x1 * sin(corner_angle * pi / 180) + y1 * cos(corner_angle * pi / 180)\n            corner_coords.append((x, y))\n    \n    # Calculate the coordinates of each hexagon in the shape\n    hex_coords = []\n    for i in range(num_squares):\n        for j in range(num_squares):\n            hex_angle = angle * (i * num_squares + j + 1)\n            x = x3 * cos(hex_angle * pi / 180) - y3 * sin(hex_angle * pi / 180)\n            y = x3 * sin(hex_angle * pi / 180) + y3 * cos(hex_angle * pi / 180)\n            hex_coords.append((x, y))\n    \n    # Find the nth hexagon in the shape\n    nth_hex_coords = hex_coords[n - 1]\n    \n    # Calculate the coordinates of the nth hexagon in the original triangle\n    nx = nth_hex_coords[0]\n    ny = nth_hex_coords[1]\n    return nx, ny"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    zero_ratio = non_zero_count/len(nums)\n    return round(zero_ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums)) #initialize array to count zeroes\n\n    #iterate through array and count zeroes\n    for num in nums:\n        if num == 0:\n            count[count.index(0)] += 1\n\n    #calculate ratio\n    zero_count = count[0]\n    non_zero_count = sum(count)\n    ratio = 0 if non_zero_count == 0 else zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(nums) - sum(zero_count)\n    return non_zero_count/sum(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n\n    if nonzeros == 0:\n        return 0\n    else:\n        return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create a list to store the unique elements of the array\n    unique_nums = list(set(nums))\n\n    # Create an array to store the count of non-zeroes and zeroes\n    count_array = array('i', [0] * (len(unique_nums) + 1))\n\n    # Loop through the array of numbers\n    for num in nums:\n\n        # Find the index of the number in the unique_nums list\n        index = unique_nums.index(num)\n\n        # Increment the count of non-zeroes by 1\n        count_array[index + 1] += 1\n\n    # Find the ratio of non-zeroes to zeroes\n    non_zeroes = count_array[1]\n    zeroes = count_array[0]\n    ratio = non_zeroes / zeroes\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    return non_zeros / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')  # create a new array to store the count of non-zeroes\n    \n    for num in nums:\n        count.append(num)  # append each element to the count array\n    \n    zero_count = count.count(0)  # count the number of zeroes in the count array\n    non_zero_count = len(count) - zero_count  # calculate the number of non-zeroes\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = len([num for num in nums if num == 0])\n    non_zeros = len(nums) - zeros\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    non_zero_count = sum(1 for num in nums if num!= 0)\n    ratio = zero_count[0] / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    non_zero_count = non_zeros / (zeros + non_zeros)\n    return non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is greater than zero\n    if n <= 0: \n        return False\n    \n    # Initialize two variables to store the current and next power of 2\n    power = 1\n    current_power = 1\n    \n    # Iterate through each bit of the binary representation of n\n    for i in range(32): \n        # If the current bit is a 1, add the power of 2 to the current sum\n        if n & (1 << i): \n            current_sum += power\n        \n        # Check if the current sum is greater than n\n        if current_sum > n: \n            return False\n        \n        # Update the current power and current sum\n        power <<= 1\n        current_sum = current_power\n        \n        # If the current power is greater than 1, update it to 1\n        if power > 1: \n            power = 1\n            current_power <<= 1\n    \n    # If we reach this point, then n can be represented as a sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    num = n\n    while num > 0:\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a power of 2\n    if n == 1: \n        return True\n    elif n == 0: \n        return False\n    elif n & (n-1) == 0: \n        return is_Sum_Of_Powers_Of_Two(n & (n-1))\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables\n    sum = 0\n    temp = 0\n    power = 0\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is 2^k for some k\n    while n > 0:\n        if n % 2 == 0:\n            power += 1\n            sum += 1\n            temp = 2 ** power\n            n = n // temp\n        else:\n            power += 1\n            temp = 2 ** power\n            n = n // temp\n    # Check if the number is equal to sum of powers of 2\n    if sum == power:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    \n    # Check if 2 raised to power n is equal to n\n    if 2**n == n:\n        return True\n    \n    # Check if 2 raised to power (n-1) is equal to 1\n    if 2**((n-1)) == 1:\n        return True\n    \n    # Check if 2 raised to power (n-1) is equal to n-1\n    if 2**((n-1)) == n-1:\n        return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        # If it's divisible by 2, check if it's a power of 2\n        if n == 2**k for k in range(1, 32):\n            return True\n        # If it's not a power of 2, check if it can be represented as sum of non-zero powers of 2\n        elif n in [2**k + 2**k for k in range(1, 32)]:\n            return True\n        else:\n            return False\n    else:\n        # If the given number is not divisible by 2, check if it's a power of 2\n        if n == 2**k for k in range(1, 31):\n            return True\n        # If it's not a power of 2, check if it can be represented as sum of non-zero powers of 2\n        elif n in [2**k - 2**k for k in range(1, 31)]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n & (n-1))\n\ndef get_two_power_sum(n):\n    '''\n    Write a python function to find the sum of non-zero powers of 2 up to n.\n    '''\n    if n == 0:\n        return 0\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return n + get_two_power_sum(n & (n-1))\n\ndef check_if_sum_of_powers_of_two(n):\n    '''\n    Write a python function to check if the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return is_Sum_Of_Powers_Of_Two(get_two_power_sum(n))"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is a power of 2\n    if n & (n - 1) == 0: \n        return True\n\n    # check if n is a sum of powers of 2\n    count = 0\n    while n: \n        n &= n - 1\n        count += 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        # If the given number is a power of 2, check if the sum of its powers of 2 is a power of 2 as well\n        for i in range(1, 32):\n            power_of_two = 1 << i\n            if (power_of_two * n) & (power_of_two * n - 1) == 0:\n                return True\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            break\n    if count == 0:\n        return True\n    elif count % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n - 2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n - 1)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for circumference calculation\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) is list:\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to store the flattened numbers\n    flattened = set()\n\n    # Loop through each sublist in the list\n    for sublist in test_list:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Add the number to the set of flattened numbers\n            flattened.add(num)\n\n    # Convert the set to a list and return it\n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        for subitem in item:\n            flattened.append(subitem)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Base case: if the list is empty, return an empty set\n    if len(test_list) == 0:\n        return set()\n\n    # Recursive case: if the list has only one element, return the element as a set\n    elif len(test_list) == 1:\n        return {test_list[0]}\n\n    # Recursive case: if the list has more than one element, flatten it recursively and return the union of all sets\n    else:\n        set1 = extract_singly(test_list[0])\n        set2 = extract_singly(test_list[1:])\n        return set1.union(set2)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, int):\n                result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # find the largest element in the unsorted part of the list\n        largest = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[largest]:\n                largest = j\n        \n        # swap the largest element with the element at the beginning of the unsorted part of the list\n        nums[i], nums[largest] = nums[largest], nums[i]\n        \n        # reverse the unsorted part of the list\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n            \n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def pancake_sort_inner(nums):\n        n = len(nums)\n        for i in range(n):\n            # Find the maximum element in the unsorted part of the array\n            max_index = i\n            for j in range(i+1, n):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            # Swap the maximum element with the first element of the unsorted part of the array\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # Reverse the pancake of elements from the first element to the maximum element\n            if i!= max_index:\n                pancake_sort_inner(nums[:max_index]+nums[max_index+1:])\n        return nums\n\n    return pancake_sort_inner(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all elements and find the maximum element in the list\n    max_num = max(nums)\n    # Traverse through all elements and find the minimum element in the list\n    min_num = min(nums)\n    # Initialize variables to keep track of number of pancakes\n    pancakes = 0\n    # While loop to keep pancakes sorted\n    while pancakes < n:\n        # If the number of pancakes is less than the length of the list, then there is a minimum element\n        if pancakes < n:\n            # Find the minimum element and move it to the end of the list\n            min_index = nums.index(min_num)\n            nums[min_index], nums[n-1] = nums[n-1], nums[min_index]\n            # Update the pancakes variable\n            pancakes += 1\n        # If the number of pancakes is equal to the length of the list, then there is no minimum element\n        else:\n            # Traverse through the list from the first element to the last element and find the maximum element\n            max_index = 0\n            for i in range(1, n):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n            # Move the maximum element to the end of the list\n            nums[max_index], nums[n-1] = nums[n-1], nums[max_index]\n            # Update the pancakes variable\n            pancakes += 1\n        # Traverse through the list from the last element to the first element and find the minimum element\n        min_index = n-1\n        for i in range(n-2, 0, -1):\n            if nums[i] < nums[min_index]:\n                min_index = i\n        # Move the minimum element to the beginning of the list\n        nums[min_index], nums[0] = nums[0], nums[min_index]\n        # Update the pancakes variable\n        pancakes += 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    '''\n    def _pancake_sort(nums, index):\n        if index == len(nums) - 1:\n            return nums, index\n        \n        num_to_move = nums[index]\n        nums.remove(num_to_move)\n        nums.insert(index, num_to_move)\n        \n        return _pancake_sort(nums, index + 1)\n    \n    return _pancake_sort(nums, 0)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # pancake sort algorithm\n    while True:\n        # check if the list is sorted\n        is_sorted = True\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                is_sorted = False\n                break\n        if is_sorted:\n            break\n        # reverse the list\n        for i in range(n-1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            print(nums)\n        n -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the current subarray\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the subarray\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to swap two elements\n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n\n    # Helper function to reverse the sequence from the start to the i-th element\n    def reverse(start, i):\n        while start < i:\n            swap(start, i)\n            start += 1\n\n    # Helper function to reverse the sequence from the end to the i-th element\n    def reverse_end(end, i):\n        while end > i:\n            swap(end, i)\n            end -= 1\n\n    # Helper function to reverse the sequence from the start to the middle\n    def reverse_middle(start, middle, end):\n        while start < end:\n            swap(start, end)\n            start += 1\n            end -= 1\n\n    # Helper function to reverse the sequence from the end to the middle\n    def reverse_middle_end(start, middle, end):\n        while start < end:\n            swap(start, end)\n            start += 1\n            end -= 1\n\n    # Base case: if the list has only one element, it is already sorted\n    if len(nums) <= 1:\n        return nums\n\n    # Choose a pivot element randomly\n    pivot_index = random.randint(0, len(nums) - 1)\n    pivot = nums[pivot_index]\n\n    # Partition the list into two parts: one less than the pivot and one more than the pivot\n    left = []\n    right = []\n    for i in range(len(nums)):\n        if nums[i] < pivot:\n            left.append(nums[i])\n        elif nums[i] > pivot:\n            right.append(nums[i])\n\n    # Recursively sort the two parts\n    left = pancake_sort(left)\n    right = pancake_sort(right)\n\n    # Merge the two sorted parts to form the sorted list\n    sorted_list = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            sorted_list.append(left[i])\n            i += 1\n        else:\n            sorted_list.append(right[j])\n            j += 1\n\n    sorted_list += left[i:]\n    sorted_list += right[j:]\n\n    # Sort the remaining elements in random order\n    for i in range(len(sorted_list)):\n        reverse(0, i)\n\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Print the pancakes in descending order\n        for j in range(n-i-1, -1, -1):\n            print(' '*j + '*' +''*i)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the array\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # Swap the largest element with the i-th element\n        nums[i], nums[largest] = nums[largest], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # In each iteration, we move the largest element to the end of the array.\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array.\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at the current index.\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the entire array from index i to end.\n        for j in range(i, n, -1):\n            nums[j], nums[n-j-1] = nums[n-j-1], nums[j]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number of items that are identical in the same position of three given lists.\n\n    Parameters:\n    - list1: list\n    - list2: list\n    - list3: list\n\n    Returns:\n    - int: number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2 and item1 in list3:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    # create a dictionary to store the count of items that are identical in the same position of the lists\n    same_position_count = {}\n\n    # loop through the first list and count the items that are identical in the same position of the second list\n    for item in list1:\n        if item in list2 and item in same_position_count:\n            same_position_count[item] += 1\n        elif item in list2:\n            same_position_count[item] = 1\n\n    # loop through the second list and count the items that are identical in the same position of the third list\n    for item in list2:\n        if item in list3 and item in same_position_count:\n            same_position_count[item] += 1\n        elif item in list3:\n            same_position_count[item] = 1\n\n    # loop through the third list and count the items that are identical in the same position of the first list\n    for item in list3:\n        if item in list1 and item in same_position_count:\n            same_position_count[item] += 1\n        elif item in list1:\n            same_position_count[item] = 1\n\n    # return the count of items that are identical in the same position of the lists\n    return sum(same_position_count.values())"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as arguments and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables for minimum and maximum values\n    min_val = max_val = arr[0]\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Find the minimum and maximum values in the array\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n        # Calculate the absolute difference between each pair of elements\n        diff = abs(arr[i] - min_val)\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum absolute difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array and finds the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize variables to store the maximum absolute difference and the minimum element in the array\n    max_diff = 0\n    min_element = arr[0]\n\n    # Loop through the array and calculate the maximum absolute difference between any two elements\n    for i in range(1, len(arr)):\n        abs_diff = abs(arr[i] - min_element)\n        if abs_diff > max_diff:\n            max_diff = abs_diff\n\n    # Return the maximum absolute difference between any two elements in the array\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation is valid\n    if a == 0:\n        return None\n    if b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is less than 0, there is no solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    d = a**2 - 4*b\n    if d < 0:\n        return None\n    \n    x1 = (-a + d**0.5) // 2\n    x2 = (-a - d**0.5) // 2\n    y1 = b / a * x1 + n / a\n    y2 = b / a * x2 + n / a\n    \n    return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if ax + by = n for any x and y\n    for x in range(-b // a, b // a + 1):\n        for y in range(-n // (a * x), n // (a * x) + 1):\n            if x * a + y * b == n:\n                return (x, y)\n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if the discriminant is positive, which means there are no real roots\n    if discriminant < 0:\n        return None\n    \n    # calculate the two roots of the discriminant\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    # check if the two roots are real and non-negative, which means there is one real root and one imaginary root\n    if x1.is_real and x1.is_positive and x2.is_real and x2.is_positive:\n        return (x1, x2)\n    \n    # if the two roots are complex, there is no solution\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-10000, 10001):\n        for y in range(-10000, 10001):\n            if x*a + y*b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if a and b are both positive integers\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(n, int):\n        return None\n\n    # check if a, b, and n are coprime\n    if gcd(a, b)!= 1:\n        return None\n\n    # use extended Euclidean algorithm to find the solution\n    x0, y0 = 0, 1\n    x1, y1 = 1, 0\n    x2, y2 = 0, 1\n\n    while n!= 0:\n        q, r = divmod(n, a)\n        x3, y3 = x2 - q*x0, y2 - q*y0\n        x2, y2 = x1, y1\n        x1, y1 = x0, y0\n        x0, y0 = x3, y3\n        n = r\n\n    # check if the solution is valid\n    if x0!= 1 or y0!= 0:\n        return None\n\n    return (x0, y0)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # If discriminant is less than zero, there are no solutions\n    if d < 0:\n        return None\n    \n    # Calculate the two real roots of the discriminant\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    # If the roots are integers, convert them to integers\n    if x1.is_integer() and x2.is_integer():\n        x1 = int(x1)\n        x2 = int(x2)\n    \n    # Create the tuple of solutions\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # First check if there is a solution for a^2 + b^2 = n^2\n    d = a**2 + b**2\n    if d == n**2:\n        return (int((-b + (n**2)**0.5) / a), int((-b - (n**2)**0.5) / a))\n    # If there is no solution for a^2 + b^2 = n^2, then check if there is a solution for a^2 - b^2 = n^2\n    d = a**2 - b**2\n    if d == n**2:\n        return (int((-b - (n**2)**0.5) / a), int((-b + (n**2)**0.5) / a))\n    # If there is no solution for a^2 - b^2 = n^2, then check if there is a solution for a^2 = -n^2 + b^2\n    if a**2 == -n**2 + b**2:\n        return (int((-b - (n**2)**0.5) / a), int((-b + (n**2)**0.5) / a))\n    # If there is no solution for a^2 = -n^2 + b^2, then check if there is a solution for a^2 = n^2 - b^2\n    if a**2 == n**2 - b**2:\n        return (int((-b - (n**2)**0.5) / a), int((-b + (n**2)**0.5) / a))\n    # If none of the above solutions exist, then no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if a and b are zero, and return None if true\n    if a == 0 or b == 0:\n        return None\n    \n    # compute the discriminant\n    disc = b**2 - 4*a*n\n    \n    # check if disc is negative, and return None if true\n    if disc < 0:\n        return None\n    \n    # compute x1 and x2 such that ax1 + by2 = n\n    x1 = (-b + disc**0.5)/(2*a)\n    x2 = (-b - disc**0.5)/(2*a)\n    \n    # check if x1 and x2 are integers and return None if not\n    if not x1.is_integer() or not x2.is_integer():\n        return None\n    \n    # return the tuple (x1, x2)\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate the discriminant\n    D = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive, meaning at least one solution exists\n    if D > 0:\n        x1 = (-b + (b**2-4*a*n)**0.5)/2/a\n        x2 = (-b - (b**2-4*a*n)**0.5)/2/a\n        return (int(x1), int(x2))\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Convert the given lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # Iterate through the elements of the first list\n    for elem in list1:\n        # If the element is in the second list, remove it\n        if elem in list2:\n            list1.remove(elem)\n    \n    # Convert the modified list back to a list and return it\n    return list(list1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input, one contains elements to be removed from the second list, and the other contains all the elements that need to be removed. The function removes all elements present in the second list from the first list.\n    \"\"\"\n    # loop through each element in the second list\n    for element in list2:\n        # remove the element from the first list\n        list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list to store the unique elements from list1\n    unique_list = []\n\n    # Iterate over all elements in list1\n    for element in list1:\n        # Check if the element is not in list2\n        if element not in list2:\n            # If the element is not in list2, add it to unique_list\n            unique_list.append(element)\n\n    # Return unique_list\n    return unique_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 3:\n        return 0\n    else:\n        i = 1\n        while i <= n//2:\n            x = n - 2*i\n            if x > 0:\n                sum_series += x\n            i += 1\n        return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n // 2 + 1):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(2*n, 0, -2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        x = 1\n        while n - 2*x >= 0:\n            x += 1\n        return (n * (n + 1)) // 2 - sum_series(x)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(1, n // 2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i*2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = 0.0\n    for i in range(l):\n        area += (s * (2*i+1)) / (2*i+1)\n    return area * s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round((s * (s - l) * (s - l + 1) * l) / 4, 2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s*(tan((i*2*pi)/(l)))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += tan((2*pi*i)/l)*s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon using Heron's formula\n    area = (s * (s-2) * (s-4) * (s-6) * (s-8) * (s-10)) ** 0.5\n\n    # convert the area to square units\n    area = area ** 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (s*l)/(2*pi)\n    # Calculate the area of the polygon\n    area = (semi_perimeter**2)*tan(pi/l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    \n    # Check if the sum of the divisors is the same as the original number\n    if div_sum == n:\n        print(\"The sum of the divisors is the same as the original number.\")\n    else:\n        print(\"The sum of the divisors is different from the original number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    if n % div_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))) - {0})\n\n    # Calculate the sum of the divisors of n+1\n    add_n = n + 1\n    div_sum_add_n = sum(set(map(int, str(add_n))) - {0})\n\n    # Check if the sum of the divisors of n and n+1 are the same\n    if div_sum == div_sum_add_n:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n and determines if the sum of the divisors of n and 1 are the same. \n    If yes, then it returns True, otherwise it returns False. \n    '''\n\n    # Using the math.gcd() function to find the greatest common divisor of n and 1. \n    d = math.gcd(n, 1)\n\n    # Using the math.floor() function to get the integer part of n/d. \n    n_div_d = math.floor(n/d)\n\n    # Using the math.floor() function to get the integer part of 1/d. \n    d_div_1 = math.floor(1/d)\n\n    # Using the math.gcd() function to find the greatest common divisor of n_div_d and d_div_1. \n    sum_d = math.gcd(n_div_d, d_div_1)\n\n    # If the sum of the divisors of n and 1 is equal to the greatest common divisor of n_div_d and d_div_1, then the result is True. \n    if sum_d == 1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # initialize variables\n    divisors_sum = 0\n    num = n\n    \n    # iterate over the integers from 1 to sqrt(num)\n    for i in range(1, int(math.sqrt(num))+1):\n        # check if num is divisible by i\n        if num % i == 0:\n            # if it is, add i to the divisors sum\n            divisors_sum += i\n            \n            # check if the divisors sum is the same as num\n            if divisors_sum == num:\n                # if it is, return True\n                return True\n    \n    # if the loop completes without finding a pair of integers that sum up to num, return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def prime_factors(num):\n        factors = []\n        divisor = 2\n        while num > 1:\n            if num % divisor == 0:\n                factors.append(divisor)\n                num //= divisor\n            else:\n                divisor += 1\n        return factors\n\n    def sum_of_divisors(num):\n        divisors = prime_factors(num)\n        return sum(divisors)\n\n    return sum_of_divisors(n) == sum_of_divisors(sum_of_divisors(n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    \n    # calculate the sum of divisors of 1\n    divisor_sum = 0\n    for i in range(1, 101):\n        if i == 1:\n            continue\n        divisor_sum += i\n    \n    # check if the sum of divisors of n and 1 are equal\n    if div_sum == divisor_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n\n    Args:\n    n (int): the integer to check\n\n    Returns:\n    bool: True if the sum of the divisors of n and its reverse are the same, False otherwise\n    \"\"\"\n    # calculate the sum of the divisors of n\n    div_sum = sum(math.factorize(n))\n\n    # calculate the sum of the divisors of its reverse\n    reverse_n = n\n    while reverse_n > 0:\n        div_sum += reverse_n % 10\n        reverse_n //= 10\n\n    # check if the sum of the divisors is the same\n    if div_sum == math.factorial(50):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # Check if the sum of the divisors is the same as n\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n \n    divisor_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n\n    # Check if the sum of the divisors of n and n itself are the same \n    if divisor_sum == n: \n        print(\"The sum of the divisors of\", n, \"are the same as the sum of the divisors of itself.\") \n    else: \n        print(\"The sum of the divisors of\", n, \"are different from the sum of the divisors of itself.\") "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == chr(65 + i).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1 if it doesn't exist, or increment the count if it does\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char in english_alphabet:\n            index = english_alphabet.index(char.lower())\n            if index == str1.index(char):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    \n    for char in str1:\n        if char.lower() in english_alphabet:\n            if char.lower() not in count_dict:\n                count_dict[char.lower()] = 1\n            else:\n                count_dict[char.lower()] += 1\n                \n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the counts for each position in the alphabet\n    counts = {i: 0 for i in range(26)}\n\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase for case insensitive comparison\n        char = char.lower()\n\n        # calculate the index of the character in the English alphabet (0-25)\n        index = ord(char) - ord('a')\n\n        # increment the count for the current position\n        counts[index] += 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        # check if the character at the current position is present in the string\n        if str1.count(chr(ord('a') + i)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the count of characters at each position in the alphabet\n    count_dict = {}\n    \n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet (case insensitive)\n        if char.isalpha():\n            # If it is, add 1 to the count for its position in the alphabet (0-25)\n            count_dict[ord(char) - ord('a')] = count_dict.get(ord(char) - ord('a'), 0) + 1\n    \n    # Return the count of characters at each position in the alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create an empty dictionary to store the count of each character in the English alphabet\n    count_dict = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is in the English alphabet (case insensitive)\n        if char in count_dict:\n            # increment the count of the character in the dictionary\n            count_dict[char] += 1\n\n    # print the count of each character in the English alphabet\n    for key, value in count_dict.items():\n        print(f\"{key}: {value}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == chr(ord('a') + i).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is in the English alphabet\n        if char.isalpha():\n            # if it is, check if it is already in the dictionary\n            if char in char_count:\n                # if it is, increment the count by 1\n                char_count[char] += 1\n            else:\n                # otherwise, add the character to the dictionary with a count of 1\n                char_count[char] = 1\n    \n    # create a list of tuples, where each tuple contains a character and its count in the string\n    char_list = list(char_count.items())\n    \n    # sort the list by the count in descending order\n    char_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # loop through the sorted list of tuples and print the characters and counts\n    for char, count in char_list:\n        print(f\"{char}: {count}\")"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Set a variable to keep track of the smallest power of 2 greater than or equal to n\n    next_pow2 = 1\n    \n    # Keep dividing the next_pow2 by 2 until it is less than n\n    while next_pow2 < n: \n        # If the next_pow2 is less than n, increment it by 1\n        next_pow2 *= 2\n        \n    return next_pow2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise AND operator with bit mask to find the next power of 2\n    return 2 ** ((n - 1) & -n)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary search to find the next power of 2\n    low = 1\n    high = 4096\n\n    while low < high:\n        mid = (low + high) // 2\n        if mid >= n:\n            high = mid\n        else:\n            low = mid + 1\n\n    # Return the next power of 2\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1: \n        return -1  # return -1 if n is less than 1\n    \n    # find the highest power of 2 less than or equal to n \n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power  # return the power of 2 greater than or equal to n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to the input integer.\n\n    Parameters:\n    n (int): An integer value.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to the input integer.\n    \"\"\"\n    \n    # Convert the input integer to binary and add a zero at the beginning\n    binary_str = bin(n)[2:]\n    binary_str = '0'*(32-len(binary_str)) + binary_str\n    \n    # Find the index of the rightmost 1 in the binary string\n    for i in range(len(binary_str)-1, -1, -1):\n        if binary_str[i] == '1':\n            break\n    \n    # Calculate the power of 2 using the index found\n    return 2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to a given number.\n    \"\"\"\n    n = n - 1  # Subtract 1 to round down to the next power of 2\n    n = n | (n >> 1)  # Compute n = 2^k * m, where k is the number of bits in m and m is 2^k\n    n = n | (n >> 2)  # Compute n = 2^k * m, where k is the number of bits in m and m is 2^k\n    n = n | (n >> 4)  # Compute n = 2^k * m, where k is the number of bits in m and m is 2^k\n    n = n | (n >> 8)  # Compute n = 2^k * m, where k is the number of bits in m and m is 2^k\n    n = n | (n >> 16)  # Compute n = 2^k * m, where k is the number of bits in m and m is 2^k\n    n += 1  # Add 1 to round up to the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary string\n    binary = bin(n)[2:]\n\n    # Calculate the position of the last 1 in the binary string\n    position = binary.rfind('1')\n\n    # Calculate the exponent\n    exponent = (binary.index('1') - position) + position\n\n    # Calculate the result\n    result = 1 << exponent\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to an integer\n    n = int(n)\n    # Initialize the result to n\n    result = n\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return result\n    # If n is not a power of 2, find the next power of 2\n    while result & (result - 1)!= 0:\n        result <<= 1\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use a binary search approach to find the smallest power of 2 greater than or equal to n\n    low, high = 1, n\n    while low <= high: \n        mid = (low + high) // 2\n        if mid * mid <= n: \n            low = mid + 1\n        else: \n            high = mid - 1\n    return low "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are within the range of the list\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices. Please specify indices between 0 and \" + str(len(list1) - 1)\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Iterate through the list and add the numbers within the range to the sum\n    for i in range(m, n + 1):\n        total += list1[i]\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j+1] for i in range(m, n+1) for j in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list `lst` and two indices `m` and `n`, and returns the sum of the numbers in the list\n    within the range specified by `m` and `n`.\n    \"\"\"\n    return sum([lst[i] for i in range(m, n+1)])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # using math.pi to get pi value\n    pi = math.pi\n\n    # calculating the area using formula\n    area = 5 * a * a / 4\n\n    # calculating the perimeter using formula\n    perimeter = 5 * a * pi\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of one side of the pentagon\n    p = a * math.sin(math.pi/5)\n    # Calculate the number of times the side is divided into 5 equal parts\n    n = int(5*p/a)\n    # Calculate the perimeter of the pentagon by summing up the lengths of the n sides\n    return 5*a + 5*p + 5*p + 5*p + 5*p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if'std' in word:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    \n    # iterate over the tuple and check if all elements have same data type as the first element\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    \n    # all elements have same data type as first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    return all(isinstance(x, data_types[0]) for x in test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # loop through all the elements of the tuple\n    for element in test_tuple:\n        # check if the current element has the same data type as the first element\n        if type(element)!= type(first_element):\n            # if not, return False\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    \n    first_element = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    first_element_type = type(test_tuple[0])\n\n    # Iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # Get the data type of the current element\n        element_type = type(element)\n\n        # If the data types are not the same, return False\n        if element_type!= first_element_type:\n            return False\n\n    # If we get this far, all the elements have the same data type\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n / 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Find the count of each element in the array\n    count = [0] * n\n    \n    # Initialize the count for the target element to 1\n    count[arr.index(x)] = 1\n    \n    # Traverse the array and update the count for each element\n    for num in arr:\n        if count[arr.index(num)] == 0:\n            count[arr.index(num)] = 1\n        else:\n            count[arr.index(num)] += 1\n    \n    # Traverse the count array and check if any count is greater than n/2\n    for count in count:\n        if count > n/2:\n            return True\n    \n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    majority_count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == majority_count:\n            return True\n        elif count > majority_count:\n            majority_count = count\n            count = 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is set (1)\n        if n & (1 << i):\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n-1) # clear the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    result = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range into a bit string\n    bit_range = bin(n)[2:]\n\n    # Convert the range start and end into bit strings\n    bit_start = bin(l)[2:]\n    bit_end = bin(r)[2:]\n\n    # Check whether all the bits in the range are unset\n    for i in range(len(bit_range)):\n        if bit_range[i] == '1' and bit_start[i] == '1' and bit_end[i] == '1':\n            return False\n\n    # If all the bits are unset in the range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are set in the given range or not.\n    \"\"\"\n\n    # Check if the upper bound is greater than the lower bound\n    if l > r:\n        return False\n    \n    # Check if all bits in the range are set\n    for i in range(l, r+1):\n        # Check if the bit is not set\n        if n & (1 << i) == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters: n (the given number), l (the lower range limit), and r (the upper range limit).\n    It checks whether all the bits are unset in the given range or not by comparing the given number with the lower and upper limits.\n    If all the bits are set, the function will return True.\n    If any of the bits are unset, the function will return False.\n    \"\"\"\n    mask = 1 << n\n    # mask = 1 << (n-1) # if n is 31, use mask = 1 << 30 instead\n    # mask = 1 << n // 2 # if n is 63, use mask = 1 << 31 instead\n\n    for i in range(l, r + 1):\n        if (i & mask)!= mask:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments, n, l and r, where n is the total number of bits, l and r are the lower and upper limits of the range, respectively.\n    It returns True if all the bits in the given range are set to 1, False otherwise.\n    \"\"\"\n    for i in range(l, r + 1):\n        if (n & (1 << i)) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range into a string to check if all the bits are set to 1\n    range_str = bin(r-l+1)[2:] + bin(l)[2:]\n    for bit in range_str:\n        if bit == '1':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    count = 0\n    for i in range(l, r + 1):\n        if i & n == 0:\n            count += 1\n    if count == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Returns True if all bits in the range [l, r] are set, and False otherwise.\n    \"\"\"\n    # Count the number of set bits in the range [l, r] using bitwise operations\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & (1 << i)).count('1')\n    return count == 32 - r + l"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    all_unset = True\n    for i in range(l, r+1):\n        if bin(n & i).count('1') > 0:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Calculate the number of bits in the number n\n    bit_count = len(bin(n)[2:])\n\n    # Calculate the range of bits to check\n    range_bits = bit_count - (r - l + 1)\n\n    # Iterate through each bit in the range of bits\n    for i in range(l, r + 1):\n        # Check whether the bit at index i is set or not\n        if (n & (1 << i)) == 0:\n            # If the bit is not set, increment the count variable\n            count += 1\n\n    # Check whether all the bits are unset in the range or not\n    if count == range_bits:\n        # If all the bits are unset, return True\n        return True\n    else:\n        # If not all the bits are unset, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the variable to store the count of unset bits\n    unset_count = 0\n    # Loop through the bits in the range from l to r\n    for i in range(l, r+1):\n        # If the bit is unset, increment the unset count\n        if n & (1<<i) == 0:\n            unset_count += 1\n    # If the unset count is equal to the range length, it means all bits are unset in the range\n    if unset_count == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Helper function to swap two elements of the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to find the index of the largest element in the array\n    def find_max_index(arr, start, end):\n        max_index = start\n        for i in range(start, end + 1):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    # Helper function to partition the array such that all negative elements appear before positive ones\n    def partition(arr, start, end):\n        pivot_index = find_max_index(arr, start, end)\n        pivot = arr[pivot_index]\n        swap(arr, pivot_index, end)\n        i = start\n        for j in range(start, end):\n            if arr[j] < pivot:\n                swap(arr, i, j)\n                i += 1\n        swap(arr, i, end)\n        return i\n\n    # Main function to re-arrange the array\n    def rearrange(arr, n):\n        if n > len(arr):\n            return\n\n        # Partition the array to find the indices of the first n negative elements\n        i = partition(arr, 0, n - 1)\n        if i < n:\n            return\n\n        # Partition the array to find the indices of the remaining elements\n        j = partition(arr, i, len(arr) - 1)\n\n        # Re-arrange the array to preserve the relative order among negative and positive elements\n        rearrange(arr[:i], n)\n        rearrange(arr[i:j], len(arr) - i - n)\n        rearrange(arr[j:], len(arr) - j)\n\n    # Call the main function with the given input\n    rearrange(arr, n)\n    print(\"Re-arranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables for negative and positive elements\n    negative = []\n    positive = []\n    \n    # separate negative and positive elements from the array\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # sort negative elements in ascending order\n    negative.sort()\n    \n    # combine negative and positive elements in the desired order\n    for i in range(n):\n        if i < n // 2:\n            arr[i] = negative[i]\n        else:\n            arr[i] = positive[i - n // 2]\n    \n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    negative_count = 0\n    positive_count = 0\n    i = 0\n    j = 0\n\n    # loop through the array\n    while i < len(arr):\n        # check if the current element is negative\n        if arr[i] < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n\n        # move to the next element\n        i += 1\n\n        # if we've reached n elements, exit the loop\n        if negative_count + positive_count == n:\n            break\n\n    # move all negative elements to the beginning of the array\n    while negative_count > 0:\n        arr[j] = -arr[i]\n        j += 1\n        i += 1\n        negative_count -= 1\n\n    # move all positive elements to the end of the array\n    while positive_count > 0:\n        arr[j] = arr[i]\n        j += 1\n        i += 1\n        positive_count -= 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to store negative and positive elements\n    negatives = []\n    positives = []\n\n    # Iterate through the array and add elements to the appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    # Concatenate the negative and positive lists and then sort the result\n    sorted_arr = sorted(negatives + positives)\n\n    # Return the sorted array\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = []\n    pos_arr = []\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    neg_arr.extend(pos_arr)\n    return neg_arr[:n] + pos_arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    res = neg + pos\n    return res"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Find the index of the first negative element\n    first_negative_index = None\n    for i in range(n):\n        if arr[i] < 0:\n            if first_negative_index is None:\n                first_negative_index = i\n            else:\n                # We have found two negative elements, so the first negative element is after the last positive element\n                break\n    \n    # If there is no negative element, we can simply return the sorted array\n    if first_negative_index is None:\n        return arr\n    \n    # If there are negative elements, we need to find the last negative element\n    last_negative_index = first_negative_index\n    for i in range(first_negative_index, n):\n        if arr[i] >= 0:\n            last_negative_index = i\n            break\n    \n    # Re-arrange the array so that all negative elements appear before positive ones\n    arr_rearranged = []\n    for i in range(n):\n        if i < first_negative_index:\n            arr_rearranged.append(arr[i])\n        elif i == first_negative_index:\n            arr_rearranged.append(-arr[first_negative_index])\n        elif i == last_negative_index:\n            arr_rearranged.append(-arr[last_negative_index])\n        else:\n            arr_rearranged.append(arr[i])\n    \n    return arr_rearranged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n\n    # loop through the array and add elements to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    # concatenate the lists and return the result\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store positive and negative elements\n    positive = []\n    negative = []\n\n    # Iterate through the input array and add positive and negative elements to the respective lists\n    for num in arr:\n        if num >= 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n\n    # Iterate through the original array and re-order the elements according to the given conditions\n    for i in range(n):\n        if i < len(negative) and i < len(positive):\n            # If the element at index i is both negative and positive, move it to the end of the positive list\n            positive.append(negative[i])\n            negative.pop(i)\n        elif i < len(negative):\n            # If the element at index i is only negative, move it to the end of the negative list\n            negative.append(positive.pop(i))\n        else:\n            # If the element at index i is only positive, move it to the end of the positive list\n            positive.append(negative.pop(i))\n\n    # Return the reordered array\n    return positive + negative"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        else:\n            positives.append(i)\n    negatives.sort()\n    positives.sort(reverse=True)\n    result = negatives[:n] + positives[:n]\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    # split the input string into a list of words\n    words = str1.split()\n    # loop over the words and replace the first blank space with the character\n    for i in range(len(words)):\n        if words[i] == \"\":\n            words[i] = char\n    # join the words back into a string\n    return \" \".join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and insert the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # Insert the remaining elements of the list into the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n    # Extract the n largest elements from the heap and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n and fill it with the elements of the list\n    min_heap = []\n    for i in range(n):\n        min_heap.append(heapq.heappushpop(min_heap, -list1[i]))\n    # Return the list containing the n largest elements from the list\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in list1:\n        heapq.heappush(max_heap, i)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a min heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap,num)\n        \n    # Return the top n numbers from the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # convert the list to a heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    \n    # extract the n largest items from the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * r * h\n    return lateral_surface\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * 3.14 * (r**2) + 2 * 3.14 * r * h\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A_l = 3.14159 * (r ** 2) * h\n    return A_l"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * (r**2) * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r ** 2 + 2 * 3.14159 * r * h + 2 * 3.14159 * h ** 2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area\n    lateral_surface_area = 2*r*h\n    \n    # Printing the lateral surface area\n    print(\"The lateral surface area of the cylinder is:\", lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 # formula for area of a circle\n    \n    lateral_surface_area = area * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h) + (2*r*r)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, add it to the list of even bits\n        if bit == '0':\n            even_bits.append(0)\n        else:\n            even_bits.append(1)\n    # Convert the list of even bits back to an integer and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if bit == '0':\n            result.append(0)\n        else:\n            result.append(1)\n    # Convert the list of bits back to an integer\n    result = int(''.join(map(str, result)), 2)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Set all even bits to 1\n    for i in range(0, len(binary_str), 2):\n        binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n\n    # Convert the binary string back to integer\n    result = int(binary_str, 2)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Find the last set bit position\n    last_set_bit = n.bit_length() - 1\n\n    # Iterate over all set bits\n    for i in range(1, last_set_bit):\n        # Set the i-th bit to 1\n        n |= 1 << i\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit of the input number\n    for i in range(8):\n        # check if the i-th bit is an even bit\n        if n & (1 << i):\n            # set the i-th bit of the result to 1\n            result |= (1 << i)\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the corresponding bit in the result to 1\n        if bit == '1':\n            result |= 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is an even number, set the corresponding bit of even_bits to 1\n        if int(bit) % 2 == 0:\n            even_bits |= 1 << int(bit)\n    \n    # Return the number with even bits set\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the result to 1\n        if int(bit) == 0:\n            result = result | (1 << int(bit))\n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object to count the number of occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary of unique tuples to their counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # iterate through the list of tuples\n    for item in test_list:\n        # add the count of the tuple to the count_dict\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Create a dictionary to store the results\n    result = {}\n    # Iterate over the keys of the Counter object\n    for key in counter.keys():\n        # Get the number of occurrences of the current key\n        count = counter[key]\n        # Add the key-value pair to the result dictionary\n        result[key] = count\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function from collections to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Create a dictionary to store the count of each unique tuple\n    counts = {}\n    # Loop through each unique tuple and update the count in the dictionary\n    for tuple in unique_tuples:\n        counts[tuple] = test_list.count(tuple)\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            substring = str[i:j+1]\n            if substring and len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def helper(m, n, total):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return min(m - 2, 1) + total\n        else:\n            return helper(m, n - 1, total) + helper(m, n - 2, total + min(m - 2, 1))\n\n    return helper(m, n, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if i >= 2 * n:\n            continue\n        for j in range(1, m // 2 + 1):\n            if 2 * j <= 2 * i and 2 * j < m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m):\n        if i % 2 == 0:\n            count += 1\n        else:\n            if i >= 2 * m:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Helper function to check if a number is a valid sequence element\n    def is_valid_sequence_element(num):\n        return (2 * num) <= m and num < n\n\n    # Helper function to get all valid sequence elements up to a certain value\n    def get_sequence_elements(num):\n        elements = []\n        for i in range(num, m):\n            if is_valid_sequence_element(i):\n                elements.append(i)\n        return elements\n\n    # Helper function to get all possible sequences of length n\n    def get_all_sequences(elements):\n        sequences = []\n        for i in range(len(elements) - n + 1):\n            sequence = []\n            for j in range(n):\n                sequence.append(elements[i + j])\n            sequences.append(tuple(sequence))\n        return sequences\n\n    # Helper function to count the number of valid sequences\n    def count_valid_sequences(elements):\n        return len(get_all_sequences(elements))\n\n    # Get the sequence elements up to n\n    sequence_elements = get_sequence_elements(n)\n\n    # Count the total number of valid sequences\n    total_sequences = count_valid_sequences(sequence_elements)\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev_num = 0\n    for i in range(2, n + 1):\n        curr_num = 2 * prev_num + 1\n        while curr_num <= m and curr_num <= n:\n            count += 1\n            curr_num += 1\n        prev_num = curr_num\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def count_sequences(start_index, current_sequence, length):\n        if length == 0:\n            return 1\n        if start_index == n:\n            return 1\n        total_sequences = 0\n        for i in range(start_index, n):\n            if current_sequence[length-1] + 2*current_sequence[length-2] <= m and current_sequence[length-1] + 2*current_sequence[length-2] >= 2*current_sequence[length-3]:\n                total_sequences += count_sequences(i, current_sequence, length+1)\n        return total_sequences\n\n    return count_sequences(0, [1], 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    count = 0\n    prev_num = 0\n    \n    for i in range(m, 0, -1):\n        for j in range(2, n+1):\n            if i >= 2*prev_num <= m:\n                count += 1\n            total_sequences += count\n            prev_num = i\n            \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, n + 1):\n        for j in range(2, m + 1, 2):\n            if j < (i * 2):\n                break\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num = 1\n    prev_num = 1\n    for i in range(1, n + 1):\n        num = (2 * prev_num) + 1\n        prev_num = num\n        if num > m:\n            break\n    return num - 1"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(2, m+1):\n        for j in range(1, i//2+1):\n            if i%2 == 0:\n                if i >= 2*j:\n                    total_sequences += 1\n            else:\n                if i < 2*j:\n                    total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the length of list1 is greater than or equal to 1\n    if len(list1) < 1:\n        raise ValueError(\"The length of list1 should be greater than or equal to 1.\")\n    # Check if the length of list2 is greater than or equal to 1\n    elif len(list2) < 1:\n        raise ValueError(\"The length of list2 should be greater than or equal to 1.\")\n    # Check if the length of list1 is equal to the length of list2\n    elif len(list1)!= len(list2):\n        raise ValueError(\"The length of list1 should be equal to the length of list2.\")\n    # Replace the last element of list1 with the elements of list2\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    # Remove the last element of the first list\n    list1.pop()\n    \n    # Add the elements of the second list to the first list\n    list1 += list2\n    \n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Replace the last element of the first list with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2.pop(0)\n        \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list1 (list): The modified list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Replace the last element of the first list with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2[i-length]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 0\n    num = N\n    while True:\n        num += 1\n        count += 1\n        sqrt_num = int(math.sqrt(num))\n        if sqrt_num*sqrt_num == num:\n            break\n\n    return num - count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # use binary search to find the next perfect square greater than N\n    low = N + 1\n    high = math.sqrt(N)\n    while low <= high:\n        mid = (low + high) // 2\n        if mid*mid > N:\n            high = mid - 1\n        else:\n            low = mid + 1\n    # return the next perfect square\n    return low"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Check if the square root is an integer or not\n    if sqrt_N.is_integer():\n        # If it is an integer, round it up to the next integer\n        sqrt_N += 1\n        \n    else:\n        # If it is a floating-point number, round it to the nearest integer\n        sqrt_N = math.ceil(sqrt_N)\n        \n    # Find the square root of the next perfect square\n    sqrt_next_perfect_square = math.sqrt(sqrt_N**2)\n    \n    # Return the next perfect square\n    return int(sqrt_next_perfect_square)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    while True:\n        x = math.sqrt(x)\n        if x*x == N:\n            return math.ceil(x) + 1\n        else:\n            x += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert N to float and add 1 to it\n    N = float(N) + 1\n\n    # Find the next perfect square using the formula sqrt(N) + 1\n    sqrt_N = int(math.sqrt(N)) + 1\n\n    # Return the next perfect square\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    def next_square(num):\n        if is_square(num):\n            return num\n        i = num - 1\n        while not is_square(i):\n            i -= 1\n        return i\n\n    num = N\n    while True:\n        num += 1\n        if next_square(num) > N:\n            return num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # Check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Find the square root of N using math module\n    sqrtN = int(math.sqrt(N))\n\n    # Find the largest perfect square less than sqrtN\n    while True:\n        sqrtN -= 1\n        if int(math.sqrt(sqrtN))**2 == sqrtN:\n            break\n\n    # Find the next perfect square greater than sqrtN\n    next_sqrtN = sqrtN + 1\n    while True:\n        next_sqrtN += 1\n        if int(math.sqrt(next_sqrtN))**2 == next_sqrtN:\n            break\n\n    # Return the next perfect square greater than N\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    # Find the first perfect square greater than or equal to N\n    i = 1\n    while i*i <= N:\n        i += 1\n\n    # Find the next perfect square greater than the found perfect square\n    while i**2 < N:\n        i += 1\n\n    # Check if the next perfect square is greater than or equal to N\n    while i*i < N:\n        i += 1\n\n    # Check if the next perfect square is greater than or equal to N\n    while i*i <= N:\n        if is_perfect_square(i) and i >= N:\n            return i\n\n        i += 1\n\n    # If no next perfect square is found, return N\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    square = int(math.sqrt(sqrtN) ** 2)\n    next_square = square + 1\n    while next_square <= sqrtN:\n        if next_square * next_square == N:\n            return next_square\n        next_square += 1\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrtN = math.sqrt(N)\n\n    # Check if sqrtN is an integer\n    if sqrtN.is_integer():\n        # If sqrtN is an integer, then its square is greater than N\n        return sqrtN*sqrtN\n    else:\n        # If sqrtN is not an integer, then its square is the nearest integer to N\n        return int(sqrtN+1)*int(sqrtN+1)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is bitonic or not\n    if max(arr) - min(arr) < 2:\n        return 0\n\n    # Initialize variables for the maximum subsequence sum\n    max_sum_i = arr[0]\n    max_sum_ip1 = 0\n\n    # Traverse through the array from the second element\n    for i in range(1, len(arr)):\n        # If the element is greater than the current maximum sum of the subsequence\n        if arr[i] > max_sum_i:\n            max_sum_ip1 = max_sum_i\n            max_sum_i = arr[i]\n        # If the element is less than the current maximum sum of the subsequence\n        elif arr[i] < max_sum_i:\n            max_sum_ip1 = max(max_sum_ip1 + arr[i], max_sum_i)\n        # If the element is equal to the current maximum sum of the subsequence\n        else:\n            max_sum_ip1 = max(max_sum_ip1, max_sum_i)\n\n    # Return the maximum sum of the subsequence\n    return max_sum_ip1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    arr.sort()\n\n    n = len(arr)\n    max_sum = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] > arr[i - 1]:\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n        else:\n            if arr[i] < max_sum:\n                max_sum = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    elif n == 2:\n        if arr[0] <= arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        left_sum = 0\n        right_sum = 0\n        for i in range(n-1):\n            left_sum += arr[i]\n            right_sum += arr[n-i-1]\n        if left_sum <= right_sum:\n            return left_sum + max_sum(arr[1:])\n        else:\n            return right_sum + max_sum(arr[:-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array as input and finds the maximum sum of a bitonic subsequence for the given array. \n    If the array is not a valid bitonic sequence, it will return None.\n    '''\n    if len(arr) < 3: \n        return None\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables for sum and max_sum\n    sum = arr[0]\n    max_sum = sum\n\n    # Loop through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # if arr[i] is increasing\n            sum += arr[i]\n        else: # if arr[i] is decreasing\n            sum -= arr[i-1]\n\n        if sum > max_sum:\n            max_sum = sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return 0\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    increasing_count = 0\n    decreasing_count = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] < arr[i+1]:\n                increasing_count += 1\n            else:\n                decreasing_count += 1\n        elif i == len(arr)-1:\n            if arr[i] > arr[i-1]:\n                increasing_count += 1\n            else:\n                decreasing_count += 1\n        else:\n            if arr[i] < arr[i+1]:\n                if arr[i] > arr[i-1]:\n                    decreasing_count += 1\n                    increasing_count += 1\n                else:\n                    decreasing_count += 1\n            else:\n                if arr[i] < arr[i-1]:\n                    increasing_count += 1\n                    decreasing_count += 1\n                else:\n                    increasing_count += 1\n                    decreasing_count += 1\n        \n        # Update the maximum sum\n        if increasing_count == 1 and decreasing_count == 0:\n            max_sum = max(max_sum, arr[i])\n        elif decreasing_count == 1 and increasing_count == 0:\n            max_sum = max(max_sum, arr[i])\n        elif increasing_count == decreasing_count == 0:\n            max_sum = max(max_sum, arr[i])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n  # Initialize the dp array with 0\n    \n    # Calculate the max sum ending at index i for all i from 0 to n-1\n    for i in range(n): \n        if i == 0 or arr[i] < arr[i-1]:  # If the element is increasing or the first element is increasing\n            dp[i] = arr[i]\n        else:  # If the element is decreasing or the first element is decreasing\n            dp[i] = arr[i] + dp[i-1]\n            \n    # Initialize the max sum ending at index i with the maximum value possible\n    max_sum = float('-inf')\n    for i in range(n): \n        if i == 0 or arr[i] < arr[i-1]:  # If the element is increasing or the first element is increasing\n            max_sum = max(max_sum, dp[i])\n        else:  # If the element is decreasing or the first element is decreasing\n            max_sum = max(max_sum, arr[i] + dp[i-1])\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    inc = []\n    dec = []\n    max_sum = float('-inf')\n\n    # Find the increasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc.append(arr[i])\n        else:\n            break\n\n    # Find the decreasing subsequence\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            dec.append(arr[i])\n        else:\n            break\n\n    # Combine the increasing and decreasing subsequences\n    for i in range(len(inc)):\n        dec[len(inc)-i-1] = inc[i]\n\n    # Calculate the maximum sum of the bitonic subsequence\n    for i in range(len(dec)):\n        max_sum = max(max_sum, sum(dec[i:]))\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Check if the first element is increasing\n    if arr[1] > arr[0]:\n        return arr[0]\n    elif arr[1] < arr[0]:\n        return arr[1]\n    \n    # Check if the first two elements are increasing\n    if arr[2] > arr[1]:\n        return arr[1]\n    elif arr[2] < arr[1]:\n        return arr[2]\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = arr[0]\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            max_sum += arr[i]\n        elif arr[i] < arr[i-1]:\n            max_sum = max(max_sum, arr[i])\n        else:\n            continue\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    # Initialize the variables for the maximum sum and the current subsequence\n    max_sum = arr[0]\n    current_sum = arr[0]\n    # Iterate through the array and find the maximum sum and the current subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0.00001\n    high = number\n    guess = (low + high) / 2\n\n    while abs(guess**2 - number) > 0.0001:\n        if guess**2 < number:\n            low = guess\n        else:\n            high = guess\n        guess = (low + high) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(guess - next_guess) < 0.00001:\n            return guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    epsilon = 1e-10  # Tolerance for the square root algorithm\n    guess = number / 2  # Start with a guess of the square root\n    while True:\n        # Calculate the new guess\n        new_guess = (guess + number / guess) / 2\n        # Check if the new guess is within the desired tolerance\n        if abs(new_guess - guess) < epsilon:\n            return new_guess\n        # Update the guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Base case: if the number is already a perfect square, return it as is\n    if number == int(number ** 0.5) ** 2:\n        return number\n    \n    # If the number is not a perfect square, use the babylonian method to compute its square root\n    else:\n        # Set initial values for x and y\n        x = 0.5\n        y = number / x\n        \n        # Iteration loop\n        while abs(x - y) > 0.0001:\n            x = y\n            y = (x + number / x) / 2\n        \n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = 0.0\n    while abs(x - y) > 0.00001:\n        y = x\n        x = (x + number / x) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables to keep track of the previous guess, current guess, and the square of the previous guess\n    prev_guess = 1\n    curr_guess = number / prev_guess\n    square_of_prev_guess = curr_guess * curr_guess\n    \n    # Loop until the current guess is within a certain tolerance of the square root of the number\n    while abs(curr_guess - square_of_prev_guess) > 0.000001:\n        prev_guess = curr_guess\n        curr_guess = (number / prev_guess) + ((number / prev_guess) / prev_guess)\n        square_of_prev_guess = curr_guess * curr_guess\n        \n    # Return the current guess as the square root of the number\n    return curr_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = number/x0\n    n = 0\n    \n    while abs(x1-x0) >= 0.0001:\n        x0 = x1\n        x1 = number/x0\n        n += 1\n    \n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    count = 0\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n        count += 1\n    print(f\"The square root of {number} is {guess}\")\n    print(f\"The number of iterations taken is {count}\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    old_guess = 0.0\n    guess = 1.0\n    precision = 0.00001\n\n    # Check if the number is negative\n    if number < 0:\n        # If the number is negative, return None\n        return None\n\n    # Check if the number is already a perfect square\n    if number == int(number**0.5):\n        return int(number**0.5)\n\n    # Main loop\n    while abs(guess**2 - number) > precision:\n        old_guess = guess\n        guess = (old_guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0.5\n    x1 = number/x0\n    for i in range(1, 100):\n        x2 = (x0 + x1)/2\n        if abs(x1 - x2) < 1e-8:\n            break\n        x0 = x1\n        x1 = x2\n    return x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                if i - j <= 2:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = dp[i - 1][j + 1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = j\n\n    return str[start:start + max_len]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n    # Creating a 2D table to store the lengths of longest palindrome subsequences \n    # in all prefixes of the string \n    table = [[0] * n for i in range(n)] \n  \n    # LPS of empty string is 0 \n    for i in range(n): \n        table[i][i] = 0 \n  \n    # LPS of single character string is 1 \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            table[i][i] = 1 \n        else: \n            table[i][i] = 0 \n  \n    # LPS of string of even length is 2 and odd length is 1 \n    for i in range(3, n+1): \n        for j in range(i-1): \n            if str[j] == str[j+1]: \n                table[i][j] = table[i-1][j+1] + 2 \n            else: \n                table[i][j] = max(table[i-1][j], table[i-1][j+1]) \n  \n    # Returning the length of the longest palindromic subsequence \n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def longest_palindromic_subsequence(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string s.\n    \"\"\"\n    n = len(s)\n    # Create a table of size n x n\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the table to 0\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize two variables to store the lengths of the longest palindromic subsequence found so far in the string.\n    start = 0\n    end = 0\n    \n    # Initialize a variable to store the length of the longest palindromic subsequence found so far.\n    max_length = 1\n    \n    # Iterate through the characters in the string.\n    for i in range(len(str)):\n        \n        # Check if the current character is the start of a palindromic subsequence.\n        if i < len(str) - 1 and str[i] == str[i + 1]:\n            \n            # If the current character is the start of a palindromic subsequence, and the current palindromic subsequence is longer than the longest palindromic subsequence found so far, update the start and end indices and the length of the longest palindromic subsequence found so far.\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n                start = i\n                end = i\n                \n        # Check if the current character is the end of a palindromic subsequence.\n        elif i > 0 and str[i] == str[i - 1]:\n            \n            # If the current character is the end of a palindromic subsequence, and the current palindromic subsequence is longer than the longest palindromic subsequence found so far, update the start and end indices and the length of the longest palindromic subsequence found so far.\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n                start = i - 1\n                end = i - 1\n                \n    # Return the length of the longest palindromic subsequence found.\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            dp[i][i] = 2\n            start = i-1\n            max_len = 2\n        else: \n            for j in range(i): \n                if str[i] == str[j]: \n                    dp[i][j] = dp[j][i-1] + 2\n                    if dp[i][j] > max_len: \n                        start = j\n                        max_len = dp[i][j]\n        if max_len > n//2: \n            break\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    if len(str) == 0:\n        return 0\n    \n    n = len(str)\n    t = [[0] * n for i in range(n)]\n    \n    max_len = 1\n    start = 0\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            t[i][i] = 2\n            max_len = 2\n            start = i-1\n            continue\n        \n        # try expanding from i-1 to i+1\n        for j in range(i):\n            if str[i] == str[j] and t[j+1][i-1] + 2 > t[i][j]:\n                t[i][j] = t[j+1][i-1] + 2\n                max_len = max(max_len, t[i][j])\n                start = j\n        \n        # if the maximum length is 2 and the characters are the same, we can extend the palindrome\n        if max_len == 2 and str[i] == str[start]:\n            max_len = 3\n            \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(2)]\n\n    # Compute LPS of all prefixes\n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i+length-1\n            if str[i] == str[j]: \n                dp[0][j] = dp[0][i] + 2\n            else: \n                dp[0][j] = max(dp[0][j], dp[1][i])\n\n    # Return length of longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(str)\n\n    # Create a 2D table to store lengths of longest palindromic subsequences of length i\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Base case: if the string is empty or has only one character, it is a palindrome of length 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the lengths of palindromes of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the table using dynamic programming approach\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequences of substrings\n    # of the given string.\n    table = [[0] * (n+1) for i in range(n+1)]\n\n    # Fill the table diagonally\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    if len(str) <= 1:\n        return len(str)\n\n    dp = [1] * len(str)\n    max_len = 1\n    start = 0\n\n    for i in range(1, len(str)):\n        if str[i] == str[i - 1]:\n            dp[i] = dp[i - 1] + 1\n            if dp[i] > max_len:\n                max_len = dp[i]\n                start = i - dp[i] + 1\n        else:\n            dp[i] = 1\n            if dp[i] > max_len:\n                max_len = dp[i]\n                start = i\n\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Iterate through the range from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic sum of the current iteration\n        harmonic_sum = 1/(i+1)\n\n        # Add the harmonic sum to the sum variable\n        sum += harmonic_sum\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 / n + 1 / (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize variables\n    sum = 0\n    prev_num = 0\n    \n    # calculate the harmonic sum using a loop\n    for i in range(1, n+1):\n        sum += 1/i\n        prev_num = i\n        \n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Calculate the harmonic sum using the formula (n/k) + (n/k-1) +... + (n/2) + (n/1)\n    for k in range(1, n+1):\n        sum += 1/k\n\n    # Return the harmonic sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 - (1 / harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += 1.0 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + (harmonic_sum(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of them.\n    \"\"\"\n    # create a dictionary to store the count of each element in the first array\n    counts = {}\n    for num in array_nums1:\n        counts[num] = counts.get(num, 0) + 1\n\n    # create an empty set to store the intersection of the two arrays\n    intersection = set()\n\n    # loop through the second array and add each element to the intersection set if it is present in the first array\n    for num in array_nums2:\n        if num in counts and counts[num] > 0:\n            intersection.add(num)\n            counts[num] -= 1\n\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Check if the element is in the second array\n        if num in array_nums2:\n            # If it is, add it to the intersection list\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n    array_nums1: list of integers\n    array_nums2: list of integers\n\n    Returns:\n    list of integers: the intersection of the two arrays\n    \"\"\"\n\n    # Use a dictionary to store the counts of each element in the second array\n    counts_second = {}\n    for num in array_nums2:\n        if num in counts_second:\n            counts_second[num] += 1\n        else:\n            counts_second[num] = 1\n\n    # Use two pointers to iterate over the first array and check if each element is in the second array\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            if counts_second[array_nums1[i]] > 0:\n                intersection.append(array_nums1[i])\n                counts_second[array_nums1[i]] -= 1\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of these arrays.\n    \"\"\"\n    # Create two dictionaries to store the counts of each element in array_nums1 and array_nums2\n    count_dict1 = {}\n    count_dict2 = {}\n    for num in array_nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n    for num in array_nums2:\n        count_dict2[num] = count_dict2.get(num, 0) + 1\n\n    # Find the intersection of the two dictionaries\n    intersection = []\n    for num in count_dict1:\n        if num in count_dict2 and count_dict1[num] > 0 and count_dict2[num] > 0 and count_dict1[num] == count_dict2[num]:\n            intersection.append(num)\n            count_dict1[num] -= 1\n            count_dict2[num] -= 1\n\n    # Return the intersection as a list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Loop through each number in the first array\n    for num1 in array_nums1:\n        # If the number exists in the second array, add it to the intersection set\n        if num1 in array_nums2:\n            intersection.add(num1)\n\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of elements in the first array\n    set1 = set(array_nums1)\n    # Create an empty set to store the common elements\n    common = set()\n    # Loop through the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in set1:\n            common.add(num)\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the intersection values\n    intersection = {}\n    \n    # Iterate through the first array\n    for num1 in array_nums1:\n        # Check if the number is in the second array\n        if num1 in array_nums2:\n            # If it's in the second array, add it to the dictionary\n            intersection[num1] = True\n    \n    # Return the intersection dictionary\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1 to remove duplicates\n    set_nums1 = set(array_nums1)\n    # Create a set from array_nums2 to remove duplicates\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the sets and return as list\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[:i])\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through each element in the input list\n    for i in range(len(list)):\n        # append the input element to the result list\n        result.append(list[i])\n        # append the input element to the result list\n        result.append(element)\n    # return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        try:\n            # convert the complex number to polar coordinates\n            r, theta = cmath.polar(number)\n            \n            # print the result\n            print(f\"({r:.2f}, {theta:.2f})\")\n        except ValueError:\n            # print an error message if the number is invalid\n            print(\"Invalid number\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        r = cmath.sqrt(real**2 + imag**2)\n        phi = cmath.phase(num)\n        polar = (r, phi)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        polar = cmath.polar(num)\n        print(\"Complex number:\", num)\n        print(\"Real part:\", real)\n        print(\"Imaginary part:\", imag)\n        print(\"Polar form:\", polar)\n        print()"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert complex number to polar coordinates\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n\n        # print the polar coordinates\n        print(f\"Polar coordinates for {number} are angle = {angle}, magnitude = {magnitude}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_num = (r, phi)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(f\"Real part: {real}, Imaginary part: {imag}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        # convert complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # append polar coordinates to list\n        polar_coords.append((r, theta))\n    \n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        phi = cmath.phase(number)\n        \n        # Print polar coordinates\n        print(r, phi)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for number in numbers:\n        if isinstance(number, complex):\n            magnitude = abs(number)\n            angle = cmath.phase(number)\n            polar_list.append((magnitude, angle))\n        else:\n            raise ValueError('Input must be complex numbers')\n    return polar_list"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Count the number of integer elements in a list.\n\n    Parameters:\n    lst (list): the list of elements to count\n\n    Returns:\n    int: the number of integer elements in the list\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of integer elements in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # create a list of all possible combinations with repetition\n    combos = list(combinations_with_replacement(l, n))\n\n    # create a list to store the tuples for each combination\n    combos_tuples = []\n\n    # iterate over each combination and append its elements as a tuple to the list\n    for combo in combos:\n        combo_tuple = tuple(combo)\n        combos_tuples.append(combo_tuple)\n\n    return combos_tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    # create a list of tuples with the possible colors\n    colors = [('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'brown', 'pink'), ('red', 'blue', 'green', 'yellow', 'orange'), ('red', 'blue', 'green', 'yellow'), ('red', 'blue', 'green')]\n\n    # generate all combinations with repetition of the list and colors\n    result = list(combinations_with_replacement(lst + colors, n + len(colors)))\n\n    # convert the list of tuples to a list of tuples with the original elements and the colors\n    result = [(item, color) for item, color in result[n:] for _ in range(n)]\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    combinations = []\n    for color1 in colors:\n        for color2 in colors:\n            if color1!= color2:\n                combination = (color1, color2)\n                combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            combinations.append((l[i], l[j]))\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Start with a list of all numbers from 2 to n-1\n    nums = list(range(2, n+1))\n\n    # Initialize a list to store the prime numbers\n    primes = []\n\n    # Loop through the list of numbers\n    for num in nums:\n\n        # If the number is prime, add it to the list of primes\n        if isPrime(num):\n            primes.append(num)\n\n    # Return the number of primes\n    return len(primes)\n\ndef isPrime(num):\n    '''\n    Write a python function that takes in a positive integer and returns True if it is prime, and False otherwise.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Loop through all the numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a given number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n\n    while (p**2 <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers less than or equal to n\n    count = 0\n    for i in range(2, n+1):\n        if prime[i] == True:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        # If not, return None\n        return None\n\n    # Initialize the maximum value to the first tuple's maximum value\n    max_value = max(test_tup1)\n\n    # Check if the second tuple's maximum value is greater\n    if max(test_tup2) > max_value:\n        # If yes, update the maximum value\n        max_value = max(test_tup2)\n\n    # Return the maximum value as a tuple\n    return (max_value,)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be equal.\")\n        return\n    \n    # Find the maximum element in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Compare the two maximum elements and return the larger tuple\n    if max1 >= max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Initialize a variable to store the max value\n    max_val = 0\n\n    # Iterate through the tuples and find the maximum value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_val = max(max_val, test_tup1[i])\n        else:\n            max_val = max(max_val, test_tup2[i])\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max1 = max2 = 0\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # If both tuples have the same length, compare the elements\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max1 += test_tup1[i]\n            elif test_tup1[i] < test_tup2[i]:\n                max2 += test_tup2[i]\n        # Return the maximum sum of the two tuples\n        return max(max1, max2)\n    else:\n        # If the two tuples have different lengths, return the maximum length\n        return max(len(test_tup1), len(test_tup2))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the given tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    # find the maximum element of each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    # return the tuple with the maximum elements\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must be of same length.')\n\n    # Maximize each element in the tuples\n    max_tup1 = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    max_tup2 = tuple(max(x, y) for x, y in zip(test_tup2, test_tup1))\n\n    # Return the maximum tuple\n    return max(max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length')\n\n    # Create a new tuple with the maximum values of the two tuples\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 2\n    # Iterate over all numbers from 2 to n\n    while count < n:\n        # Check if the number is prime using a function\n        if is_prime(num):\n            count += 1\n        num += 1\n    # Return the nth prime number\n    return num\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # Base cases\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    primes = [2]\n    current_prime = 2\n    \n    # Check if the input is valid\n    if n < 0:\n        return 'Invalid input. Please enter a non-negative integer.'\n    \n    # Check if the number of primes found is less than n\n    while len(primes) < n:\n        # Check if the current prime number is prime\n        is_prime = True\n        for prime in primes:\n            if current_prime % prime == 0:\n                is_prime = False\n                break\n        \n        # If the current prime number is prime, add it to the list of primes\n        if is_prime:\n            count += 1\n            primes.append(current_prime)\n        \n        # Increment the current prime number\n        current_prime += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Calculate the square root of n^2\n    sqrt_n2 = int(n**0.5**2)\n    \n    # Trial division method to check whether a number is prime or not\n    for i in range(2, sqrt_n2+1):\n        if n%i == 0:\n            return False\n    \n    # If the result is equal to the square root of n^2, then it is a prime number\n    if sqrt_n2**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2: \n        return None \n    p = 2\n    while True:\n        if all(p % i!= 0 for i in range(2, int(p**0.5)+1)): \n            break\n        p += 1\n    for i in range(2, n+1):\n        if all(i % p!= 0 for p in range(2, int(i**0.5)+1)): \n            return i\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the list of prime numbers up to the nth newman-shanks-williams prime\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if the nth newman-shanks-williams prime is in the list of primes\n    if n in primes:\n        return n\n    else:\n        # Otherwise, iterate through the list to find the nth newman-shanks-williams prime\n        for i in range(2, len(primes)):\n            if (n - 1) % primes[i] == 0:\n                return primes[i]\n                break\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the variables for the prime number and its order\n    prime = 1\n    order = 1\n\n    # Loop through the odd numbers up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        # If n is divisible by i, divide n by i and increment the order\n        while n % i == 0:\n            n //= i\n            order += 1\n\n        # If n is less than i squared, break out of the loop\n        if n < i ** 2:\n            break\n\n    # If n is still greater than 2, it is not a prime number\n    if n > 2:\n        return None\n\n    # Set the prime number to be the nth newman-shanks-williams prime number\n    for i in range(1, n + 1):\n        prime *= (order + 1) // i\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    This function finds the nth Newman-Shanks-Williams prime number.\n    '''\n    # Initialize variables to keep track of current prime number and number of primes found\n    current_prime = 2\n    prime_count = 0\n    \n    # Loop through all numbers between 3 and sqrt(n)\n    for i in range(3, int(n**0.5) + 1):\n        # Check if i is a prime number\n        if n % i == 0:\n            # If it is, check if the next number to the right of i is also a prime number\n            if n % (i + 1) == 0:\n                # If it is, it's a composite number, so move on to the next number\n                continue\n            else:\n                # If it's not, it's a composite number, so increment the prime count and move on to the next number\n                prime_count += 1\n        else:\n            # If i is not a prime number, check if the number to the left of i is also a prime number\n            if n % (i - 1) == 0:\n                # If it is, it's a composite number, so move on to the next number\n                continue\n            else:\n                # If it's not, it's a composite number, so increment the prime count and move on to the next number\n                prime_count += 1\n        \n        # If the loop completes without finding a composite number, it's a prime number and we can return it\n        if prime_count == n - 1:\n            return current_prime\n        \n        # Increment the current prime number and reset the prime count\n        current_prime += 1\n        prime_count = 0"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 2\n        while i <= n - 1:\n            j = 2\n            while j * i <= n:\n                if n % j == 0:\n                    return n\n                j += 1\n            i += 1\n        return n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    count = 0\n    while count < n:\n        count += 1\n        prime += 1\n        for i in range(2, prime):\n            if prime % i == 0:\n                break\n        else:\n            print(prime)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of primes to 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n\n    for prime in primes:\n        if prime * prime > n:\n            break\n\n        count += 1\n\n    return primes[count-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check that the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n\n    # Perform the element-wise division\n    result_tup = tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    \n    # Perform element-wise division\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(tup1 / tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have same length.')\n    # Divide the elements of the tuples element-wise\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples should be equal\")\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Get the length of the first part of the list\n    length = len(list1) // 2\n\n    # Check if the length of the list is divisible by 2\n    if length * 2 == len(list1):\n        # If the length of the list is divisible by 2, split the list into two parts\n        first_part = list1[:length]\n        second_part = list1[length:]\n    else:\n        # If the length of the list is not divisible by 2, split the list into three parts\n        first_part = list1[:length+1]\n        second_part = list1[length+1:length*2+1]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the first part of the list\n    first_part_length = len(list1) // 2\n    \n    # split the original list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n    \n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L must be less than or equal to the length of the list.\")\n    else:\n        list1_part = list1[:L]\n        list2_part = list1[L:]\n        return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Calculate the length of the second part\n    part2_length = len(lst) - L\n    # Create the two parts of the list\n    part1 = lst[:L]\n    part2 = lst[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        mid = L\n    else:\n        mid = L - 1\n\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The function returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    mid = length // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #convert human age in hours to dog years\n    dog_years = h_age * 7\n    #return the result\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(height):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 7 - (height / 100)\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # converting the hours age to days age\n    days = h_age * 14\n    \n    # converting the days age to dog's years\n    years = days / 365\n    \n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    dog_years = h_age * 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7*h_age\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = h_age / 7\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        raise ValueError(\"Length of S must be a multiple of step.\")\n    n = len(S) // step\n    result = []\n    for i in range(n):\n        start = i * step\n        end = (i + 1) * step\n        result.append(S[start:end])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Check if the step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n    \n    # Split the list into chunks of size step\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the input list into a generator to enable lazy evaluation\n    S = (S[i:i+step] for i in range(0, len(S), step))\n    # Convert the generator into a list of lists\n    return list(S)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Append the current sublist to the result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to hold the result\n    result = []\n    # loop through the list and split it into sublists\n    for i in range(0, len(S), step):\n        # append each sublist to the result list\n        result.append(S[i:i+step])\n    # return the list of sublists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through the input list and split into sublists\n    for i in range(0, len(S), step):\n        # create a new sublist with the appropriate number of elements\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        raise ValueError(\"Length of list is not a multiple of step\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l + 12 * l + 8)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Find the perimeter of the cube\n    perimeter = 12*l\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = perimeter**2\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Using the formula for lateral surface area of a cube\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    \n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum\n        sum += i*i\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n        count += 1\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    square_sum = sum([i**2 for i in odd_numbers])\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        sum_of_squares = 0\n        for i in range(1, n+1, 2):\n            sum_of_squares += i ** 2\n        return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i ** 2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0  \n    count = 0  \n    while count < n:  \n        sum += (2*count+1)**2  \n        count += 1  \n    return sum  "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    for i in range(1, n+1):\n        print(\"*\" * count)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns the nth star number.\n    '''\n    # Initialize the variable num to 1\n    num = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Print the num and increment num\n        print('*', end=' ')\n        num += 1\n    \n    # Print a newline character to move to the next line\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Increment the count variable by 1 for each odd number\n        if i % 2!= 0:\n            count += 1\n\n        # Check if the count variable is equal to n\n        if count == n:\n            return i\n\n    # If the count variable is not equal to n, return -1 (the error code)\n    return -1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n * (n + 1) // 2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num = 1  # current number\n    count = 1  # counter for number of stars\n    \n    # loop through the range of numbers from 1 to n\n    while count <= n:\n        # print the number of stars\n        print(\"*\" * num)\n        # increment the number of stars\n        num += 1\n        # increment the counter\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    while num <= n:\n        print(\"*\" * num)\n        num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables\n    start = 1\n    end = n\n    step = 1\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the list of numbers\n    while start <= end:\n        # Add the start number to the result list\n        result.append(start)\n\n        # Update the start and end numbers\n        start += step\n        end += step\n\n    # Return the result list\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return '1'\n    elif n == 1:\n        return '2 *'\n    else:\n        star_num = ''\n        count = 1\n        while count <= n:\n            star_num +='* '\n            count += 1\n        return star_num[:-2]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a string as input and returns the ASCII value of the character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert k to a string and then use the ord() function to get the ascii value\n    k = str(k)\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        k = k[0]\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None\n\nprint(ascii_value('A')) # Output: 65\nprint(ascii_value('2')) # Output: None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII values are stored in lists in Python.\n    ascii_val = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    # Use the index of the character in the list to find its ASCII value.\n    return ascii_val.index(ord(k))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    if k.isalpha():\n        return ord(k)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index_sum += i * arr[i]\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n    if even_count == 0:\n        return \"No even number found at even positions.\"\n    else:\n        return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0 and index % 2 == 0:\n            sum_even += arr[index]\n        index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n\n    if count_even == 0:\n        return \"There are no even numbers in the list\"\n    else:\n        return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n            sum += arr[i]\n            if count % 2 == 0:\n                return sum\n    return -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:  # check if i is even\n            if arr[i] % 2 == 0:  # check if arr[i] is even\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(2, n+1, 2))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_power_sum = 0\n    for i in range(2, n+1, 2):\n        even_power_sum += i ** 5\n\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i**5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += i ** 5\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in reversed(test_list)]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i][1] == None:\n            result.append(test_list[i][0])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple_obj in test_list:\n        rear_elements.append(tuple_obj[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_elements = []\n\n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the rear element of the tuple to the list of rear elements\n        rear_elements.append(tup[-1])\n\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element of the first tuple from the element of the second tuple with the same index\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding elements from the second tuple\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize a new empty tuple to store the result\n    result_tup = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element exists in the second tuple with the same index\n        if i < len(test_tup2):\n            # Subtract the elements and append the result to the result tuple\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            # If the element doesn't exist in the second tuple, add it to the result tuple with the same value as the element in the first tuple\n            result_tup += (test_tup1[i],)\n            \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum of even index binomial coefficients to zero\n    even_coeff_sum = 0\n\n    # Use the math.comb function to calculate the even index binomial coefficients\n    for i in range(n):\n        even_coeff_sum += math.comb(n, 2 * i)\n\n    # Return the sum of even index binomial coefficients\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    else:\n        even_binomial_coeff = 0\n        for i in range(1, n + 1):\n            even_binomial_coeff += math.comb(n, i)\n            if i % 2 == 0:\n                even_binomial_coeff += math.comb(n, i - 2)\n        return even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize variables\n    even_sum = 0\n    coeff_sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            coeff_sum += math.factorial(i) / (math.factorial(n-i) * math.factorial(i))\n        else:\n            coeff_sum += 0\n\n    # Add the sum of even index binomial coefficients to the overall sum\n    even_sum += coeff_sum\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function calculates the sum of even-indexed binomial coefficients of the form:\n\n    C(n,k) = n! / (k! * (n-k)!)\n\n    where n and k are positive integers.\n    '''\n    # initialize sum to zero\n    sum_coeffs = 0\n\n    # loop through even indices of n\n    for i in range(0, n+1, 2):\n        # calculate coefficient\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        # add to sum\n        sum_coeffs += coeff\n\n    # return sum\n    return sum_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_even_binomial_coeffs += math.comb(n, i)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(2, n+1):\n        for j in range(i, n+1, 2):\n            sum_even += math.comb(n, j-1)\n    \n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum of even index binomial coefficients to zero\n    even_binomial_sum = 0\n    # loop through all values of k from 0 to n\n    for k in range(n+1):\n        # calculate the binomial coefficient (n choose k) and check if it is even\n        binomial_coef = math.comb(n, k)\n        if k % 2 == 0:\n            # if the index k is even, add its value to the sum\n            even_binomial_sum += binomial_coef\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += math.comb(n, 2*i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    # Calculate the sum of even index binomial coefficients using a loop\n    sum_even = 0\n    for i in range(1, n+1):\n        bin_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += bin_coeff\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14 * r ** 2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (3/5)*pi*r**2*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r**2  # Formula for the area of a cylinder\n    volume = area * h  # Formula for the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula to find the volume of a cylinder\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create an empty list to store the filtered entries\n    filtered_dict = []\n\n    # Iterate over each key-value pair in the dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the key-value pair to the filtered list\n            filtered_dict.append((key, value))\n\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i - 1]:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            if count == 1:\n                return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i - 1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n        i += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal_num = 1\n    square = 1\n    # loop through n times\n    for i in range(n):\n        # update decagonal number and square\n        decagonal_num += square\n        square += 4\n    # return the nth decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # define the base of the decagonal sequence\n    base = 10 ** 2\n    \n    # calculate the nth term of the sequence\n    nth_term = base * (n // 10) + n % 10\n    \n    return nth_term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_term(n):\n        return n * (3 * n - 1) // 2\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return decagonal_term(n - 1) + decagonal_term(n - 2)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th decagonal number is\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first and second terms of the sequence\n    a = 1\n    b = 1\n    \n    # Loop through n times to generate the nth decagonal number\n    for i in range(n):\n        # Calculate the nth term of the sequence\n        term = a + b\n        \n        # Update the first and second terms for the next iteration\n        a = b\n        b = term\n    \n    # Return the nth term of the sequence\n    return b"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        decagonal = 1 + (i * (i+1) // 2)\n        if decagonal == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (5 * n * n) - (3 * n) + 1\n\ndef decagonal(n):\n    '''\n    Write a function to generate all the decagonal numbers up to and including n.\n    '''\n    if n < 1:\n        return []\n    else:\n        result = [is_num_decagonal(i) for i in range(1, n+1)]\n        return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal_num = 1\n    num_of_rows = int(n/2)\n    row_num = 1\n    \n    # loop through each row and increment the decagonal number\n    while row_num <= num_of_rows:\n        # calculate the value of the current decagonal number\n        current_decagonal = (row_num * (row_num+1) * 10) // 2\n        \n        # check if the current decagonal number is equal to the desired n\n        if current_decagonal == n:\n            return True\n        \n        # move to the next row\n        row_num += 1\n        \n    # if no decagonal number is found, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + 2 * is_num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 1\n    for i in range(1, n+1):\n        decagonal_number = decagonal_number + (i * (2 * i - 1)) // 2\n    return decagonal_number"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements of the list are unique,\n    else it returns False.\n    '''\n    # convert the list to set to remove duplicates\n    set_test_list = set(test_list)\n    # if the length of the set is equal to the length of the original list,\n    # all elements are unique and we can return True\n    if len(set_test_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length!\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts the elements of two lists element-wise and returns the result.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal lengths.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must have the same length.\"\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1 (list): The first list.\n    nums2 (list): The second list.\n\n    Returns:\n    list: A new list with the elements of nums1 subtracted from nums2 element-wise.\n\n    Example:\n    >>> nums1 = [1, 2, 3]\n    >>> nums2 = [2, 4, 6]\n    >>> sub_list(nums1, nums2)\n    [0, 2, 3]\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n\n    for d in digits:\n        freq[d] += 1\n\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n    # Split the string into a list of digits\n    digits = [int(d) for d in num_str]\n    # Count the frequency of each digit in the list\n    digit_count = {}\n    for digit in digits:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    # Loop through the digit count dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_count:\n        if digit_count[digit] > digit:\n            return False\n    # If all digits have a frequency less than or equal to their value, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    for i in freq:\n        if freq[i] > int(i):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    freq = [0] * 10 # Initialize a list to store the frequency of each digit in the integer\n    num = n\n    \n    # Calculate the frequency of each digit in the integer\n    while num > 0:\n        freq[num % 10] += 1\n        num //= 10\n        \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # Initialize the frequency list\n    \n    # Loop through each digit in the integer and update the frequency list\n    while n > 0:\n        freq[n % 10] += 1\n        n //= 10\n        \n    # Check whether each digit is less than or equal to itself\n    for i in range(len(freq)):\n        if freq[i] > freq[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to keep track of the frequency of each digit\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Iterate through the frequency dictionary and check if each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n\n    # If all digits satisfy the condition, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    \n    for i in str(n):\n        count[int(i)] += 1\n    \n    for i in count:\n        if i > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # loop through each digit of the number and update the frequency count in the dictionary\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    # loop through the digits of the number and check if the frequency of the digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(elem == element for elem in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=\\s)(a\\w*b){2,3}'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b{2,3}')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b[23]{0,1}$')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains 'a' followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a[bB]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[b]{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?i)a\\1{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum array and the maximum sum\n    sum_array = [0] * k\n    max_sum = 0\n\n    # Calculate the sum of the first k elements of the array\n    for i in range(k):\n        sum_array[i] = a[i]\n\n    # Iterate over the remaining elements of the array\n    for i in range(k, n):\n        # Calculate the sum of the last k elements of the array\n        sum_array[i % k] += a[i]\n\n        # Update the maximum sum\n        if sum_array[i % k] > max_sum:\n            max_sum = sum_array[i % k]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(sum(a), sum(a*k))\n    else:\n        temp = [0] * n\n        max_sum = float('-inf')\n        for i in range(n):\n            for j in range(k):\n                temp[i] += a[j]\n                max_sum = max(max_sum, temp[i])\n            temp[i] = temp[i] % (2*k)\n        max_sum = max(max_sum, sum(temp))\n        return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    mod_arr = [a[i] for i in range(n)]\n    mod_arr.extend([a[i] for i in range(n, 2 * n)])\n    mod_arr = mod_arr * k\n\n    for i in range(2 * n - k):\n        current_sum = 0\n        for j in range(k):\n            current_sum += mod_arr[i + j]\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the result variable\n    result = 0\n    # initialize the window variable\n    window = []\n    # iterate over the array a\n    for i in range(k):\n        # add the first element of the array to the window\n        window.append(a[i])\n        # update the result if the window sum is greater than the current result\n        if sum(window) > result:\n            result = sum(window)\n    # initialize the current window sum variable\n    current_sum = 0\n    # iterate over the remaining elements of the array a\n    for i in range(n-k):\n        # add the next element of the array to the window\n        window.append(a[i+k])\n        # update the current window sum\n        current_sum = sum(window)\n        # update the result if the current window sum is greater than the previous result\n        if current_sum > result:\n            result = current_sum\n    # return the result\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    dp = [0] * (n+1)\n    dp[0] = a[0]\n    for i in range(1, n+1):\n        if i <= n:\n            dp[i] = max(dp[i], dp[i-1] + a[i-1])\n        else:\n            dp[i] = max(dp[i], dp[i-1])\n    return max(dp)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Sort the array in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables\n    max_sum = 0\n    total_sum = 0\n    repeated_sum = 0\n\n    # Iterate through the array and calculate the sum\n    for i in range(n):\n        if i < k:\n            repeated_sum += a[i]\n        else:\n            repeated_sum -= a[i - k]\n        total_sum += repeated_sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    modified_array = a * k\n    for i in range(n):\n        if i < n - k:\n            current_sum += a[i]\n        else:\n            current_sum += a[i] - modified_array[i-n+k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    modified_array = [a] * k\n    for i in range(n-k+1):\n        current_sum = sum(a)\n        for j in range(k):\n            modified_array[j] = a[i+j]\n        modified_sum = sum(modified_array)\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    \n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i % k == 0:\n            curr_sum -= a[i-k]\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    repeated_array = a * k\n    for i in range(n - k):\n        current_sum = a[i]\n        for j in range(k):\n            current_sum += a[i + j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_squares = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_of_squares += count*count\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize variables\n    sum_squares = 0\n    number = 2\n\n    # loop through first n even natural numbers\n    for i in range(n):\n        # add the square of the current number to the sum_squares\n        sum_squares += number ** 2\n\n        # increment the number\n        number += 2\n\n    # return the sum of squares\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        lengths.extend([len(sublist)] * (max_lengths[-1] - len(sublist)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Get the length of each sublist\n        lengths = [len(sublist[i]) for i in range(len(sublist))]\n        # Find the maximum length in the sublist\n        max_length = max(lengths)\n        # Append the maximum length to the max_lengths list\n        max_lengths.append(max_length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    # Initialize an empty list to store the maximum length list\n    max_length_list = []\n    \n    # Loop through each sublist in the list\n    for sublist in list1:\n        \n        # Find the length of each sublist\n        length = len(sublist)\n        \n        # Check if the length is greater than the current maximum length\n        if length > len(max_length_list):\n            max_length_list = sublist\n    \n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the input list.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length not in max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize the count of ways to 1\n    count = 1\n    # loop through the number of colors\n    for i in range(1, k+1):\n        # if i is less than or equal to n-2, then there are 2 ways to paint the fence with i colors:\n        # 1. paint the first i-1 colors in a row, and then paint the last color in the second row\n        # 2. paint the first i-1 colors in the first row, and then paint the last i-1 colors in the second row\n        if i <= n-2:\n            count = count * (i+1) // 2 * (n-2-i+1) // (n-2)\n        # if i is greater than n-2, then there are 2 ways to paint the fence with i colors:\n        # 1. paint the first i-2 colors in a row, and then paint the last color in the second row\n        # 2. paint the first i-2 colors in the first row, and then paint the last i-2 colors in the second row\n        else:\n            count = count * (i+1) // 2 * (i-2) // (n-2)\n    # return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n % k!= 0: \n        return -1 \n\n    fence = [[0] * k for _ in range(n)]\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1): \n        ways[i][0] = 1\n        ways[i][1] = 1\n\n    for j in range(2, k + 1): \n        ways[0][j] = 1\n\n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if fence[i - 1][j - 1] == fence[i - 1][j]: \n                ways[i][j] = ways[i - 1][j]\n            else: \n                ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize variables to store number of ways and number of colors painted\n    num_ways = 0\n    num_colors = 0\n\n    # Initialize a list to store the colors\n    colors = []\n\n    # Loop through the fence n times\n    for i in range(n):\n        # If the current post has not been painted yet, paint it with a color\n        if num_colors < k:\n            colors.append(num_colors)\n            num_colors += 1\n        # If the current post has been painted, check if it has the same color as the previous post\n        else:\n            # If it does, paint it with the previous color\n            if colors[-1]!= colors[-2]:\n                colors.append(colors[-1])\n                num_colors += 1\n            # If it doesn't, skip this post\n            else:\n                continue\n\n    # The number of ways to paint the fence is the product of the number of colors and the number of ways to paint the fence without the last post\n    num_ways = num_colors * count_no_of_ways(n-1, k)\n\n    return num_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    fence = [0] * k\n    \n    for i in range(n):\n        if fence[0] == 0:\n            fence[0] = i+1\n            fence[1] = 0\n        elif fence[0] == 1:\n            fence[1] = i+1\n            fence[2] = 0\n        elif fence[1] == 0:\n            fence[1] = i+1\n            fence[2] = 1\n        elif fence[1] == 1:\n            fence[2] = i+1\n            fence[3] = 0\n            \n        ways += 1\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Create a list of lists representing the fence\n    fence = []\n    for i in range(n):\n        fence.append([k] * n)\n\n    # Base cases:\n    # If n is 1, there is only one way to paint the fence with at most 2 adjacent posts having the same color.\n    if n == 1:\n        return 1\n\n    # If k is 1, there is only one way to paint the fence with at most 1 adjacent post having the same color.\n    if k == 1:\n        return n * (n - 1) // 2\n\n    # If k is 2, there is only one way to paint the fence with at most 0 adjacent posts having the same color.\n    if k == 2:\n        return 1\n\n    # Initialize variables to keep track of the number of ways and the colors already used.\n    ways = 0\n    used_colors = set()\n\n    # Iterate over all possible positions of the first post and all possible colors for the second post.\n    for first_color in range(k):\n        for second_color in range(k):\n            # If the second post is already colored with the same color as the first post, skip it.\n            if second_color == first_color:\n                continue\n\n            # If the second post is already used in the same way as the first post, skip it.\n            if (first_color, second_color) in used_colors:\n                continue\n\n            # Update the fence and the used colors.\n            fence[0][first_color] = 0\n            fence[1][second_color] = 0\n            used_colors.add((first_color, second_color))\n\n            # Recursively compute the number of ways to paint the fence.\n            ways += count_no_of_ways(n - 1, k - 1)\n\n            # Undo the updates made to the fence and used colors.\n            fence[1][second_color] = 1\n            fence[0][first_color] = 1\n            used_colors.remove((first_color, second_color))\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the counts for each possible color combination\n    count_dict = {}\n    # Iterate over all possible color combinations\n    for i in range(1, k+1):\n        count_dict[(i, i)] = 1\n    \n    # Iterate over all possible fence configurations\n    for i in range(2, n+1):\n        # Iterate over all possible color combinations\n        for j in range(1, k+1):\n            # Check if the fence has 2 adjacent posts with the same color\n            if j == i-2 or j == i-1:\n                # If yes, increment the count for that combination in the dictionary\n                count_dict[(j, i)] = count_dict.get((j, i), 0) + count_dict[(j-1, i-1)]\n            # If no, increment the count for any combination of colors in the dictionary\n            else:\n                count_dict[(j, i)] = count_dict.get((j, i), 0) + sum([count_dict[(j-1, i-1)] for j in range(1, k+1)])\n    \n    # Return the count for the last combination of colors\n    return count_dict[(k, n)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # helper function to check if two colors are adjacent\n    def adjacent(c1, c2):\n        return (c1[0] - c2[0] == 1 and c1[1] - c2[1] == 0) or \\\n               (c1[0] - c2[0] == 0 and c1[1] - c2[1] == 1)\n\n    # initialize a dictionary to store the count of ways of painting the fence\n    counts = {}\n    # initialize the count of ways as 1\n    counts[0] = 1\n\n    # loop through the possible colors and calculate the count of ways of painting the fence\n    for color in range(1, k+1):\n        # loop through the possible ways of painting the fence\n        for i in range(n-1):\n            # check if the color is adjacent to the previous color\n            if adjacent((i, color), (i+1, color)):\n                # add the count of ways to the dictionary if it's not already there\n                if (i, color) not in counts:\n                    counts[(i, color)] = 0\n                counts[(i, color)] += counts[(i, color-1)]\n\n    # return the count of ways of painting the fence\n    return counts[n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list of lists to store the number of ways for each subsequence\n    ways = [[0] * (k+1) for _ in range(n+1)]\n\n    # Base case: If there are no ways to paint the fence, return 0\n    if n == 0:\n        return 0\n\n    # Base case: If there are only 1 color to choose from, return 1\n    if k == 1:\n        return 1\n\n    # Initialize the first row and column with 1\n    ways[0] = [1] * (k+1)\n    ways[1] = [1]\n\n    # Iterate over the remaining rows and columns\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # If the previous element is the same color as the current element, add 1 to the number of ways\n            if ways[i-1][j] == ways[i-1][j-1]:\n                ways[i][j] = ways[i][j-1] + ways[i-1][j]\n            # If the previous element is a different color than the current element, add 1 to the number of ways\n            else:\n                ways[i][j] = ways[i][j-1]\n\n    # Return the number of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize the 2D list to store the number of ways of painting the fence for each combination of colors\n    ways_list = [[0] * k for _ in range(n)]\n    \n    # Base case: if n == k, we can only paint the fence with 1 color\n    if n == k:\n        ways_list[0][0] = 1\n        return ways_list[0][0]\n    \n    # If n > k, we cannot paint the fence with 2 adjacent colors\n    if n > k:\n        return 0\n    \n    # Initialize the first row of the 2D list to 1\n    for i in range(k):\n        ways_list[0][i] = 1\n    \n    # Initialize the first column of the 2D list to 1\n    for i in range(1, n):\n        ways_list[i][0] = 1\n    \n    # Fill the rest of the 2D list using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k):\n            ways_list[i][j] = ways_list[i-1][j] + ways_list[i][j-1]\n    \n    # Return the final element of the 2D list, which contains the number of ways of painting the fence for each combination of colors\n    return ways_list[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways of painting the fence\n    ways = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    # Base cases for n and k\n    ways[0][0] = 1 # One way to paint the fence with 0 posts\n    ways[1][1] = 1 # One way to paint the fence with 1 post\n    ways[1][2] = 1 # One way to paint the fence with 2 posts\n\n    # Fill in the rest of the array\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if i == 2:\n                ways[i][j] = ways[i-1][j] # One way to paint the fence with i posts and j colors\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1] # Two ways to paint the fence with i-1 posts and j colors\n\n    # Return the number of ways of painting the fence with n posts and k colors\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n / m\n    quotient = round(quotient)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments, n and m, which represent the two numbers whose quotient we want to find.\n    It returns the quotient of n divided by m, rounded down to the nearest integer.\n    \"\"\"\n    # calculate the quotient using integer division\n    quotient = n // m\n    # check if the result is negative (i.e. the quotient is negative), and if so, round it up to the nearest positive integer\n    if quotient < 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integer inputs, n and m, and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return None\n    else:\n        return find(n, m - 1) + (n // m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    n (int): the numerator.\n    m (int): the denominator.\n\n    Returns:\n    int: the quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the other side of the triangle\n    s = math.sqrt(w*w + h*h)\n    # return the third side of the triangle\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # find the length of the smaller side\n    if w > h:\n        length = w\n    else:\n        length = h\n    \n    # find the angle b/w the smaller and larger sides\n    angle = math.degrees(math.acos((w*w + h*h - length*length) / (2*w*h)))\n    \n    # find the third side\n    third = (w + length * math.sin(math.radians(angle))) / 2\n    \n    return third"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the square root of the sum of the squares of the lengths of the two sides\n    square_sum = math.sqrt((w**2 + h**2))\n\n    # Find the perpendicular distance of the hypotenuse from the hypotenuse\n    hypotenuse_perpendicular = math.sqrt(w**2 + square_sum**2)\n\n    # Calculate the third side of the right angled triangle\n    third_side = square_sum - hypotenuse_perpendicular\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two sides of a right angle triangle as inputs\n    and returns the third side.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # calculate the third side of the triangle\n    third_side = math.sqrt(area / 2)\n    \n    # return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    c = (w+h)/2\n    third_side = math.sqrt(c**2 - (s/2)**2)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value as the first element of the list\n    max_val = listval[0]\n    # iterate over the rest of the list\n    for val in listval[1:]:\n        # if the current value is greater than max value, update max value\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        print(\"Error: list is empty!\")\n        return None\n\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(listval) == 0:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_val = listval[0]\n\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of values as input and returns the maximum value.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of all divisors\n    total = 0\n\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(number ** 0.5) + 1):\n        # Check if the given number is divisible by i\n        if number % i == 0:\n            # If it is, add it to the total\n            total += i\n\n    # Return the total sum of all divisors\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array using merge sort\n    def merge_sort(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            merge_sort(arr, low, mid)\n            merge_sort(arr, mid+1, high)\n            merge(arr, low, mid, high)\n\n    def merge(arr, low, mid, high):\n        i = low\n        j = mid+1\n        temp = []\n        count = 0\n\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                temp.append(arr[i])\n                i += 1\n            else:\n                count += mid - i + 1\n                temp.append(arr[j])\n                j += 1\n\n        while i <= mid:\n            temp.append(arr[i])\n            i += 1\n\n        while j <= high:\n            temp.append(arr[j])\n            j += 1\n\n        for k in range(low, high+1):\n            arr[k] = temp[k-low]\n\n        return count\n\n    merge_sort(arr, 0, n-1)\n\n    # Count inversions\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            inv_count += (n - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr): \n        if len(arr) <= 1: \n            return arr \n        mid = len(arr) // 2 \n        left = merge_sort(arr[:mid]) \n        right = merge_sort(arr[mid:]) \n        return merge(left, right) \n    \n    def merge(left, right): \n        result = [] \n        i = j = 0 \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                result.append(left[i]) \n                i += 1 \n            elif left[i] > right[j]: \n                result.append(right[j]) \n                j += 1 \n            else: \n                result.append(left[i]) \n                i += 1 \n                j += 1 \n        result += left[i:] \n        result += right[j:] \n        return result \n    \n    inv_count = 0 \n    merge_sort(arr) \n    for i in range(1, len(arr)): \n        for j in range(0, i): \n            if arr[i] < arr[j]: \n                inv_count += len(arr) - i - j \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes in an array as input and returns the number of inversions in the array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                inv_count += (n-j-1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the inversion count to zero\n    inv_count = 0\n    \n    for i in range(n):\n        # Find the first element greater than arr[i]\n        j = i+1\n        while j < n and arr[j] <= arr[i]:\n            j += 1\n        # Count the inversions between i and j-1\n        inv_count += j-i-1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversion_count = 0\n\n    for i in range(n):\n        left = 0\n        right = i\n\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[i]:\n                left = mid + 1\n            else:\n                right = mid\n\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                inversion_count += (right - left)\n                right -= 1\n            elif arr[j] < arr[i]:\n                left += 1\n            else:\n                continue\n\n        if right > i:\n            inversion_count += (n - left)\n\n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as an input and returns the number of inversions in the array.\n    The time complexity of this function is O(nlogn) due to the sorting of the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the count of inversions\n    inv_count = 0\n\n    # Loop through the array and count the inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the current pair of elements is an inversion\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[j] < arr[min_idx]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n    # Calculate the inversion count using two pointers approach\n    for i in range(1, n): \n        j = i \n        while j > 0 and arr[j] > arr[j-1]: \n            j -= 1 \n            inv_count += j\n        while j < n and arr[j] < arr[j-1]: \n            j += 1\n            inv_count += n-j\n            \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves \n    low = 0\n    high = n - 1\n\n    # Sort the array in ascending order \n    while low < high: \n        while arr[low] < arr[high]: \n            low += 1\n        while arr[high] > arr[low]: \n            high -= 1\n\n        # Swap the elements \n        arr[low], arr[high] = arr[high], arr[low]\n\n        # Update the inversion count \n        inv_count += high - low + 1\n\n        # Move the pointers towards the middle \n        low += 1\n        high -= 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # create an empty list to store the flattened list\n    flattened_list = []\n    # loop through each element in the list\n    for item in list1:\n        # if the item is a list, recursively call the flatten function\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        # otherwise, append the item to the flattened list\n        else:\n            flattened_list.append(item)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_lst = []\n\n    # Loop through each element of the list\n    for item in lst:\n        # If the item is a list, recursively flatten it and add it to the flattened list\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            # If the item is not a list, add it to the flattened list\n            flattened_lst.append(item)\n\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n\n    Parameters:\n    lst: The nested list to flatten.\n\n    Returns:\n    A flattened list of the input nested list.\n    \"\"\"\n    # Base case: If the input list is empty or has only one element, return it as-is.\n    if not lst or len(lst) == 1:\n        return lst\n    \n    # Recursively flatten each element of the list.\n    flat_lst = []\n    for element in lst:\n        if isinstance(element, list):\n            flat_lst.extend(flatten_list(element))\n        else:\n            flat_lst.append(element)\n    \n    return flat_lst"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    max_agg = {k:v for k,v in max_agg.items() if v == max(max_agg.values())}\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        name, price, quantity = item\n        max_dict[name] += price * quantity\n\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each hour\n    max_aggs = defaultdict(int)\n\n    # iterate through the list of tuples\n    for (hour, agg) in stdata:\n        # update the maximum aggregate for the current hour in max_aggs\n        max_aggs[hour] = max(agg, max_aggs[hour])\n\n    # iterate through max_aggs and find the maximum value\n    max_agg = max(max_aggs.values())\n\n    # return the maximum aggregate value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Calculate the maximum aggregate for the transaction\n        max_agg[item[0]] = max(item[1], max_agg[item[0]])\n    # Return the maximum aggregate for the entire list of transactions\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the maximum aggregate for each product\n    max_aggr = defaultdict(lambda: (0, 0))\n    \n    # Iterate through the list of tuples and update the maximum aggregate\n    for product, price, quantity in stdata:\n        max_aggr[product] = max(max_aggr[product], (price, quantity))\n    \n    # Calculate the maximum aggregate for each product\n    max_aggr_list = [(product, max(prices)) for product, (price, quantity) in max_aggr.items()]\n    \n    # Find the maximum aggregate across all products\n    max_agg = max(max_aggr_list, key=lambda x: x[1])[1]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    for tup in stdata:\n        for item in tup:\n            max_dict[item] += 1\n        if max(max_dict.values()) > max_sum:\n            max_sum = max(max_dict.values())\n        for item in tup:\n            max_dict[item] -= 1\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_agg = 0\n    for item in stdata:\n        for i in range(len(item)):\n            aggregate_dict[i] += item[i]\n    for val in aggregate_dict.values():\n        if val > max_agg:\n            max_agg = val\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate of each transaction\n    max_agg = defaultdict(int)\n    for trans_id, amount in stdata:\n        max_agg[trans_id] = max(max_agg[trans_id], amount)\n    # Return the maximum aggregate across all transactions\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for i in stdata:\n        max_aggr[i[0]] += i[1]\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for c, a in stdata:\n        # Update the maximum aggregate for the current customer\n        max_aggs[c] = max(max_aggs[c], a)\n\n    # Get the maximum aggregate for each customer\n    max_aggs = dict(max_aggs)\n\n    # Return the maximum aggregate for each customer\n    return max_aggs"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count and count_dict to zero\n    count = 0\n    count_dict = {}\n\n    # Initialize variables to store first n bits and last n bits of each binary sequence\n    seq_1 = []\n    seq_2 = []\n\n    # Loop through all binary sequences of length 2n\n    for i in range(2**n):\n\n        # Convert binary sequence i to integer and calculate sum of first n bits and last n bits\n        binary_seq = bin(i)[2:]\n        first_n_bits = int(binary_seq[:n])\n        last_n_bits = int(binary_seq[-n:])\n\n        # Add binary sequence i to sequence_1 and sequence_2\n        seq_1.append(first_n_bits)\n        seq_2.append(last_n_bits)\n\n        # Check if sum of first n bits is same as sum of last n bits\n        if first_n_bits == last_n_bits:\n\n            # Increment count if sum of first n bits is same as sum of last n bits\n            count += 1\n\n            # Add binary sequence i to count_dict with count as value\n            if (first_n_bits, last_n_bits) in count_dict:\n                count_dict[(first_n_bits, last_n_bits)] += 1\n            else:\n                count_dict[(first_n_bits, last_n_bits)] = 1\n\n    # Return count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)+1):\n        bits = bin(i)[2:].zfill(n)\n        if sum(bits[:n]) == sum(bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    def sum_binary(n):\n        \"\"\"\n        Helper function to calculate the sum of the last n bits.\n        \"\"\"\n        return sum(2**i for i in range(n))\n    \n    def sum_binary_seq(n):\n        \"\"\"\n        Helper function to calculate the sum of the first n bits in each binary sequence.\n        \"\"\"\n        return sum(2**i for i in range(n))\n    \n    count = 0\n    for i in range(2, n+1):\n        if sum_binary(i) == sum_binary_seq(n):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n):\n        if i == sum(i%2 for j in range(n)) or i == sum(i%2 for j in range(n, 2*n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables for count and current binary sequence\n    count = 0\n    current = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert current binary sequence to a list of bits and calculate sum of first n bits\n        bits = [int(bit) for bit in bin(i)[2:].zfill(n)]\n        sum_first = sum(bits[:n])\n\n        # Calculate sum of last n bits\n        bits = [int(bit) for bit in bin(i)[2:].zfill(n)]\n        sum_last = sum(bits[-n:])\n\n        # Check if sum of first n bits is same as sum of last n bits\n        if sum_first == sum_last:\n            count += 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_n_bits = i & ((1 << n) - 1)\n        last_n_bits = i >> n\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1), 2):\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(i)[-2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize the count and sum of first n bits\n    count = 0\n    sum_f = 0\n\n    # loop through all possible combinations of first n bits\n    for i in range(2**n):\n        # convert the binary number to an integer\n        f = int(bin(i)[2:], 2)\n        # check if the sum of first n bits is same as sum of last n bits\n        if sum_f == f:\n            # increment the count if it satisfies the condition\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    # Calculate the sum of first n bits\n    first_sum = sum(2**i for i in range(n))\n    \n    # Calculate the sum of last n bits\n    last_sum = sum(2**i for i in range(n, 2*n))\n    \n    # Count the number of sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    count = 0\n    for i in range(2**n):\n        if i == first_sum and i == last_sum:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    \n    # initialize variables to store the count and the sum of first n bits and last n bits\n    count = 0\n    sum_1 = 0\n    sum_2 = 0\n    \n    # loop through all possible sequences of length 2n\n    for i in range(2**n):\n        \n        # if the sum of the first n bits is same as the sum of the last n bits, increment the count\n        if i%2 == 0:\n            sum_1 = i//2\n            sum_2 = i//2 + (2**n - i)//2\n        else:\n            sum_1 = i//2 + (2**n - i)//2\n            sum_2 = i//2\n            \n        if sum_1 == sum_2:\n            count += 1\n            \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n        elif isinstance(item, list):\n            for sub_item in item:\n                if isinstance(sub_item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(value, list):\n            depth = len(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after the given number of rotations.\n\n    Args:\n    arr: A list of integers representing the array.\n    ranges: A list of tuples representing the range of integers to search in.\n    rotations: An integer representing the number of rotations to perform.\n    index: An integer representing the index of the element to find after the rotations.\n\n    Returns:\n    The element at the given index after the rotations.\n\n    \"\"\"\n    # Initialize variables\n    max_range = max(ranges, key=lambda x: x[1] - x[0])\n    current_range = ranges[0]\n\n    # Iterate over the array\n    for i in range(rotations):\n        # If the current range has a smaller range, update it\n        if current_range[0] > max_range[1]:\n            max_range = ranges[0]\n            current_range = ranges[0]\n            continue\n\n        # Check if the current index falls within the range of the current range\n        if index >= current_range[0] and index < current_range[1]:\n            # If the current range has only one integer in it, return it\n            if current_range[1] == current_range[0]:\n                return arr[current_range[0]]\n\n            # Split the current range into two parts\n            mid = (current_range[0] + current_range[1]) // 2\n            left_range = (current_range[0], mid)\n            right_range = (mid + 1, current_range[1])\n\n            # Recursively find the element in the left and right parts\n            left_element = find_Element(arr, ranges, rotations, index - left_range[0])\n            right_element = find_Element(arr, ranges, rotations, index - left_range[0] + 1)\n\n            # Combine the elements and return the result\n            return left_element * 10 + right_element\n\n        # Move the current range to the next range\n        current_range = (current_range[1] + 1, max(ranges, key=lambda x: x[1] - x[0]))\n\n    # If the index is not found after the rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize result as None\n    result = None\n    \n    # Loop through all rotations\n    for rotation in rotations:\n        # Create a new rotated array\n        new_arr = [arr[(rotation + i) % len(arr)] for i in range(len(arr))]\n        \n        # Check if the element at index is present in the new array\n        if new_arr[index]:\n            # If yes, update result with the element\n            result = new_arr[index]\n            break\n    \n    # Return the element at the given index after the number of rotations\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    modified_arr = arr\n    for i in range(rotations):\n        # append ranges to the original array\n        modified_arr += ranges\n        # iterate through the modified array\n        for j in range(len(modified_arr)):\n            # find the index of the element at the given index after rotation\n            if j - i - 1 >= 0:\n                element_index = j - i - 1\n                # return the element at that index\n                return modified_arr[element_index]\n    # if we reach here, the index is not found\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three parameters, arr, ranges, and rotations, \n    where arr is the array of integers, ranges is the list of pairs representing the \n    ranges of numbers that need to be searched, and rotations is the number of rotations \n    that need to be done.\n    \n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n    # Loop through the ranges and find the first element that is greater than or equal to the index\n    for i in range(len(ranges)):\n        if arr[ranges[i][0]] >= index:\n            return arr[ranges[i][0]]\n        elif arr[ranges[i][0]] < index:\n            # If the element is greater than or equal to the index, return the element at the end of the range\n            if arr[ranges[i][1]] >= index:\n                return arr[ranges[i][1]]\n    # If no element is found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the element at the given index by rotating the array\n    for i in range(rotations):\n        arr = [arr[j] for j in range(len(arr)) if j not in ranges[i]]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Helper function to find element at a given index after rotations\n    def find_Element_helper(arr, index, rotation):\n        # Check if the element is in the first row\n        if rotation == 0:\n            return arr[index]\n        # Check if the element is in the second row\n        elif rotation == 1:\n            return arr[index - (rotation + 1)]\n        # Check if the element is in the third row\n        else:\n            return arr[index - (rotation * 2) - 1]\n\n    # Initialize the first element to be the element at the given index\n    current_element = arr[index]\n\n    # Calculate the number of rotations required\n    rotation_count = 0\n    for range_start, range_end in ranges:\n        if range_start <= index <= range_end:\n            rotation_count += 1\n\n    # Find the element at the given index after rotations\n    for i in range(rotation_count):\n        current_element = find_Element_helper(arr, index, i)\n\n    return current_element\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations and the index of the element to find. \n    It calculates the index of the element after rotating the array by the specified number of rotations and returns the element.\n    \"\"\"\n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Loop through the ranges and rotate the array by each rotation\n    for i in range(rotations):\n        arr.rotate(i + 1)\n\n    # Calculate the index of the element after rotating the array by the specified number of rotations\n    new_index = (index + ranges[rotations - 1]) % len(arr)\n\n    # Return the element at the calculated index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and an index.\n    It then finds the element at the given index after rotating the array by the given number of rotations.\n\n    Args:\n        arr (list): The array to be rotated.\n        ranges (list): A list of tuples representing the start and end index of each range.\n        rotations (int): The number of rotations to perform.\n        index (int): The index of the element to be found.\n\n    Returns:\n        The element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n    # Initialize variables\n    prev_index = index - 1\n    current_index = index\n    result = None\n\n    # Check if the index is within the range of the array\n    while current_index >= 0 and current_index < len(arr):\n        # Calculate the range of the current element\n        range_start, range_end = ranges[arr[current_index]]\n\n        # Check if the element is within the range of the current index\n        if range_start <= prev_index <= range_end:\n            result = arr[current_index]\n            break\n\n        # Update the previous index\n        prev_index = current_index\n        current_index = (current_index - rotations + len(arr)) % len(arr)\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and rotations, and an index as input and returns the element at the given index after rotations.\n    '''\n    # Calculate the sum of the ranges\n    total_range = sum(ranges)\n\n    # Calculate the index of the first rotation\n    first_rotation_index = 0\n    for i in range(index, total_range, rotations):\n        first_rotation_index = i\n\n    # Calculate the index of the final rotation\n    final_rotation_index = first_rotation_index + rotations - 1\n    if final_rotation_index > total_range - 1:\n        final_rotation_index = total_range - 1\n\n    # Find the element at the given index after rotations\n    element_at_index = arr[final_rotation_index]\n\n    return element_at_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a given number of rotations.\n    \"\"\"\n\n    # Calculate the number of rotations required to reach the desired index\n    rotations_required = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            rotations_required += rotations[i]\n\n    # Calculate the final index after rotations\n    final_index = (index - ranges[0]) + (rotations_required * ranges[0])\n\n    # Calculate the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Using regex to find words starting with 'p'\n    pattern = r'\\b[Pp]_\\w+'\n    matches = re.findall(pattern,''.join(words))\n    \n    # Returning two words starting with 'p'\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    # Define a regular expression to match words starting with 'p'\n    pattern = r'^p[a-z]*'\n    \n    # Use the `re.findall` function to find all words in the list that match the pattern\n    matches = re.findall(pattern,''.join(words))\n    \n    # Return a tuple of the two matching words\n    return (matches[0], matches[1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n    \n    # Find all words starting with 'p' in the list\n    matches = re.findall(pattern, words)\n    \n    # If there are at least two matches, return the two matches\n    if len(matches) >= 2:\n        return matches\n    \n    # If there are not at least two matches, return an error message\n    else:\n        return \"There are not enough words starting with 'p' in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with letter 'p'\n    pattern = r'\\bp[a-zA-Z]+\\b'\n    # Use the pattern to find words in the list\n    matches = re.findall(pattern,''.join(words))\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p.*'\n    for word in words:\n        if re.search(pattern, word):\n            return word, re.sub(pattern, '', word)\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # use regular expressions to find all words that start with 'p'\n    pattern = r'\\b[Pp]\\w+\\b'\n    matches = re.findall(pattern,''.join(words))\n\n    # select the two first words from the resulting list\n    result = matches[0:2]\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return \"No two words starting with 'p' found.\"\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define the pattern to find words starting with 'p'\n    pattern = re.compile(r'^p\\w*')\n\n    # loop through the list of words and find the ones starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            # return the words starting with 'p'\n            return [word, word.replace('p', 'P')]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find all the words that start with 'p'\n    starts_with_p = [word for word in words if word.startswith('p')]\n    # Check if there are at least two words starting with 'p'\n    if len(starts_with_p) < 2:\n        return 'There are less than two words starting with p.'\n    # Return the two words starting with 'p'\n    return starts_with_p[0], starts_with_p[1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_ending_here = 0\n\n    # Traverse the array from 0 to index-1\n    for i in range(index):\n        # If the element before k is greater than or equal to a[i], then the sum is the sum of current sum and a[i]\n        if a[i] >= a[k]:\n            curr_sum = curr_sum + a[i]\n        else:\n            curr_sum = curr_sum - a[i-1]\n\n        # Update the maximum sum and maximum ending here if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_ending_here = i\n\n    # Traverse the array from index to n-1\n    for i in range(index, n):\n        # If the element before k is greater than or equal to a[i], then the sum is the sum of current sum and a[i]\n        if a[i] >= a[k]:\n            curr_sum = curr_sum + a[i]\n        else:\n            curr_sum = curr_sum - a[i-1]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_ending_here = i\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    \n    if a[index] > a[k] and index > k:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[k] + max_sum_increasing_subseq(a, n, index+1, k))\n    \n    return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the table to store the maximum sum of increasing subsequence for each index\n    table = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize the maximum sum of increasing subsequence with the first element\n    table[1][0] = a[0]\n\n    # Fill the table row by row\n    for i in range(1, n+1):\n        for j in range(k+1):\n            # If the j-th element is before the ith element, then the maximum sum of increasing subsequence is the same as the maximum sum of increasing subsequence from prefix until the (j-1)-th index.\n            if j == 0:\n                table[i][j] = table[i-1][j]\n            # If the j-th element is equal to the ith element, then the maximum sum of increasing subsequence is the same as the maximum sum of increasing subsequence from prefix until the (j-1)-th index plus the value of the ith element.\n            elif j == i:\n                table[i][j] = table[i-1][j-1] + a[i-1]\n            # If the j-th element is after the ith element, then the maximum sum of increasing subsequence is the maximum of the maximum sum of increasing subsequence from prefix until the (j-1)-th index plus the value of the ith element and the maximum sum of increasing subsequence from prefix until the (j)-th index plus the value of the ith element.\n            else:\n                table[i][j] = max(table[i-1][j], table[i-1][j-1]) + a[i-1]\n\n    # Return the maximum sum of increasing subsequence from prefix until the given index and including the given kth element\n    return table[index][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * (n + 1) for _ in range(index + 1)]\n    max_sum = 0\n\n    for i in range(index, -1, -1):\n        for j in range(i, min(i + k, n) + 1):\n            dp[i][j] = max(dp[i][j], dp[i + 1][j] + a[j] - a[i])\n        max_sum = max(max_sum, dp[i][0])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize sum and maximum sum variables\n    max_sum = 0\n    current_sum = 0\n\n    # Initialize a boolean array to store whether a[i] is part of the current subsequence or not\n    is_subsequence = [False] * n\n\n    # Loop through all elements of the array\n    for i in range(n):\n\n        # If the current element is less than or equal to k, update the maximum sum and continue\n        if i <= k:\n            current_sum = max(current_sum + a[i], a[i])\n            max_sum = max(max_sum, current_sum)\n            continue\n\n        # If the current element is greater than k, initialize the current sum to a[i] and set all elements before i to False\n        current_sum = a[i]\n        for j in range(i):\n            is_subsequence[j] = False\n\n        # Loop through all elements from i+1 to n-1 and update the maximum sum if the current element is greater than the previous element and not already part of the current subsequence\n        for j in range(i+1, n):\n            if a[j] > a[j-1] and not is_subsequence[j-1]:\n                current_sum += a[j]\n                max_sum = max(max_sum, current_sum)\n                is_subsequence[j] = True\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the maximum sum of increasing subsequence and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse from i+1 to n\n    for i in range(index+1, n+1):\n        \n        # Update the current sum by adding the value of the element at index i\n        curr_sum += a[i-1]\n        \n        # If the current sum is greater than k and i is greater than the current index, update the maximum sum\n        if curr_sum > k and i > index:\n            max_sum = max(max_sum, curr_sum)\n        \n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Given an array a of n integers and an integer k, find the maximum sum of increasing subsequence from prefix until ith index and including the kth element which is after i, i.e., k > i.\n    \"\"\"\n    # If the kth element is after i, return 0 as there is no increasing subsequence.\n    if k > index:\n        return 0\n\n    # Initialize variables for memoization and dp[i] to store the maximum sum of increasing subsequence from prefix until index i\n    memo = {}\n    dp = [0] * n\n\n    # Initialize the dp array with the first element as 0\n    for i in range(1, n):\n        dp[i] = a[i]\n\n    # Fill the dp array using memoization\n    for i in range(n - 1, -1, -1):\n        if i in memo:\n            continue\n        max_sum = 0\n        for j in range(i, index):\n            if j in memo:\n                max_sum = max(max_sum, dp[j] + memo[j])\n            else:\n                max_sum = max(max_sum, dp[j])\n        memo[i] = max_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until index k\n    return memo[k - 1]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Create a table to store the maximum sum of increasing subsequence for each index\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the maximum sum of increasing subsequence for the first index\n    for i in range(n):\n        table[i][0] = a[i]\n\n    # Find the maximum sum of increasing subsequence for each index\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and (j == 0 or a[j] > a[j - 1]):\n                table[i][j + 1] = table[j][j + 1] + a[i]\n            else:\n                table[i][j + 1] = table[j][j + 1]\n\n    # Initialize the maximum sum of increasing subsequence including the kth element\n    max_sum = 0\n    for i in range(index, n):\n        if i == k:\n            continue\n        max_sum = max(max_sum, a[i] + table[i][index])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    # Initialize max sum of increasing subsequence\n    max_sum = float('-inf')\n\n    # Initialize dp array to store the maximum sum of increasing subsequence ending at i\n    dp = [0] * n\n\n    # Traverse the array from index 0 to k-1\n    for j in range(index, k):\n        # If the value is less than the current maximum sum of increasing subsequence ending at j, update the maximum sum\n        if a[j] < dp[j - 1]:\n            dp[j] = a[j]\n        # Otherwise, add the value to the maximum sum of increasing subsequence ending at j\n        else:\n            dp[j] = dp[j - 1] + a[j]\n\n        # If the maximum sum of increasing subsequence ending at k is greater than the maximum sum of increasing subsequence ending at index i, update the maximum sum of increasing subsequence ending at i\n        if dp[k - 1] > max_sum:\n            max_sum = dp[k - 1]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if k <= index:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 0, a[0]\n    \n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + a[i - 1])\n        \n    if k <= index:\n        return dp[k]\n    \n    for i in range(k, index + 1):\n        if dp[i] > dp[index] + a[i] - a[index]:\n            dp[i] = dp[index] + a[i] - a[index]\n    \n    return dp[index]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return ()\n    elif m==1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0],)+colon_tuplex(tuplex[1:],m-1,n-1)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m:\n        return None\n    else:\n        return deepcopy(tuplex[0:m]) + (tuplex[m],) + deepcopy(tuplex[m+1:])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    colons = []\n    for i in range(m):\n        colons.append('')\n    colons[n-1] = str(tuplex[n-1])\n    copy_tuplex[n-1] = colons[n-1]\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Convert tuple to list to modify the list\n    tuplex_list = list(tuplex)\n\n    # Get the index of the maximum element\n    max_idx = max(range(len(tuplex_list)), key=lambda i: tuplex_list[i])\n\n    # Get the indices for the maximum element\n    max_left, max_right = max_idx - n, max_idx\n\n    # Create a new tuple with the colon\n    colon = tuple(tuplex_list[max_left:max_right+1])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0],) + colon_tuplex(tuplex[1:], m-1, n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: The tuple to get a colon from.\n    :param m: The number of rows in the colon.\n    :param n: The number of columns in the colon.\n    :return: A tuple containing the elements of the colon.\n    '''\n\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the original tuple\n    num_elements = len(new_tuplex)\n\n    # Calculate the number of elements in the new colon\n    num_new_elements = m * n\n\n    # If the new colon is less than the number of elements in the original tuple,\n    # then set the elements in the new colon to the original tuple.\n    if num_new_elements < num_elements:\n        for i in range(num_new_elements):\n            new_tuplex[i] = tuplex[i % num_elements]\n\n    # If the new colon is greater than the number of elements in the original tuple,\n    # then set the elements in the new colon to None.\n    elif num_new_elements > num_elements:\n        for i in range(num_new_elements):\n            new_tuplex[i] = None\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the first m elements of the tuple\n    first_m_elements = tuplex[:m]\n    # Get the last n-m elements of the tuple\n    last_n_m_elements = tuplex[-n:]\n    # Create a colon by concatenating the first m elements and the last n-m elements\n    colon = tuple(first_m_elements + last_n_m_elements)\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n    for j in range(n):\n        new_tuplex = new_tuplex[:-1]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is valid\n    if not isinstance(tuplex, tuple) or len(tuplex) < m or len(tuplex) % n!= 0:\n        return \"Invalid input\"\n\n    # Initialize the colon\n    colon = []\n\n    # Copy the first m elements\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n\n    # Append the last n-m elements\n    for i in range(n-m, n):\n        colon.append(deepcopy(tuplex[i]))\n\n    # Return the colon\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # loop through each row in the new tuple\n    for i in range(m):\n        # loop through each column in the new tuple\n        for j in range(n):\n            # set the value of the new tuple to the old tuple's value\n            new_tuplex[i][j] = tuplex[i][j]\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two input lists in non-decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the product of the first N largest elements of both lists\n    prod = 1\n    for i in range(N):\n        prod *= nums1[i]\n        prod *= nums2[i]\n\n    # Find the product of the largest element of each list\n    prod1 = nums1[0] * nums2[0]\n    prod2 = nums1[-1] * nums2[-1]\n\n    # Return the larger product\n    if prod1 > prod2:\n        return prod1\n    else:\n        return prod2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product = nums1[i] * nums2[i]\n        \n        # If the result is not yet in the list, add it\n        if product not in result:\n            result.append(product)\n    \n    # Return the list of N largest products\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product1 = max_product2 = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(i, len(nums1)):\n            product1 = nums1[i] * nums1[j]\n            product2 = nums2[i] * nums2[j]\n            if product1 > max_product1:\n                max_product2 = max_product1\n                max_product1 = product1\n            elif product2 > max_product2:\n                max_product2 = product2\n    return max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N:\n        raise ValueError(\"The number of elements in nums1 is less than N\")\n    if len(nums2) < N:\n        raise ValueError(\"The number of elements in nums2 is less than N\")\n    if N > len(nums1) + len(nums2):\n        raise ValueError(\"The number of elements selected is greater than the total number of elements\")\n\n    # Calculate the products of the selected elements\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= max(nums1[i], nums2[i])\n        product2 *= max(nums1[i], nums2[i])\n\n    # Find the largest product and the indices of the selected elements\n    max_product = product1\n    indices1 = [0] * N\n    indices2 = [0] * N\n    for i in range(N):\n        for j in range(i+1, N):\n            product = max(nums1[i] * nums1[j], nums2[i] * nums2[j])\n            if product > max_product:\n                max_product = product\n                indices1 = [i, j]\n                indices2 = [0] * N\n            elif product == max_product:\n                indices2[i] += 1\n                indices2[j] += 1\n\n    # Calculate the products of the remaining elements\n    remaining1 = 1\n    remaining2 = 1\n    for i in range(N):\n        if i not in indices1:\n            remaining1 *= max(nums1[i], nums2[i])\n        if i not in indices2:\n            remaining2 *= max(nums1[i], nums2[i])\n\n    # Find the largest remaining product and the indices of the remaining elements\n    max_remaining = max(remaining1, remaining2)\n    indices_remaining = [0] * N\n    for i in range(N):\n        if i not in indices1:\n            if max_remaining == remaining1:\n                indices_remaining[i] = 1\n                max_remaining /= max(nums1[i], nums2[i])\n            else:\n                indices_remaining[i] = 0\n                max_remaining = max_remaining // max(nums1[i], nums2[i])\n        if i not in indices2:\n            if max_remaining == remaining2:\n                indices_remaining[i] = 1\n                max_remaining /= max(nums1[i], nums2[i])\n            else:\n                indices_remaining[i] = 0\n                max_remaining = max_remaining // max(nums1[i], nums2[i])\n\n    # Return the selected elements and the remaining elements\n    return max_product, indices1, indices2, max_remaining, indices_remaining"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = 1\n            if i > 0:\n                product *= nums1[i-1]\n            if j > 0:\n                product *= nums2[j-1]\n            if i < len(nums1)-1:\n                product *= nums1[i+1]\n            if j < len(nums2)-1:\n                product *= nums2[j+1]\n            max_product = max(max_product, product)\n            if max_product >= N:\n                break\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum value in each list\n    max1, max2 = max(nums1), max(nums2)\n    \n    # Initialize two empty lists to store the products of the largest values\n    products1 = []\n    products2 = []\n    \n    # Loop through each value from the maximum value to the maximum value * 2\n    for i in range(max1 * 2, max2 * 2 + 1):\n        # Initialize a variable to store the product of the current value and the first factor in nums1\n        product1 = 1\n        \n        # Loop through each factor in nums1\n        for num1 in nums1:\n            # Multiply the current product by the current value, and add it to the product1 variable\n            product1 *= i // num1\n        \n        # Initialize a variable to store the product of the current value and the second factor in nums2\n        product2 = 1\n        \n        # Loop through each factor in nums2\n        for num2 in nums2:\n            # Multiply the current product by the current value, and add it to the product2 variable\n            product2 *= i // num2\n        \n        # Check if the product1 variable is greater than the product2 variable\n        if product1 > product2:\n            # If it is, append the current product to the products1 list\n            products1.append(product1)\n        else:\n            # If not, append the current product to the products2 list\n            products2.append(product2)\n            \n    # Sort the products lists in descending order\n    products1.sort(reverse=True)\n    products2.sort(reverse=True)\n    \n    # Return the specified number of largest products from the two lists\n    return products1[:N], products2[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = 0\n    max_products = []\n    \n    # Loop through each possible combination of two numbers from each list\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the two numbers\n            product = nums1[i] * nums2[j]\n            \n            # Check if the product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n                max_products = [nums1[i], nums2[j]]\n            elif product == max_product:\n                max_products.append(nums1[i])\n                max_products.append(nums2[j])\n    \n    # Return the list of the largest products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1 (list of int): A list of integers.\n    nums2 (list of int): A list of integers.\n    N (int): The number of products to find.\n\n    Returns:\n    list of int: A list of the largest N products.\n    \"\"\"\n    # Sort the lists in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize variables to store the products and their indices\n    products = []\n    indices = []\n\n    # Calculate the products of the two sorted lists\n    product1 = nums1[0] * nums2[0]\n    product2 = nums1[-1] * nums2[-1]\n    for i in range(len(nums1) - 1):\n        product1 *= nums1[i + 1]\n        product2 *= nums2[i + 1]\n\n    # Calculate the products of the two sorted lists and store them in the products list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = product1 * nums1[i] * nums2[j]\n            if product > product2:\n                product2 = product\n                indices = [i, j]\n            if len(products) < N:\n                products.append(product)\n\n    # Return the products and their indices\n    return products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest product and the number of products found\n    largest_product = 0\n    num_products = 0\n\n    # Iterate over the first N elements of both lists\n    for i in range(N):\n        # Calculate the product of the two largest elements from the two lists\n        product = nums1[i] * nums2[i]\n\n        # Check if the product is greater than the current largest product\n        if product > largest_product:\n            largest_product = product\n            num_products = 1\n        elif product == largest_product:\n            num_products += 1\n\n    return largest_product, num_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize two variables to store the largest product of one factor\n    max_product_1 = max_product_2 = float('-inf')\n    \n    # loop through all pairs of elements from both lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the current pair of elements\n            product = nums1[i] * nums2[j]\n            \n            # update the largest product if the current product is greater than the current largest product\n            if product > max_product_1:\n                max_product_2 = max_product_1\n                max_product_1 = product\n            \n            # update the largest product if the current product is greater than the second largest product\n            elif product > max_product_2:\n                max_product_2 = product\n            \n            # if we have found the desired number of products, we can return the largest products\n            if max_product_1 > max_product_2:\n                return max_product_1 * max_product_2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the larger of them.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return set_left_most_unset_bit(n & (n - 1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize variables to keep track of left most unset bit\n    left_most_unset_bit = -1\n    left_most_unset_bit_index = -1\n\n    # iterate through each bit of n\n    for i in range(32):\n        # check if bit is set\n        if (n >> i) & 1:\n            # if bit is set, check if it's the left most unset bit\n            if left_most_unset_bit == -1:\n                # if it's the first bit set, set left_most_unset_bit and left_most_unset_bit_index to i\n                left_most_unset_bit = 1 << i\n                left_most_unset_bit_index = i\n\n    # set the left most unset bit in the number\n    if left_most_unset_bit!= -1:\n        n |= left_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost set bit as 0\n    leftmost_set_bit = 0\n    \n    # loop through the bits of n from right to left\n    for i in range(31, -1, -1):\n        # check if the i-th bit of n is set\n        if (n >> i) & 1:\n            # if it is, then the leftmost set bit is i\n            leftmost_set_bit = i\n            break\n    \n    # if the loop completes without finding a set bit, set the leftmost set bit to -1\n    if leftmost_set_bit == 0:\n        leftmost_set_bit = -1\n    \n    # set the leftmost set bit in n\n    n = n & (2**leftmost_set_bit - 1)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to True\n    unset_bit = True\n\n    # Iterate through each bit of the number\n    for i in range(31, -1, -1):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # If it is set, unset it\n            unset_bit = False\n            break\n\n    # If the entire number has been iterated, then all bits are set\n    if unset_bit:\n        return n\n\n    # Set the leftmost unset bit to False\n    return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1 # Shift right until the least significant bit is 1\n\n    return n << 1 # Left shift by 1 to set the left most unset bit to 1."
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Check if the number is 0\n    if n == 0: \n        return 1\n\n    # Initialize the unset bit\n    unset_bit = 0\n\n    # Iterate through the binary representation of n\n    while n: \n        if n & 1: # If the least significant bit is 1\n            break # break the loop since we have found the left most unset bit\n        unset_bit += 1 # Increment the unset bit\n        n >>= 1 # Shift the binary representation of n to the right by 1 bit\n\n    # Set the left most unset bit in the original number\n    return unset_bit + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in an integer n.\n    \"\"\"\n    # initialize the variable 'unset_bit' to 1\n    unset_bit = 1\n    \n    # loop through each bit of the integer\n    for i in range(32):\n        # if the current bit is unset, set it to the value of unset_bit\n        if (n & (1 << i)) == 0:\n            n |= (unset_bit << i)\n            break\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in an integer n.\n\n    Args:\n    n (int): An integer number.\n\n    Returns:\n    int: The integer n with the left most unset bit set.\n\n    \"\"\"\n\n    # initialize the position of the left most unset bit to -1\n    unset_bit_position = -1\n\n    # loop over the bits in the binary representation of n\n    for i in range(32):\n        # if the ith bit is 1, then the ith bit is unset\n        if n & (1 << i):\n            # update the position of the left most unset bit\n            unset_bit_position = i\n            # stop the loop since the left most unset bit has been found\n            break\n\n    # if the left most unset bit was not found, then return n\n    if unset_bit_position == -1:\n        return n\n\n    # set the left most unset bit to 1\n    n |= (1 << unset_bit_position)\n\n    # return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to binary representation\n    bin_n = bin(n)[2:]\n    # Initialize the count of unset bits to 32 (since the binary representation has 32 digits)\n    count = 32\n    # Iterate over the binary digits from right to left\n    for i in range(len(bin_n) - 1, -1, -1):\n        # If the digit is 0, increment the count of unset bits\n        if bin_n[i] == '0':\n            count -= 1\n        # If the count reaches 0, set the leftmost unset bit to 1 and return the binary representation of n with the leftmost unset bit set to 1\n        if count == 0:\n            bin_n = bin_n[:i] + '1' + bin_n[i:]\n            n = int(bin_n, 2)\n            return n\n    # If no leftmost unset bit is found, return -1\n    return -1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(31):\n        if ((1 << i) & n) == 0:\n            return n | (1 << i)\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r  # formula for cone area\n    volume = area * h / 3  # formula for cone volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # find the highest power of 2 that is less than or equal to n\n    highest_pow2 = 1\n    while highest_pow2 < n:\n        highest_pow2 <<= 1\n    \n    # return the highest power of 2\n    return highest_pow2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1 # Initialize the variable p to 1\n    while p < n: # Keep looping until p is equal to or less than n\n        p *= 2 # Double p\n    return p - 1 # Return p minus 1, which is the highest power of 2 less than or equal to n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize power variable to 1\n    power = 1\n    # loop while power is less than or equal to n\n    while power <= n:\n        # increment power by 1\n        power = power << 1\n    # return power\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found to 1\n    highest_power_of_2 = 1\n\n    # Loop through all numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is a power of 2\n        if num & (num-1) == 0:\n            # If it is, update the highest power of 2 found\n            highest_power_of_2 = num\n\n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 that is less than or equal to n to 1\n    highest_pow_2 = 1\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the current number is a power of 2\n        if i == 1 << (i-1):\n            # If it is, update the highest power of 2 found so far\n            highest_pow_2 = i\n\n    # Return the highest power of 2 found\n    return highest_pow_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the power of 2 as 1\n    power = 1\n    # Loop through each bit of the binary representation of n\n    while power <= n:\n        # Check if the current power is less than or equal to n\n        if power <= n:\n            # If it is, return the power\n            return power\n        # Increment the power by 1\n        power *= 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    result = 1\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, update the result\n        if i == 1:\n            result = 1\n        elif i == 2:\n            result = 2\n        elif i == 4:\n            result = 4\n        elif i == 8:\n            result = 8\n        elif i == 16:\n            result = 16\n        elif i == 32:\n            result = 32\n        elif i == 64:\n            result = 64\n        elif i == 128:\n            result = 128\n        elif i == 256:\n            result = 256\n        elif i == 512:\n            result = 512\n        elif i == 1024:\n            result = 1024\n        elif i == 2048:\n            result = 2048\n        elif i == 4096:\n            result = 4096\n        elif i == 8192:\n            result = 8192\n        elif i == 16384:\n            result = 16384\n        elif i == 32768:\n            result = 32768\n        elif i == 65536:\n            result = 65536\n        elif i == 131072:\n            result = 131072\n        elif i == 262144:\n            result = 262144\n        elif i == 524288:\n            result = 524288\n        elif i == 1048576:\n            result = 1048576\n        elif i == 2097152:\n            result = 2097152\n        elif i == 4194304:\n            result = 4194304\n        elif i == 8388608:\n            result = 8388608\n        elif i == 16777216:\n            result = 16777216\n        elif i == 33554432:\n            result = 33554432\n        elif i == 67108864:\n            result = 67108864\n        elif i == 134217728:\n            result = 134217728\n        elif i == 268435456:\n            result = 268435456\n        elif i == 536870912:\n            result = 536870912\n        elif i == 1073741824:\n            result = 1073741824\n        elif i == 2147483648:\n            result = 2147483648\n        elif i == 4294967296:\n            result = 4294967296\n        elif i == 8589934592:\n            result = 8589934592\n        elif i == 17179869184:\n            result = 17179869184\n        elif i == 34359738368:\n            result = 34359738368\n        elif i == 68719476736:\n            result = 68719476736\n        elif i == 137438953472:\n            result = 137438953472\n        elif i == 274877906944:\n            result = 274877906944\n        elif i == 549755813888:\n            result = 549755813888"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers\n    lucas_numbers = [0, 1]\n\n    # Loop through the remaining lucas numbers\n    for i in range(2, n+1):\n        # Calculate the lucas number\n        lucas_number = lucas_numbers[i-1] + lucas_numbers[i-2]\n\n        # Add the lucas number to the list of lucas numbers\n        lucas_numbers.append(lucas_number)\n\n    # Return the nth lucas number\n    return lucas_numbers[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base cases: if n = 0 or 1, return 2^n - 1\n    if n == 0:\n        return 2**n - 1\n    elif n == 1:\n        return 2\n    # Recursive case: return (2^n - 1) / (2 - 2^n)\n    else:\n        return (2**n - 1) // (2 - 2**n)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas_seq = [2, 1]\n    for i in range(2, n+1):\n        lucas_seq.append(lucas_seq[i-1] + lucas_seq[i-2])\n    return lucas_seq[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Create a new list to hold the formatted strings\n    result = []\n    # Iterate over each element in the input list\n    for item in list_:\n        # Apply the format string to the element and append the result to the result list\n        result.append(string.format(item))\n    # Return the result list\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # create a new list to store the formatted elements\n    formatted_list = []\n    # loop through each element in the input list\n    for element in list_:\n        # apply the format string to the element and add it to the new list\n        formatted_list.append(string.format(element))\n    # return the new formatted list\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(lst, format_str):\n    '''\n    Apply a given format string to all elements in a list.\n    '''\n    result = []\n    for item in lst:\n        result.append(format(item, format_str))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        for j in range(len(l2[i])):\n            data[l1[i]][l2[i][j]] = l3[i][j]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, list in enumerate(args):\n        for j, item in enumerate(list):\n            if j not in result:\n                result[j] = []\n            result[j].append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the result\n    result = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # create a new dictionary for this list\n        inner_dict = {}\n        # loop through each element in the list\n        for j in range(len(l1[i])):\n            # if this is the first element, add it to the outer dictionary\n            if j == 0:\n                inner_dict[l1[i][j]] = l2[i][j]\n                inner_dict[l1[i][j]] = l3[i][j]\n            # if this is the second element, add it to the inner dictionary\n            else:\n                inner_dict[l1[i][j]] = l2[i][j]\n        # add the inner dictionary to the outer dictionary\n        result[l1[i][0]] = inner_dict\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Initialize empty nested dictionary\n    result = {}\n\n    # Iterate through each list\n    for i in range(len(l1)):\n        # Extract first element of each list\n        key = l1[i]\n        value = l2[i]\n        sub_list = l3[i]\n\n        # Add key to result dictionary and its value as a list\n        result[key] = [value]\n\n        # If sub_list is not empty, add it as a list to the value of the key\n        if sub_list:\n            result[key].append(sub_list)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for j in range(len(l3)):\n        result[l3[j]] = l2[j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if isinstance(lists[i][j], list):\n                for k in range(len(lists[i][j])):\n                    if isinstance(lists[i][j][k], tuple):\n                        key = (lists[i][j][k][0], lists[i][j][k][1])\n                        if key in result:\n                            result[key].append(lists[i][j][k][2])\n                        else:\n                            result[key] = [lists[i][j][k][2]]\n                    else:\n                        result[lists[i][j][k]] = lists[i][j][k+1]\n            else:\n                result[lists[i][j]] = lists[i][j+1]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Combine all the lists into one\n    data = l1 + l2 + l3\n    \n    # Create an empty dictionary\n    result = {}\n    \n    # Iterate through the data list\n    for item in data:\n        # Split the item into key-value pairs\n        key, value = item.split(':')\n        \n        # Convert the value to a list\n        if ',' in value:\n            value = value.split(',')\n        else:\n            value = [value]\n        \n        # Check if the key already exists in the dictionary\n        if key in result:\n            # Convert the value to a list if it is already a list\n            if not isinstance(result[key], list):\n                result[key] = [result[key]]\n            \n            # Append the new values to the list\n            result[key] += value\n        else:\n            # Convert the value to a list if it is already a string\n            if not isinstance(value, list):\n                value = [value]\n            \n            # Add the new key-value pair to the dictionary\n            result[key] = value\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to hold the final result\n    final_dict = {}\n    \n    # Loop through each list and add its items to the dictionary\n    for lst in [l1, l2, l3]:\n        for item in lst:\n            # Check if the item is already in the dictionary\n            if item in final_dict:\n                # If it is, add the key to the list of keys for that item\n                final_dict[item].append(lst.index(item))\n            else:\n                # If it's not, create a new dictionary for the item and add it to the final dictionary\n                final_dict[item] = [lst.index(item)]\n    \n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes any number of lists as arguments and converts them to nested dictionaries.\n    \"\"\"\n    result = {}\n    for arg in args:\n        if isinstance(arg, list):\n            for item in arg:\n                if isinstance(item, dict):\n                    result.update(item)\n                else:\n                    new_item = {}\n                    new_item[item] = None\n                    result.update(new_item)\n        else:\n            result[arg] = None\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes multiple lists as arguments and converts them to a nested dictionary.\n    The number of lists passed as arguments must match the number of keys in the dictionary.\n    '''\n    if len(args) % 2!= 0:\n        raise ValueError('Number of lists passed as arguments must be even.')\n    else:\n        result = {}\n        for i in range(0, len(args), 2):\n            key = args[i]\n            values = args[i+1]\n            if len(values)!= len(set(values)):\n                raise ValueError('All lists passed as arguments must contain unique elements.')\n            result[key] = values\n        return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n < 5:\n            return n\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        max_sum = 0\n        for i in range(1, int(n**0.25) + 1):\n            max_sum = max(max_sum, get_max_sum(2*i) + get_max_sum(3*i) + get_max_sum(4*i) + get_max_sum(5*i))\n        return max_sum + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 4\n    \n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 14\n\n    if n == 5:\n        return 42\n\n    if n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n\n    return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    half = get_max_sum(n//2)\n    third = get_max_sum(n//3)\n    fourth = get_max_sum(n//4)\n    fifth = get_max_sum(n//5)\n    \n    return max(half+third+fourth+fifth, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_list = None\n    # Loop through the input list\n    for item in input_list:\n        # Check if the current item is longer than the maximum length\n        if len(str(item)) > max_length:\n            # If it is, update the maximum length and the list with the item\n            max_length = len(str(item))\n            max_list = item\n    # Return the list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for element in input_list:\n        length_list.append(len(element))\n    return max(length_list)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(test_tup) == len(unique_elements):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    return len(test_tup) == len(unique_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove any duplicates\n    set_test_tup = set(test_tup)\n    # If the length of the set is equal to the length of the tuple, it's a valid distinct tuple\n    return len(set_test_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Create a dictionary to store the elements of the tuple\n    unique_dict = {}\n\n    # Iterate through the tuple\n    for element in test_tup:\n\n        # If the element is already in the dictionary, return False\n        if element in unique_dict:\n            return False\n\n        # Otherwise, add the element to the dictionary\n        unique_dict[element] = True\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = []\n    for item in test_tup:\n        if item not in unique_tup:\n            unique_tup.append(item)\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the length of the tuple is 1\n    if len(test_tup) == 1:\n        return True\n\n    # Check if the tuple contains any duplicate values\n    for i in range(len(test_tup)):\n        if i == 0:\n            if test_tup[i] in test_tup[1:]:\n                return False\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                return False\n\n    # If the tuple contains no duplicates, return True\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate over the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            # otherwise, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # iterate over the string again and find the first non-repeating character\n    for char in str1:\n        # if the character has a count of 1, return it\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    Given a string, find the first non-repeating character.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Initialize two variables to store the frequency of each character in the string\n    char_freq = {}\n\n    # Iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Iterate through the string again to find the first non-repeated character\n    for i in range(len(str1)):\n        if char_freq[str1[i]] == 1:\n            return str1[i]\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[char] = 1\n    # Iterate through the dictionary again to find the first non-repeating character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their frequency\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first non-repeating character in the dictionary\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return bool(match)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a,b,c])\n    # Find the middle two numbers of the sorted list\n    mid1 = nums[1]\n    mid2 = nums[2]\n    # Find the median of the two middle numbers\n    median = (mid1 + mid2) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Find the middle number\n    middle_index = len(numbers) // 2\n    middle_number = numbers[middle_index]\n    \n    # Check if the middle number is the median\n    if middle_number == a:\n        return numbers[middle_index]\n    elif middle_number == b:\n        return numbers[middle_index]\n    else:\n        return numbers[middle_index - 1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the length of the array\n    n = len(nums)\n\n    # If the array has an odd length, the median is the middle number\n    if n % 2 == 1:\n        median = nums[n // 2]\n    # If the array has an even length, the median is the average of the two middle numbers\n    else:\n        median = (nums[n // 2] + nums[n // 2 - 1]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    a, b, c = sorted([a, b, c])\n    \n    # Find the middle number\n    mid = (a + b + c) / 3\n    \n    # Return the median\n    return mid"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = [a, b, c]\n    sorted_numbers.sort()\n    median = sorted_numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # calculate the middle index\n    mid = len(nums) // 2\n    \n    # check if the length of the list is odd or even\n    if len(nums) % 2 == 1:\n        # return the middle number\n        return nums[mid]\n    else:\n        # return the average of the middle two numbers\n        return (nums[mid - 1] + nums[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n\n    :param a: The first number.\n    :type a: int or float\n    :param b: The second number.\n    :type b: int or float\n    :param c: The third number.\n    :type c: int or float\n    :return: The median of the three numbers.\n    :rtype: int or float\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Determine the median index\n    mid = len(nums) // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if len(nums) % 2 == 1:\n        return nums[mid]\n\n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (nums[mid - 1] + nums[mid]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in str(nums)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        if type(num) == int:\n            digits = 0\n            while num > 0:\n                digits += num % 10\n                num //= 10\n            sum += digits\n        else:\n            raise TypeError(\"Invalid input: list of non-integers\")\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        for digit in str(num):\n            digits.append(int(digit))\n    return sum(digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and convert each character to an integer\n        num_digits = [int(d) for d in str(num)]\n        # add up the digits\n        digit_sum += sum(num_digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits.append(sum(digits))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        temp = num\n        while temp > 0:\n            digits.append(temp % 10)\n            temp //= 10\n    return sum(digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_of_digits_list = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits_list = [int(digit) for digit in str(num)]\n        # Compute the sum of digits in the list\n        sum_of_digits_list.append(sum(digits_list))\n\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with the first tuple's elements\n    result_tup = (test_tup1[0],)\n    # iterate through the rest of the tuples\n    for i in range(1, len(test_tup1)):\n        # perform the bitwise xor operation on the current tuple element and the result tuple's last element\n        result_tup += (test_tup1[i] ^ result_tup[-1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    \n    # loop through the tuples and perform the xor operation on each element\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n        \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # convert the tuples into lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # perform the bitwise xor operation on the lists\n    result = [x ^ y for x, y in zip(list1, list2)]\n\n    # convert the result list back into a tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(bin(x^y)[2:] for x,y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    # Create a set to store the unique tuples in the list\n    unique_tuples = set()\n\n    # Iterate through the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n\n    # Return the length of the set, which will be the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list and extracts the number of unique tuples in it.\n\n    Parameters:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list and returns the number of unique tuples in the list.\n    '''\n\n    # Convert the list into a set to remove duplicates and then convert back to a list\n    unique_list = list(set(test_list))\n\n    # Calculate the number of unique tuples in the list\n    freq = len(unique_list)\n\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    # create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # if the tuple is not in the dictionary, add it with a frequency of 1\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        # if the tuple is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[tup] += 1\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with the same length as the two input tuples\n    result_tup = tuple([0] * len(test_tup1))\n    # loop through each element in the input tuples and add the corresponding elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        if isinstance(tup1_elem, tuple) and isinstance(tup2_elem, tuple):\n            result.append(add_nested_tuples(tup1_elem, tup2_elem))\n        elif isinstance(tup1_elem, tuple) or isinstance(tup2_elem, tuple):\n            raise ValueError(\"Only tuples can be added\")\n        else:\n            result.append(tup1_elem + tup2_elem)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with length of the shorter tuple\n    result = tuple(0 for i in range(min(len(test_tup1), len(test_tup2))))\n\n    # iterate through each index of the tuple\n    for i in range(len(test_tup1)):\n        # add the corresponding elements of the two tuples\n        result[i] = test_tup1[i] + test_tup2[i]\n\n    # return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a result tuple with the same length as the input tuples\n    result_tup = ()\n    # loop through the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # if the input tuple is a nested tuple, perform index wise addition\n        if isinstance(test_tup1[i], tuple):\n            result_tup += tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))\n        # otherwise, add the elements directly\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the resultant tuple with the same length as the shortest tuple\n    result = [0] * min(len(test_tup1), len(test_tup2))\n\n    # Loop through each element of the resultant tuple and add the corresponding elements from both tuples\n    for i in range(len(result)):\n        result[i] = test_tup1[i] + test_tup2[i]\n\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the current element of the first tuple\n        current_tup = []\n\n        # Loop through the second tuple and append the current element to the current_tup list\n        for j in range(len(test_tup2[i])):\n            current_tup.append(test_tup1[i][j] + test_tup2[i][j])\n\n        # Append the current_tup list to the result list\n        result.append(current_tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in each tuple must be the same.\")\n    else:\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup1[i])):\n                test_tup1[i][j] += test_tup2[i][j]\n        return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples must have the same number of elements.')\n\n    # Initialize the result tuple with all zeroes\n    result_tup = (0 for _ in range(len(test_tup1)))\n\n    # Iterate over the elements of both tuples and add their indices\n    for i, (elem1, elem2) in enumerate(zip(test_tup1, test_tup2)):\n        result_tup[i] = elem1 + elem2\n\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of these two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes in two tuples as input: tuplex and tuple1.\n    The first tuple, tuplex, contains elements that are being checked for existence within tuple1.\n    The second tuple, tuple1, contains the elements that should be checked.\n\n    The function returns a boolean value of whether or not an element exists within tuple1 for any tuple in tuplex.\n    '''\n    \n    # Loop through each tuple in tuplex\n    for tup in tuplex:\n        # Check if each element in tuplex exists within tuple1\n        if tup in tuple1:\n            return True\n\n    # If no element exists within any tuple, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(\"Element found in the tuple.\") \n    else: \n        print(\"Element not found in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    # Check if the tuplex is empty\n    if not tuplex:\n        return False\n    \n    # Check if the element exists in the tuple\n    if tuplex[0] in tuple1:\n        return True\n    \n    # Recursive call to check if the element exists in the remaining elements of the tuple\n    return check_tuplex(tuplex[1:], tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two parameters, `tuplex` and `tuple1`, and checks whether \n    an element exists within the `tuplex` tuple. It returns True if the element \n    exists, and False otherwise.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = x % 2\n    if parity == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity of the input number is odd, else False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return 'The parity of the number {} is even.'.format(x)\n    else: \n        return 'The parity of the number {} is odd.'.format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of \" + str(x) + \" is even.\"\n    else: \n        return \"The parity of \" + str(x) + \" is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even, then parity is even\n        parity = 'Even'\n    else: # if x is odd, then parity is odd\n        parity = 'Odd'\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the number is even\" \n    else: \n        return \"The parity of the number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even, parity is even\n        parity = \"even\"\n    else: # if x is odd, parity is odd\n        parity = \"odd\"\n    return parity"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Find the largest number that is smaller than or equal to n\n    prev_num = int(str(n) + str(n)[::-1])\n    # Rearrange the digits of prev_num to create the next bigger number\n    next_num = 0\n    for i in range(len(num_str)):\n        next_num += int(str(prev_num)[i]) * (int(num_str[len(num_str) - i - 1]) - 1)\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Define a dictionary to store the digits of the input number\n    digits = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0}\n\n    # Initialize an empty string to store the digits of the next bigger number\n    next_digits = ''\n\n    # Loop through each digit of the input number\n    for digit in str(n):\n        # If the digit is a single digit, add it to the next digits string\n        if digits[digit] == 1:\n            next_digits += digit\n        # If the digit has more than one digit, subtract 1 from its value and add it to the next digits string\n        elif digits[digit] > 1:\n            next_digits += str(digits[digit] - 1)\n\n    # Convert the next digits string to an integer and return it\n    return int(next_digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # convert number to list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # reverse the digits\n    digits.reverse()\n\n    # find the index of the first digit that is smaller than the next digit\n    index = digits.index(min(digits))\n\n    # rearrange the digits starting from the index\n    new_digits = digits[:index] + digits[index+1:]\n\n    # convert list of digits back to number\n    new_number = int(''.join(str(digit) for digit in new_digits))\n\n    # return the new number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a string\n    num = str(n)\n    # initialize variables to store the digits of the number\n    digits = []\n    # loop through each digit in the string\n    for digit in num:\n        # convert the digit to an integer and add it to the digits list\n        digits.append(int(digit))\n    # reverse the digits list\n    digits.reverse()\n    # loop through the digits list and combine them into a new number\n    new_num = 0\n    for digit in digits:\n        # multiply the current digit by 10^i where i is the index of the digit in the digits list\n        new_num += digit * 10 ** (len(digits) - digits.index(digit))\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Find the maximum number with a smaller number of digits\n    max_num = int(''.join(str(i) for i in range(1, 10)))\n    while n > max_num:\n        max_num = int(''.join(str(i) for i in range(1, 10)))\n    # Find the difference between the maximum number with n digits and n+1 digits\n    diff = max_num - n\n    # Remove the digits of the maximum number with n digits\n    max_num = int(''.join(str(int(digit) + diff) for digit in str(max_num)))\n    # Convert the number to a string\n    num_str = str(n)\n    # Rearrange the digits of the original number to form the next bigger number\n    new_num_str = ''\n    for digit in num_str:\n        new_digit = str(int(digit) + diff)\n        new_num_str += new_digit\n    # Convert the rearranged digits to an integer and return it\n    return int(new_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # initialize the result with the original number\n    result = n\n    \n    # iterate over the digits of the number\n    while result > 0:\n        \n        # get the last digit of the current number\n        last_digit = result % 10\n        \n        # remove the last digit from the number\n        result //= 10\n        \n        # add the last digit to the result\n        result += last_digit\n        \n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    n = 0\n    for d in digits:\n        n = n * 10 + d\n    return n + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize the result to be the original number\n    result = n\n    \n    # create a list of the digits of the original number\n    digits = [int(digit) for digit in str(n)]\n    \n    # create a list of the digits in reverse order\n    reversed_digits = digits[::-1]\n    \n    # iterate over the digits in reverse order\n    for digit in reversed_digits:\n        # check if the current digit is one digit smaller than the original number\n        if digit < n - 10 ** (len(digits) - 1) and digit!= 0:\n            # create a new number by replacing the current digit with the next bigger digit\n            new_number = str(n).replace(str(digit), str(digit + 1))\n            # check if the new number is greater than the original number\n            if int(new_number) > n:\n                # set the result to be the new number\n                result = int(new_number)\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Split the input number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the index of the first non-zero digit\n    i = 0\n    while digits[i] == 0:\n        i += 1\n\n    # Count the number of 0s and 1s to the left of the first non-zero digit\n    zeros_left = i\n    ones_left = 0\n\n    for j in range(i, len(digits)):\n        if digits[j] == 0:\n            zeros_left += 1\n        elif digits[j] == 1:\n            ones_left += 1\n\n    # If there are no 0s to the left, we can just increment the last digit and return\n    if zeros_left == 0:\n        digits[len(digits)-1] += 1\n        return int(''.join(str(digit) for digit in digits))\n\n    # Find the index of the first non-zero digit to the left of the first non-zero digit\n    k = i - 1\n    while k >= 0 and digits[k] == 0:\n        k -= 1\n\n    # If there are no non-zero digits to the left of the first non-zero digit, we can increment the first digit and return\n    if k < 0:\n        digits[0] += 1\n        return int(''.join(str(digit) for digit in digits))\n\n    # Count the number of 0s and 1s to the left of the first non-zero digit to the left of the first non-zero digit\n    zeros_left_to_left = 0\n    ones_left_to_left = 0\n    for l in range(k, i):\n        if digits[l] == 0:\n            zeros_left_to_left += 1\n        elif digits[l] == 1:\n            ones_left_to_left += 1\n\n    # If the number of 0s to the left of the first non-zero digit to the left of the first non-zero digit is odd, we can increment the first digit and return\n    if zeros_left_to_left % 2 == 1:\n        digits[0] += 1\n        return int(''.join(str(digit) for digit in digits))\n\n    # If the number of 1s to the left of the first non-zero digit is even, we can increment the last digit and return\n    if ones_left_to_left % 2 == 0:\n        digits[len(digits)-1] += 1\n        return int(''.join(str(digit) for digit in digits))\n\n    # Otherwise, we can increment the last digit and return\n    digits[len(digits)-1] += 1\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the result to the original number\n    result = n\n    \n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert the sorted list of digits back to a string\n    result = int(''.join(digits))\n    \n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1, num2))\n            if len(result) == k:\n                heapq.heappop(min_heap)\n\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples containing the product of an element from nums1 and an element from nums2 and the index of that element in nums1 and nums2\n    pairs = [(nums1[i]*nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    # Sort the list of tuples in ascending order of the first element (product of nums1[i] and nums2[j])\n    pairs.sort()\n    # Initialize an empty list to hold the result\n    result = []\n    # Iterate over the first k elements of the sorted list and add their product and their index to the result\n    for i in range(k):\n        result.append((pairs[i][0], i, pairs[i][2]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to keep track of the smallest k elements\n    min_heap = []\n\n    # Loop through the first array\n    for num1 in nums1:\n        # Compare the current element with the smallest k elements in the heap\n        while len(min_heap) < k and min_heap and min_heap[0][1] > num1:\n            heapq.heappop(min_heap)\n\n        # If the heap is full, add the current element as a pair to the result\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, len(nums2)))\n\n        # Compare the current element with the smallest k elements in the heap\n        while len(min_heap) > 0 and min_heap[0][0] > num1:\n            heapq.heappop(min_heap)\n\n        # If the heap is not full, add the current element as a pair to the result\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, len(nums2)))\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while min_heap and len(result) < k:\n        result.append((min_heap[0][0], nums2[min_heap[0][1]]))\n        heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a list of tuples containing the difference between each element in the first and second array and their index\n    pairs = [(abs(nums1[i] - nums2[j]), i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Use a min heap to find the k smallest pairs\n    heapq.heapify(pairs)\n    result = []\n    while k > 0:\n        smallest = heapq.heappop(pairs)\n        result.append(smallest)\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    # Loop through the arrays and extract the k smallest pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            # Create a new pair (num1, num2) and add it to the min heap\n            pair = (num1, num2)\n            heapq.heappush(min_heap, pair)\n            # If the min heap has more than k elements, remove the largest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Return the pairs from the min heap\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return []\n\n    nums1.sort()\n    nums2.sort()\n\n    pairs = []\n\n    i, j = 0, 0\n    while len(pairs) < k:\n        if i == len(nums1):\n            if j < len(nums2):\n                pairs.append((nums2[j], float('inf')))\n            j += 1\n        elif j == len(nums2):\n            if i < len(nums1):\n                pairs.append((nums1[i], float('inf')))\n            i += 1\n        else:\n            if nums1[i] + nums2[j] <= nums1[i + 1]:\n                pairs.append((nums1[i], nums2[j]))\n                i += 1\n            else:\n                j += 1\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Build a min heap of the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n\n    # Initialize a list to store the pairs\n    pairs = []\n\n    # Loop through the second array until we have found k pairs\n    while len(pairs) < k:\n        # Pop the smallest element from the min heap\n        num = -heapq.heappop(min_heap)\n\n        # If there are still elements in the min heap, add one more element to the pair\n        if min_heap:\n            heapq.heappush(min_heap, -num)\n\n        # If the pair doesn't exist, add it to the list of pairs\n        if num in nums2 and len(pairs) < k:\n            pairs.append((num, nums2[nums2.index(num)]))\n\n    # Return the list of pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Create a tuple (num1, infinity)\n        infinity = float('inf')\n        heapq.heappush(min_heap, (num1, infinity))\n        \n        # If the size of the heap exceeds k, pop the smallest element\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # Iterate through the second array\n        for num2 in nums2:\n            # If the sum of the current pair is less than the infinity value, add the pair to the heap\n            if num1 + num2 < infinity:\n                heapq.heappush(min_heap, (num1 + num2, num1, num2))\n    \n    # Extract the smallest k pairs from the heap\n    result = []\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        result.append((pair[0], pair[1], pair[2]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # First, sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Create a min heap for the first array and a min heap for the second array\n    min_heap1 = []\n    min_heap2 = []\n    \n    # Initialize the min heaps with the first two elements\n    heapq.heappush(min_heap1, nums1[0])\n    heapq.heappush(min_heap1, nums1[1])\n    heapq.heappush(min_heap2, nums2[0])\n    \n    # Initialize the result list to store the pairs\n    result = []\n    \n    # Iterate through the remaining elements\n    for i in range(2, len(nums1) + len(nums2)):\n        # Find the minimum element from the two heaps and add it to the result list\n        if heapq.heappop(min_heap1) <= heapq.heappop(min_heap2):\n            result.append((heapq.heappop(min_heap1), heapq.heappop(min_heap2)))\n        \n        # Add the next element from the first array to the min heap\n        heapq.heappush(min_heap1, nums1[i])\n        \n        # Add the next element from the second array to the min heap\n        heapq.heappush(min_heap2, nums2[i])\n    \n    # Return the k smallest pairs\n    return result[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Use a min heap to keep track of the smallest k pairs\n    min_heap = []\n\n    # Iterate over the first array and add each element to the min heap\n    for num1 in nums1:\n        heappush(min_heap, (num1, -1))\n\n    # Iterate over the second array and add each element to the min heap\n    for num2 in nums2:\n        if len(min_heap) < k:\n            heappush(min_heap, (num2, len(nums1)))\n        else:\n            min1 = heappop(min_heap)[0]\n            min2 = heappop(min_heap)[0]\n            if min1 > num2:\n                heappush(min_heap, (min1, len(nums1)))\n            else:\n                heappush(min_heap, (min2, len(nums1) + 1))\n\n    # Extract the k smallest pairs from the min heap and return them as a list of tuples\n    result = []\n    while len(min_heap) > 0:\n        pair = heappop(min_heap)\n        result.append((pair[0], nums1[pair[1]]))\n\n    return result[::-1]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a dictionary to store the products of each tuple in the list\n    products = {}\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # if the current tuple has not been seen before, calculate its product and add it to the dictionary\n        if tuple(list1[i]) not in products:\n            products[tuple(list1[i])] = 1\n        # otherwise, multiply the current tuple with its product in the dictionary\n        else:\n            products[tuple(list1[i])] *= 1\n\n    # iterate through the list of tuples again and calculate the minimum product\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and check if it is less than the current minimum\n            product = products[tuple(list1[i])] * products[tuple(list1[j])]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to be the maximum possible integer\n    min_product = float('inf')\n\n    # iterate through each tuple in the list\n    for i in range(len(list1)):\n        # iterate through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n\n            # update the minimum product if the product is smaller\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = float('inf')\n    first_tuple = None\n    second_tuple = None\n\n    # iterate over the list\n    for i in range(len(list1)):\n        # check if the current tuple has a smaller product\n        if list1[i][0] < list1[i][1]:\n            current_product = list1[i][0] * list1[i][1]\n            # check if the current product is smaller than the current minimum\n            if current_product < min_product:\n                min_product = current_product\n                first_tuple = list1[i]\n        else:\n            current_product = list1[i][0] * list1[i][1]\n            # check if the current product is smaller than the current minimum\n            if current_product < min_product:\n                min_product = current_product\n                first_tuple = list1[i]\n                second_tuple = list1[i]\n\n    # return the minimum product tuple\n    return (first_tuple, second_tuple)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    The function takes a list of tuples as input and returns the minimum product of the pairs of tuples.\n\n    Example:\n    list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    print(min_product_tuple(list1)) # Output: 32\n    '''\n\n    # Sort the list of tuples based on the second element of each tuple\n    list1.sort(key=lambda x: x[1])\n\n    # Initialize the minimum product to be the product of the first two elements\n    min_product = list1[0][0] * list1[0][1]\n\n    # Iterate through the remaining tuples in the list\n    for i in range(1, len(list1)):\n        # Update the minimum product if the current tuple's second element is smaller than the current minimum product\n        if list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    list1.sort()\n    n = len(list1)\n\n    # Initialize minimum product and minimum tuple\n    min_product = list1[n-1] * list1[n-2]\n    min_tuple = (list1[n-1], list1[n-2])\n\n    # Iterate through the list to find the minimum product for the next pair of tuples\n    for i in range(n-2, -1, -1):\n        product = list1[i] * list1[i+1]\n        if product < min_product:\n            min_product = product\n            min_tuple = (list1[i], list1[i+1])\n\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum product and the minimum tuple\n    min_product = float('inf')\n    min_tuple = (float('inf'), float('inf'))\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Check if the current tuple has a smaller product than the previous minimum\n        if list1[i][0] * list1[i][1] < min_product:\n            # If it does, update the minimum product and minimum tuple\n            min_product = list1[i][0] * list1[i][1]\n            min_tuple = (list1[i][0], list1[i][1])\n    \n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = tuple(a*b for a, b in zip(list1[i], list1[j]))\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the minimum product of any two pairs of tuples in the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # initialize min value to the first value in the list\n    min_val = listval[0]\n\n    # iterate through the rest of the values in the list\n    for val in listval[1:]:\n        # if the current value is smaller than the min value, update min_val\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # If an element is smaller than the current minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize variables for the minimum value and the index of the minimum value\n    min_val = float('inf')\n    min_idx = -1\n    \n    # iterate through the list to find the minimum value\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_idx = i\n    \n    # return the index of the minimum value\n    return min_idx"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to be the first element of the list\n    min_val = listval[0]\n    # Loop through the list and compare each element with the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in listval:\n        if i < min_num:\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Use the built-in min() function to find the minimum value in the list\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize the minimum value to the first element in the list\n    min_val = listval[0]\n\n    # Iterate through the list, checking if each element is less than the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    words = re.findall(r'\\b[A-Za-z][A-Za-z0-9_]*\\b', word)\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake_case to CamelCase\n    result = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    # Remove leading and trailing underscores\n    result = result.lstrip('_').rstrip('_')\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores from the word\n    word = re.sub('_', '', word)\n    # Convert the first character to uppercase\n    word = word[0].upper() + word[1:]\n    # Convert the rest of the characters to lowercase\n    word = word.lower()\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(_[a-z])', lambda x: x.group()[1].upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words using the underscore as the separator\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    first_letter = words[0]\n    words[0] = first_letter.capitalize()\n\n    # Combine the words back into a camel case string\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[A-Z]+', word)\n    camel_case = words[0] + ''.join(word.split('_')[1:])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda match: match.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Define the regular expression pattern for snake case\n    pattern = re.compile(r'([a-z0-9])([A-Z]+)')\n\n    # Split the word into words using the pattern\n    words = pattern.findall(word)\n\n    # Convert each word to camel case\n    camel_words = []\n    for i in range(0, len(words), 2):\n        camel_words.append(words[i].lower() + words[i+1])\n\n    # Join the camel words into a single string\n    camel_word = ''.join(camel_words)\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word into words based on underscores\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n    # Convert the first word to uppercase\n    words[0] = words[0].capitalize()\n    # Combine the words into camel case\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0: # check if the number is even\n            new_list.append(num) # add even number to new list\n    return new_list # return the new list without odd numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = [num for num in l if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # loop through the list\n    for i in range(len(l)):\n        # check if the current element is odd\n        if l[i] % 2!= 0:\n            # remove the odd number from the list\n            l.remove(l[i])\n    return l"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(i, tuple) for i in list1):\n        raise TypeError('Input should be a list of tuples')\n\n    # Check if n is a valid index\n    if n < 0 or n >= len(list1):\n        raise IndexError('Index out of range')\n\n    # Extract the nth element from the list\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n    list1 (list): A list of tuples.\n    n (int): The index of the element to be extracted.\n\n    Returns:\n    A tuple: The nth element of the list.\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for tup in list1:\n        if len(tup) == n:\n            return tup[n-1]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"The value of n is greater than the length of the list.\")\n        return None\n    elif n < 1:\n        print(\"The value of n is less than 1.\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples (lst) and an integer (n) as input.\n    It returns the nth element of the list of tuples as a tuple.\n    \n    The nth element is the element at the index n-1 in the list.\n    \n    Example usage:\n    >>> lst = [('apple', 3), ('banana', 1), ('cherry', 2)]\n    >>> extract_nth_element(lst, 2)\n    ('cherry', 2)\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_list = []\n    # Iterate through the given list\n    for tup in list1:\n        # Extract the nth element from the current tuple\n        extracted_element = tup[n-1]\n        # Append the extracted element to the extracted_list\n        extracted_list.append(extracted_element)\n    # Return the extracted_list\n    return extracted_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n <= 0 or n > len(list1):\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    It returns True if a value is found in either list, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in list1 that exists in list2 or any value in list2 that exists in list1.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    for value in list2:\n        if value in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if any value in list1 is present in list2\n    and False otherwise.\n    \"\"\"\n    # Convert both lists to sets to remove any duplicates and avoid checking duplicates in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any value in set1 is present in set2\n    for value in set1:\n        if value in set2:\n            return True\n    # If no values in set1 are present in set2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a Python function to check whether any value in a sequence exists in a sequence or not.\n    The function should return a boolean value indicating whether any value exists in both lists or not.\n    '''\n    return any(i in list1 and i in list2 for i in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks whether there exists any value in the first sequence that also exists in the second sequence. If such a value exists, it returns True, otherwise, it returns False.\n    '''\n\n    # Loop through the first sequence and check if any value exists in the second sequence\n    for num in list1:\n        if num in list2:\n            return True\n\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes in two lists as arguments and returns True if there is any element in list1 that is also in list2, and False otherwise.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find the pair of numbers in the array that have the highest product.\n    \"\"\"\n    max_product = float('-inf')\n    pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    \n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2:\n        return \"Array must have at least two elements.\"\n\n    max_product = float('-inf')\n    max_product_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = [arr[i], arr[j]]\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing two elements.\n    The first element is the maximum product and the second element is the pair of numbers which give the maximum product.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_product = float('inf')\n    min_pair = (float('inf'), float('inf'))\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (arr[i], arr[j])\n                elif product > min_product:\n                    min_product = product\n                    min_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize variables\n    max_pair = None\n    max_product = -1000000\n    current_product = 1\n\n    # loop through the array and update max_pair and max_product if necessary\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (num, current_product)\n        else:\n            current_product = 1\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum and minimum values\n    max_value = arr[0]\n    min_value = arr[0]\n    # loop through the array\n    for i in range(1, len(arr)):\n        # if the current value is greater than the maximum value, update the maximum value\n        if arr[i] > max_value:\n            max_value = arr[i]\n        # if the current value is less than the minimum value, update the minimum value\n        if arr[i] < min_value:\n            min_value = arr[i]\n        # check if the product of the current value and the maximum value is greater than the previous maximum value\n        if max_value * min_value > max_value * arr[i]:\n            return (max_value, min_value)\n    return None"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(2, len(arr)):\n        product = max(arr[i], max_product) * min(arr[i], max_product)\n        if product > max_product:\n            max_product = product\n            max_pair = (arr[i-1], arr[i])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max1, max2 = max2, max1\n            min1, min2 = min2, min1\n        elif arr[i] > max2:\n            max2 = arr[i]\n            min2 = min(min2, arr[i])\n        elif arr[i] < min1:\n            min1, min2 = min2, min1\n            max1, max2 = max2, max1\n        elif arr[i] < min2:\n            min2 = arr[i]\n            max2 = max(max2, arr[i])\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] * arr[j]) > max_pair[0]:\n                max_pair[0] = arr[i] * arr[j]\n                max_pair[1] = arr[i]\n                max_pair[2] = arr[j]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find the pair with the highest product from a given array of integers.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    tuple of integers: (product of pair, index of pair)\n    \"\"\"\n    max_product = float('-inf')\n    max_product_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n\n    return max_product_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples with their common first element.\n    '''\n    common_elements = []\n    for i in range(len(Input)-1):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], Input[i][1], Input[j][1]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = []\n    for i in range(len(Input)):\n        common_elem.append(Input[0][0])\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements and their counts\n    common_dict = {}\n    \n    # loop through the list of tuples\n    for item in Input:\n        # check if the first element is already in the dictionary\n        if item[0] in common_dict:\n            # if it is, increment its count\n            common_dict[item[0]] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            common_dict[item[0]] = 1\n    \n    # create an empty list to store the output\n    output = []\n    \n    # loop through the dictionary and add the common elements and their counts to the output\n    for key, value in common_dict.items():\n        # if the count is greater than 1, add the element to the output\n        if value > 1:\n            output.append(key)\n    \n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where the keys are the first elements of the tuples in the list and the values are lists of tuples where the first element matches the key.\n    \"\"\"\n\n    # create an empty dictionary\n    result = {}\n\n    # loop through each tuple in the list\n    for tup in Input:\n        # get the first element of the tuple\n        first_elem = tup[0]\n\n        # if the first element is already in the dictionary, append the tuple to the existing list\n        if first_elem in result:\n            result[first_elem].append(tup)\n        # if the first element is not in the dictionary, add the tuple to the dictionary with a list containing only that tuple\n        else:\n            result[first_elem] = [tup]\n\n    # return the dictionary with the grouped tuples\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # loop through each tuple in the list\n    for tup in Input:\n        # get the first element of the tuple\n        first_elem = tup[0]\n        # initialize a set to store the common first element\n        common_first_set = set()\n        # loop through each tuple in the list again\n        for other_tup in Input:\n            # get the first element of the other tuple\n            other_first_elem = other_tup[0]\n            # check if the first element of the tuple is equal to the first element of the other tuple\n            if first_elem == other_first_elem:\n                # if so, add it to the set of common first elements\n                common_first_set.add(first_elem)\n        # if the set of common first elements is not empty, print the tuple and its common first element\n        if common_first_set:\n            print(tup, first_elem)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element == tup[0]:\n            pass\n        else:\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_element in Input:\n        if common_element is None:\n            common_element = tuple_element\n        elif tuple_element[0] == common_element[0]:\n            common_element = tuple_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Dictionary to store the count of each element in the input list\n    count_dict = {}\n\n    # Iterate over each element in the input list and increment the count of its first element in the dictionary\n    for tup in Input:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n\n    # Find the maximum count and its corresponding element in the dictionary\n    max_count = max(count_dict.values())\n    for key in count_dict:\n        if count_dict[key] == max_count:\n            common_element = key\n            break\n\n    # Return the common element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples, where each tuple contains the common first element of each input tuple.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)):\n        if len(set(Input[i])) == 1:\n            common_elements.append(tuple(Input[i]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = set()\n    for i in range(len(Input)):\n        if i == 0 or Input[i][0]!= Input[i-1][0]:\n            result.add(Input[i][0])\n    return list(result)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    # find the length of the longest element in the list\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Finding the length of the maximum element in the list\n    max_len = max(len(x) for x in lst)\n\n    # Finding the element with maximum length in the list\n    max_element = max(x for x in lst if len(x) == max_len)\n\n    # Returning the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #initialize max_length and max_elem as 0\n    max_length = 0\n    max_elem = ''\n\n    #loop through the list and check if the length of each element is greater than max_length\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    #return the max element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    product = len(list1) * total\n    print(product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    \n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total*len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    total_sum *= len(lst)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing the sum to 0\n    cube_sum = 0\n\n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculating the cube of i\n        cube = i**3\n        # adding the cube to the cube_sum\n        cube_sum += cube\n\n    # returning the cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i * i * i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    \n    # Initializing variables\n    sum = 0\n    i = 0\n    \n    # Looping through the first n even natural numbers\n    while i <= n:\n        \n        # If the current number is even, adding its cube to the sum\n        if i % 2 == 0:\n            sum += i**3\n        \n        # Incrementing the counter\n        i += 1\n    \n    # Returning the cube sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initializing variables\n    cube_sum = 0\n    i = 2\n\n    # Looping through the even natural numbers and calculating the cube sum\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n\n    # Returning the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize variables\n    count = 0\n    cube_sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the number\n        cube = i**3\n        \n        # add the cube to the cube sum\n        cube_sum += cube\n        \n        # increment the count\n        count += 1\n\n    # return the cube sum and count\n    return cube_sum, count"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \",\".join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    average = total/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average = sum_of_cubes/count\n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum = 0\n    count = 0\n    # Calculate the cube of each natural number and add it to the sum\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    # Calculate the average and return it as a float\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    sum_cube = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum_cube += i ** 3\n        count += 1\n    \n    average_cube = sum_cube / count\n    \n    return average_cube\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * n * n) + find_Average_Of_Cube(n-1)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initialize the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n    #iterate over the first n natural numbers\n    for i in range(1, n+1):\n        #calculate the cube of the number and add it to the sum_of_cubes variable\n        sum_of_cubes += i**3\n        #increment the count variable\n        count += 1\n    #calculate the average of the cubes\n    average_of_cubes = sum_of_cubes/count\n    #return the average\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n        \n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    avg_of_cubes = sum_of_cubes/n\n    \n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(n):  \n        sum_of_cubes += i**3  \n    average_of_cubes = sum_of_cubes/n  \n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, x in enumerate(test_tuple):\n        if i % 2 == 0:\n            rear_index.append(x[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_indices.append(len(string)-1)\n        else:\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [item[-1] for item in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_elements.append(item)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[len(s)-1] for s in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1 \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    # initialize an empty list to store the odd numbers\n    odd_numbers = []\n    # iterate through the list of numbers\n    for num in nums:\n        # if the number is odd, append it to the odd_numbers list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    # return the odd_numbers list\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(date_format, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError('Invalid date format')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    dd_mm_yyyy_pattern = r'^\\d{2}-\\d{2}-\\d{4}$'\n    \n    if re.match(yyyy_mm_dd_pattern, dt):\n        # convert yyyy-mm-dd to dd-mm-yyyy\n        yyyy_mm_dd = dt.split('-')\n        return '-'.join([yyyy_mm_dd[2], yyyy_mm_dd[1], yyyy_mm_dd[0]])\n    elif re.match(dd_mm_yyyy_pattern, dt):\n        # convert dd-mm-yyyy to dd-mm-yyyy\n        dd_mm_yyyy = dt.split('-')\n        return '-'.join([dd_mm_yyyy[2], dd_mm_yyyy[1], dd_mm_yyyy[0]])\n    else:\n        raise ValueError(\"Invalid date format.\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Define the replacement pattern for the output date format\n    replacement = r'\\2-\\1-\\3'\n\n    # Use re.sub() to replace the date pattern with the replacement pattern\n    return re.sub(pattern, replacement, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Extract the year, month, and day from the input date\n    year, month, day = re.search(pattern, dt).groups()\n    \n    # Convert the year and day to strings\n    year = str(year)\n    day = str(day)\n    \n    # Format the date as dd-mm-yyyy\n    formatted_date = day + '-' + month + '-' + year\n    \n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # regular expression to match the date format\n    regex = re.compile(pattern)\n\n    # search for the date in the input string\n    match = regex.search(dt)\n\n    # check if a match was found\n    if match:\n        # get the groups of the match\n        year, month, day = match.groups()\n\n        # create a new date string with the desired format\n        new_date = day + '-' + month + '-' + year\n\n        # return the new date string\n        return new_date\n    else:\n        # return None if no match was found\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'([0-9]{4})-([0-9]{2})-([0-9]{2})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Match the date in the format yyyy-mm-dd\n    date_match = re.search(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    # Check if the date was found\n    if date_match:\n        # Extract the date components\n        year, month, day = date_match.groups()\n        # Convert the date components to the new format\n        new_dt = day + '-' + month + '-' + year\n        # Return the new date format\n        return new_dt\n    # If no date was found, return None\n    return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # calculate the largest gap between the elements\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # move the gap to the next position and sort the list\n        for i in range(gap, n):\n            # shift the greater elements one position to the right\n            temp = my_list[i]\n            j = i - gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = temp\n        \n        # reduce the gap by half\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the gap sequence using the formula: gap = 3 * gap / 2 + 1\n    gap = 1\n    while gap < len(my_list) // 3:\n        gap = 3 * gap + 1\n\n    # Iterate over the gap sequence\n    while gap > 0:\n        # Iterate over the array with the current gap\n        for i in range(gap, len(my_list)):\n            # Compare the current element with its adjacent elements\n            # using a simple insertion sort\n            for j in range(i - gap, -1, -gap):\n                if my_list[j] > my_list[j + gap]:\n                    my_list[j], my_list[j + gap] = my_list[j + gap], my_list[j]\n\n        # Decrease the gap sequence\n        gap = gap // 3\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Set the increment value for the array\n    inc = len(my_list) // 2\n    \n    # Loop until the increment value is 1\n    while inc > 0:\n        \n        # Loop through the array using the increment value\n        for i in range(inc, len(my_list)):\n            \n            # Swap adjacent elements if they are in the wrong order\n            j = i\n            while j >= inc and my_list[j] > my_list[j-inc]:\n                my_list[j], my_list[j-inc] = my_list[j-inc], my_list[j]\n                j -= inc\n                \n        # Reduce the increment value\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    test_tup1 (tuple): The first tuple to be processed.\n    test_tup2 (tuple): The second tuple to be processed.\n\n    Returns:\n    (tuple): The elementwise and tuples of the two input tuples.\n\n    '''\n\n    # Initialize the new tuple to store the elementwise and tuples\n    new_tup = ()\n\n    # Loop through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the two input tuples and perform the elementwise and\n        new_tup += (test_tup1[i] & test_tup2[i],)\n\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    # initialize an empty list to store the result\n    result_list = []\n    \n    # iterate through the tuples and extract their elementwise and\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n        \n    # convert the list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] and test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] & test_tup2[i]\n        result_list.append(result)\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    # create a new tuple to store the elementwise and tuples\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        # extract the two elements from the input tuples\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        # check if both elements are True or False\n        if element1 and element2:\n            # if they are both True, add True to the new tuple\n            new_tup += (True,)\n        else:\n            # if they are either not True or False, add False to the new tuple\n            new_tup += (False,)\n    return new_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        print(\"No real roots\")\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"Directrix 1:\", x1, \"Directrix 2:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is positive or negative\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is %.2f\" % directrix\n    elif discriminant < 0:\n        directrix = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is %.2f\" % directrix\n    else:\n        return \"The parabola has no real root(s).\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula for distance from origin to equation of a parabola:\n    # y = a*x^2 + b*x + c\n    distance = -b / (2 * a)\n    # Convert to the equation of a line through the origin:\n    # y = distance * x^2\n    directrix = distance * c\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        root1 = -b / (2*a)\n        root2 = root1\n    else:\n        root1 = (-b + discriminant) / (2*a)\n        root2 = (-b - discriminant) / (2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"There are no real roots.\"\n    elif discriminant == 0:\n        return \"The directrix is \" + str(-b/2/a) + \".\"\n    else:\n        return \"The directrix is \" + str((-b - math.sqrt(discriminant))/(2*a)) + \" and \" + str((-b + math.sqrt(discriminant))/(2*a)) + \".\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    \n    if d > 0:\n        return (-b + d**0.5)/(2*a)\n    elif d == 0:\n        return -b/(2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0:\n        # Find the root of the discriminant using the quadratic formula\n        root = (-b + disc**0.5)/(2*a)\n        \n        # Calculate the angle between the x-axis and the directrix\n        angle = math.degrees(math.atan((root - b)/(root + b)))\n        \n        # Print the directrix and the angle between the x-axis and the directrix\n        print(\"The directrix of the parabola is:\", root)\n        print(\"The angle between the x-axis and the directrix is:\", angle, \"degrees.\")\n        \n    elif disc == 0:\n        # If the discriminant is zero, the directrix is at one of the two roots\n        root = -b/2/a\n        \n        # Calculate the angle between the x-axis and the directrix\n        angle = 90\n        \n        # Print the directrix and the angle between the x-axis and the directrix\n        print(\"The directrix of the parabola is:\", root)\n        print(\"The angle between the x-axis and the directrix is:\", angle, \"degrees.\")\n        \n    else:\n        # If the discriminant is negative, the directrix is at one of the two complex roots\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        \n        # Calculate the angle between the x-axis and the directrix1 and the directrix2\n        angle1 = math.degrees(math.atan((root1 - b)/(root1 + b)))\n        angle2 = math.degrees(math.atan((root2 - b)/(root2 + b)))\n        \n        # Print the directrix1 and the angle between the x-axis and the directrix1\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The angle between the x-axis and the directrix1 is:\", angle1, \"degrees.\")\n        \n        # Print the directrix2 and the angle between the x-axis and the directrix2\n        print(\"The directrix of the parabola is:\", root2)\n        print(\"The angle between the x-axis and the directrix2 is:\", angle2, \"degrees.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Determine the quadratic formula coefficients\n    d = b**2 - 4*a*c\n    if d < 0: # The equation does not have a real root\n        print(\"The equation does not have a real root.\")\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        # Print the directrix\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The directrix of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate discriminant\n    discriminant = (b ** 2) - (4 * a * c)\n    \n    # Check for real roots\n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return root1, root2\n    \n    # If roots are complex, return complex roots\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        return root\n    \n    # If roots are real but imaginary, return complex roots\n    else:\n        return \"Complex roots\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the two lists are of the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Loop through each element in the first list and check if it exists in the second list\n    for element in list1:\n        if element in list2:\n            return True\n\n    # If we get here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes the base lengths of two parallel sides and the height of the trapezium and returns the median length of the trapezium.\n\n    :param base1: The length of the first parallel side of the trapezium\n    :type base1: float\n    :param base2: The length of the second parallel side of the trapezium\n    :type base2: float\n    :param height: The height of the trapezium\n    :type height: float\n    :return: The median length of the trapezium\n    :rtype: float\n    \"\"\"\n    return 0.5 * (base1 + base2 + height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the half of the base1\n    half_base1 = base1 / 2\n    \n    # Find the length of the half of the base2\n    half_base2 = base2 / 2\n    \n    # Find the length of the whole trapezium\n    trapezium_length = base1 + base2 + half_base1 + half_base2\n    \n    # Find the area of the trapezium\n    trapezium_area = height * trapezium_length\n    \n    # Find the area of the half of the trapezium\n    half_trapezium_area = height * half_base1 + height * half_base2\n    \n    # Find the midpoint of the half of the trapezium\n    midpoint = trapezium_area / 2\n    \n    # Find the length of the first half of the trapezium\n    first_half_length = midpoint / trapezium_area\n    \n    # Find the length of the second half of the trapezium\n    second_half_length = trapezium_length - first_half_length\n    \n    # Find the area of the first half of the trapezium\n    first_half_area = half_trapezium_area * first_half_length\n    \n    # Find the area of the second half of the trapezium\n    second_half_area = half_trapezium_area * second_half_length\n    \n    # Find the area of the trapezium divided by two\n    mid_trapezium_area = trapezium_area / 2\n    \n    # Find the median length of the trapezium\n    median_length = (first_half_length + second_half_length) / 2\n    \n    # If the first half is greater than the second half, swap the lengths\n    if first_half_area > mid_trapezium_area:\n        median_length = first_half_length\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium given its base1, base2, and height.\n    It uses the trapezoidal rule to calculate the length of the trapezium and then finds the median.\n    '''\n    # Calculate the length of the trapezium using the trapezoidal rule\n    length = 0.5 * (base1 + base2) * height\n    # Sort the lengths of the trapezium from lowest to highest\n    lengths = sorted([base1, base2, length])\n    # Calculate the median\n    median = 0.5 * (lengths[2] + lengths[1])\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the height of the trapezium\n    height_trapezium = 2 * area / (base1 + base2)\n\n    # calculate the length of the trapezium\n    if area > 0.5 * base1 ** 2:\n        trapezium_length = height_trapezium * (base1 + base2) / 2\n    else:\n        trapezium_length = (height_trapezium + height) / 2\n\n    # find the middle of the trapezium\n    middle_trapezium = base1 + base2 + 2 * height_trapezium\n\n    # find the median length of the trapezium\n    median = middle_trapezium - trapezium_length + height_trapezium / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each half of the trapezium\n    half1 = base1 + base2\n    half2 = height - half1\n    \n    # Calculate the area of each half of the trapezium\n    area1 = half1 * height / 2\n    area2 = half2 * height / 2\n    \n    # Calculate the length of the trapezium\n    trapezium = area1 + area2\n    \n    # Calculate the length of the median\n    median = 0.5 * trapezium\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the sides of the trapezium\n    s1 = 2 * (base1 + base2)\n    s2 = height / 2\n    \n    # Calculate the area of the trapezium\n    area = s1 + s2\n    \n    # Calculate the length of each half of the trapezium\n    half_s1 = s1 / 2\n    half_s2 = s2 / 2\n    \n    # Sort the half lengths in ascending order\n    sorted_half_lengths = sorted([half_s1, half_s2])\n    \n    # Calculate the length of the other half of the trapezium\n    other_half_length = s1 + half_s2\n    \n    # Calculate the length of the trapezium as the sum of the two halves\n    trapezium_length = other_half_length + half_s1\n    \n    # Calculate the area of the trapezium\n    trapezium_area = trapezium_length * sorted_half_lengths[0]\n    \n    # Calculate the median length of the trapezium\n    median_length = trapezium_area / area\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2) * height\n    # Calculate the length of the base of the trapezium that is equal to half the area of the trapezium\n    base = 0.5 * area / semi_perimeter\n    # Calculate the length of the base of the trapezium that is equal to half the area of the trapezium\n    length1 = 0.5 * area / (semi_perimeter - base)\n    # Calculate the length of the base of the trapezium that is equal to half the area of the trapezium\n    length2 = 0.5 * area / (semi_perimeter + base)\n    # Sort the lengths of the trapezium's bases in ascending order\n    sorted_bases = sorted([base, length1, length2])\n    # Calculate the median length of the trapezium using the formula for the median of three numbers\n    median = sorted_bases[1]\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the height of the base of the trapezium\n    base_height = area / (0.5 * base1)\n    # Calculate the height of the top of the trapezium\n    top_height = height - base_height\n    # Calculate the length of the base of the trapezium\n    base_length = base1 + base2\n    # Calculate the length of the trapezium\n    trapezium_length = base_length * height\n    # Sort the lengths of the two trapezium bases\n    sorted_bases = sorted([base_length, base_height, top_height])\n    # Calculate the median length of the trapezium\n    median = (sorted_bases[0] + sorted_bases[1]) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula:\n    # l = (b1 + b2) / 2\n    l = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium using the formula:\n    # A = (b1 + b2) * h / 2\n    A = (base1 + base2) * height / 2\n    \n    # Calculate the height of the trapezium using the formula:\n    # h = (b1 + b2) / A\n    h = (base1 + base2) / A\n    \n    # Calculate the length of the hypotenuse using the formula:\n    # r = (b1 + b2) / 2\n    r = (base1 + base2) / 2\n    \n    # Calculate the area of the parallelogram using the formula:\n    # A = bh\n    # A = base1 * height\n    # A = (base1 * 2 + base2 * 2) * height\n    \n    # Calculate the area of the parallelogram using the formula:\n    # h = bh\n    # h = (base1 * height + base2 * height) / 2\n    # h = base1 * height + base2 * height - base1 * base2\n    \n    # Calculate the area of the parallelogram using the formula:\n    # b1 = bh\n    # b1 = base1 * height\n    \n    # Calculate the area of the parallelogram using the formula:\n    # b2 = bh\n    # b2 = base2 * height\n    \n    # Calculate the area of the parallelogram using the formula:\n    # b1 * b2 = bh * h\n    # b1^2 + b2^2 = bh^2\n    # b1^2 - 2 * b1 * b2 + b2^2 = bh^2\n    \n    # Calculate the area of the parallelogram using the formula:\n    # b1^2 = bh^2 - 2 * b1 * b2 + b2^2\n    # b1^2 - bh^2 + 2 * b1 * b2 - b2^2 = 0\n    # b1^2 - bh^2 = 2 * b1 * b2 - b2^2\n    # b1 = bh * (-b2 + sqrt(b2^2 - 4 * b2^2 * bh^2)) / 2\n    # b1 = bh * (-b2 + sqrt(b2^2 - 4 * b2^2 * bh^2)) / 2\n    # b1 = bh * (sqrt(b2^2 - 4 * b2^2 * bh^2) - b2) / 2\n    # b1 = bh * (sqrt(b2^2 - 4 * b2^2 * bh^2) - b2) / 2\n    # b1 = bh * (sqrt(b2^2 - 4 * b2^2 * bh^2) - b2) / 2\n    \n    # Calculate the area of the parallelogram using the formula:\n    # b2 = bh * (-b1 + sqrt(b1^2 - 4 * b1^2 * bh^2)) / 2\n    # b2 = bh * (-b1 + sqrt(b1^2 - 4 * b1^2 * bh^2)) / 2\n    # b2 = bh * (sqrt(b1^2 - 4 * b1^2 * bh^2) - b1) / 2\n    # b2 = bh * (sqrt(b1^2 - 4 * b1^2 * bh^2) - b1) / 2\n    # b2 = bh * (sqrt(b1^2 - 4 * b1^2 * bh^2) - b1) / 2\n    \n    # The area of the trapezium is the sum of the areas of the parallelograms:\n    # A = l * h + r * h\n    \n    # The length of the hypotenuse is the square root of the sum of the squares of the lengths of the sides:\n    # r^2 = l^2 + r^2\n    # r = sqrt(l^2 + r^2)\n    \n    # The area of the trapezium is:\n    # A = (b1 + b2) * h / 2\n    # A = (base1 * height + base2 * height) * height / 2\n    # A ="
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    sum_of_sides = base1 + base2 + height\n\n    # sort the sides in ascending order\n    sides = [base1, base2, height - base1 - base2]\n    sides.sort()\n\n    # find the middle index of the sides list\n    mid = len(sides) // 2\n\n    # calculate the median length\n    if (sum_of_sides - sides[mid]) > (sides[mid] - sum_of_sides):\n        median = sides[mid]\n    else:\n        median = sides[mid + 1]\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than_number = False\n    \n    for num in arr:\n        if num > number:\n            greater_than_number = True\n            break\n    \n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(number)!= int:\n        print(\"The entered number is not an integer.\")\n        return\n    \n    for i in arr:\n        if i > number:\n            return True\n    \n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for i in arr:\n        if i > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", arr.index(i))\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(\"The number is greater than the element at position\", i)\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"The number {number} is greater than the element at index {i}.\")\n            return True\n        else:\n            print(f\"The number {number} is not greater than the element at index {i}.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for i in arr:\n        if i > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if number > num:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\ba\\w*\\b\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b){1,}')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    # convert the number to a string\n    str_num = str(n)\n    \n    # get the last character of the string\n    last_char = str_num[-1]\n    \n    # convert the last character to a number\n    last_num = int(last_char)\n    \n    # return the last digit of the number\n    return last_num"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string and get the last character\n    last_char = str(n)[-1]\n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing only the negative numbers from the given list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of all the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers from the input list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of integers as input and returns a list containing only the negative integers in the input list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # Initializing an empty list to store negative numbers\n    neg_lst = []\n    # Looping through each element in the list\n    for num in list1:\n        # If the element is negative, appending it to the negative list\n        if num < 0:\n            neg_lst.append(num)\n    # Returning the negative list\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char.isalpha():  # check if the character is a letter\n            if ord(char) % 2!= 0:  # check if the ASCII code of the character is odd\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    return ''.join(char for char in string if char.isdigit() or char.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str += ''\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[i] == test_list[j+i+1] and test_list[i] == test_list[j+i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j] in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # create a variable to store the sum of the integers in the list\n    sum_of_integers = 0\n    # iterate through the list of integers\n    for num in L:\n        # add the integer to the sum_of_integers variable\n        sum_of_integers += num\n    # return the single integer equal to the sum of all integers in the list\n    return sum_of_integers"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    adverb_pattern = r'\\b(?:[A-Za-z]+\\s?adverb|adverb)\\b'\n\n    # Find all occurrences of the adverb pattern in the sentence\n    adverbs = re.findall(adverb_pattern, text)\n\n    # Create a dictionary to store the adverb positions\n    adverb_positions = {}\n\n    # Loop through each adverb and their positions\n    for i, adverb in enumerate(adverbs):\n        # Split the adverb into its parts\n        parts = adverb.split(' ')\n\n        # Find the position of the first word\n        position = text.find(parts[0])\n\n        # Add the position to the dictionary\n        adverb_positions[adverb] = position\n\n    # Return the dictionary\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = r'\\b(abruptly|carefully|defiantly|enthusiastically|excitedly|foolishly|frightfully|furiously|gently|graciously|joyously|kindly|loudly|magically|merrily|nervously|powerfully|quickly|quietly|rarely|screamingly|seriously|serpentinely|shyly|steadily|stiffly|tightly|triumphantly|unruffledly|vigorously|wistfully|worshipfully)\\b'\n    # Search the text for adverbs and their positions\n    match = re.search(pattern, text)\n    while match:\n        # Extract the adverb and its position\n        adverb = match.group()\n        position = match.start()\n        # Print the adverb and its position\n        print(f'{adverb} found at position {position}')\n        # Move to the next match\n        match = re.search(pattern, text, match.end())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(?:(?:to|after|before|during|than|during|between|against|through|against|through|except|in|about|before|after|through|until|during|after|as|since|when|although|before|after|against|except|during|thru|during|after|at|when|before|after|through|through|with|except|except|for|among|with|of|from|to|through|with|except|as|through|to|through|except|except|for|to|through|except|as|through|except|through|with|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'(?<![A-Z])(?<![A-Z][a-z])(?<![0-9])\\b(adverb)\\b(?![A-Z])(?![A-Z][a-z])(?![0-9])'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f'Adverb found at position {i+1}: {match}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(a|an|the|in|on|at|on|with|in|of|by|to|at|by)\\b'\n    adverbs = re.findall(pattern, text)\n    adverb_positions = {}\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n        text: A string of text.\n\n    Returns:\n        A dictionary where the keys are the adverbs found and the values are their positions in the text.\n\n    \"\"\"\n\n    # Define the regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(also|but|also|but|but|not|only|only|only|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|except|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*\\b', text)\n    # sort the adverbs based on their positions in the sentence\n    sorted_adverbs = sorted(adverbs, key=lambda x: text.index(x))\n    # find the first adverb and its position in the sentence\n    first_adverb = sorted_adverbs[0]\n    first_position = text.index(first_adverb)\n    # print the result\n    print(\"The first adverb is '{}' at position {} in the sentence.\".format(first_adverb, first_position))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Find the first adverb\n    for i, word in enumerate(words):\n        if re.match(r'\\b(to|because|as|so|even|such|just|well|then|therefore|since|although|although|moreover|notwithstanding|whereas|hence|neither|then|although)\\b', word):\n            return i\n    \n    # If no adverb is found, return -1\n    return -1"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate through the words and find the adverbs\n    for i, word in enumerate(words):\n        if re.match(r'\\b\\w+[.!?]\\b', word):\n            # If the adverb is found, return the position of the first adverb and its length\n            return i, len(word)\n    \n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b([A-Za-z]+)(?:st|rd|nd|th)\\b'\n\n    # Use the re.search() function to search for the first match in the given text\n    match = re.search(pattern, text)\n\n    # If there is a match, print the adverb and its position in the sentence\n    if match:\n        print(f\"The first adverb is {match.group(1)} and its position is {match.start()}\")\n    else:\n        print(\"There is no adverb in the sentence.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # define the surface area of a cube using Heron's formula\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l * math.pi\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l  # formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of type integer to store the positive numbers\n    positives = array('i')\n\n    # Iterate through the input array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n\n    # Calculate the ration of positive numbers\n    pos_count = positives.count(1)\n    total_count = len(positives)\n    ration = pos_count / total_count\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize arrays to store positive and negative numbers\n    pos = array('i', [])\n    neg = array('i', [])\n\n    # iterate through the array of integers\n    for num in nums:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    # calculate the ratio of positive numbers to total numbers\n    pos_total = pos.itemsize * len(pos)\n    neg_total = neg.itemsize * len(neg)\n    ratio = pos_total / neg_total\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list\n    nums_list = nums.tolist()\n    # count the number of positive numbers in the list\n    pos_count = nums_list.count(1)\n    # count the number of negative numbers in the list\n    neg_count = nums_list.count(-1)\n    # calculate the ratio of positive to negative numbers\n    pos_neg_ratio = pos_count / neg_count if neg_count > 0 else 0\n    # return the ratio of positive to negative numbers\n    return pos_neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n\n    # Initialize variables to keep track of positive and negative counts\n    pos_count = 0\n    neg_count = 0\n\n    # Loop through the array and count the number of positive and negative numbers\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers to the total count of numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_array = array('i', [1 if num > 0 else 0 for num in nums])\n    pos_count = 0\n    for num in pos_array:\n        pos_count += num\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    \n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    positive_ratio = positive_count / len(nums)\n    negative_ratio = negative_count / len(nums)\n    \n    print(\"Positive Count:\", positive_count)\n    print(\"Negative Count:\", negative_count)\n    print(\"Positive Ratio:\", positive_ratio)\n    print(\"Negative Ratio:\", negative_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of floats to enable division\n    nums_float = [float(x) for x in nums]\n    \n    # Count the positive numbers and total numbers\n    pos_count = 0\n    total_count = len(nums)\n    \n    # Loop through the array and count the positive numbers\n    for num in nums_float:\n        if num > 0:\n            pos_count += 1\n            \n    # Calculate the ration of positive numbers\n    ratio = pos_count / total_count\n    \n    # Return the ration of positive numbers as a float\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i')\n    positive_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        count.append(num)\n        \n    positive_ratio = float(positive_count) / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        else:\n            positive.append(0)\n    return sum(positive) / len(positive)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i')\n    for num in nums:\n        if num > 0:\n            pos.append(num)\n    count = pos.count(0)\n    return count/len(pos)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst): \n    #initialize variables\n    max_num = lst[0] \n    curr_num = lst[0] \n    neg_count = 0 \n    \n    #loop through the list\n    for i in range(1, len(lst)): \n        curr_num = lst[i] \n\n        #check if the current number is negative\n        if curr_num < 0: \n            #if so, increment the count of negative numbers\n            neg_count += 1\n            \n            #if the count is greater than the current max number, update the max number\n            if neg_count > max_num: \n                max_num = neg_count\n        \n        #if the current number is positive, reset the count of negative numbers\n        else: \n            neg_count = 0\n    \n    #return the largest negative number found\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1: # iterate through the list\n        if num < 0: # if the number is negative\n            if num > largest: # if the number is larger than the current largest\n                largest = num # update the largest\n    return largest # return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = -float('inf')\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an input and returns the largest negative number in the list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    '''\n    max_neg = list1[0]   # initialize max_neg with the first element of the list\n    for num in list1:   # loop through the remaining elements of the list\n        if num < 0 and num > max_neg:   # check if the current element is negative and greater than max_neg\n            max_neg = num   # update max_neg if necessary\n    return max_neg   # return the largest negative number from the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and trims each tuple by K in the list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    # loop through the tuple list\n    for tup in test_list:\n        # extract the first k elements from the tuple\n        trimmed_tup = tup[:K]\n        # add the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tup)\n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n        elif len(test_list[i]) < K:\n            test_list[i] += (K - len(test_list[i])) * (0, )\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # split each tuple by the specified K\n        trimmed_tuple = tuple(test_list[i][:K] + test_list[i][K:])\n        # replace the original tuple with the trimmed tuple\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for tup in test_list:\n        tup = tup[:-K] if len(tup) > K else tup\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples should have the same number of elements\")\n        return\n\n    # Initialize the result tuple with the same number of elements as the first tuple\n    result_tup = (0,) * len(test_tup1)\n\n    # Perform the index wise multiplication of the tuple elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initializing the result tuple with zeros\n    result = tuple([0] * len(test_tup1))\n    # iterating over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # multiplying the elements of each tuple element and adding the result to the result tuple\n        result[i] += test_tup1[i] * test_tup2[i]\n    # returning the result tuple\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Get the length of the first tuple\n    len_tup1 = len(test_tup1)\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Perform index wise multiplication of each tuple element\n    for i in range(len_tup1):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup:\n        if item in lst:\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) # create a Counter object from the tuple\n    for i in lst: # iterate over the list\n        if i in count: # check if the element is in the Counter object\n            count[i] += 1 # increment the count if it is\n    return count # return the Counter object as a dictionary"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count the frequency of each element in the list in the tuple\n    counter = Counter(tup)\n    # create a dictionary to store the count of each element in the tuple\n    freq_dict = {}\n    # loop through the keys of the counter dictionary\n    for key in counter:\n        # if the key is not already in the dictionary, add it with a count of 0\n        if key not in freq_dict:\n            freq_dict[key] = 0\n        # add the count of the element to the dictionary\n        freq_dict[key] += counter[key]\n    \n    # loop through the list of elements in the tuple and count the occurence of each element\n    for element in lst:\n        # if the element is in the dictionary, increment the count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n    \n    # return the dictionary of counts of each element in the tuple\n    return freq_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple as input and a list as argument.\n    It returns a dictionary where the keys are the elements of the tuple and the values are the count of occurrences of each element in the tuple in the list.\n    '''\n    count_dict = Counter(tup)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for item in lst: \n        if item in count: \n            count[item] += 1 \n        else: \n            count[item] = 1 \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_list = []\n    for i in count_dict:\n        count_list.append(count_dict[i])\n    count_dict = Counter(tup)\n    count_list.extend(count_dict.values())\n    count_dict = dict(zip(count_dict.keys(), count_list))\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(tup)\n    \n    # count the number of elements in the set_tup that are in the lst\n    count = sum(set_tup.intersection(lst))\n    \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for key, value in count.items():\n        if key in tup:\n            if key in result:\n                result[key] += 1\n            else:\n                result[key] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = {}\n    for i in lst:\n        if i in counter:\n            count[i] = counter[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for elem in lst: \n        if elem in count: \n            count[elem] += 1 \n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    while p <= n:\n        sum += p\n        p += 4\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initializing the sum variable to 0\n    sum_perrin = 0\n\n    # loop through the first n perrin numbers\n    for i in range(1, n+1):\n\n        # calculating the sum of each perrin number\n        sum_perrin += 2*i\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    i = 1\n    while i <= n:\n        perrin_sum += i\n        i += 1\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # Initialize the sum of Perrin numbers as 0\n    sum_p = 0\n    # Loop through the first n numbers of Perrin numbers\n    for i in range(1, n+1):\n        # Calculate the sum of Perrin numbers\n        sum_p = sum_p + (i ** 2)\n    # Return the sum of Perrin numbers\n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    total_sum = 0\n    for perrin_number in perrin_numbers:\n        total_sum += perrin_number\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000]\n    sum_perrin_numbers = 0\n    for num in perrin_numbers:\n        sum_perrin_numbers += num\n    print(\"The sum of the first\", n, \"Perrin numbers is\", sum_perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i * i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            sum_perrin += i\n    return sum_perrin\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the perrin numbers from 1 to\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            result.append(l[i])\n        else:\n            result.append(str[i:l[i]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified size string from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and the length of the string to extract as input parameters.\n    It then iterates through the list and extracts the specified length of string values from it.\n    Finally, it returns a list of extracted string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), l):\n        extracted_strings.extend(str_list[i:i+l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_str.append(str_list[i])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) == l[i].index(str):\n            print(l[i])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and an integer representing the size of the string\n    to be extracted. It then iterates through the list of string values and extracts the specified size\n    of strings.\n\n    Args:\n    str_list: A list of string values.\n    size: An integer representing the size of the string to be extracted.\n\n    Returns:\n    A list of the extracted strings.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            result.append(str_list[i])\n        else:\n            result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from the given list of strings.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes in a list of string values and an integer l representing the size of the strings to be extracted.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) <= l:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text = re.sub(r'\\s+', '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s]+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove any leading or trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # Return the cleaned string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub('\\s+','', text1)\n    # Remove single spaces\n    text1 = text1.replace(\" \", \"\")\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function will remove all the whitespaces from a given string.\n    '''\n    text = text.strip()  # Remove leading and trailing whitespaces\n    text = re.sub(r'\\s+','', text)  # Replace multiple whitespaces with single space\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # Check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost:\n        # Calculate the loss amount\n        loss = sale_amount - actual_cost\n        # Return the loss amount\n        return loss\n    else:\n        # Return 0 if the sale amount is less than the actual cost\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        loss = actual_cost - sale_amount \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount\n        return loss\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [i for i in range(2, n+1) if n%i == 0 and i%2 == 0]\n    total = sum(even_factors)\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2) : \n        if n % i == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize variables to hold the sum and count of even factors\n    sum = 0\n    count = 0\n    \n    # loop over the odd numbers from 3 to n/2, starting with 3\n    for i in range(3, n//2+1, 2):\n        # check if i is a factor of n\n        if n % i == 0:\n            # if it is, add it to the sum and increment the count\n            sum += i\n            count += 1\n    \n    # return the sum and count of even factors\n    return sum, count"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and n % i == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(30)) # Output: 40"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+[a"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Define the regular expression pattern for matching 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b\\w+\\s+\\b[zZ]\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\w+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b' # matches a word containing 'z'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*[zZ]\\w*'\n    result = re.findall(pattern, text, re.IGNORECASE)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(regex, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)(?=[^\\w\\s]|$)'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return \"31 Days\"\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return \"30 Days\"\n    else:\n        return \"Not a valid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum in [2]:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number. Month numbers should be between 1 and 12.\")\n        return\n\n    # Check if the month number has 31 days\n    if monthnum2 == 2:\n        print(\"February has 28 or 29 days.\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"These months have 30 days.\")\n    else:\n        print(\"This month has 31 days.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum)\n    if monthnum == 2:\n        return 28  # February has 29 days in a leap year\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum in month_days:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(str(monthnum2)) == 2:\n        monthnum = int(monthnum2)\n        if monthnum < 1 or monthnum > 12:\n            return \"Invalid month number\"\n        elif monthnum == 2:\n            if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12 and (monthnum2 % 2 == 0):\n        return True\n    elif 3 <= monthnum2 <= 10 and (monthnum2 % 2 == 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:  # leap year\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing and join method\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the sublist with minimum length\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    # Create a list to store the sublists with minimum length\n    min_lst = []\n    # Loop through the original list and append the sublists with minimum length to the min_lst list\n    for i in range(len(lst)):\n        if len(lst[i]) == min_len:\n            min_lst.append(lst[i])\n    # Return the minimum sublist from the min_lst list\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and finds the sublist with minimum length in the list.\n    '''\n\n    # Initialize the minimum sublist and its length\n    min_sublist = lst\n    min_length = len(min_sublist)\n\n    # Loop through the list\n    for sublist in lst:\n\n        # Check if the current sublist has a smaller length\n        if len(sublist) < min_length:\n\n            # Update the minimum sublist and its length\n            min_sublist = sublist\n            min_length = len(sublist)\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            sublist = i\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    '''\n    Calculate the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    result = uppercase_pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove uppercase substrings using regular expressions\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1\\2', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings and replace them with an empty string\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[a-z]+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # find all uppercase substrings in the input string\n    matches = pattern.findall(str1)\n    # replace all uppercase substrings with an empty string\n    result = ''.join([char for char in str1 if char not in matches])\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[A-Z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns a new string with uppercase substrings removed.\n    '''\n    # Regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all the uppercase substrings in the input string\n    uppercase_substrings = pattern.findall(str1)\n    # Iterate through the list of uppercase substrings and remove them from the input string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regular expression to match uppercase letters\n    pattern = re.compile('[A-Z][a-z]+')\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'')\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n\n    Parameters:\n    lst (list): A list of lists where each sublist contains multiple elements.\n\n    Returns:\n    A new list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for i in lst:\n        extracted_lst.append(i[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        result.append(first_element)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # loop through each sublist in the list\n    for sublist in lst:\n        # check if the sublist is not empty\n        if sublist:\n            # get the first element of the sublist\n            first_elem = sublist[0]\n            # print the first element of the sublist\n            print(first_elem)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    # initialize counter variable to 0\n    count = 0\n\n    # iterate through each character in the string\n    for char in str:\n\n        # if the character is an uppercase letter, increment the count\n        if char.isupper():\n            count += 1\n\n    # return the count of upper case characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case_count = 0\n    for char in str:\n        if char.isupper():\n            upper_case_count += 1\n    return upper_case_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    n = len(list1)\n    combinations = []\n\n    # base case\n    if n == 0:\n        return combinations\n\n    # recursive case\n    for i in range(n):\n        combinations += combinations_list(list1[:i] + list1[i+1:])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    length = len(list1)\n    result = []\n    for i in range(length):\n        if i > 0 and list1[i] == list1[i-1]:\n            continue\n        for j in range(i+1, length):\n            if j > i+1 and list1[j] == list1[j-1]:\n                continue\n            combination = [list1[i], list1[j]]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Use a nested loop to generate all combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list\n            combinations.append(list1[i:j])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # use the itertools library to generate all possible combinations\n    from itertools import combinations\n    # generate combinations of all elements in the list\n    combinations_list = list(combinations(list1, len(list1)))\n    return combinations_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list of elements and returns a list of all possible combinations of the elements.\n    '''\n    # Initialize an empty list to store all combinations\n    combinations = []\n\n    # Generate all possible combinations of the elements of the given list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append each combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    for i in range(1, list_length + 1):\n        for j in range(i, list_length + 1):\n            print(\" \".join(map(str, list1[k:k+j])))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    This function generates all possible combinations of elements in a given list.\n    '''\n    # Initialize an empty list to store all the combinations\n    combinations = []\n\n    # We use a nested loop to iterate over all the possible permutations\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # Append the combination to the list of all combinations\n            combinations.append(lst[i:j])\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize the result list\n    result = []\n    \n    # Define the recursive function to generate all combinations\n    def generate(start, end):\n        # Base case: if start is greater than end, return the result\n        if start > end:\n            return result\n        \n        # Add the current combination to the result\n        result.append(list1[start:end+1])\n        \n        # Recursively generate all combinations for the next element\n        return generate(start+1, end)\n    \n    # Call the recursive function with the starting index and ending index of the list\n    generate(0, len(list1)-1)\n    \n    # Return the result list of all combinations\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray.\n    The maximum product subarray is a contiguous subarray of the array where the product of all its elements is maximized.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array and update the maximum product and current product\n    for num in arr:\n        current_product *= num\n\n        # Update maximum product if current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        # If current product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = 1\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    # Initialize variables to keep track of the maximum subarray product and the index of the start of the maximum subarray\n    max_product = arr[0]\n    start = 0\n    \n    # Loop through the array and calculate the product of the current element and the maximum subarray product\n    for i in range(1, len(arr)):\n        temp = arr[i] * max_product\n        if temp > max_product:\n            max_product = temp\n            start = i\n    \n    # Return the maximum subarray product and the index of the start\n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for item in dict.values():\n        if item!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes in a dictionary and an integer n.\n    It checks if all the values in the dictionary are equal to n.\n    If all the values are equal to n, the function returns True.\n    Otherwise, it returns False.\n    '''\n    values = dict.values()\n    if len(values) == 1:\n        return True\n    for value in values:\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input and returns a boolean value indicating whether all values are same or not.\n    '''\n    values = []\n    for i in range(n):\n        values.append(dict.get(i))\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if len(set(i))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        return check_value(dict[1:], n) if dict[0] == n else False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n    \n    for i in range(n):\n        value = dict[i]\n        if value!= dict[i+1:]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp_max = max_ending_here\n        max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n        min_ending_here = min(temp_max, min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    def helper(i, j):\n        if i == j:\n            return 1\n        if i == j - 1:\n            return arr[i]\n        max_left = 0\n        max_right = 0\n        for k in range(i, j):\n            left = helper(i, k)\n            right = helper(k + 1, j)\n            if left * right > max_left * max_right:\n                max_left = left\n                max_right = right\n        return max(arr[i] * max_left, arr[j] * max_right)\n\n    return helper(0, len(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here, arr[i])\n        max_product = max(max_product, max_product_ending_here)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n  # To store the product of elements of increasing subsequence\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, n):\n        temp_max_ending_here = max(max_ending_here * arr[i], max_so_far * arr[i])\n        max_ending_here = temp_max_ending_here\n        temp_min_ending_here = min(min_ending_here * arr[i], min_so_far * arr[i])\n        min_ending_here = temp_min_ending_here\n        \n        temp_max_so_far = max(max_so_far, max_ending_here)\n        max_so_far = temp_max_so_far\n        \n        temp_min_so_far = min(min_so_far, min_ending_here)\n        min_so_far = temp_min_so_far\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far * arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here, min_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables\n    max_product = arr[0]\n    current_product = 1\n    \n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # If the next element is smaller than the current product\n        if arr[i] < current_product:\n            # Update the current product and reset the maximum product\n            current_product = arr[i]\n            max_product = current_product\n        # If the next element is greater than the current product\n        else:\n            # Update the current product\n            current_product *= arr[i]\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    if len(arr) < 2:\n        return 0\n\n    # Initialize two pointers to the first and last elements of the array\n    i, j = 0, len(arr) - 1\n\n    # Initialize the maximum product to be the product of the first and last elements of the array\n    max_product = arr[0] * arr[j]\n\n    # Check if the second last element is greater than the first element\n    if arr[j - 1] > arr[0]:\n        max_product = max(max_product, arr[0] * arr[j - 1])\n\n    # Loop through the array from the second to the last element\n    for k in range(1, len(arr) - 1):\n        # Check if the current element is greater than the element before it\n        if arr[k] > arr[k - 1]:\n            # If it is, update the maximum product\n            max_product = max(max_product, arr[k] * arr[j])\n            # Move the j-pointer to the current element\n            j = k\n        # If the current element is less than the element before it, move the i-pointer to the current element\n        else:\n            i = k\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize a variable to store the sum of neighboring elements\n    pairwise_sum = 0\n    # Loop through the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the neighboring elements and add the result to the pairwise_sum variable\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # Return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(1, len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the first element and the next element of the tuple\n    add = test_tup[0] + test_tup[1]\n    # Initialize a variable to store the sum of the next two elements of the tuple\n    add_next = test_tup[1] + test_tup[2]\n    # Initialize a variable to store the sum of the next three elements of the tuple\n    add_next_next = test_tup[2] + test_tup[3]\n    # Initialize a variable to store the sum of the next four elements of the tuple\n    add_next_next_next = test_tup[3] + test_tup[4]\n    # Return the sum of all the four pairwise additions\n    return add + add_next + add_next_next + add_next_next_next"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Tuple must have at least two elements\"\n    else:\n        total = 0\n        for i in range(len(test_tup)-1):\n            total += test_tup[i] + test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) <= 1:\n        return test_tup\n\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the sum of the pairwise sum of its elements.\n    \"\"\"\n    # Initialize variables\n    sum_list = []\n    \n    # Get the length of the tuple\n    length = len(test_tup)\n    \n    # Loop through the tuple and find the pairwise sum of each element\n    for i in range(length-1):\n        # Get the sum of the current and next element\n        pairwise_sum = test_tup[i] + test_tup[i+1]\n        # Add the pairwise sum to the list\n        sum_list.append(pairwise_sum)\n        \n    # Return the sum of the pairwise sums\n    return sum(sum_list)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for num in arr: \n        product *= num\n    \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array modulo n\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize variables\n    product = 1\n    modulo = n\n    \n    # multiply each element of the array with its corresponding index\n    for i in range(len(arr)):\n        product = (product * arr[i]) % modulo\n        \n    # return the final result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i] == 1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Initialize the first number as None\n    start_num = None \n\n    # Iterate over the list and check for consecutive numbers\n    for num in l: \n        if num is None: \n            # If the current number is None, then there are no consecutive numbers in the list.\n            return False \n        elif start_num is not None: \n            # If the current number is not None and the previous number is not None, then check if the difference between them is 1.\n            if num - start_num!= 1: \n                # If the difference is not 1, then there are no consecutive numbers in the list.\n                return False \n        start_num = num \n\n    # If the loop completes without returning False, then all numbers in the list are consecutive.\n    return True \n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i+1] - l[i]!= 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples containing all elements of test_list1 and test_list2\n    set_of_tuples = set(test_list1 + test_list2)\n\n    # Create an empty list to store the intersection of tuples\n    intersection_list = []\n\n    # Loop through each element in the set of tuples\n    for element in set_of_tuples:\n        # If the element is in both test_list1 and test_list2, append it to the intersection_list\n        if element in test_list1 and element in test_list2:\n            intersection_list.append(element)\n\n    # Return the intersection_list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each element in test_list1\n    element_counts = {}\n    for element in test_list1:\n        if element in element_counts:\n            element_counts[element] += 1\n        else:\n            element_counts[element] = 1\n    \n    # Create a dictionary to store the count of each element in test_list2\n    intersection_counts = {}\n    for element in test_list2:\n        if element in intersection_counts:\n            intersection_counts[element] += 1\n        else:\n            intersection_counts[element] = 1\n    \n    # Find the intersection of element counts in test_list1 and test_list2\n    intersection_elements = []\n    for element in element_counts:\n        if element in intersection_counts:\n            intersection_elements.append(element)\n    \n    # Return the intersection of elements in test_list1 and test_list2\n    return tuple(intersection_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set to store unique elements of test_list1\n    set1 = set(test_list1)\n    \n    # Create a set to store unique elements of test_list2\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set to a list\n    intersection_list = list(intersection)\n    \n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for item in set1:\n        if item in set2 and (item not in intersection):\n            intersection.append(item)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    intersection = []\n    i = j = 0\n\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the intersection of tuples in two lists, irrespective of their order.\n\n    Args:\n        test_list1: list of tuples\n        test_list2: list of tuples\n\n    Returns:\n        A list of tuples, representing the intersection of elements from both lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and preserve order\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection back to a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists into sets for better efficiency\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    inter_set = set1.intersection(set2)\n    \n    # convert the set back to a list and return it\n    return list(inter_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate through the first tuple list\n    for tuple1 in test_list1:\n        # Iterate through the second tuple list\n        for tuple2 in test_list2:\n            # Check if the tuple1 is a sub-tuple of tuple2\n            if tuple1 in tuple2:\n                # If yes, add it to the set of common elements\n                common_elements.add(tuple1)\n                # Break the inner loop since we have found all the common elements\n                break\n    \n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # First, we need to convert the list to a set, so that we can remove duplicates easily.\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Now, we can find the intersection of the two sets.\n    intersection = set_list1.intersection(set_list2)\n\n    # Finally, we need to convert the intersection back to a list and return it.\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): the input string\n    ch (str): the character to replace\n    newch (str): the new character to replace with\n\n    Returns:\n    str: the modified string\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string to be searched.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character with.\n\n    Returns:\n    str: The modified string with all occurrences of the old character replaced with the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Convert the dictionary to a list of tuples, where each tuple contains a key-value pair\n    lst = list(dict1.items())\n\n    # Use the Counter class from the collections module to count the occurrences of each value in the list of tuples\n    counts = Counter(lst)\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))\n\n    # Convert the sorted dictionary back to a dictionary and return it\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a counter object to count the frequency of values in the dictionary\n    counter = Counter(dict1.values())\n    # Sort the counter object by value in ascending order\n    sorted_dict = dict(sorted(counter.items()))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum value in the array\n    max_val = max(nums)\n\n    # Find the minimum value in the array\n    min_val = min(nums)\n\n    # Calculate the sum of the maximum and minimum values\n    sum_vals = max_val + min_val\n\n    # Return the sum of the maximum and minimum values\n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Return the sum of the largest and smallest values\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Find the sum of the largest and smallest value\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in ascending order\n    nums.sort()\n    # find the sum of the largest and smallest value in the array\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return \"Empty list\"\n\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        max_val = nums[0]\n        min_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n            elif nums[i] < min_val:\n                min_val = nums[i]\n        return max_val + min_val + big_sum(nums[1:])"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the sum of the two values and return it\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use re.findall() to find all substrings that match the pattern\n    substrings = re.findall(pattern, str1)\n\n    # Loop through each substring and remove it from the string\n    for substr in substrings:\n        str1 = re.sub(r'\\b' + substr + r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'([a-z])', r'\\1', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b\\w+\\b')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() function to find all substrings that match the pattern\n    result = re.findall(pattern, str1)\n\n    # Convert the list of lowercase substrings to uppercase\n    result = [s.upper() for s in result]\n\n    # Remove all lowercase substrings from the original string\n    str1 = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(string)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # Find all lowercase substrings in the string using the pattern\n    lowercase_substrings = pattern.findall(str1)\n\n    # Remove all lowercase substrings from the string and return the result\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string using regex\n    pattern = re.compile(r'[a-z]+')\n    matches = pattern.findall(str1)\n\n    # Remove all lowercase substrings from the given string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    lower_substrings = re.findall('[a-z]+', str1)\n    \n    # Loop through each lowercase substring and replace it with an empty string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    n = str(n)\n    \n    # get the first character of the string\n    first_char = n[0]\n    \n    # convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the number is negative\n    if n < 0:\n        n = abs(n)\n    # convert the number to a string\n    str_num = str(n)\n    # find the first digit of the number\n    first_digit = str_num[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n\n    # Convert the first digit to an integer and return it\n    return int(str_n[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Splitting the number into its individual digits\n    digits = [int(digit) for digit in str(n)]\n    # Getting the first digit of the list of digits\n    first_digit = digits[0]\n    # Returning the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    # extract the first digit of n\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Find the first digit\n    digit = num[0]\n    # Return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = int(n[0])\n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers as an input and returns a new list with only the odd integers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns the odd numbers in the list.\n    \"\"\"\n    # Initialize an empty list to store the odd numbers\n    odd_lst = []\n\n    # Loop through the list and add odd numbers to the odd_lst list\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n\n    # Return the odd_lst list\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = []\n\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0] "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(1, n+1)]\n    cube_sum = sum(cubes)\n    # Calculate the sum of the first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    diff = abs(cube_sum - natural_sum)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(n):\n        sum_cubes += i ** 3\n        sum_numbers += i\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum(i*i*i for i in range(1,n+1))\n    \n    # Function to calculate the sum of first n natural numbers\n    def sum_of_numbers(n):\n        return sum(i for i in range(1,n+1))\n    \n    # Calculating the sum of cubes of first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(n)\n    \n    # Calculating the sum of first n natural numbers\n    sum_of_numbers_n = sum_of_numbers(n)\n    \n    # Calculating the difference between sum of cubes of first n natural numbers and sum of first n natural numbers\n    difference_n = sum_of_cubes_n - sum_of_numbers_n\n    \n    return difference_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cubes(n):\n        '''\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        '''\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    def sum_natural_numbers(n):\n        '''\n        Write a python function to calculate the sum of the first n natural numbers.\n        '''\n        return n * (n + 1) // 2\n\n    return sum_cubes(n) - sum_natural_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # finding sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # finding sum of first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # finding difference between sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_natural\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate sum of cubes of first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # calculate sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # calculate the difference\n    difference = cubes_sum - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Initializing variables to store the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n\n    # Looping through the first n natural numbers and adding their cube to the sum_cubes variable\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n\n    # Looping through the first n natural numbers and adding their natural number to the sum_natural variable\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # Returning the difference between the sum_cubes and the sum_natural values\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        '''\n        Write a python function to calculate the sum of the first n natural numbers cubed.\n        '''\n        return n * (n + 1) * (2 * n + 1) // 6\n    \n    return sum_of_cubes(n) - sum(range(1, n+1))"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        xor = A[i] ^ A[(i+1)%N] \n        if xor % 2 == 1 : \n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum ^= A[i]\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i+1,N):\n            xor ^= A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    # Step 1: Create a dictionary to store the frequency of each element in the array A\n    freq = {}\n    for i in A:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Step 2: Calculate the xor of each pair of elements\n    xor_list = []\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_list.append(A[i] ^ A[j])\n\n    # Step 3: Count the number of odd xor values\n    count = 0\n    for i in xor_list:\n        if i % 2!= 0:\n            count += 1\n            if count == N:\n                return 0\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            result += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char.islower():\n            result += char.upper()\n        # If the character is not uppercase or lowercase, leave it unchanged\n        else:\n            result += char\n    \n    # Return the result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.islower() else chr(ord(c) ^ 32) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), string))"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize a variable to store the sum of differences\n    diff_sum = 0\n\n    # Convert the two numbers to strings and iterate over their digits\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(digit1) - int(digit2))\n        # Add the difference to the sum of differences\n        diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to lists of digits\n    digit_list1 = [int(d) for d in str(n1)]\n    digit_list2 = [int(d) for d in str(n2)]\n    # calculate the per-digit difference\n    digit_diff = [abs(d1 - d2) for d1, d2 in zip(digit_list1, digit_list2)]\n    # sum the per-digit differences\n    return sum(digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance_sum = 0\n    for i in range(len(str(n1))):\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        distance_sum += abs(digit1 - digit2)\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the input numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Calculate the length of the longest number\n    max_len = max(len(s1), len(s2))\n\n    # Calculate the sum of the per-digit differences\n    distance = 0\n    for i in range(max_len):\n        # Get the digits at the current index\n        d1 = int(s1[i]) if i < len(s1) else 0\n        d2 = int(s2[i]) if i < len(s2) else 0\n\n        # Calculate the absolute difference\n        diff = abs(d1 - d2)\n\n        # Add the difference to the total sum\n        distance += diff\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function calculates the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the input numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    # calculate the length of the longest string\n    max_len = max(len(str_n1), len(str_n2))\n    # initialize the sum of differences to 0\n    sum_diff = 0\n    # iterate over the digits of both strings\n    for i in range(max_len):\n        # if the current digit of both strings is the same, skip it\n        if str_n1[i] == str_n2[i]:\n            continue\n        # calculate the per-digit difference between the current digits\n        diff = int(str_n1[i]) - int(str_n2[i])\n        # add the difference to the sum of differences\n        sum_diff += diff\n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert n1 and n2 to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n\n    # Find the length of the longer list\n    max_len = max(len(n1_list), len(n2_list))\n\n    # Pad n1_list with zeros to match the length of n2_list\n    n1_list = n1_list + [0] * (max_len - len(n1_list))\n\n    # Pad n2_list with zeros to match the length of n1_list\n    n2_list = n2_list + [0] * (max_len - len(n2_list))\n\n    # Calculate the per-digit difference between the two lists\n    digit_diff = [abs(n1_list[i] - n2_list[i]) for i in range(max_len)]\n\n    # Sum up the per-digit differences\n    sum_diff = sum(digit_diff)\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n\n    :param n1: An integer\n    :param n2: An integer\n    :return: An integer representing the sum of the per-digit difference between the two integers\n    \"\"\"\n    result = 0\n    for i in range(10):\n        result += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    digit_sum = 0\n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings so we can work with them easily\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize a variable to store the sum of differences\n    total_diff = 0\n    \n    # Loop through each digit in the two strings\n    for i in range(max(len(str1), len(str2))):\n        # Calculate the difference between the two digits\n        diff = abs(int(str1[i]) - int(str2[i]))\n        \n        # Add the difference to the total sum\n        total_diff += diff\n    \n    # Return the total sum of differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(10):\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_sum = max(a[0] + max_sub_array_sum(a[1:], size-1), max_sub_array_sum(a[1:], size))\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    max_subarray = []\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if i >= size - size:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_subarray = [a[i]]\n            elif current_sum == max_sum:\n                max_subarray.append(a[i])\n\n    return max_subarray"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        raise ValueError(\"Size should be less than or equal to the length of the list\")\n\n    if size == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    max_sublist = [a[0]]\n\n    for i in range(1, size):\n        max_sublist.append(max(a[i], max_sublist[-1] + a[i]))\n        max_sum = max(max_sum, max_sublist[-1])\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0:\n            current_sum -= a[i-size]\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes a list of integers and an integer size as input, and\n    returns the sum of the largest contiguous sublist of size `size` in the list.\n    If there are less than `size` elements in the list, an empty string is returned.\n    \"\"\"\n    if size > len(arr):\n        return \"\"\n\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n\n    for i in range(len(arr) - size + 1):\n        current_sum = sum(arr[i:i+size])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to hold the unique elements of both tuples\n    unique_elements = set()\n\n    # Union the two sets to get the unique elements\n    unique_elements.update(test_tup1)\n    unique_elements.update(test_tup2)\n\n    # Convert the set to a list and sort it\n    unique_elements = sorted(list(unique_elements))\n\n    # Print the union of the elements in sorted order\n    for element in unique_elements:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union))\n    # Output the union in sorted order\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = sorted(set(test_tup1 + test_tup2))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set() method to convert the tuples to sets and then union them\n    union_set = set(test_tup1) | set(test_tup2)\n    # Converting the set to a list and then sorting it\n    sorted_list = sorted(list(union_set))\n    # Using for loop to output the union of the tuples\n    for item in sorted_list:\n        print(item)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the elements of the two tuples\n    union_set = set(test_tup1 + test_tup2)\n    # sort the union set and convert it back to a list\n    union_list = sorted(list(union_set))\n    # return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one list\n    combined_list = test_tup1 + test_tup2\n    \n    # Convert the list to a set to remove any duplicates\n    unique_list = list(set(combined_list))\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(unique_list)\n    \n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Convert the tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Combine the lists using the + operator\n    combined_list = list1 + list2\n\n    # Sort the combined list using the sorted() function\n    sorted_list = sorted(combined_list)\n\n    # Convert the sorted list back to a tuple\n    sorted_tup = tuple(sorted_list)\n\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store unique elements\n    unique_elements = set()\n    \n    # add all elements from test_tup1 to unique_elements\n    for element in test_tup1:\n        unique_elements.add(element)\n    \n    # add all elements from test_tup2 to unique_elements\n    for element in test_tup2:\n        unique_elements.add(element)\n    \n    # convert set to list and sort it in ascending order\n    sorted_list = sorted(list(unique_elements))\n    \n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Create a set from the first tuple and convert it to a list\n    set1 = list(set(test_tup1))\n\n    # Create a set from the second tuple and convert it to a list\n    set2 = list(set(test_tup2))\n\n    # Find the union of the two sets and convert it back to a set\n    union = set(set1 + set2)\n\n    # Sort the union list in ascending order and output it\n    print(sorted(union))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1,len(lst)+1):  \n            if len(lst[i:j]) > max_length:  \n                max_length = len(lst[i:j])  \n    return max_length  \n  \n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > length:\n            length = len(lst[i])\n\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(i, len(lst)):\n            sublist.append(lst[j])\n        if len(sublist) > len(longest_sublist):\n            longest_sublist = sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    length = 0\n    current_length = 0\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n\n        # Calculate the length of the current sublist\n        for num in sublist:\n            current_length += 1\n\n        # Update the length if the current sublist is longer than the previous longest sublist\n        if current_length > length:\n            length = current_length\n\n        # Reset the current sublist length to 0\n        current_length = 0\n\n    # Return the length of the longest sublist\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        maxLength = max(maxLength, len(sublist))\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize maximum length and current length\n    max_len = 0\n    current_len = 0\n\n    # Traverse through the list of lists\n    for sublist in lst:\n        # Increment the current length by 1 for each element in the sublist\n        current_len += 1\n\n        # Compare the current length with the maximum length\n        if current_len > max_len:\n            max_len = current_len\n\n        # If the current length becomes 0, reset the current length to 0\n        if sublist[-1] == 0:\n            current_len = 0\n\n    # Return the maximum length\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    max_length = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            length = j-i+1\n            if length > max_length:\n                max_length = length\n                start = i\n                end = j\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for sublist in lst:\n        if len(sublist) > len(longest_sublist):\n            longest_sublist = sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > longest:\n                longest = len(sublist)\n    return longest"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"\\\"([^\\\"]*)\\\"|\\'\\([^']*\\)\\'|\\[([^\\[\\]]*)\\]\"\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        if match[0]:\n            values.append(match[0])\n        elif match[1]:\n            values.append(match[1])\n        elif match[2]:\n            values.append(match[2])\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\\")([^\\\"]*)(?=\\\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\b)\".*?(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\\")\\w+(?:,\\s\\w+)*?(?=\\\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize the count of pairs to 0\n    count = 0\n\n    # Iterate through each element in the array\n    for i in range(n):\n        # Iterate through each element in the array after the current element\n        for j in range(i+1, n):\n            # If the sum of the elements is not equal to the current element, increment the count\n            if arr[i] + arr[j]!= arr[i]:\n                count += freq[arr[j]]\n\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Calculate the total frequency of each element\n    total_freq = sum(freq.values())\n\n    # Calculate the number of pairs\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs += min(freq[arr[i]], freq[arr[j]]) * total_freq\n\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Count the number of pairs with odd frequency\n    pairs_odd = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] % 2 == 1 and freq[arr[j]] % 2 == 1:\n                pairs_odd += 1\n\n    # Count the number of pairs with even frequency\n    pairs_even = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] % 2 == 0 and freq[arr[j]] % 2 == 0:\n                pairs_even += 1\n\n    # Return the sum of the two counts\n    return pairs_odd + pairs_even"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers\n    n (int): The number of integers in the list arr\n\n    Returns:\n    int: The number of pairs of unequal integers in the list arr.\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each integer in the list\n    freq = {}\n\n    # Iterate through the list and update the frequency of each integer\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a counter for the number of pairs\n    count = 0\n\n    # Iterate through the list again and check if the sum of two integers is even and not already counted\n    for num1 in arr:\n        for num2 in arr:\n            if num1!= num2 and (num1 + num2) % 2 == 0:\n                count += 1\n\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The upper bound of the range.\n\n    Returns:\n    int: The number of possible unordered pairs.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # convert the string to a list of characters\n    word_list = list(word)\n\n    # loop through the list and print each character\n    for char in word_list:\n        print(char)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Initialize an empty list to store the characters\n    result = []\n    \n    # Loop through each character in the string\n    for char in word: \n        # Append the character to the list\n        result.append(char)\n    \n    # Return the list of characters\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string and returns a list of its characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # Convert the integer to a string and iterate over each character\n    for digit in str(n):\n        # Add the integer digit to the sum\n        sum_of_digits += int(digit)\n        \n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Convert the integer to a string and then iterate over each digit\n    for digit in str(n):\n        # Convert each digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of characters\n    digits = list(str(n))\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Iterate over the list of digits and add each digit to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the rightmost digit of the number and add it to the sum\n        digit = n % 10\n        sum += digit\n        # Remove the rightmost digit from the number\n        n //= 10\n\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    total = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n\n        # Add the digit to the total\n        total += digit\n\n        # Remove the last digit from the number\n        n = n // 10\n\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the list\n    for digit in digits:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # iterate through the list and compare each element with its predecessor\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            # if an element is found that is greater than its predecessor, return False\n            return False\n    # if all elements are less than or equal to their predecessors, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # loop through the list and compare each element with its adjacent element\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    # if all elements are sorted, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Use the built-in sorted() function to check whether the list is sorted or not\n    try:\n        sorted_list = sorted(list1)\n        if sorted_list == list1:\n            return True\n        else:\n            return False\n    except TypeError:\n        return \"The specified list must be an iterable.\""
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Iterate over each sublist in the list of lists\n    for sublist in list1:\n\n        # Convert the sublist to a string and split it into a list of strings\n        sublist_str = ''.join(sublist)\n        sublist_list = sublist_str.split()\n\n        # Sort the sublist of strings in ascending order\n        sublist_list.sort()\n\n        # Convert the sorted sublist of strings back to a list and append it to the original list\n        new_sublist = sorted(sublist_list)\n        list1.append(new_sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set of unique numbers from the first list\n    unique_nums = set(nums[0])\n\n    # Remove duplicates from the other lists and add them to the set\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.union(set(nums[i]))\n\n    # Convert the set back to a list\n    unique_nums_list = list(unique_nums)\n\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set from the given list of lists\n    unique_nums = set([num for sublist in nums for num in sublist])\n    # Create a new list with only unique elements\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a given number of lists.\n    \"\"\"\n    # Define a set to store unique numbers\n    unique_set = set()\n\n    # Iterate through each list in the input list of lists\n    for lst in nums:\n        # Add each unique number from the current list to the set\n        for num in lst:\n            if num not in unique_set:\n                unique_set.add(num)\n\n    # Convert the set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create an empty list to store unique numbers\n    unique_nums = []\n\n    # loop through each list in the input list\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # if the number is not in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n\n    # iterate through each list in the list of lists\n    for lst in nums:\n        # add each unique number to the unique list\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Combine all lists into one list\n    combined_list = [num for sublist in nums for num in sublist]\n    # Remove duplicate numbers from combined list\n    unique_nums = list(set(combined_list))\n    # Return the unique numbers in a new list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Use a set to remove duplicates from the list\n    unique_nums = set(nums)\n    # Convert the set back to a list\n    unique_nums_list = list(unique_nums)\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums[0])\n    for num in nums[1:]:\n        unique_nums.update(set(num))\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    unique_number_product = 1\n\n    for number in unique_numbers:\n        unique_number_product *= number\n\n    return unique_number_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set to store the unique numbers in the list\n    unique_set = set(list_data)\n\n    # Find the product of the unique numbers in the set\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    \n    for number in unique_set:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes in a list of numbers and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) == 0:\n        return 1\n    else:\n        product = 1\n        for num in unique_nums:\n            product *= num\n        return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    # remove duplicates from the list\n    unique_list = list(set(list_data))\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # removing duplicates from the list\n    return reduce(lambda x, y: x*y, unique_numbers)  # multiplying all the unique numbers together\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): Radius of the cylinder.\n    h (float): Height of the cylinder.\n\n    Returns:\n    float: Surface area of the cylinder.\n    \"\"\"\n    \n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * (3.14 * r * r) + 2 * (3.14 * r * h) + 2 * (3.14 * h * h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \"\"\"\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius r and height h of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate surface area of a cylinder\n    surface_area = 2 * (3.14159 * r**2 + 2 * 3.14159 * r * h + 2 * 3.14159 * h**2)\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a subset of A\n    for i in A:\n        if i not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    elif len(B)==len(A):\n        for i in range(len(B)):\n            if B[i]!=A[i]:\n                return False\n        return True\n    else:\n        for i in range(len(B)-len(A)+1):\n            if B[i:i+len(A)]!=A:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether the list A is a sublist of the list B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return \"Both lists must be of equal length\"\n    elif len(A) == 0:\n        return \"Both lists cannot be empty\"\n    elif len(B) == 0:\n        return \"List B cannot be empty\"\n    \n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n            \n    if i == len(A):\n        return \"List A is a sublist of List B\"\n    else:\n        return \"List A is not a sublist of List B\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # converting the list A to set for faster lookup\n    A = set(A)\n\n    # iterating through the list B and checking if each element is in set A\n    for i in B:\n        if i in A:\n            A.remove(i)\n        else:\n            return False\n\n    # if we reach here, the list B is a sublist of the list A\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j=0,0\n    while j<len(B):\n        if i<len(A) and B[j]==A[i]:\n            i+=1\n        j+=1\n        if i==len(A):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        for j in range(len(B)):\n            if A[i+j]!= B[j]:\n                break\n        else:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Find the last digit in the factorial\n    last_digit = fact % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize a variable to store the factorial of n\n    factorial = 1\n\n    # loop through the digits of n\n    while n > 0:\n        # get the last digit of n\n        last_digit = n % 10\n\n        # multiply the factorial by the last digit and add it to the variable\n        factorial = factorial * last_digit\n\n        # remove the last digit from n\n        n = n // 10\n\n    # return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through the digits of the number\n    while n > 0:\n        # extract the last digit of the number\n        last_digit = n % 10\n        \n        # multiply the result by the last digit\n        result *= last_digit\n        \n        # remove the last digit from the number\n        n //= 10\n    \n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit in the factorial of the number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        num_str = str(n)\n        last_digit = int(num_str[-1])\n        factorial = 1\n        for i in range(1, last_digit+1):\n            factorial *= i\n        return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize the last digit and the factorial to 0\n    last_digit = 0\n    factorial = 1\n\n    # Loop through the factorial until n is less than or equal to 1\n    while n > 1:\n        # Calculate the current digit of the factorial and add it to the last_digit variable\n        current_digit = n % 10\n        last_digit += current_digit\n\n        # Calculate the next factorial digit by multiplying by 10 and taking the remainder of 1\n        n = (n // 10) * 10 - 1\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # take the last digit of factorial of the given number\n    last_digit = n % 10\n\n    # return the last digit of factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    #initialize a variable to store the last digit of the factorial\n    last_digit = 0 \n\n    #find the factorial of the given number\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n\n    #extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    #return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the final result\n    result = []\n    # Loop through each list in turn and append its elements to the result list\n    for lst in [list1, list2, list3]:\n        for elem in lst:\n            result.append(elem)\n    # Return the flattened list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each list and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n    \n    # Initialize a new empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Append the i-th element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Define an empty list to hold the interleaved list\n    interleaved_list = []\n    # Loop through the lists and add each element to the interleaved list\n    for element in list1:\n        interleaved_list.append(element)\n    for element in list2:\n        interleaved_list.append(element)\n    for element in list3:\n        interleaved_list.append(element)\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return None\n    # Concatenate the lists and return the result\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of the same length and returns a single flat list\n    that contains all the elements from all three lists interleaved in order.\n    '''\n    # Initialize an empty list to hold the interleaved elements\n    result = []\n\n    # Use a for loop to iterate over the three input lists\n    for i in range(len(list1)):\n        # Append the element at index i from each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if k % 3 == 0:\n            result.append(list1[i])\n            i += 1\n        elif k % 3 == 1:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    if i < len(list1):\n        result.extend(list1[i:])\n    elif j < len(list2):\n        result.extend(list2[j:])\n    else:\n        result.extend(list3[k:])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1!= item2:\n            dissimilar_list.append(item1)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # create a set from the first tuple\n    set1 = set(test_tup1)\n    \n    # create a set from the second tuple\n    set2 = set(test_tup2)\n    \n    # find the dissimilar elements in both sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # convert the set back to a list and return the result\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Use set() to remove duplicates from both tuples\n    tup1_unique = set(test_tup1)\n    tup2_unique = set(test_tup2)\n    \n    # Find the elements in tup1 but not in tup2\n    dissimilar_elements = tup1_unique.difference(tup2_unique)\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            # If not, add it to the dissimilar list\n            dissimilar_list.append(elem1)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Get the length of the tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n\n    # Check if the length of the tuples is the same\n    if tup1_len!= tup2_len:\n        print(\"Both tuples must have the same length to compare them.\")\n        return\n\n    # Check if the tuples are empty\n    if test_tup1 == () or test_tup2 == ():\n        print(\"Both tuples must not be empty.\")\n        return\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Iterate through the tuples and compare each pair of elements\n    for i in range(tup1_len):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n\n    # Print the dissimilar elements\n    if dissimilar_set:\n        print(\"The dissimilar elements in the tuples are:\", dissimilar_set)\n    else:\n        print(\"The tuples are identical.\")"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store the even elements\n    even_list = []\n\n    # Loop through the tuple and check if each element is even\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n        test_tuple (tuple): A nested mixed tuple of integers, floats, and strings.\n        even_fnc (function): A function that takes an element as input and returns True if it is even.\n\n    Returns:\n        tuple: A new tuple with only even elements from the input tuple.\n    \"\"\"\n    # Create a new list to store only the even elements\n    even_list = []\n    # Loop through the tuple elements\n    for elem in test_tuple:\n        # Check if the element is even using the provided function\n        if even_fnc(elem):\n            # Add the even element to the new list\n            even_list.append(elem)\n    # Return the new list as a tuple\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if not even_fnc(test_tuple[i]):\n            test_tuple.pop(i)\n    return test_tuple\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, list):\n            new_tuple.extend(even_fnc(elem))\n        else:\n            new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        for item in test_tuple:\n            if isinstance(item, tuple):\n                even_ele(item, even_fnc)\n            else:\n                if even_fnc(item):\n                    test_tuple.remove(item)\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_tuple.append(element)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            if all(isinstance(j, int) for j in i):\n                new_tuple.extend([even_fnc(j) for j in i])\n            elif all(isinstance(j, str) for j in i):\n                new_tuple.extend([even_fnc(j) for j in i])\n        else:\n            if isinstance(i, int):\n                new_tuple.append(even_fnc(i))\n            elif isinstance(i, str):\n                new_tuple.append(even_fnc(i))\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            new_list.extend(even_ele(i, even_fnc)) \n        elif even_fnc(i): \n            new_list.append(i) \n    return new_list\n\ndef is_even(num): \n    if num % 2 == 0: \n        return True \n    return False"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and a function as parameters and returns a new tuple with only the even elements\n    after applying the even_fnc function to each element of the original tuple.\n\n    The even_fnc function should take one parameter and return True if the parameter is even and False otherwise.\n\n    Example:\n    even_fnc = lambda x: x % 2 == 0\n    test_tuple = ((1, 2, 3), (4, 5, 6, 7, 8), (9, 10, 11, 12, 13, 14, 15))\n    even_tuple = even_ele(test_tuple, even_fnc)\n    print(even_tuple) # Output: ((1, 3, 5, 7, 9), (4, 6, 8, 10, 12, 14, 16))\n    '''\n    result = []\n    for inner_tuple in test_tuple:\n        result.append([even_fnc(elem) for elem in inner_tuple])\n    return tuple([inner_tuple for inner_tuple in result if all(inner_tuple)])"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter out even elements from the tuple using the even_fnc function\n    filtered_tuple = list(filter(lambda x: even_fnc(x), test_tuple))\n    # Flatten the filtered tuple to remove nested tuples\n    flattened_tuple = [item for sublist in filtered_tuple for item in sublist]\n    return flattened_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * b * s + 2 * s * b\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Using Heron's formula to calculate the surface area of a square pyramid\n    return 0.5 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the square pyramid\n    surface_area = 2 * b * s\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two parameters b and s, which represent the base edge and height of a square pyramid respectively.\n    It returns the surface area of the square pyramid.\n    \n    Formula:\n    Surface Area = 2 * b * h\n    \n    where b is the base edge and h is the height of the square pyramid.\n    '''\n    return 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (base * height + height * base)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = (b * s) + (b * b) + (s * s)\n\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*s + 2*s*s + 2*b*s - b*b + 6*b*b + 2*s*b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b**2 + s**2)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n\n    # Initialize the first two catalan numbers as 1\n    catalan = [1, 1]\n\n    # Iterate through the remaining catalan numbers\n    for i in range(2, num + 1):\n        # Calculate the next catalan number using the formula\n        catalan.append(4 * (catalan[i - 1] + catalan[i - 2]))\n\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Catalan numbers are defined as:\n    # C(n) = (2n)! / (n!(n-1)!)\n    # Compute (2n)! and (n!(n-1)!) separately\n    factorial_2n = 1\n    factorial_n_minus_1 = 1\n    for i in range(2, n+1):\n        factorial_2n *= i\n    for i in range(n, 1, -1):\n        factorial_n_minus_1 *= i\n    # Compute C(n)\n    catalan_n = factorial_2n / (factorial_n_minus_1 * factorial_n)\n    return catalan_n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    else:\n        return (4*n*(n+1))//(n*(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        catalan[i] = 2 * catalan[i - 1] - catalan[i - 2]\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (4*num - 2)/(num*(num-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 5\n    c = [1]\n    for i in range(4, n+1):\n        temp = 0\n        for j in range(i):\n            temp += c[j] * c[i-j-1]\n        c.append(temp)\n    return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2*catalan_number(num-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly|lys)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function will find all the adverbs ending with \"ly\" in a given string and return their positions.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w*[aeiou][aeiou]*ly\\b'\n\n    # Find all the adverbs in the given text using the pattern\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the positions of each adverb ending with \"ly\"\n    return [(m.start(), m.end()) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with 'ly'\n    pattern = r'\\b(?:ly|ll|l|r)\\b'\n\n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the positions of the adverbs\n    positions = []\n\n    # Loop through all the matches found and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the adverbs ending with ly in the text\n    adverbs = re.findall(r'\\b\\w*[aeiou]y\\w*\\b', text)\n    # Iterate through the adverbs and store their positions\n    positions = []\n    for i, adverb in enumerate(adverbs):\n        if re.search(r'\\bly\\b', adverb):\n            positions.append((i, adverb))\n    # Sort the positions by their starting index\n    positions.sort(key=lambda x: x[0])\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(f'Adverb ending with \"ly\": {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with 'ly'\n    pattern = re.compile(r'\\b\\w*ly\\b')\n\n    # Find all the adverbs in the given string using the regular expression pattern\n    matches = pattern.findall(text)\n\n    # Create a list of tuples containing the adverb and its position in the text\n    adverbs = []\n    for i in range(len(matches)):\n        adverbs.append((matches[i], i))\n\n    # Sort the list of adverbs by their position in the text\n    adverbs.sort(key=lambda x: x[1])\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all occurrences of \"ly\" in the string\n    matches = re.findall(r'\\bly\\b', text)\n    # If there are matches, return a list of tuples containing the adverb and its position in the string\n    if matches:\n        return [(match, text.index(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(\\w+ly)\\b', text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, text.find(adv, i)))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_adverbs(text):\n    # Define a regular expression pattern for adverbs ending with 'ly'\n    pattern = r'\\bly\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverb positions and the matched text\n    adverb_positions = []\n\n    # Loop through all matches and add their positions and matched text to the list\n    for match in matches:\n        start_pos = match.start()\n        end_pos = match.end()\n        matched_text = match.group()\n\n        # Add the adverb positions and matched text to the list\n        adverb_positions.append((start_pos, end_pos, matched_text))\n\n    # Sort the list of adverb positions by their starting positions\n    adverb_positions.sort(key=lambda x: x[0])\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    The function first converts the items to a heap using heapq.nlargest(), which returns the n largest elements from the input list.\n    Finally, it returns the heap as a list.\n    '''\n    heap = heapq.nlargest(n, items)\n    return list(heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n as input\n    and returns a list containing the n most expensive items in the list.\n    \"\"\"\n    # create a min heap of n largest elements\n    max_heap = []\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n    # convert the min heap back to a list and return it\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n and returns the n most expensive items in the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, -item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Extract the n most expensive items from the min-heap\n    return [-heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of n empty tuples\n    heappush(heapq.nsmallest(n, [(0, item) for item in items]), (0, None))\n    # iterate over the dataset and push each item onto the heap\n    for item in items:\n        if item[0] < heappop(heapq.heappushpop(heapq.nsmallest(n, [(0, item) for item in items]), (0, None))[0]):\n            heappush(heapq.nsmallest(n, [(0, item) for item in items]), (0, None))\n    # return the n most expensive items\n    return heapq.nsmallest(n, [(0, item) for item in items])[1:]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is empty or the item is cheaper than the smallest item, add it to the heap\n        if not heap or item < heap[0][1]:\n            heapq.heappush(heap, (-item, item))\n        # If the heap is full and the item is cheaper than the smallest item, remove the smallest item from the heap and add the new item\n        elif item > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, item))\n    # Return the n most expensive items in the given dataset\n    return [-item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input.\n    It returns the n most expensive items in the dataset.\n\n    The function uses a min-heap to store the n most expensive items.\n    The min-heap is initially empty.\n\n    The function iterates over each item in the input list and adds it to the min-heap\n    if it is less than or equal to the value of the root of the heap.\n\n    If the size of the min-heap exceeds n, the function removes the root element\n    from the min-heap and adds the new item to the min-heap.\n\n    This process continues until the size of the min-heap is n.\n\n    Finally, the function returns the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if item <= heap[0]:\n            heapq.heappush(heap, item)\n        elif len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Sort the items in descending order based on their prices\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Extract the n most expensive items from the sorted list\n    result = [item[0] for item in items[:n]]\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a number n, return the n most expensive items.\n    \"\"\"\n    # Build a min heap of the first n items\n    min_heap = []\n    for item in items[:n]:\n        heapq.heappush(min_heap, (-item, item))\n\n    # Iterate over the remaining items, adding each to the min heap\n    for item in items[n:]:\n        heapq.heappush(min_heap, (-heapq.heappushpop(min_heap)[0], item))\n\n    # Return the n most expensive items\n    return [item for cost, item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): A list of items to be sorted and returned.\n    n (int): The number of most expensive items to be returned.\n\n    Returns:\n    list: A list of the n most expensive items.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop(0))\n\n    # Iterate through the remaining items in the dataset and add them to the min heap\n    while items:\n        heapq.heappush(min_heap, items.pop(0))\n\n    # Return the n most expensive items from the min heap\n    return min_heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    if n > len(l) or n < 0:\n        return \"Invalid index\"\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.append(l[n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new list that will hold the first n elements of the input list\n    first_n = l[:n]\n    # Create a new list that will hold the remaining elements of the input list\n    rest = l[n:]\n    # Combine the two lists into a new list and return it\n    return first_n + rest"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Calculate the length of the list\n    length = len(l)\n    \n    # Check if the n is within the bounds of the list\n    if n > length:\n        return \"The index n is out of bounds of the list.\"\n    \n    # Add the first part of the list to the end of the list\n    for i in range(n):\n        l.append(l.pop(0))\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>len(l):\n        return None\n    elif n==1:\n        return l\n    else:\n        arr1=l[:n]\n        arr2=l[n:]\n        return arr1+arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the input is a valid list\n    if not isinstance(l, list):\n        raise ValueError('Input must be a list.')\n    \n    # Check if the length of the list is greater than 1\n    if len(l) <= 1:\n        raise ValueError('Input list must have length greater than 1.')\n    \n    # Check if the nth element exists in the list\n    if n < 0 or n >= len(l):\n        raise ValueError('n must be a valid index.')\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    last_part = l[n:]\n    \n    # Concatenate the first part and the last part\n    full_list = first_part + last_part\n    \n    return full_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_index = n - 1\n    return l[:split_index] + [l[split_index]] + l[split_index+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if not l:\n        print(\"The list is empty.\")\n        return\n    \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"n must be a positive integer.\")\n        return\n    \n    # Split the list at the nth element and add the first part to the end\n    l1, l2 = l[:n], l[n:]\n    return l1 + l2"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n\n    Parameters:\n    nums (list): a list of integers\n\n    Returns:\n    int: the difference between the largest and smallest value in the list\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the max and min values\n    diff = max_num - min_num\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num\n    else:\n        return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through all possible perfect squares between a and b\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            # Check if the sum of the squares of the two corners of the square is equal to the target sum\n            if i**2 + j**2 == a**2 + b**2:\n                # Print the sum of the squares of the two corners of the square\n                print(i**2 + j**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares = []\n\n    # loop through a range from a to b\n    for num in range(a, b+1):\n        # loop through a range from 1 to the square root of the number\n        for i in range(1, int(num**0.5)+1):\n            # check if the number is divisible by i^2\n            if num % i**2 == 0:\n                # if it is, add it to the list of perfect squares\n                perfect_squares.append(num)\n                break\n\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num_str = str(i)\n        square = int(num_str*num_str)\n        if square == i:\n            print(i, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i == int(i**0.5) ** 2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num = i*i\n        if num == i and (i+1)*i == num:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square is perfect\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i * i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to store the minimum and maximum perfect squares found so far\n    min_square = float('inf')\n    max_square = float('-inf')\n    \n    # Iterate through the range of values between a and b\n    for i in range(a, b+1):\n        # Check if the current value is a perfect square\n        square = i*i\n        if square == i:\n            # If it is, update the minimum and maximum perfect squares found so far\n            if square < min_square:\n                min_square = square\n            if square > max_square:\n                max_square = square\n    \n    # Print the minimum and maximum perfect squares found\n    print(\"Minimum perfect square:\", min_square)\n    print(\"Maximum perfect square:\", max_square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list to store perfect squares\n    perfect_squares = []\n\n    # Loop through the range of numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Loop through the range of numbers from 1 to the square root of i\n        for j in range(1, int(i**0.5)+1):\n            # Check if i^j is equal to the current number i\n            if i**j == i:\n                # If it is, add i^j to the list of perfect squares\n                perfect_squares.append(i**j)\n                # Exit the inner loop as we have found the perfect square\n                break\n\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Use a loop to iterate through all numbers between a and b\n    for i in range(a, b+1):\n        # Calculate the square root of i using the math module\n        root_i = (i ** 0.5)\n        # Check if the square root is an integer\n        if root_i.is_integer():\n            # If it is, calculate the square of the integer square root and compare to i\n            if (int(root_i) ** 2) == i:\n                # If it is, print i as a perfect square\n                print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        rho (float): The radius of the point.\n        theta (float): The angle of the point in radians.\n\n    Returns:\n        A tuple containing the x and y coordinates of the point.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle to radians\n    theta = theta * cmath.pi / 180\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle to radians\n    theta = theta * cmath.pi/180.0\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the rectangular coordinates as a tuple\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): Polar radius (r)\n    theta (complex): Polar angle (theta)\n\n    Returns:\n    x (float): Rectangular x-coordinate\n    y (float): Rectangular y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes in a list as input and swaps the first and last elements in the list.\n    '''\n    # Checking if the list has less than two elements\n    if len(newList) < 2:\n        return \"List must have at least two elements to swap.\"\n\n    # Swapping the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List has less than 2 elements\")\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        # Swap the first and last elements\n        first_last = newList[0], newList[-1]\n        newList[0] = first_last[1]\n        newList[-1] = first_last[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the list is not empty\n    if len(newList) > 0:\n        # Checking if the length of the list is greater than 1\n        if len(newList) > 1:\n            # Swapping the first and last elements of the list\n            newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return \"List must have at least two elements\"\n    else: \n        temp = newList[0] \n        newList[0] = newList[-1] \n        newList[-1] = temp \n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [1]\n    for i in range(1,n+1):\n        coeff.append(coeff[i-1]*i)\n    return sum([coeff[i]*coeff[j] for i in range(n-k+1,n+1) for j in range(i,n+1)])"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k == 0 or k == n:\n        return 1\n\n    if k > n:\n        return 0\n\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    The function takes two arguments n and k which represent the values of n and k in the binomial coefficient formula:\n    n! / (k!(n-k)!)\n\n    The formula for the binomial coefficient formula is:\n    n! / k! * (n-k)! / (k-1)!\n    \n    The function returns the sum of the products of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    \n    for i in range(1,n+1):\n        product = 1\n        for j in range(1,k+1):\n            if j == i:\n                product *= j\n            elif j < i:\n                product *= (i-j)\n        sum_of_products += product\n    \n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Initialize the factorial of k and n\n    k_factorial = 1\n    n_factorial = 1\n    # Loop through all the values of k from 0 to n\n    for i in range(k+1): \n        # Calculate the factorial of k\n        k_factorial *= i\n        # Calculate the factorial of n-k\n        n_factorial *= n-i\n        # Add the product of the factorials to the sum\n        sum += k_factorial*n_factorial\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1, k+1):\n        product *= (n - i + 1) // i\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= i\n\n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k + 1):\n        factorial_k *= i\n\n    # Calculate the factorial of (n - k)\n    factorial_n_k = 1\n    for i in range(1, n - k + 1):\n        factorial_n_k *= i\n\n    # Calculate the binomial coefficient\n    binomial_coefficient = factorial_n_k // factorial_k // factorial_n\n\n    # Calculate the product of consecutive binomial co-efficients\n    product_of_consecutive_coeffs = binomial_coefficient * factorial_n // factorial_k\n\n    # Add the product to the sum\n    sum += product_of_consecutive_coeffs\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Initialize the binomial coefficient variable\n    coeff = 1\n    \n    # Initialize the power variable\n    power = 1\n    \n    # Loop through the range of k values from 1 to n\n    for i in range(1,n+1):\n        # Multiply the binomial coefficient and power variables\n        coeff = coeff * i\n        \n        # Add the binomial coefficient to the sum variable\n        sum = sum + coeff\n        \n        # Update the power variable\n        power = power + 1\n        \n    # Multiply the sum and the power variables to find the final sum of consecutive binomial coefficients\n    final_sum = sum * power\n    \n    return final_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum_ = 0\n\n    # Loop through the first k terms of the sequence\n    for i in range(k):\n        # Calculate the binomial coefficient for i and n-i\n        bin_coeff = (n+1-i) // (i+1)\n\n        # Multiply the binomial coefficient with the product of the remaining n-i terms\n        sum_ += bin_coeff * binomial_Coeff(n-i, k-i-1)\n\n    # Return the sum\n    return sum_"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n: int\n        The total number of terms in the binomial series.\n    k: int\n        The number of terms in the binomial series to consider.\n\n    Returns:\n    int\n        The sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize sum and product variables\n    sum = 0\n    product = 1\n\n    # Check if k is less than or equal to 0\n    if k <= 0:\n        return 0\n\n    # Calculate the first k terms of the binomial series\n    for i in range(k):\n        sum += product\n        product *= (n-i)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_coeff = 0\n    # Use a loop to iterate over all possible combinations of k consecutive numbers from 0 to n-1\n    for i in range(n - k + 1):\n        # Use nested loop to find the product of the consecutive numbers\n        product = 1\n        for j in range(k):\n            product *= i + j\n        # Add the product to the sum variable\n        sum_coeff += product\n    # Return the final sum of the products\n    return sum_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+$', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub(r'^(0+)', '', ip)\n    # Remove leading and trailing white spaces\n    ip = ip.strip()\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        new_ip = ''\n        for num in ip_list:\n            if num.startswith('0'):\n                continue\n            else:\n                new_ip += num + '.'\n        new_ip = new_ip[:-1]\n        return new_ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove all leading zeroes from the ip address\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|\\s+','',ip) # remove leading and trailing whitespaces\n    ip = re.sub(r'\\s{2,}',' ',ip) # remove multiple whitespaces in a row\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each part of the IP address\n    ip = re.sub(r'^\\D+|\\D+$', '', ip)\n\n    # Return the modified IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'(\\b0+)(?=\\d)', r'\\1.', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^0+'\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # remove leading zeros from each octet\n    ip = re.sub(r'^(0+)', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if list1 is empty\n    if len(list1) == 0:\n        return \"Error: List is empty.\"\n\n    # Check if the first element of the list is even or odd\n    if list1[0] % 2 == 0:\n        return \"Error: First element is even.\"\n\n    # Check if the second element of the list is even or odd\n    if list1[1] % 2 == 0:\n        return \"Error: Second element is even.\"\n\n    # Find the difference between the first even and first odd number\n    diff = abs(list1[0] - list1[1])\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # initialize the sum of even and odd numbers to 0\n    even_sum = 0\n    odd_sum = 0\n\n    # iterate through the list and add the even and odd numbers to the sums\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    # return the difference between the sums\n    return abs(even_sum - odd_sum)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0:\n        return odd_count\n    elif odd_count == 0:\n        return even_count\n    else:\n        return even_count - odd_count"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = list1[0]\n    odd_number = list1[1]\n    first_even_index = 0\n    first_odd_index = 0\n    \n    for i in range(2, len(list1)):\n        if list1[i] == even_number:\n            first_even_index = i\n        elif list1[i] == odd_number:\n            first_odd_index = i\n        else:\n            break\n    \n    if first_even_index == 0:\n        return 0\n    elif first_odd_index == 0:\n        return 0\n    \n    return list1[first_even_index] - list1[first_odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # initialize two variables to store the even and odd numbers\n    even = None\n    odd = None\n\n    # iterate through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n\n    # if the even and odd numbers are not found, return None\n    if even is None or odd is None:\n        return None\n\n    # calculate the difference between the even and odd numbers\n    diff = even - odd\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - num\n        elif num % 2!= 0:\n            if first_odd is None:\n                first_odd = num\n            else:\n                return first_odd - num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = 0\n    \n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference of the first even and first odd numbers.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    \n    # If the first even number is greater than the first odd number, swap the values\n    if even > odd:\n        even, odd = odd, even\n    \n    # Calculate the difference between even and odd\n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input is a list\n    if type(list1)!= list:\n        return \"Input must be a list\"\n    \n    # Check if the list has at least one element\n    if len(list1) == 0:\n        return \"List must have at least one element\"\n    \n    # Initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return \"List must have at least one even and one odd number\"\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return \"List must have at least one even and one odd number\"\n    \n    # Calculate the difference between even and odd numbers\n    if even_num is None or odd_num is None:\n        return \"List must have at least one even and one odd number\"\n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = [num for num in list1 if num % 2 == 0][0]\n    odd_first = [num for num in list1 if num % 2!= 0][0]\n    return abs(even_first - odd_first)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into lists of 0's and 1's\n    lst1 = [int(i) for i in str1[::-1]]\n    lst2 = [int(i) for i in str2[::-1]]\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate through the two lists and compare the two digits at each position\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            # If the digits are not equal, swap the digits\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            # Increment the minimum number of swaps\n            min_swaps += 1\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    # Get the length of the binary strings\n    len1 = len(binary1)\n    len2 = len(binary2)\n    # Initialize the min number of swaps\n    min_swaps = 0\n    # Iterate through the shorter binary string\n    for i in range(len1):\n        # If the characters don't match, increment the min number of swaps\n        if binary1[i]!= binary2[i]:\n            min_swaps += 1\n            # If the characters match, swap them\n            else:\n                # Swap the characters\n                binary1 = binary1[:i] + binary1[i+1] + binary2[:i] + binary2[i+1] + binary1[i:i+1] + binary2[i:i+1] + binary1[i+1:] + binary2[i+1:]\n                binary2 = binary1[:i] + binary1[i+1] + binary2[:i] + binary2[i+1] + binary1[i:i+1] + binary2[i:i+1] + binary1[i+1:] + binary2[i+1:]\n    # Check if the binary strings are equal\n    if binary1 == binary2:\n        # No swaps required\n        return 0\n    # Return the min number of swaps\n    else:\n        return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n            if count % 2 == 0:\n                str1 = str1[:i] + str1[i+1:]\n                str2 = str2[:i] + str2[i+1:]\n            else:\n                str1 = str1[:i] + str1[i] + str1[i+1:]\n                str2 = str2[:i] + str2[i] + str2[i+1:]\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '1' and str2[i] == '0':\n                swaps += n-i\n            elif str1[i] == '0' and str2[i] == '1':\n                swaps += i\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the two binary strings into lists of binary digits\n    digits1 = [int(digit) for digit in str1]\n    digits2 = [int(digit) for digit in str2]\n\n    # Initialize variables to keep track of the minimum swaps and the current state\n    min_swaps = len(str1)\n    current_state = digits1[:len(str1)]\n\n    # Loop through all possible states\n    for i in range(len(str1), 0, -1):\n        # Create a new state by swapping the i-th digit in the current state with the i-th digit in the other string\n        new_state = [digits1[j] for j in range(len(str1)) if j!= i-1] + [digits2[i-1]]\n        # Check if the new state is in the list of valid states\n        if new_state in valid_states:\n            # If it is, update the current state and the minimum swaps count\n            current_state = new_state\n            min_swaps = min(min_swaps, len(str1) - i + 1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Convert binary strings to lists\n    list1 = list(binary1)\n    list2 = list(binary2)\n\n    # Initialize minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Traverse through all possible pairs of swaps\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # Swap elements if they are not equal\n            if list1[i]!= list2[j]:\n                # Calculate the number of swaps required to swap the two elements\n                swaps = max(len(list1) - i, len(list2) - j)\n\n                # Update the minimum number of swaps if required\n                if swaps < min_swaps:\n                    min_swaps = swaps\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables\n    swap_count = 0\n    current_num = num1\n\n    # loop through each bit in the binary representation of num1 and num2\n    for i in range(32):\n        # check if the current bit of num1 is set to 1\n        if num1 & (1 << i):\n            # check if the corresponding bit of num2 is set to 0\n            if not num2 & (1 << i):\n                # if both are set, swap the bits\n                current_num ^= (1 << i)\n                swap_count += 1\n\n    # return the minimum number of swaps required to convert num1 to num2\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over the digits of the binary numbers\n    while num1!= num2:\n        # If the digits are not equal, then swap the digits\n        num1, num2 = num2, num1\n        result += 1\n    \n    return result"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    def swap_count(str1, str2):\n        # count the number of swaps required to convert str1 to str2\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                count += 1\n        return count\n\n    # check if both strings are of equal length\n    if len(str1)!= len(str2):\n        raise ValueError(\"Both strings must have equal length\")\n\n    # check if both strings are binary numbers\n    for char in str1 + str2:\n        if char not in [\"0\", \"1\"]:\n            raise ValueError(\"Both strings must be binary numbers\")\n\n    # check if both strings are of the same length\n    if len(str1)!= len(str2):\n        raise ValueError(\"Both strings must be of the same length\")\n\n    # convert str1 to binary number\n    binary_str1 = bin(int(str1, 2))[2:]\n    # convert str2 to binary number\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # swap adjacent digits to convert binary_str1 to binary_str2\n    count = swap_count(binary_str1, binary_str2)\n\n    # find the minimum number of swaps\n    min_swaps = count\n    for i in range(len(binary_str1)):\n        if binary_str1[i] == binary_str2[i]:\n            min_swaps = min(min_swaps, swap_count(binary_str1[:i] + binary_str1[i+1:], binary_str2[:i] + binary_str2[i+1:]))\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Find the lengths of the two binary strings\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Find the length of the longest string\n    max_len = max(n1, n2)\n\n    # Initialize a list of lists to store the number of swaps required for each swap step\n    swap_matrix = [[0] * max_len for _ in range(max_len)]\n\n    # Initialize the first row of the swap matrix to contain the number of swaps required for each swap step\n    for i in range(max_len):\n        swap_matrix[0][i] = i\n\n    # Fill the remaining rows of the swap matrix\n    for i in range(1, max_len):\n        for j in range(max_len):\n            if i == j:\n                swap_matrix[i][j] = swap_matrix[i - 1][j]\n            elif str1[j] == str2[i]:\n                swap_matrix[i][j] = swap_matrix[i - 1][j]\n            else:\n                swap_matrix[i][j] = min(swap_matrix[i - 1][j], swap_matrix[i][j - 1]) + 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swap_matrix[n1][n2]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize size to 0\n    size = 0\n\n    # Iterate through the tuples and add their sizes to the size variable\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # convert the tuple to a string\n    tuple_str = str(tuple_list)\n\n    # calculate the size of the string in bytes\n    size_in_bytes = len(tuple_str) * sys.getsizeof(tuple_str)\n\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        # Calculate the size of the element in bytes using sys.getsizeof()\n        element_size = sys.getsizeof(i)\n        total_size += element_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size_of_tuple = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_bytes = sys.getsizeof(tuple_list)\n    return tuple_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # Loop through both arrays until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n        k -= 1\n\n        # If we have found k elements, return the kth element\n        if k == 0:\n            return arr1[i]\n\n    # If we have not found k elements, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # merge the two sorted arrays\n    merged = arr1 + arr2\n    # find the middle of the merged array\n    mid = len(merged) // 2\n    # if the merged array has only one element, return that element\n    if len(merged) == 1:\n        return merged[0]\n    # find the kth smallest element in the merged array\n    if k > len(merged):\n        return None\n    elif k == 1:\n        return merged[0]\n    elif k == len(merged):\n        return merged[-1]\n    elif k % 2 == 1:\n        # find the kth smallest element in the first half of the merged array\n        left = 0\n        right = mid\n        while left < right:\n            if merged[left] < merged[right]:\n                k -= right - left\n                left += 1\n            else:\n                k -= left - right\n                right += 1\n        return merged[left]\n    else:\n        # find the kth smallest element in the second half of the merged array\n        left = mid\n        right = len(merged)\n        while left < right:\n            if merged[left] < merged[right]:\n                k -= right - left\n                left += 1\n            else:\n                k -= left - right\n                right += 1\n        return merged[left]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays as input and the value of k and returns the kth smallest element from the two arrays.\n    \"\"\"\n    # initialize two pointers i and j to the first element of the arrays\n    i, j = 0, 0\n    # initialize a variable to store the kth smallest element\n    min_element = None\n    \n    # loop till both pointers have not crossed the end of the arrays\n    while i < len(arr1) and j < len(arr2):\n        # compare the current element of the first array with the current element of the second array\n        if arr1[i] < arr2[j]:\n            # if the current element of the first array is smaller than the current element of the second array, increment the first pointer\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # if the current element of the first array is greater than the current element of the second array, increment the second pointer\n            j += 1\n        else:\n            # if the current elements are equal, increment both pointers and check if it is the kth smallest element so far\n            i += 1\n            j += 1\n            if k == 1:\n                # if k is 1, return the current element of the first array\n                return arr1[i-1]\n            k -= 1\n    \n    # if one of the pointers has crossed the end of the array, return the remaining elements of the array\n    if i == len(arr1):\n        return arr2[j:]\n    else:\n        return arr1[i:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge two sorted arrays\n    merged_arr = merge(arr1, arr2)\n\n    # Find the kth element in the merged array\n    n = len(merged_arr)\n    if k <= n // 2:\n        return merged_arr[k-1]\n    else:\n        return merged_arr[n-k]\n\n\ndef merge(arr1, arr2):\n    '''\n    Merge two sorted arrays.\n    '''\n    i = j = 0\n    merged_arr = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n    return merged_arr\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == k:\n            return arr1[i-1]\n        elif j == k:\n            return arr2[j-1]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    while i < len(arr1):\n        return arr1[i]\n    while j < len(arr2):\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i - 1]\n    else:\n        return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = [int(digit) for digit in str(number)]\n    power = len(digits)\n    total = sum(digits ** power for power in range(1, len(digits) + 1))\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an armstrong number or False otherwise.\n    An armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the number of digits in the number\n    num_digits = len(number_str)\n    # Initialize a variable to store the sum of the digits raised to the power of the number of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum_of_digits\n        digit_int = int(digit)\n        sum_of_digits += digit_int ** num_digits\n    \n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum_of_squares = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize the sum of the digits to zero\n    sum_of_digits = 0\n    # Loop over each digit in the string\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum_of_digits += digit_int ** len(number_str)\n    # Compare the sum with the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether the given number is Armstrong or not.\n    \"\"\"\n    sum_of_cubes = 0\n    num = n\n    while num > 0:\n        digit = num % 10\n        sum_of_cubes += digit ** 3\n        num //= 10\n    return sum_of_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_digits = len(str(number))\n    power = num_digits\n    armstrong_num = 0\n    while number > 0:\n        digit = number % 10\n        armstrong_num += digit ** power\n        power -= 1\n        number //= 10\n    return armstrong_num == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        if sum == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    power = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** power\n    return sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i\n        count += 1\n    average = total / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_n = 0\n    count = 0\n    # loop through the first n numbers\n    for i in range(1, n+1):\n        # add i to the sum and increment the count\n        sum_n += i\n        count += 1\n    # calculate the average\n    average = sum_n / count\n    # return the tuple (sum_n, average)\n    return (sum_n, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(number):\n        total += i + 1\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(number):\n        sum += i + 1 # adding 1 to each number for sum calculation\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count of natural numbers\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to sum and increment count\n        sum += i\n        count += 1\n\n    # calculate average and return a tuple containing sum and average\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count\n    sum = 0\n    count = 0\n    \n    # iterate n times\n    for i in range(number):\n        # add i to sum and increment count\n        sum += i\n        count += 1\n        \n    # calculate average\n    average = sum / count\n    \n    # print sum and average\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    This function takes an integer as input and returns True if the number is even and False otherwise.\n    '''\n\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If no character is repeated, it returns None.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Convert the string to a set to remove duplicate characters\n    char_set = set(str1)\n    # Convert the set back to a list to find the first repeated character\n    repeated_char = list(char_set)[0]\n    # Return the first repeated character\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # find the character with the lowest frequency\n    min_freq = min(char_freq.values())\n    for char, freq in char_freq.items():\n        if freq == min_freq:\n            return char\n\n    # if no character is found with the lowest frequency, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string and returns the first repeated character.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string and returns the first repeated character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character by iterating over the dictionary and returning the first key with a frequency greater than 1\n    for key, value in freq.items():\n        if value > 1:\n            return key\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character again and return the first one that appears more than once\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    A lucid number is a positive integer whose digits sum up to the same as the number itself.\n    '''\n    digits_sum = sum(int(digit) for digit in str(n))\n    return digits_sum == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # initialize the list to store the lucid numbers\n    lucid_numbers = []\n\n    # loop from 0 to n-1\n    for i in range(n):\n        # check if the number is a lucid number\n        lucid_num = True\n        for j in range(2, int(i**0.5)+1):\n            # if the number is divisible by j, set lucid_num to False and break out of the loop\n            if i % j == 0:\n                lucid_num = False\n                break\n        # if lucid_num is True, append the number to the list\n        if lucid_num:\n            lucid_numbers.append(i)\n\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n):\n        if i == 1 or i == n:\n            ludic_numbers.append(i)\n        else:\n            j = 2\n            while j <= int(i ** 0.5):\n                if i % j == 0:\n                    break\n                j += 1\n            if j > int(i ** 0.5):\n                ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    i = 3\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 2\n    return lucid\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [2]\n    i = 3\n    while i <= n:\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n        i += 2\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 0\n    while i * i <= n:\n        if n % i == 0:\n            j = 1\n            while j * j <= n - i * i:\n                if n % (i * j) == 0:\n                    lucid_numbers.append(i * j)\n                j += 1\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    i = 1\n    while i <= n:\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                i -= 1\n            else:\n                j += 1\n        lucids.append(i)\n        i += 1\n    return lucids"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the words back into a string\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # convert the string to a list of words\n    words = s.split()\n    \n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # join the reversed words back into a string\n    reversed_words =''.join(words)\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the given number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n\n    # Check if the given number is divisible by any number between 4 and the square root of the given number\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True\n\nprint(prime_num(7)) # True\nprint(prime_num(20)) # False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the loop completes without finding any divisor, the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches a string for a regex pattern and returns the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use re.search() to search for the pattern in the text\n    result = re.search(pattern, text)\n    \n    # Check if the pattern was found\n    if result:\n        # Return the matching subtring, a start index and an end index\n        return result.group(0), result.start(), result.end()\n    else:\n        # Return None if the pattern was not found\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    start_index = min(m.start() for m in matches)\n    end_index = max(m.end() for m in matches)\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        # assuming the pattern returns a tuple with the literals, start index, and end index\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.finditer(pattern, text)\n\n    for match_num, match in enumerate(matches, start=1):\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match {match_num}: Literal '{literal}', Start Index: {start_index}, End Index: {end_index}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        match_str = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return match_str, start_index, end_index\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.finditer() function to search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over the matches and return the matching substring, start index and end index for each match\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    \n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number using recursive formula.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    The nth bell number is the number of partitions of n into distinct non-empty subsets of {1, 2,..., n}.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Calculate n! by factorial\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Calculate n^n by raising n to the power of n\n    def power(n):\n        if n == 0:\n            return 1\n        else:\n            return n * power(n-1)\n\n    # Calculate n! / (n^n * 2^n)\n    def bell(n):\n        return factorial(n) // (power(n) * power(2*n))\n\n    # Call the bell function with n as input and print the result\n    print(\"The\", n, \"th Bell number is:\", bell(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first bell number as 2\n    first_bell = 2\n    \n    # Initialize the second bell number as 1\n    second_bell = 1\n    \n    # Iterate n-1 times\n    for i in range(1, n):\n        # Calculate the next bell number\n        next_bell = first_bell + second_bell\n        \n        # Update the values of first and second bell numbers\n        first_bell = second_bell\n        second_bell = next_bell\n    \n    # Return the nth bell number\n    return second_bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        k = n\n        b = 0\n        for i in range(1, n+1):\n            b += (k * (2*k - 1)) // i\n            k -= 1\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n            k -= 1\n        elif i < k:\n            list1[i], list1[k] = list1[k], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # find the index of the k'th element\n    list1.pop(k) # remove the k'th element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # the index of the element to be removed\n    return list1[:k] + list1[k+1:]  # return a new list with all elements except the k'th one"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n    # Create a list with the indices of the elements to remove\n    kth_index = L - 1\n    index_list = []\n    for i in range(len(list1)):\n        if i == kth_index:\n            break\n        index_list.append(i)\n    # Remove the kth element from the list\n    for i in reversed(index_list):\n        del set_list[i]\n    # Convert the set back to a list and return it\n    return list(set_list)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L\n    n = len(list1)\n    result = []\n    for i in range(n):\n        if i < k-1:\n            result.append(list1[i])\n        else:\n            result.append(list1[i+1])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    list1 = list1[:k] + list1[k+1:]\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the max variable with the first element in the first row\n    max_value = test_list[0][0]\n    # Iterate over all the rows of the matrix\n    for i in range(1, len(test_list)):\n        # Check if the value in then'th column is greater than the current max value\n        if test_list[i][N-1] > max_value:\n            # Update the max value if necessary\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, n):\n    max_val = float('-inf')\n    for row in matrix:\n        if len(row) > n and row[n] > max_val:\n            max_val = row[n]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) >= N:\n            max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i < N:\n            continue\n        if max_val < max(test_list[i][N-1]):\n            max_val = max(test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for row in test_list:\n        if max_num < row[N-1]:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N:\n            max_val = max(max_val, test_list[i][N-1])\n        else:\n            max_val = max(max_val, test_list[i][N])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1], default=float('-inf'))\n        test_list[i][N-1] = max_val\n    return test_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # initialize an empty list to store the merged sublists\n    merged_lst = []\n    # loop through each sublist in the original list\n    for sublist in lst:\n        # add the first element of the sublist to the first element of the first sublist in the merged list\n        merged_lst[0] = [merged_lst[0][0], sublist[0]]\n        # add the second element of the sublist to the second element of the second sublist in the merged list\n        merged_lst[1] = [merged_lst[1][1], sublist[1]]\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n    Parameters:\n    test_list: list of tuples\n        A list of tuples containing values.\n\n    Returns:\n    int: The cumulative sum of all the values that are present in the list.\n\n    \"\"\"\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            cumulative_sum += test_list[i] + test_list[j]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # For each tuple, iterate over each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cum_sum = []\n    # loop through each tuple in the given list\n    for tup in test_list:\n        # loop through each value in the current tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum.append(val)\n    # return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for value in test_list:\n        total += value\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum with the first value of the list\n    cumulative_sum = test_list[0]\n    # Loop through the list from the second value to the last\n    for num in test_list[1:]:\n        # Add the current value to the cumulative sum\n        cumulative_sum += num\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    average_list = []\n    # Loop through each tuple in the input tuple\n    for tuple_ in nums:\n        # Calculate the average value for the current tuple\n        average = sum(tuple_) / len(tuple_)\n        # Append the average value to the average_list\n        average_list.append(average)\n    # Return the average_list\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        avg = sum(num_tuple)/len(num_tuple)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    avg_list = []\n    # loop through each tuple in the input tuple\n    for tup in nums:\n        # initialize a variable to store the sum of the values in the tuple\n        total = 0\n        # loop through each value in the tuple\n        for num in tup:\n            # add the value to the sum\n            total += num\n        # divide the sum by the length of the tuple to get the average value\n        avg = total / len(tup)\n        # add the average value to the average_list\n        avg_list.append(avg)\n    # return the average_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sublist in nums:\n        total = 0\n        count = 0\n        for num in sublist:\n            total += num\n            count += 1\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        avg = total/len(nums[i])\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_list = []\n    for tup in nums:\n        total = sum(tup)\n        total_list.append(total/len(tup))\n    return total_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        count = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the input tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the input tuples must be same!\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    # Print the result tuple\n    print(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length!\")\n    # Perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n\n    # Loop through the tuples and perform the element wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    steps = list(map(int, steps.split(',')))\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] <= d:\n            d -= steps[i]\n            i += 1\n            jumps += 1\n        else:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_position = 0\n    last_position = 0\n    steps_taken = 0\n\n    while True:\n        if curr_position == d:\n            return jumps\n        elif curr_position == last_position:\n            return -1  # no valid path\n\n        last_position = curr_position\n        steps_taken += 1\n\n        if curr_position + 1 <= d:\n            curr_position += 1\n        elif curr_position + 1 > d:\n            curr_position -= 1\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Create a list of tuples representing the possible jumps from the origin\n    jumps = [(i, j) for i in range(steps+1) for j in range(d+1)]\n\n    # Sort the jumps list based on the absolute value of the distance\n    jumps.sort(key=lambda x: abs(x[0]-d))\n\n    # Initialize the count of jumps to 0\n    count = 0\n\n    # Iterate through the sorted jumps list and count the number of jumps from the origin\n    for i, j in jumps:\n        count += 1\n\n        # If we reach the destination point, we can break out of the loop\n        if i == steps and j == 0:\n            break\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    i = 1\n    \n    while i <= steps:\n        j = i - 1\n        temp = 0\n\n        while j > 0 and steps - j >= temp:\n            temp += j\n            j -= 1\n            \n        if temp == 0:\n            jumps += 1\n        else:\n            temp = 0\n            while j >= 1 and steps - j >= temp:\n                temp += j\n                j -= 1\n\n        i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    dp = [[float('inf')] * (d+1) for _ in range(steps+1)]\n    dp[0][0] = 0\n\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n\n    min_steps = steps\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if dp[i][j] < dp[min_steps][min_steps-i][min_steps-j]:\n                min_steps = i\n\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    next_pos = 0\n\n    # Traverse through the list of steps\n    while curr_pos < len(steps):\n        # Calculate the next position\n        next_pos = steps[curr_pos] + curr_pos\n        if next_pos >= d:\n            # Check if the next position is at point (d, 0)\n            if steps[next_pos] == 0:\n                # If it is, add a jump to the count of jumps\n                jumps += 1\n            # Move to the next position\n            curr_pos = next_pos\n        else:\n            # If the next position is out of bounds, move to the next position\n            curr_pos += 1\n\n    # Return the final count of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initial values\n    visited = {0: (0, 0)}\n    distance = {0: 0}\n\n    # starting point of (0, d)\n    current = (0, d)\n\n    # loop through the given number of steps\n    for i in range(steps):\n        # check if current point has been visited before\n        if current in visited:\n            # if yes, check if we need to jump to reach (0, 0)\n            if current[1] == 0:\n                return visited[current][0]\n            # if no, check if we need to jump further\n            else:\n                # get the new distance to reach (0, 0)\n                new_distance = distance[current[0]] + 1\n                # get the new position after jumping to reach (0, 0)\n                new_position = current[0] + 1\n\n                # check if we have reached (0, 0)\n                if new_position == 0:\n                    return i\n\n                # add the new position and distance to the visited and distance dictionaries\n                visited[new_position] = (i, new_distance)\n                distance[new_position] = new_distance\n\n                # set the current point to the new position and distance\n                current = (new_position, 0)\n\n    # if we have not reached (0, 0), return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    j = 0\n    i = 0\n    \n    # Loop until we reach the target point\n    while i < len(steps) and steps[i][0] < d:\n        j += 1\n        i += steps[i][1]\n    \n    # If we reach the target point, return the number of jumps\n    if i == len(steps):\n        return j\n    \n    # If we don't reach the target point, there is no solution\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables for number of jumps and steps to reach (d, 0)\n    num_jumps = 0\n    step_count = 0\n    \n    # Check if d is divisible by 2\n    if d % 2 == 0:\n        # If d is divisible by 2, move one step inward\n        step_count += 1\n    else:\n        # If d is not divisible by 2, move two steps inward\n        step_count += 2\n    \n    # Loop until step_count reaches steps\n    while step_count < steps:\n        # Check if d is divisible by 2\n        if d % 2 == 0:\n            # If d is divisible by 2, move one step inward\n            step_count += 1\n        else:\n            # If d is not divisible by 2, move two steps inward\n            step_count += 2\n        \n        # Increment number of jumps if step_count reaches d\n        if step_count == d:\n            num_jumps += 1\n            \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Check if d is even or odd\n    if d % 2 == 0:\n        # If even, the maximum number of jumps required is (d // 2) + 1\n        return (d // 2) + 1\n    else:\n        # If odd, the maximum number of jumps required is (d // 2)\n        return d // 2"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ValueError(\"The second element should not be zero.\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments and divides each element of the first list by the corresponding element of the second list.\n    It returns the resultant list of division.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes in two lists `nums1` and `nums2` as arguments and divides them element-wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Checking the length of both lists\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length.\")\n    else:\n        # Dividing the two lists element wise\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    non_num_list = [char for char in test_str if not char.isdigit()]\n    final_list = non_num_list + num_list\n    return ''.join(final_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = []\n    for char in test_str:\n        if char.isdigit():\n            number_list.append(char)\n    if len(number_list) > 0:\n        number_list.sort(reverse=True)\n        num_str = ''.join(number_list)\n        return test_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    rest_str = ''.join(char for char in test_str if not char.isdigit())\n    return num_str + rest_str\n\ntest_str = \"hello world 123 abc\"\nresult = move_num(test_str)\nprint(result)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize an empty string to store the numbers\n    num_str = ''\n\n    # iterate through the given string\n    for char in test_str:\n        # if the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # if the character is not a number, add it to the end of the string\n        else:\n            test_str += char\n\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # initialize an empty string to store the numbers\n    numbers = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the numbers string\n            numbers += char\n    # return the original string with the numbers moved to the end\n    return test_str[:-len(numbers)] + numbers + test_str[-len(numbers):]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Initialize variables to keep track of the position and the count of the numbers\n    start = 0\n    end = 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the character is a number\n        if test_str[i].isdigit():\n            # If the character is a number, increment the count and move the number to the end\n            count += 1\n            end = i\n        # Check if the count of numbers is greater than or equal to the count of letters\n        elif count >= len(test_str) - len(test_str.replace(\" \", \"\")):\n            # If the count of numbers is greater than or equal to the count of letters, move all the numbers to the end\n            while test_str[end].isdigit():\n                end += 1\n            while test_str[start].isdigit():\n                start += 1\n            # Swap the numbers in the string\n            temp = test_str[start]\n            test_str = test_str[:start] + test_str[end] + test_str[start+1:end] + test_str[start:start+1] + temp\n            end += 1\n            count -= 1\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''\n    alphabets = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            alphabets += char\n    return alphabets + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Find all the numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n\n    # Remove all the numbers from the original string\n    test_str = re.sub(r'\\d+', '', test_str)\n\n    # Add all the numbers to the end of the string\n    test_str += ''.join(numbers)\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    result = ''.join(nums)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    num_found = False\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n            num_found = True\n        else:\n            if num_found:\n                test_str = ''.join(num_list) + test_str[num_list[-1]:]\n                num_found = False\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # Sort the list in ascending order\n    n = len(a)\n    dp = [1] * n # Initialize the dp array with 1, since no pair can be divisible\n\n    # Fill the dp array using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp) # Return the maximum value in the dp array"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # sort the list in descending order\n    a = sorted(a, reverse=True)\n    # initialize variables\n    max_size = 0\n    # loop through each number in the list\n    for num in a:\n        # find the largest subset that is divisible by num\n        subset_size = 0\n        subset_start = 0\n        for i in range(1, len(a)):\n            if a[i] % num == 0:\n                subset_size += 1\n                subset_start = i\n        # check if the subset is larger than max_size\n        if subset_size > max_size:\n            max_size = subset_size\n    # return the maximum subset size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the subset size for each pair of elements in the list\n    subsets = {}\n\n    # initialize the largest subset size to 1\n    largest_size = 1\n\n    # loop through the list of elements\n    for i in range(len(a)):\n        # loop through the remaining elements to check if every pair is divisible\n        for j in range(i+1, len(a)):\n            # calculate the subset size by finding the number of integers in the range [a[i], a[j]] that are divisible by a[j]\n            subset_size = sum(1 for num in range(a[i], a[j]+1) if num % a[j] == 0)\n\n            # update the dictionary with the current subset size\n            subsets[(i, j)] = subset_size\n\n            # update the largest subset size if necessary\n            if subset_size > largest_size:\n                largest_size = subset_size\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the given list in non-decreasing order\n    a = sorted(a)\n\n    # Initialize variables to store the size and maximum size of the largest subset\n    max_size = 0\n    current_size = 0\n\n    # Iterate through the list and check if each pair is divisible\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                current_size += 1\n                max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # Sort the list\n    n = len(a)\n    max_subset_size = 0 # Initialize max_subset_size to 0\n    \n    # Traverse the list from the first element to the last element\n    for i in range(n):\n        # Initialize current_subset_size to 1\n        current_subset_size = 1\n        \n        # Traverse the list from the next element to the last element\n        for j in range(i+1, n):\n            # Check if a[j] is divisible by a[i]\n            if a[i] % a[j] == 0:\n                current_subset_size += 1\n                \n        # Update max_subset_size if current_subset_size is greater\n        if current_subset_size > max_subset_size:\n            max_subset_size = current_subset_size\n            \n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set of pairs of numbers to check if they are divisible\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.add((a[i], a[j]))\n    \n    # find the maximum subset size by using dynamic programming\n    max_size = 0\n    for pair in pairs:\n        # compute the maximum subset size for this pair\n        max_subset_size = 0\n        for num in pair:\n            max_subset_size = max(max_subset_size, a.count(num))\n        \n        # update the maximum subset size if needed\n        max_size = max(max_size, max_subset_size)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize the maximum subset size to 1\n    max_size = 1\n    \n    # Initialize the maximum subset with the first element\n    max_subset = [a[0]]\n    \n    # Loop through the list and add elements to the current subset as long as the sum of the subset and the next element is divisible by the next element\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            max_subset.append(a[i])\n            max_size += 1\n        else:\n            max_subset = [a[i]]\n            max_size = 1\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    subset_size = 0\n    current_subset = []\n    current_num = a[0]\n\n    # Iterate through the list\n    for num in a[1:]:\n        # If the current number is divisible by the previous number, add it to the current subset\n        if num % current_num == 0:\n            current_subset.append(num)\n        else:\n            # If the current subset is not empty, check if it's a valid subset\n            if current_subset:\n                subset_size = max(subset_size, len(current_subset))\n                current_subset = []\n\n        # Update the current number\n        current_num = num\n\n    # Check if the current subset is a valid subset\n    if current_subset:\n        subset_size = max(subset_size, len(current_subset))\n\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables to store the largest subset and the length of the largest subset\n    largest = [a[0]]\n    length = 1\n\n    # loop through the sorted list\n    for i in range(1, len(a)):\n        # if the next element is not divisible by the current largest element, add it to the current largest subset\n        if a[i] % largest[-1]!= 0:\n            largest.append(a[i])\n            length += 1\n        # if the next element is divisible by the current largest element, we can extend the current largest subset\n        else:\n            # if the length of the current largest subset is greater than the length of the largest subset found so far, update it\n            if length > len(largest):\n                largest = [a[i]]\n                length = 1\n            # if the length of the current largest subset is equal to the length of the largest subset found so far, extend it\n            else:\n                largest.append(a[i])\n\n    # return the length of the largest subset found\n    return length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    largest_size = 0\n    i = 0\n\n    # Iterate over the list of numbers\n    while i < len(a):\n        # Calculate the size of the subset that is divisible by the current number\n        size = 1\n        j = i + 1\n        while j < len(a) and a[j] % a[i] == 0:\n            size += 1\n            j += 1\n        # Update the largest size if the current size is greater than the current largest size\n        if size > largest_size:\n            largest_size = size\n        # Move to the next number in the list\n        i += 1\n\n    # Return the largest size of the subset\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    merged = sorted(arr1 + arr2)\n    \n    # Calculate the length of the merged array\n    len_merged = len(merged)\n    \n    # Calculate the median index\n    mid = len_merged // 2\n    \n    # If the length of the array is odd, return the middle element\n    if len_merged % 2 == 1:\n        return merged[mid]\n    \n    # If the length of the array is even, return the average of the middle two elements\n    else:\n        return (merged[mid - 1] + merged[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of equal size and returns their median.\n    '''\n    # Get the size of the two lists\n    m = len(arr1)\n    # Check if the size of the first list is greater than the second list\n    if m > len(arr2):\n        # Swap the two lists so that arr1 is the smaller list\n        arr1, arr2 = arr2, arr1\n        m = len(arr1)\n    # Calculate the sum of the two lists\n    s = sum(arr1[:m] + arr2[:m])\n    # If the size of both lists is odd, then the median is the middle number\n    if m % 2 == 1:\n        return s // m\n    # If the size of both lists is even, then the median is the average of the middle two numbers\n    else:\n        return (s // m) + arr1[m // 2] + arr2[m // 2] // 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    # Merge the two sorted lists\n    merged = []\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            merged.append(arr2[j])\n            j += 1\n        else:\n            merged.append(arr1[i])\n            i += 1\n            j += 1\n    \n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    # Find the median\n    if n % 2 == 0:\n        return (merged[n//2-1] + merged[n//2])/2\n    else:\n        return merged[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merging both sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n\n    # Sorting the merged array\n    merged_arr.sort()\n\n    # Finding the median of the merged array\n    if n % 2 == 0:\n        median = (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2\n    else:\n        median = merged_arr[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort both the lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        # Find the average of the middle two elements\n        median = (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        # Find the middle element\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns the median.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The two lists must have the same size.\")\n\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Find the middle index of the merged list\n    middle_index = n // 2\n\n    # Find the median of the merged list\n    if n % 2 == 0:\n        # If the size of the merged list is even, return the average of the middle two elements\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        # If the size of the merged list is odd, return the middle element\n        median = merged_list[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the midpoint index\n    mid = n // 2\n\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # Find the median of the two middle elements\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        # Find the median of the middle element\n        median = arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): List of integers.\n    arr2 (list): List of integers.\n    n (int): Size of the two sorted lists.\n\n    Returns:\n    float: The median of the two sorted lists.\n    '''\n\n    # Concatenate the two lists and sort it.\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Calculate the length of the list.\n    length = len(arr)\n\n    # Calculate the median based on the length of the list.\n    if length % 2 == 0:\n        # If the length of the list is even, return the average of the middle two elements.\n        median = (arr[length//2] + arr[length//2-1])/2\n    else:\n        # If the length of the list is odd, return the middle element.\n        median = arr[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Create an empty list to store the merged lists\n    merged = []\n\n    # Merge the two lists into a single list\n    for i in range(n):\n        merged.append(min(arr1[i], arr2[i]))\n        merged.append(max(arr1[i], arr2[i]))\n\n    # Sort the merged list in non-decreasing order\n    merged.sort()\n\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two arrays\n    arr = arr1 + arr2\n    # sort the concatenated array\n    arr.sort()\n    # calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        A list of n-th powers of the numbers in nums.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): List of numbers.\n    n (int): Power to which to raise each number.\n\n    Returns:\n    list: List of the same size as `nums`, containing the result of raising each element to the nth power.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    new_string = string.upper()\n    # Return the new string\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        result += char.upper()\n    return result"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the given list is empty\n    if not newList: \n        return None\n    \n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has only one element\n    if length == 1: \n        return None\n    \n    # Get the last element of the list\n    lastElement = newList[length - 1]\n    \n    # Remove the last element from the list\n    newList.pop()\n    \n    # Add the last element to the first position of the list\n    newList.insert(0, lastElement)\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the given list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap them.\")\n        return None\n\n    # Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Reverse the list\n    newList.reverse()\n    # Interchange the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # Reverse the list again\n    newList.reverse()\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    \n    # If the list has less than 2 elements, return the list as is\n    if length < 2:\n        return newList\n    \n    # If the list has 2 elements, swap them and return the new list\n    elif length == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n        return newList\n    \n    # If the list has more than 2 elements, swap the first and last elements and return the new list\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list is empty\n    if len(newList) == 0:\n        return []\n\n    # swapping the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # If the length of the list is less than 2, return the same list\n    if len(newList) < 2:\n        return newList\n    # Otherwise, swap the first and last elements of the list\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    if len(newList) <= 1:\n        return newList\n    else:\n        # swapping the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # recursively calling the function to swap the rest of the list\n        return swap_List(newList[1:])\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r**2) / (4 * math.tan(math.pi/3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of a right triangle with base a and height h\n    def right_triangle_area(a, h):\n        return 0.5 * a * h\n    \n    # calculate the semi-perimeter of the semicircle\n    def semicircle_perimeter(r):\n        return 2 * r\n    \n    # calculate the area of the largest right triangle that can be inscribed in the semicircle\n    area_max = right_triangle_area(semicircle_perimeter(r), 2 * r)\n    \n    # calculate the area of the smallest right triangle that can be inscribed in the semicircle\n    area_min = right_triangle_area(0.5 * r, 0.5 * r)\n    \n    # find the maximum and minimum areas\n    area_min = min(area_min, area_max)\n    area_max = max(area_min, area_max)\n    \n    # return the maximum area\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # Calculate the semi-perimeter\n    sp = 2 * math.pi * r\n\n    # Calculate the semi-area\n    sa = math.pi * r**2\n\n    # Calculate the area of the smallest triangle\n    as1 = math.sqrt(sp * (1 - (sa / sp)) / sa)\n\n    # Calculate the area of the largest triangle\n    as2 = 2 * math.sqrt(sp * (sa - (sp * (1 - (sa / sp)) / sa)))\n\n    # Return the maximum area\n    return max(as1, as2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.141592653589793\n    a = 0.5*r\n    b = 0.5*r*pi\n    c = 2*r\n    s = (a+b+c)/2\n    area = 0.5*s*(s-a)*(s-b)*(s-c)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The area of a semicircle with radius r is pi r^2\n    area = math.pi * r ** 2\n    \n    # The area of the largest possible triangle is twice the area of a semicircle with radius r\n    largest_area = 2 * area\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Find the semi-perimeter of a triangle given its side length\n    def semi_perimeter(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    def largest_triangle_area(r):\n        phi = (1 + math.sqrt(5)) / 2\n        a = r * phi\n        b = r * (1 - phi)\n        return math.sqrt(semi_perimeter(a, b, r))\n\n    return largest_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the length of the semi-circle\n    s = r * 2\n    \n    # Calculate the area of the semi-circle\n    A = (2 * r)**2\n    \n    # Calculate the area of the triangle\n    area_of_triangle = ((s**2) - (A**2))**0.5\n    \n    return area_of_triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the diameter of the semicircle\n    d = 2 * r\n    \n    # Find the length of the longest side of a triangle\n    s = (3 * r) ** (1/2)\n    \n    # Calculate the area of the largest triangle\n    area = math.pi * (s * s)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-circle area\n    semicircle_area = (2 * r * r) / (3 * math.pi)\n\n    # Calculate the area of the three largest triangles\n    a = semicircle_area / 2\n    b = semicircle_area / 2\n    c = semicircle_area\n\n    # Find the area of the largest triangle\n    largest_area = max(a, b, c)\n\n    return largest_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a list of numbers and returns the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the array is sorted\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        raise ValueError(\"Array must be sorted in ascending order.\")\n\n    # Find the first missing number using binary search\n    if end is None:\n        end = max(array)\n    if start < min(array):\n        start = min(array)\n    first_missing = None\n    while start <= end:\n        mid = (start + end) // 2\n        if mid not in array and (first_missing is None or first_missing > mid):\n            first_missing = mid\n        elif mid in array:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index to start searching from. Default is 0.\n        end (int): The ending index to stop searching from. Default is None, which means to search till the end of the array.\n\n    Returns:\n        int: The smallest missing number from the given array.\n    \"\"\"\n\n    if not array:\n        raise ValueError(\"Array cannot be empty\")\n\n    if not all(isinstance(x, int) for x in array):\n        raise TypeError(\"Array must contain only integers\")\n\n    if start < 0:\n        raise ValueError(\"Start index cannot be negative\")\n\n    if end is not None and end > len(array):\n        raise ValueError(\"End index cannot be greater than array length\")\n\n    if end is None:\n        end = len(array) - 1\n\n    missing = start\n    for num in array:\n        if num!= missing:\n            missing += 1\n        else:\n            missing += 1\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)-1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if all(array[i] <= array[i+1] for i in range(len(array)-1)):\n        # Check if the array is empty or has only one element\n        if not array:\n            return 1\n        elif len(array) == 1:\n            return array[0]\n        else:\n            # Initialize the missing number variable\n            missing_num = start\n\n            # Iterate through the array to find the missing number\n            for num in array:\n                if num!= missing_num:\n                    missing_num = num\n                    break\n\n            # Check if the last element of the array is missing\n            if missing_num == len(array) and array[-1]!= missing_num:\n                missing_num = len(array) + 1\n\n            return missing_num\n    else:\n        # If the array is not sorted, return None\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            if mid == end:\n                return mid + 1\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is empty or has duplicate elements, it returns None.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n\n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst): \n    even_lst = []\n    for num in lst: \n        if num % 2 == 0: \n            even_lst.append(num) \n    return even_lst "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    # Loop through each element in the list \n    for i in list: \n        # Check if the element is even \n        if i % 2 == 0: \n            # If it is even, add it to a new list \n            new_list.append(i) \n\n    # Return the new list of even numbers \n    return new_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    # iterate through each coordinate in the tuple\n    for i in range(len(ele)):\n        # check for neighboring coordinates\n        if i-1 >= 0 and (ele[i-1][0] == ele[i][0] or ele[i-1][1] == ele[i][1]):\n            adj.append((ele[i][0]-1, ele[i][1]))\n        if i+1 < len(ele) and (ele[i+1][0] == ele[i][0] or ele[i+1][1] == ele[i][1]):\n            adj.append((ele[i][0]+1, ele[i][1]))\n        if i-len(sub)-1 >= 0 and (ele[i-len(sub)-1][0] == ele[i][0] or ele[i-len(sub)-1][1] == ele[i][1]):\n            adj.append((ele[i][0], ele[i][1]-1))\n        if i+len(sub)<len(ele) and (ele[i+len(sub)][0] == ele[i][0] or ele[i+len(sub)][1] == ele[i][1]):\n            adj.append((ele[i][0], ele[i][1]+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    else:\n        return [(sub[0][0]+1, sub[0][1]), (sub[0][0]-1, sub[0][1]), (sub[0][0], sub[0][1]+1), (sub[0][0], sub[0][1]-1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n\n    # add adjacent coordinates to sublist\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n\n    # remove duplicates\n    sub = list(set(sub))\n\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the x,y coordinates of the given element\n    x, y = ele\n\n    # Create a list of adjacent elements\n    adj = []\n\n    # Check for all adjacent x-coordinates\n    for i in range(x - 1, x + 2):\n        # Check for all adjacent y-coordinates\n        for j in range(y - 1, y + 2):\n            # Skip the current element and also if the adjacent element is already in the list\n            if (i, j)!= ele and (i, j) not in adj:\n                adj.append((i, j))\n\n    # Return the adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        sub.append((x+1, y))\n        sub.append((x-1, y))\n    elif x == n-1:\n        sub.append((x-1, y))\n        sub.append((x+1, y))\n    if y == 0:\n        sub.append((x, y+1))\n        sub.append((x, y-1))\n    elif y == m-1:\n        sub.append((x, y-1))\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    if ele[0] > 0:\n        sub[0] = (ele[0]-1, ele[1])\n    if ele[0] < 9:\n        sub[1] = (ele[0]+1, ele[1])\n    if ele[1] > 0:\n        sub[2] = (ele[0], ele[1]-1)\n    if ele[1] < 9:\n        sub[3] = (ele[0], ele[1]+1)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            if 0 <= x+i < len(sub) and 0 <= y+j < len(sub[0]):\n                sub[x+i][y+j] += 1\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates of that tuple.\n    The coordinates are provided as tuples in the form (row, col).\n    '''\n    # extract the row and column numbers from the tuple\n    row, col = ele\n    \n    # create a list to store the adjacent coordinates\n    adj = []\n    \n    # add the neighbors to the list\n    if col > 0 and row > 0:\n        adj.append((row-1, col-1))\n    if row > 0:\n        adj.append((row-1, col))\n    if col < len(sub)-1 and row > 0:\n        adj.append((row-1, col+1))\n    if col < len(sub)-1 and row < len(sub)-1:\n        adj.append((row+1, col+1))\n    if col > 0 and row < len(sub)-1:\n        adj.append((row+1, col-1))\n    if col > 0:\n        adj.append((row, col-1))\n    if col < len(sub)-1:\n        adj.append((row, col+1))\n    \n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    n_x, n_y = (x+1, y), (x-1, y), (x, y+1), (x, y-1)\n    if (x, y) in sub:\n        n_x, n_y = n_x if n_x not in sub else n_y, n_y if n_y not in sub else n_y\n        n_x, n_y = n_x if n_x not in sub else n_x, n_y if n_y not in sub else n_y\n    return [n_x, n_y] + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # remove whitespaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # swap underscores for spaces and vice versa\n    text = text.replace(\"_\", \" \").replace(\" \", \"_\")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    new_text = \"\"\n    for char in text:\n        if char == spaces:\n            new_text += underscore\n        elif char == underscore:\n            new_text += spaces\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Create a new string that replaces all spaces with underscores\n    new_text = text.replace(' ', '_')\n    # Create a new string that replaces all underscores with spaces\n    new_text2 = new_text.replace('_','')\n    # Return the two new strings\n    return new_text, new_text2"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\") #replace whitespaces with underscores\n    text = text.replace(\"_\", \" \") #replace underscores with whitespaces\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    \n    # Split the string into a list of words\n    words = text.split()\n    \n    # Loop through each word and replace spaces with underscores\n    for i in range(len(words)):\n        words[i] = words[i].replace(' ', '_')\n        \n    # Join the list of words into a string\n    result =''.join(words)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n\nprint(replace_spaces(\"Hello World\"))\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # iterate through the list\n    for i in range(len(num_list)):\n\n        # if the current element is zero, swap it with the last non-zero element\n        if num_list[i] == 0 and i!= len(num_list) - 1:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            zero_count += 1\n    return num_list, zero_count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # loop through the list\n    for i in range(len(num_list)):\n        # check if the current element is zero\n        if num_list[i] == 0:\n            # if it is, move it to the end of the list\n            for j in range(len(num_list)-1, i, -1):\n                num_list[j] = num_list[j-1]\n            # move the zero to the end of the list\n            num_list[i] = 0\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # Create a new list to store non-zero values\n    new_list = []\n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the new list\n        if num!= 0:\n            new_list.append(num)\n    # Loop through the new list again and insert 0s at the end\n    for i in range(len(new_list)):\n        if new_list[i] == 0:\n            new_list.insert(len(new_list)-i, 0)\n    # Return the modified list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    # Initialize two pointers, one for the first non-zero number and one for the last non-zero number\n    first_non_zero_index = 0\n    last_non_zero_index = 0\n\n    # Loop through the list\n    for i in range(len(num_list)):\n        # If the current number is not zero, swap it with the last non-zero number\n        if num_list[i]!= 0:\n            num_list[first_non_zero_index], num_list[i] = num_list[i], num_list[first_non_zero_index]\n            last_non_zero_index += 1\n\n    # Move all zeroes to the end of the list\n    for i in range(first_non_zero_index, last_non_zero_index):\n        num_list[last_non_zero_index], num_list[i] = num_list[i], num_list[last_non_zero_index]\n        last_non_zero_index -= 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    left = 0\n    right = len(num_list) - 1\n\n    # Swap the elements at the left and right pointers until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        if num_list[left]!= 0:\n            left += 1\n        elif num_list[right]!= 0:\n            right -= 1\n        else:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n            right -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    # initializing two pointers at the beginning and end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    while i < j:\n        # if the element at the current index i is not zero\n        if num_list[i]!= 0:\n            # moving the element at the current index i one index to the right\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # decrementing the index of the element at the current index j\n            j -= 1\n        else:\n            # incrementing the index of the element at the current index i\n            i += 1\n    \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR function to find the sum of xor of all pairs of numbers in the list\n    def xor(a, b):\n        return (a + b) ^ (a & b)\n    \n    # Calculating the xor of all pairs of numbers in the list\n    xor_sum = sum([xor(arr[i], arr[j]) for i in range(n) for j in range(i+1, n)])\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements of the array\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # XOR of all pairs of elements\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    # xor of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input.\n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return sum(arr)\n    elif n == 2:\n        return sum(x^y for x, y in zip(arr, arr[1:]))\n    else:\n        return pair_xor_Sum(arr, n-1) ^ (sum(arr[:i]) ^ sum(arr[i:]))"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers arr and its length n, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n        for j in range(i+1, n):\n            xor_sum ^= arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Calculate xor of all pairs of numbers in the given list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the xor_sum\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n\n    # build a min heap from the list\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        hq.heapify(arr, i, len(arr))\n\n    # extract the elements from the heap one by one and add to the output list\n    output = []\n    for _ in range(len(arr)):\n        output.append(hq.heappop(arr))\n\n    return output"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Build max heap\n    hq.heapify(iterable)\n    # Extract elements from max heap one by one and add them to a new list\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable = iterable[1:]\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    iterable = list(iterable)\n\n    # Build the heap\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        heapify(iterable, i, len(iterable))\n\n    # Extract elements from the heap and append to the sorted list\n    while len(iterable) > 1:\n        iterable.pop()\n        iterable.append(hq.heappop(iterable))\n\n    return iterable\n\n\ndef heapify(arr, n, size):\n    '''\n    Heapify the given array and its index.\n    '''\n    largest = n\n    left = 2 * n + 1\n    right = 2 * n + 2\n\n    if left < size and arr[left] > arr[largest]:\n        largest = left\n\n    if right < size and arr[right] > arr[largest]:\n        largest = right\n\n    if largest!= n:\n        arr[n], arr[largest] = arr[largest], arr[n]\n        heapify(arr, largest, size)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the given iterable to a list\n    data = list(iterable)\n    # Create a max-heap from the list\n    hq.heapify(data)\n    # Sort the list using heap sort\n    while len(data) > 1:\n        # Remove the maximum element from the list and append it to the end\n        hq.heappop(data)\n        # Remove the last element from the list and append it to the end\n        hq.heappop(data)\n    return data"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, n, i)\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(iterable, iterable[i])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build heap of smallest elements\n    hq.heapify(iterable)\n\n    # Extract an element from heap\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    # create a max heap from the given list\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # extract elements from the max heap and append to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    # Pop the largest element from the heap and append it to the result list\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    # Return the sorted result list\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): Actual cost of the sale\n    sale_amount (float): Amount to be sold\n    \n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    '''\n    \n    # Calculate the profit and loss\n    profit_loss = actual_cost - sale_amount\n    \n    # Check if profit is zero and loss is positive or negative\n    if profit_loss == 0:\n        return True\n    elif profit_loss > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profitable amount\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function checks whether the given amount has no profit and no loss. \n    If the sale amount is greater than or equal to the actual cost, then it has no profit and no loss. \n    Otherwise, it has no profit but could have a loss.\n    '''\n\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount: \n        print(\"Profitable\") \n    elif actual_cost == sale_amount: \n        print(\"Equal Profit\") \n    else: \n        print(\"Loss\") "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if actual cost is less than sale amount\n    if actual_cost < sale_amount:\n        return True\n\n    # If actual cost is equal to sale amount, check if sale amount is positive\n    elif actual_cost == sale_amount:\n        if sale_amount > 0:\n            return True\n        else:\n            return False\n\n    # If actual cost is greater than sale amount, no profit and no loss\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0: \n        print(\"The given amount has no profit and no loss.\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * v - 35.75 * math.log(t) + 0.4275 * math.pow(v, 0.16) - 0.5725 * math.pow(v, 0.16) * math.log(t)\n    \n    # Round wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the absolute temperature difference between the current temperature and the freezing point\n    celsius_to_kelvin = 273.15  # convert celsius to kelvin\n    kelvin_to_celsius = 1 / celsius_to_kelvin\n    kelvin = kelvin_to_celsius * t  # calculate the temperature in kelvin\n    freezing_point_celsius = 0  # calculate the freezing point in celsius\n    freezing_point_kelvin = kelvin_to_celsius * freezing_point_celsius\n    delta_celsius = kelvin_to_celsius * (v / 1000)  # calculate the difference in temperature\n    delta_kelvin = delta_celsius * kelvin_to_celsius  # convert the difference to kelvin\n    # Calculate the wind chill index using the formula\n    wind_chill_index = max(32, int(round((freezing_point_kelvin + delta_kelvin) / 2)))\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 1.3\n    c = 23.1\n\n    # convert temperature to fahrenheit\n    temp_f = (t * 9/5) + 32\n\n    # calculate wind chill\n    wc = (v * k) / (c * temp_f)\n\n    # round wind chill to the nearest integer\n    wc = round(wc)\n\n    # return wind chill rounded to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t <= 0:\n        raise ValueError(\"Temperature must be positive.\")\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be positive.\")\n\n    # Calculate the dew point temperature\n    dp = 1.8 * t / (237.3 + t)\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * dp) / (dp + 243.125))\n\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 15.0  # Constant of proportionality\n    r = 267.0  # Constant of proportionality\n    k = 0.6219  # Constant of proportionality\n    v_in_m_per_s = v * 1.60934  # Convert wind velocity from km/h to m/s\n    \n    # Calculate the wind chill index\n    wc = c * (t - 273.15) / (r * (v_in_m_per_s ** k) + t - 459.67)\n    \n    # Round the wind chill index to the nearest integer\n    wc_rounded = round(wc)\n    \n    return wc_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if v <= 0:\n        print(\"Invalid wind velocity! Please enter a positive number.\")\n        return\n\n    if t <= 0:\n        print(\"Invalid temperature! Please enter a positive number.\")\n        return\n\n    # Calculate the absolute temperature difference in Celsius\n    diff = math.fabs(t - 273.15)\n\n    # Calculate the speed difference in meters per second\n    speed_diff = math.fabs(v - 10)\n\n    # Calculate the heat capacity of air at constant pressure\n    cp = 1004.6\n\n    # Calculate the heat capacity ratio\n    cp_ratio = cp / 1005.0\n\n    # Calculate the humidity ratio\n    humidity_ratio = 0.62197183 / diff\n\n    # Calculate the dew point temperature\n    dew_point = (humidity_ratio * 243.12 + 17.625 * (diff / (1 + 0.0065 * humidity_ratio)) - 4.237) / (1 - 0.0065 * humidity_ratio)\n\n    # Calculate the heat flux at constant pressure\n    heat_flux = (speed_diff * dew_point * cp_ratio) / (2 * math.pi * math.pow(dew_point, 2))\n\n    # Calculate the air density at constant pressure\n    air_density = 1.225 * (dew_point + 273.15) / (273.15 + dew_point)\n\n    # Calculate the enthalpy at constant pressure\n    enthalpy = (speed_diff * air_density * cp_ratio) / (2 * math.pi * math.pow(dew_point, 2))\n\n    # Calculate the latent heat of vaporization of water\n    latent_heat = (0.4186 * diff * cp_ratio) / (math.pow(dew_point, 2) + 0.0065 * humidity_ratio * (diff / (1 + 0.0065 * humidity_ratio)))\n\n    # Calculate the sensible heat at constant pressure\n    sensible_heat = (enthalpy - latent_heat) / cp\n\n    # Calculate the specific heat at constant pressure\n    specific_heat = sensible_heat / dew_point\n\n    # Calculate the vapor pressure at constant pressure\n    vapor_pressure = 611.1 * math.exp(17.67 * (dew_point - 273.15) / (dew_point - 243.15))\n\n    # Calculate the specific humidity\n    specific_humidity = (vapor_pressure / 1000) * air_density\n\n    # Calculate the absolute humidity\n    absolute_humidity = (specific_humidity * diff) / (273.15 + diff)\n\n    # Calculate the temperature at the chilled surface\n    chilled_temperature = (dew_point * math.log((absolute_humidity + 611.1) / 611.1)) / ((17.67 * (dew_point - 273.15) / (dew_point - 243.15)) - 1)\n\n    # Calculate the wind chill index\n    wind_chill_index = 23.44 * math.sqrt(specific_humidity) / (math.log(t / chilled_temperature) + 6.112)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = int(wind_chill_index + 0.5)\n\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill temperature using the formula\n    wc = 23.45 * (math.log(v/10) + 11.3) + 0.6215 * t - 16.23\n    \n    # Round the wind chill temperature to the nearest integer\n    wc_int = int(round(wc))\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill temperature\n    wc = 13.12 + 0.6215 * v - 11.37 * math.log(k) + 0.3965 * v * math.log(k)\n    \n    # Convert the wind chill temperature to Celsius\n    wc_c = wc - 273.15\n    \n    # Round the wind chill temperature to the nearest integer\n    wc_rounded = math.ceil(wc_c)\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the dew point temperature\n    dp = (t - 273.15) * (1 - 0.0065 * math.exp(-(t - 273.15) / 10)) + 273.15\n\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.757 * dp + 0.4275 * t\n\n    # round the wind chill index to the nearest integer\n    wc_int = math.floor(wc + 0.5)\n\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the dew point temperature\n    dew_point = 10.0 * (t - 273.15) / (t + 273.15)\n\n    # Calculate the heat index using the dew point temperature\n    heat_index = 100.0 * (t - 273.15) / ((t - 273.15) * (1.0 - 0.0065 * math.pow((dew_point - 25.0), 2.0)))\n\n    # Calculate the wind chill index\n    if v < 10:\n        wind_chill_index = round(heat_index - 40.0)\n    elif v >= 10 and v < 15:\n        wind_chill_index = round(heat_index - 20.0)\n    elif v >= 15 and v < 20:\n        wind_chill_index = round(heat_index - 10.0)\n    elif v >= 20 and v < 25:\n        wind_chill_index = round(heat_index)\n    else:\n        wind_chill_index = round(heat_index + 10.0)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to keep track of the sum of the lengths of the names\n    length_sum = 0\n    # Iterate over each name in the list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If the first character is a lowercase letter, skip it and continue to the next name\n            continue\n        # Add the length of the name to the sum\n        length_sum += len(name)\n    # Return the sum of the lengths of the names after removing lowercase names\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if name starts with a lowercase letter\n            continue\n        total_length += len(name)  # add length of non-lowercase name to total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of names that start with a lowercase letter\n    start_with_lowercase = 0\n    \n    # Loop through the list of names and check if the name starts with a lowercase letter\n    for name in sample_names:\n        if name[0].islower():\n            start_with_lowercase += len(name)\n    \n    # Return the sum of lengths of names that start with a lowercase letter\n    return start_with_lowercase"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name.startswith(name[0].lower())]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Create a new list to store the names that start with a lowercase letter\n    start_lowercase = []\n    \n    # Loop through the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add it to the start_lowercase list\n            start_lowercase.append(name)\n    \n    # Calculate the sum of the lengths of the names in the start_lowercase list\n    total_length = sum(len(name) for name in start_lowercase)\n    \n    # Return the total length of the names in the start_lowercase list\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_list.append(name)\n    total_length = 0\n    for name in name_list:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Regular expression to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    # Split the string based on the pattern\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile('\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)') # match any parenthesis enclosed within ()\n    return pattern.sub('', items) # remove all the parenthesis"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)') # match all parenthesis\n    result = pattern.sub('', items) # remove all the parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string with parenthesis and removes them.\n    '''\n    # Remove all the parenthesis from the string using regular expression\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    matches = pattern.findall(items)\n    for match in matches:\n        items = items.replace(match, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    # Remove the whitespaces around the string\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    side = 1\n    for i in range(n):\n        nonagonal_num += side * (2*i - 1)\n        side += 1\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int): \n        return \"The input must be an integer.\"\n    \n    # Check if n is a positive integer\n    if n <= 0: \n        return \"The input must be a positive integer.\"\n    \n    # Initialize the counter and sum variables\n    count = 0\n    sum = 0\n    \n    # Loop from 1 to n/2\n    for i in range(1, n//2+1):\n        # Calculate the sum of the squares of the odd numbers from 1 to n/2\n        sum += i**2\n        \n        # Check if the sum is equal to n\n        if sum == n:\n            # If it is, return the value of the counter\n            return count\n    \n    # If the loop completes without finding the nth nonagonal number, return -1\n    return -1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += num\n        num += 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nth_nonagonal_helper(n, row, col, count):\n        if count == n:\n            return True\n        elif row == 1 or col == 1:\n            return False\n        elif row == col:\n            return nth_nonagonal_helper(n, row - 1, col, count + 1)\n        elif row > col:\n            return nth_nonagonal_helper(n, row, col - 1, count + 1)\n        elif row < col:\n            return nth_nonagonal_helper(n, row - 1, col, count + 1)\n\n    return nth_nonagonal_helper(n, 1, 1, 0)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variable to 0\n    nonagonal = 0\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is odd, add it to the nonagonal number\n        if i % 2 == 1:\n            nonagonal += i\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Calculate the number of rows and columns of the matrix\n    rows = int(n / 2)\n    cols = int(n / 2)\n\n    # Initialize the first row and column of the matrix\n    matrix = [[1]]\n\n    # Fill in the rest of the matrix\n    for i in range(1, rows):\n        matrix.append([1])\n        for j in range(1, cols):\n            matrix[i].append(matrix[i][j - 1] + matrix[i - 1][j])\n\n    # Get the nth nonagonal number\n    return matrix[rows - 1][cols - 1]\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables to store the sum and the current row number\n    row_sum = 1\n    row = 1\n    # Loop until we reach the nth row\n    while row <= n:\n        # Add the current row to the sum\n        row_sum += row\n        # Move to the next row\n        row += 1\n    # Return the sum of the nth row\n    return row_sum - (n + 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first two nonagonal numbers\n    a = 1\n    b = 1\n    # loop n-1 times to find the nth nonagonal number\n    for i in range(1, n-1):\n        # calculate the next nonagonal number\n        c = a + b\n        # update a and b for the next iteration\n        a = b\n        b = c\n    # return the nth nonagonal number\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)(?=[^z])\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Removing non-word characters\n    text = re.sub('[^a-zA-Z]+','', text)\n    \n    # Splitting the text into words\n    words = text.split()\n    \n    # Looping through each word and checking if it contains 'z' except at the start and end of the word\n    for i in range(len(words)):\n        if words[i][0] == 'z' or words[i][-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regex pattern for matching 'z' word at the middle of a word\n    pattern = r'\\b[aeiouAEIOU]+[zZ][aeiouAEIOU]+\\b'\n    # Use regex.search() function to search for pattern in the text\n    match = re.search(pattern, text)\n    # Return True if pattern is found in the text, else return False\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\w(?=z\\b)[a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![\\w])[zZ](?=[\\w]|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\b)z(?=\\b)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over each word and check if it contains 'z' except at the start and end\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            return True\n\n    # If no 'z' found, return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # take the length of the array\n    n = len(input)\n    # check if k is less than n/2, if so reverse the array upto k\n    if k < n/2:\n        # create two pointers, one starting from 0 and one starting from k\n        i = 0\n        j = k\n        # swap the elements at the two pointers\n        input[i], input[j] = input[j], input[i]\n        # increment the pointers\n        i += 1\n        j -= 1\n        # reverse the array from i to j\n        while i <= j:\n            # swap the elements at the pointers\n            input[i], input[j] = input[j], input[i]\n            # increment the pointers\n            i += 1\n            j -= 1\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    input = input[::-1][:k]\n    # reverse the array from k to the end\n    input[::-1] = input[k:][::-1]\n    # reverse the array from 0 to the end\n    input = input[::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k - 1, n - 1):\n        input[i], input[n - 1 - i] = input[n - 1 - i], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array up to a given position k.\n    \"\"\"\n    if k >= len(input):\n        return input\n    \n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Create a new array to store the reversed elements\n    reversed_array = []\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through the input array\n    for element in input:\n        # If the counter variable is less than k, add the element to the new array\n        if count < k:\n            reversed_array.append(element)\n        # If the counter variable is equal to k, add the element to the input array and break out of the loop\n        elif count == k:\n            input.append(element)\n            break\n        # Increment the counter variable\n        count += 1\n\n    # Reverse the new array\n    reversed_array.reverse()\n\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Split the array into two parts based on the given position\n    left_part = input[:k]\n    right_part = input[k:]\n\n    # Reverse the left part\n    left_part = left_part[::-1]\n\n    # Reverse the right part\n    right_part = right_part[::-1]\n\n    # Concatenate the left and right parts\n    output = left_part + right_part\n\n    # Return the reversed array\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from index 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Reverse the array from k to len(input)-1\n    for i in range(k, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Print the reversed array\n    print(\"Reversed array is: \", input)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key in test_dict:\n        test_tup += (test_dict[key],)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (value,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the first element of the tuple as the dictionary\n    new_tup = (test_dict, *test_tup)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that will contain the keys from the first dictionary and the values from the second dictionary\n    new_dict = test_dict.copy()\n    # Add the keys and values of the new dictionary to the first dictionary\n    new_dict.update(test_tup)\n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.items())\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    current_path = []\n\n    # Traverse the matrix\n    for i in range(n):\n        for j in range(n):\n            # Check if we can move down\n            if j+1 < n:\n                new_cost = cost[i][j] + cost[i][j+1]\n                if new_cost > max_avg:\n                    max_avg = new_cost\n                    current_path = [(i, j), (i, j+1)]\n            # Check if we can move right\n            if i+1 < n:\n                new_cost = cost[i][j] + cost[i+1][j]\n                if new_cost > max_avg:\n                    max_avg = new_cost\n                    current_path = [(i, j), (i+1, j)]\n\n    return max_avg, current_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    max_sum = float('-inf')\n    max_path = None\n    total_cost = 0\n    # Loop through all paths\n    for i in range(N):\n        for j in range(N):\n            # If current cell is the top-left cell, add its cost to the total cost and move to the next cell\n            if i == 0 and j == 0:\n                total_cost += cost[i][j]\n                continue\n            # Check if the current cell is the top-right cell\n            if i == 0 and j == N-1:\n                # Add the cost of the current cell and move to the next cell\n                total_cost += cost[i][j]\n                continue\n            # Check if the current cell is the bottom-left cell\n            if i == N-1 and j == 0:\n                # Add the cost of the current cell and move to the next cell\n                total_cost += cost[i][j]\n                continue\n            # Check if the current cell is the bottom-right cell\n            if i == N-1 and j == N-1:\n                # Add the cost of the current cell and move to the next cell\n                total_cost += cost[i][j]\n                continue\n            # Check if the current cell is adjacent to the top-left cell\n            if i > 0 and j == 0:\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n                # Move back to the top-left cell and remove the added cost\n                total_cost -= cost[i-1][j]\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n                # Move back to the top-left cell and remove the added cost\n                total_cost -= cost[i-1][j]\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n                # Move back to the top-left cell and remove the added cost\n                total_cost -= cost[i-1][j]\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n                # Move back to the top-left cell and remove the added cost\n                total_cost -= cost[i-1][j]\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n            # Check if the current cell is adjacent to the top-right cell\n            if i == 0 and j > 0:\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if the cost of the path is greater than the current maximum\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    max_path = [(i, j)]\n                # Move back to the top-right cell and remove the added cost\n                total_cost -= cost[i][j-1]\n                # Move to the next cell and add the cost of the current cell\n                total_cost += cost[i][j]\n                # Check if"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    # initialize a list of all paths\n    paths = []\n    for i in range(N):\n        paths.append([])\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths[i].append((0, 0, 0))\n            elif i == 0 and j < N-1:\n                paths[i].append((0, cost[i][j], 1))\n            elif i < N-1 and j == 0:\n                paths[i].append((0, cost[i][j], 1))\n            elif i < N-1 and j < N-1:\n                paths[i].append((cost[i][j] + paths[i-1][j+1][0], cost[i][j] + paths[i][j-1][0], 2))\n            elif i == N-1 and j < N-1:\n                paths[i].append((cost[i][j] + paths[i-1][j+1][0], cost[i][j], 1))\n            elif i < N-1 and j == N-1:\n                paths[i].append((cost[i][j] + paths[i][j-1][0], cost[i][j] + paths[i-1][j][0], 2))\n            else:\n                paths[i].append((cost[i][j] + paths[i-1][j+1][0] + paths[i][j-1][0] + paths[i-1][j][0], cost[i][j] + paths[i-1][j][0], 3))\n    \n    # find the maximum average for all paths\n    max_average = -1\n    for path in paths:\n        total_cost = 0\n        num_cells = 0\n        for i in range(len(path)):\n            total_cost += path[i][0]\n            num_cells += 1\n        average = total_cost / num_cells\n        if average > max_average:\n            max_average = average\n    \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the dimensions of the matrix\n    N = len(cost)\n    \n    # Initialize the maximum average\n    max_average = 0\n    \n    # Initialize the current row and column index\n    i = 0\n    j = 0\n    \n    # Initialize the total cost of the path\n    total_cost = 0\n    \n    # Initialize the visited cells in the path\n    visited = [(0,0)]\n    \n    # Iterate over all possible paths in the matrix\n    while i < N and j < N:\n        \n        # Move right\n        if j < N-1:\n            j += 1\n            total_cost += cost[i][j]\n            visited.append((i,j))\n        # Move down\n        else:\n            i += 1\n            j = 0\n            total_cost += cost[i][j]\n            visited.append((i,j))\n            \n        # Calculate the average of the current path\n        if j > 0:\n            avg_cost = total_cost/(j+1)\n        else:\n            avg_cost = 0\n            \n        # Update the maximum average if the current path has a higher average\n        if avg_cost > max_average:\n            max_average = avg_cost\n            \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def is_valid_path(start_row, start_col, end_row, end_col):\n        if 0 <= start_row < len(cost) and 0 <= start_col < len(cost[0]):\n            return True\n        elif 0 <= end_row < len(cost) and 0 <= end_col < len(cost[0]):\n            return True\n        else:\n            return False\n\n    def dfs(start_row, start_col, end_row, end_col, current_path_cost, current_path_length):\n        if start_row == end_row and start_col == end_col:\n            global max_average\n            max_average = max(max_average, current_path_cost / current_path_length)\n            return\n\n        # Check all possible directions\n        if start_row < end_row:\n            row_direction = 1\n        elif start_row > end_row:\n            row_direction = -1\n        else:\n            row_direction = 0\n\n        if start_col < end_col:\n            col_direction = 1\n        elif start_col > end_col:\n            col_direction = -1\n        else:\n            col_direction = 0\n\n        for i in range(1, abs(end_row - start_row) + 1):\n            new_row = start_row + i * row_direction\n            new_col = start_col + i * col_direction\n\n            if is_valid_path(new_row, new_col, end_row, end_col):\n                dfs(new_row, new_col, end_row, end_col, current_path_cost + cost[new_row][new_col], current_path_length + 1)\n\n    max_average = float('-inf')\n    dfs(0, 0, len(cost) - 1, len(cost[0]) - 1, 0, 0)\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    max_avg = 0\n\n    for i in range(N):\n        # traverse downwards from i\n        path_avg = 0\n        path_cost = 0\n        for j in range(i+1, N):\n            path_cost += cost[j][i]\n            path_avg += path_cost\n        max_avg = max(max_avg, path_avg/i)\n\n    for j in range(N):\n        # traverse rightwards from j\n        path_avg = 0\n        path_cost = 0\n        for i in range(j+1, N):\n            path_cost += cost[i][j]\n            path_avg += path_cost\n        max_avg = max(max_avg, path_avg/j)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    start = (0, 0)\n    visited = {start}\n    queue = [(0, 0)]\n    cost_sum = 0\n    total_cost = 0\n    \n    # Calculate initial cost sum and total cost\n    for i in range(n):\n        cost_sum += cost[0][i]\n        total_cost += cost[0][i]\n    cost_sum += cost[n-1][n-1]\n    total_cost += cost[n-1][n-1]\n    \n    # Breadth-first search to find maximum average\n    while queue:\n        curr_cost = queue.pop(0)\n        curr_cell = queue.pop(0)\n        \n        # If current cell is bottom right cell, check if its average is greater than max_avg\n        if curr_cell == (n-1, n-1):\n            if curr_cost / n > max_avg:\n                max_avg = curr_cost / n\n        \n        # Add current cell to visited set\n        visited.add(curr_cell)\n        \n        # Move up if cost is less than or equal to current cost sum\n        if curr_cell[1] > 0 and cost[curr_cell[0]][curr_cell[1]-1] <= curr_cost:\n            queue.append((curr_cost + cost[curr_cell[0]][curr_cell[1]-1], (curr_cell[0], curr_cell[1]-1)))\n            cost_sum -= cost[curr_cell[0]][curr_cell[1]]\n            total_cost -= cost[curr_cell[0]][curr_cell[1]]\n        # Move down if cost is less than or equal to current cost sum\n        if curr_cell[0] < n-1 and cost[curr_cell[0]+1][curr_cell[1]] <= curr_cost:\n            queue.append((curr_cost + cost[curr_cell[0]+1][curr_cell[1]], (curr_cell[0]+1, curr_cell[1])))\n            cost_sum -= cost[curr_cell[0]][curr_cell[1]]\n            total_cost -= cost[curr_cell[0]][curr_cell[1]]\n        # Move right if cost is less than or equal to current cost sum\n        if curr_cell[1] < n-1 and cost[curr_cell[0]][curr_cell[1]+1] <= curr_cost:\n            queue.append((curr_cost + cost[curr_cell[0]][curr_cell[1]+1], (curr_cell[0], curr_cell[1]+1)))\n            cost_sum -= cost[curr_cell[0]][curr_cell[1]]\n            total_cost -= cost[curr_cell[0]][curr_cell[1]]\n    \n    # Return maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, path_cost, visited):\n        if i == N - 1 and j == N - 1:\n            if path_cost > max_path_cost:\n                max_path_cost = path_cost\n                max_path = path[:]\n            return\n        \n        visited.add((i, j))\n        \n        if i < N - 1:\n            if (i + 1, j) not in visited:\n                dfs(i + 1, j, path_cost + cost[i + 1][j], visited)\n        if j < N - 1:\n            if (i, j + 1) not in visited:\n                dfs(i, j + 1, path_cost + cost[i][j + 1], visited)\n        \n        visited.remove((i, j))\n    \n    N = len(cost)\n    max_path = []\n    max_path_cost = float('-inf')\n    \n    for i in range(N):\n        for j in range(N):\n            path = [(i, j)]\n            visited = {(i, j)}\n            dfs(i, j, cost[i][j], visited)\n            if len(path) > len(max_path):\n                max_path = path\n                max_path_cost = path_cost\n    \n    return max_path_cost, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            if i == j:\n                dp[i][j] = cost[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[float('-inf') for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        max_avg = max(max_avg, dp[i][0])\n\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        max_avg = max(max_avg, dp[0][j])\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    \n    # loop through all the students in the dictionary\n    for name, data in students.items():\n        # extract the height and weight of the student\n        height, weight = data\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered list\n            filtered_students.append(name)\n    \n    # return the filtered list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n\n    # Create a dictionary to store the values of the first list\n    values_dict = {}\n\n    # Iterate through the first list and add each value to the dictionary\n    for i, num in enumerate(nums1):\n        values_dict[num] = i\n\n    # Create a variable to store the count of the number of pairs\n    count = 0\n\n    # Iterate through the second list and compare each value to the dictionary\n    for i, num in enumerate(nums2):\n        if eq(num, nums1[values_dict[num]]):\n            # If the values match, increment the count\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create an empty dictionary to store the indices of the same values\n    same_indices = {}\n    \n    # Loop through the first list and check if the values are present in the second list\n    for i, num1 in enumerate(nums1):\n        if num1 in nums2:\n            # Check if the values are the same using the eq() function from the operator module\n            if nums2.index(num1) == i:\n                # If the values are the same and the indices are the same, add the index to the dictionary\n                same_indices[i] = nums2.index(num1)\n    \n    # Return the number of indices that have the same values\n    return len(same_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the count of each value in the first list\n    freq_dict = {}\n    for num in nums1:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Use the dictionary to count the frequency of each value in the second list\n    count = 0\n    for num in nums2:\n        if eq(num, nums1[0]):\n            count += 1\n    \n    # Return the count of indices where the two lists have the same values\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string to simplify the summation\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Iterate over the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum variable\n        sum_digits += int(digit)\n    # Calculate the sum of the digits to the specified power\n    result = sum_digits ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Calculate the sum of digits raised to the power\n    result = sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert base to a string and get its length\n    base_str = str(base)\n    base_len = len(base_str)\n\n    # Initialize sum variable to 0\n    sum_var = 0\n\n    # Loop through each digit in the base\n    for i in range(base_len):\n        # Get the current digit\n        digit = int(base_str[i])\n\n        # Multiply the current digit by the power\n        digit_mult = digit * power\n\n        # Calculate the sum of all digits raised to the power\n        digit_sum = sum([digit_mult ** j for j in range(1, digit_mult + 1)])\n\n        # Add the digit sum to the sum variable\n        sum_var += digit_sum\n\n    # Return the sum variable\n    return sum_var"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    total_sum = 0\n    for digit in base_str:\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += sum(int(digit) for digit in str(base))\n        base *= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string and split it into a list of digits\n    base_str = str(base)\n    digits = [int(digit) for digit in base_str]\n\n    # Calculate the sum of all digits raised to the power of the specified power\n    result = 0\n    for digit in digits:\n        result += digit ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert base to a string\n    base_str = str(base)\n\n    # Initialize the sum variable to 0\n    sum_digits = 0\n\n    # Iterate through each digit in the string\n    for digit in base_str:\n        # Add the integer value of the digit to the sum variable\n        sum_digits += int(digit)\n\n    # Calculate the result by raising the sum variable to the specified power\n    result = sum_digits ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?<=\\s)\\w+)*(?:\\s+(?=\\w+))(?=\\s*[\",.!?])'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" using regular expressions.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.findall() method to extract all occurrences of the pattern in the input string\n    values = re.findall(pattern, text1)\n    # Remove any double quotation marks and return the list of values\n    return [value.replace('\"', '') for value in values]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<=\\\").*?(?=\\\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to find all the occurrences of quotation marks\n    matches = re.findall('\"[^\"]*\"', text1)\n    \n    # Iterate through the matches and extract the values\n    extracted_values = []\n    for match in matches:\n        start = match.find('\"')\n        end = match.rfind('\"')\n        extracted_values.append(match[start+1:end])\n    \n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks \" \" in the string.\n    '''\n    # regular expression pattern to match the text between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # use the re.findall() function to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4], test_tup[4] * test_tup[5], test_tup[5] * test_tup[6], test_tup[6] * test_tup[7], test_tup[7] * test_tup[8], test_tup[8] * test_tup[9], test_tup[9] * test_tup[10], test_tup[10] * test_tup[11], test_tup[11] * test_tup[12], test_tup[12] * test_tup[13], test_tup[13] * test_tup[14], test_tup[14] * test_tup[15], test_tup[15] * test_tup[16], test_tup[16] * test_tup[17], test_tup[17] * test_tup[18], test_tup[18] * test_tup[19], test_tup[19] * test_tup[20])\n    return result_tup[:N]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[0] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Concatenate the two lists and store the result in a new list\n    result = lst1 + lst2\n    # Return the result\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if the lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The lists must have the same length\")\n    # create an empty list to store the result\n    result = []\n    # loop over the elements of the lists\n    for i in range(len(lst1)):\n        # add the corresponding elements and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(enumerate(nums))\n    return [x for _, x in groups if not x[-1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the elements of the list based on their indices\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n\n    # Convert the grouped list to a list of lists\n    consecutive_nums = [list(group) for _, group in grouped_nums]\n\n    # Flatten the list of lists to a single list\n    consecutive_nums_flat = [num for sublist in consecutive_nums for num in sublist]\n\n    # Remove duplicates from the flattened list\n    consecutive_nums_flat = list(set(consecutive_nums_flat))\n\n    return consecutive_nums_flat"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a dictionary where the keys are the numbers and the values are the lists of consecutive duplicates\n    consecutive_dict = {}\n    for i, num in enumerate(nums):\n        if i == 0:\n            consecutive_dict[num] = [num]\n        elif nums[i] == nums[i-1]:\n            consecutive_dict[nums[i]].append(nums[i])\n        else:\n            if nums[i] not in consecutive_dict.keys():\n                consecutive_dict[nums[i]] = [nums[i]]\n    # Create a list of numbers without consecutive duplicates\n    nums_without_consecutive = []\n    for num in nums:\n        if num not in consecutive_dict.keys():\n            nums_without_consecutive.append(num)\n    return nums_without_consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group_nums = lambda x: list(x)\n    return list(groupby(sorted(nums), group_nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for num, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(sorted(nums))\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            return True\n    return False"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    surface_area = 2 * math.pi * r * (h+r)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculating the base area\n    base_area = math.pi * r**2\n    \n    # calculating the lateral surface area using the formula\n    lateral_area = 2 * (h / 2) * base_area\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two parameters, r (radius) and h (height), and returns the lateral surface area of a cone.\n    '''\n    # Calculate the surface area of the base using the formula:\n    # A = 1/2 * r^2 * h\n    base_surface_area = 0.5 * r**2 * h\n    # Calculate the surface area of the cone using the formula:\n    # A = pi * r^2 * h\n    cone_surface_area = math.pi * r**2 * h\n    # Return the sum of the base surface area and cone surface area\n    return base_surface_area + cone_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * r * h + 2 * r * math.sin(math.pi/3) * (h**2) + 2 * r * math.sin(math.pi/3) * (h**2) - 2 * math.pi * r * (math.sin(math.pi/3)**2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Compute the surface area using the formula S = 2\u03c0r^2\n    surface_area = 2 * math.pi * r ** 2\n    # Compute the lateral surface area using the formula L = 2rh\n    lateral_area = 2 * r * h\n    return surface_area, lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    surface_area = (math.pi * r ** 2) + ((math.pi * r) ** 2)\n    lateral_area = (math.pi * r * h) + ((math.pi * r) * h)\n    total_area = surface_area + lateral_area\n    return total_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # find the lateral surface area using the formula LSA = pi * r^2 * h\n    LSA = math.pi * r**2 * h\n\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    return math.pi * (r**2) + 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expression to replace spaces and commas with colons\n    text = re.sub(r'\\s*,\\s*', ':', text)\n    # Use regular expression to replace dots with colons\n    text = re.sub(r'\\s*\\.+\\s*', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match spaces, commas, or dots\n    pattern = r'[., ]'\n    # Use the replace() method to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for special characters\n    pattern = re.compile(r'[\\s,\\.]')\n    # Replace special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s*,\\s*|\\.\\s*'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[\\s,\\.]'\n    colon_replacement = ':'\n    return re.sub(special_chars, colon_replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern\n    pattern = re.compile(r'[,\\. ]')\n    # Replace all occurrences of pattern in text with colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[., ]'\n    return re.sub(special_chars, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,\\.]')\n    return special_chars.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Regular expression pattern to match any special character\n    pattern = r'[^a-zA-Z0-9\\s]'\n    # Replace all occurrences of special characters with colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[,\\.]', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to the first element of the array\n    i = 0\n    # Initialize the flag variable to False\n    flag = False\n    # Loop through the array\n    while i < len(A) and not flag:\n        # If the current element is equal to the given number, return its index\n        if A[i] == x:\n            flag = True\n            return i\n        # If the current element is greater than the given number, increment the index\n        elif A[i] > x:\n            i += 1\n        # If the current element is less than the given number and has not been found yet, increment the index\n        else:\n            i += 1\n    # If the number was not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize index variable to -1\n    index = -1\n\n    # Loop through the array\n    for i in range(len(A)):\n        # Check if the current element is equal to the given number\n        if A[i] == x:\n            # If it is, set the index variable to the current index\n            index = i\n            # Exit the loop since we found the first occurrence\n            break\n\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers of the search range\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the first occurrence index as -1\n    first_occurrence_index = -1\n\n    # Perform a binary search to find the first occurrence\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # If the current element matches the given number, update the first occurrence index\n            first_occurrence_index = mid\n            # If the current element is greater than the given number, search in the left half of the array\n            if A[mid - 1] < x:\n                left = mid + 1\n            # If the current element is less than the given number, search in the right half of the array\n            else:\n                right = mid - 1\n        # If the current element is less than the given number, search in the left half of the array\n        else:\n            left = mid + 1\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if result == -1:\n                result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # initialize the index of the first occurrence to -1\n    first_occurrence = -1\n\n    # iterate through the array\n    for i in range(len(A)):\n        # if the current element is equal to the searched element, update the index of the first occurrence\n        if A[i] == x:\n            first_occurrence = i\n            break\n\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    if A == []:\n        return -1\n    elif A[0] == x:\n        return 0\n    elif A[-1] == x:\n        return len(A) - 1\n    else:\n        left = 0\n        right = len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                if mid == 0 or A[mid-1]!= x:\n                    return mid\n                else:\n                    right = mid - 1\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Finding the cumulative sum of array elements\n    cum_sum = [0] * (n + 1)\n    cum_sum[0] = 0\n    for i in range(1, n + 1):\n        cum_sum[i] = cum_sum[i - 1] + arr[i - 1]\n\n    # Finding the maximum sum ending at index i in O(n) time\n    max_sum = [0] * n\n    max_sum[0] = arr[0]\n    for i in range(1, n):\n        max_sum[i] = max(max_sum[i - 1] + arr[i], max_sum[i])\n\n    # Finding the sum of products of all possible sublists of a given list\n    sum_prod = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if j + 1 == n:\n                break\n            else:\n                sub_array = cum_sum[j + 1] - cum_sum[i]\n                sub_array_sum = max_sum[j] - max_sum[i - 1]\n                prod = sub_array * sub_array_sum\n                sum_prod += prod\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_sum = [0] * n\n    for i in range(n):\n        subarray_sum[i] = sum(arr[:i+1])\n    product_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product_sum += subarray_sum[j]*(subarray_sum[i]-subarray_sum[j])\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1]*(n+1)\n    for i in range(1,n+1):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i-1]\n    \n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize variables to store sum of products and result\n    sum_products = 0\n    result = 0\n\n    # Iterate over all possible sublists of length i\n    for i in range(1, n+1):\n        # Initialize variables to store current sublist sum and product\n        current_sum = 0\n        current_product = 1\n\n        # Iterate over current sublist\n        for j in range(n-i+1):\n            # Add the element at index j to current sum\n            current_sum += arr[j]\n\n            # Multiply the element at index j with current product\n            current_product *= arr[j]\n\n        # Add the current sublist sum to sum_products\n        sum_products += current_sum\n\n        # Add the current sublist product to result\n        result += current_product\n\n    # Return the result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # initialize the sum of products and the result\n    sum_prod = 0\n    result = []\n    \n    # loop through each element of the array\n    for i in range(len(arr)):\n        # initialize the product and the current sum\n        product = 1\n        current_sum = arr[i]\n        \n        # loop through each element of the array to find the sum of products of subarrays\n        for j in range(i+1, len(arr)+1):\n            # calculate the sum of products of the current subarray\n            subarray_prod = product * arr[j-1]\n            # update the sum of products and the current sum\n            product *= arr[j-1]\n            current_sum += arr[j-1]\n            # append the sum of products to the result list\n            result.append(subarray_prod)\n            \n        # add the current sum of products to the sum of products\n        sum_prod += current_sum\n            \n    # return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # initialize variables\n    sum_prod = 0\n    product = 1\n    left = 0\n    \n    # loop through the list\n    for right in range(len(arr)):\n        \n        # calculate the current product\n        product *= arr[right]\n        \n        # if the current product is greater than 1, update the sum_prod\n        if product > 1:\n            sum_prod += product\n        \n        # move the left pointer to the right\n        left = right\n        \n    # return the sum_prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod_arr = [1] * n\n    sum_arr = [0] * n\n    max_prod = float('-inf')\n    max_sum = 0\n    \n    for i in range(n):\n        prod_arr[i] *= arr[i]\n        if i > 0:\n            prod_arr[i] *= prod_arr[i-1]\n        if i > 1:\n            prod_arr[i] *= prod_arr[i-2]\n        sum_arr[i] = i * prod_arr[i]\n        if i > 0:\n            sum_arr[i] += sum_arr[i-1]\n            \n        if prod_arr[i] > max_prod:\n            max_prod = prod_arr[i]\n            max_sum = sum_arr[i]\n            \n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the result\n    result = 0\n    # Calculate the sum of all elements in the array\n    arr_sum = sum(arr)\n    # Generate the sum of all subarrays of length i\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    # Calculate the sum of products of subarrays of length i\n    prod_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sum[j] = prod_sum[j] + arr[i - 1] * prefix_sum[j]\n    # Calculate the sum of products of all subarrays\n    prod_arr_sum = 0\n    for i in range(1, n + 1):\n        prod_arr_sum = prod_arr_sum + prod_sum[i]\n    # Calculate the sum of products of all subarrays of length i\n    prod_sub_arr_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum[j] = prod_sub_arr_sum[j] + arr[i - 1] * prod_sum[j]\n    # Calculate the sum of products of all subarrays of length i - 1\n    prod_sub_arr_sum_1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum_1[j] = prod_sub_arr_sum_1[j] + arr[i - 1] * prod_sub_arr_sum[j]\n    # Calculate the sum of products of all subarrays of length i - 2\n    prod_sub_arr_sum_2 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum_2[j] = prod_sub_arr_sum_2[j] + arr[i - 1] * prod_sub_arr_sum_1[j]\n    # Calculate the sum of products of all subarrays of length i - 3\n    prod_sub_arr_sum_3 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum_3[j] = prod_sub_arr_sum_3[j] + arr[i - 1] * prod_sub_arr_sum_2[j]\n    # Calculate the sum of products of all subarrays of length i - 4\n    prod_sub_arr_sum_4 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum_4[j] = prod_sub_arr_sum_4[j] + arr[i - 1] * prod_sub_arr_sum_3[j]\n    # Calculate the sum of products of all subarrays of length i - 5\n    prod_sub_arr_sum_5 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod_sub_arr_sum_5[j] = prod_sub_arr_sum_5[j] + arr[i - 1] * prod_sub_arr_sum_4[j]\n    # Calculate the sum of products of all subarrays of length i - 6\n    prod_sub_arr_sum_6 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the sum and product variables to 0\n    sum_p = 0\n    prod_arr = [1] * len(arr)\n\n    # Calculate the product of all elements in the list\n    prod_list = 1\n    for i in range(len(arr)):\n        prod_list *= arr[i]\n\n    # Calculate the product of all elements in the sublist up to the current index\n    for i in range(len(arr)):\n        prod_arr[i] *= prod_list\n        sum_p += prod_arr[i]\n\n    # Return the sum of products\n    return sum_p"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i-1] * arr[j]\n\n    return dp[-1]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (31 - 1))\n    # Initialize the second and third bits of the number\n    second_bit = n & (1 << 1)\n    third_bit = n & (1 << 2)\n    # Toggle the second and third bits of the number\n    n = n ^ second_bit ^ third_bit\n    # Toggle the first and last bits of the number\n    n = n ^ first_bit ^ last_bit\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Toggle bits except first and last bits\n    toggle_bits = [(1 << i) & ~(1 << j) for i in range(1, num_bits - 1) for j in range(1, num_bits - 1)]\n\n    # Toggle all the bits except the first and the last\n    for bit in toggle_bits:\n        n ^= bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n & (1 << (n.bit_length() - 1))) >> (n.bit_length() - 1)\n\n    # toggle the middle bits of the number\n    for i in range(n.bit_length() - 3):\n        n ^= (1 << (i+1))\n\n    # shift the first and last bits to the beginning of the number\n    n <<= 1\n    n |= first_bit\n    n |= last_bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize the mask for toggle bits\n    mask = 0b0011111111111111111111111111111111111111111111111111111111111111\n    \n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (8 * len(bin(n)[2:]) - 1))\n    \n    # Toggle the middle bits of the number\n    middle_bits = n ^ (mask & ((1 - first_bit) ^ (1 - last_bit)))\n    \n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Extract the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    \n    # Create a new number by swapping the first and last bits\n    new_n = (n ^ (first_bit ^ last_bit))\n    \n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    bits = len(bin(n)[2:])\n    # set the middle bits to 0\n    for i in range(bits//2):\n        # set the bit to 0\n        n = n & ~(1 << i)\n    # set the first and last bits to 1\n    n = n & ~(1 << (bits-1)) & ~(1 << (bits-2))\n    # set the middle bits to 1\n    for i in range(bits//2):\n        # set the bit to 1\n        n = n | (1 << (i+1))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    first_bit_pos = 0\n    last_bit_pos = 31\n    # Iterate through each bit in the number\n    for i in range(32):\n        # If the current bit is not the first or last bit, toggle it\n        if i!= first_bit_pos and i!= last_bit_pos:\n            # If the current bit is 0, set it to 1\n            if n & (1 << i):\n                n |= (1 << i)\n            # If the current bit is 1, set it to 0\n            else:\n                n &= ~(1 << i)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n >> 31\n    toggled_bits = first_bit ^ last_bit\n    return n ^ toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((n >> 1) & 0x55555555)\n    n = n ^ ((n << 1) & 0x33333333)\n    n = n ^ ((n >> 2) & 0x0F0F0F0F)\n    n = n ^ ((n << 2) & 0x03030303)\n    n = n ^ ((n >> 4) & 0x00FF00FF)\n    n = n ^ ((n << 4) & 0x0000FFFF)\n    n = n ^ (n >> 8)\n    n = n ^ (n << 8)\n    n = n ^ (n >> 16)\n    n = n ^ (n << 16)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Toggle bits except the first and last bit\n    n = n ^ ((n & 1) << 1) ^ ((n & 2) >> 1)\n    # Set the middle bit to 1\n    n = n ^ ((n & 1) << 1)\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect.bisect_left function returns the index of the leftmost element that is greater than or equal to x.\n    index = bisect.bisect_left(a, x)\n    # If x is already present in the list, index will be the index of its leftmost occurrence.\n    # To find the leftmost insertion point, we need to find the first occurrence of x that is greater than or equal to the leftmost element.\n    if index < len(a) and a[index] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i!= 0 and a[i-1]!= x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = bisect.bisect_right(a, x) - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    # Using regex to check if the string is starting with a vowel\n    if re.match(r'^[aeiouAEIOU][A-Za-z0-9_]*', string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Parameters:\n    n (int): the value of n\n\n    Returns:\n    int: the sum of the first n-1 terms of the geometric series\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Calculate the geometric sum of n-1 using recursion.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/(1-1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    count = 1\n    curr = 0\n    prev = 0\n    triangular_numbers = [0]\n\n    # Iterate till n digits is reached\n    while count <= n:\n\n        # Calculate the next triangular number\n        curr = (count * (count + 1)) // 2\n\n        # If the current triangular number is smaller than the smallest triangular number, then add it to the list\n        if curr < prev:\n            triangular_numbers.append(curr)\n\n        # Update the prev variable\n        prev = curr\n\n        # Increment the count variable\n        count += 1\n\n    # Return the index of the smallest triangular number\n    return triangular_numbers.index(min(triangular_numbers))\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    def is_triangular(n):\n        \"\"\"\n        Helper function to check if a number is triangular or not.\n        \"\"\"\n        triangular_number = int((n * (n + 1)) / 2)\n        return triangular_number == n\n\n    def count_digits(num):\n        \"\"\"\n        Helper function to count the number of digits in a number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def find_smallest_triangular_number(n):\n        \"\"\"\n        Helper function to find the smallest triangular number with n digits.\n        \"\"\"\n        num = 1\n        while True:\n            if count_digits(num) == n:\n                return num\n            num += 1\n\n    # find the smallest triangular number with n digits\n    smallest_triangular_number = find_smallest_triangular_number(n)\n\n    # iterate through all the triangular numbers and check if they are equal to the smallest triangular number\n    triangular_numbers = set()\n    current_triangular_number = smallest_triangular_number\n    while True:\n        if current_triangular_number == 1:\n            return None\n        triangular_numbers.add(current_triangular_number)\n        current_triangular_number -= 1\n\n    # find the index of the smallest triangular number\n    index = 0\n    for i in range(1, len(triangular_numbers) + 1):\n        if triangular_numbers.pop() == smallest_triangular_number:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        # Finding the largest triangular number with n digits.\n        largest_triangular = int(math.ceil(math.log(math.pow(10, n), 3)))\n\n        # Initializing the count of smallest triangular numbers.\n        count = 0\n        # Initializing the index of smallest triangular numbers.\n        index = 0\n\n        # Looping through all the triangular numbers.\n        for i in range(1, largest_triangular + 1):\n            triangular = int(math.pow(10, n) * i)\n\n            # Counting the smallest triangular numbers.\n            if triangular < int(math.pow(10, n - 1) * index):\n                count += 1\n\n            # Updating the index of smallest triangular numbers.\n            if triangular == int(math.pow(10, n - 1) * index):\n                index = count\n\n        return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True \n\n    def triangular_number(n): \n        '''\n        Function to generate the n-th triangular number.\n        '''\n        return n * (n + 1) // 2 \n\n    def smallest_triangular_number(n): \n        '''\n        Function to generate the smallest triangular number with n digits.\n        '''\n        smallest_number = 9 * 10 ** (n - 1) \n        while True: \n            if is_prime(smallest_number): \n                return smallest_number \n            smallest_number += 1 \n\n    def next_smaller_triangular_number(n, index): \n        '''\n        Function to find the next smaller triangular number after the index.\n        '''\n        return triangular_number(n) - (triangular_number(n) - smallest_triangular_number(n)) \n\n    return next_smaller_triangular_number(n, smallest_triangular_number(n) // 10 ** (n - 1)) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    tri_num = 0\n    i = 1\n    while True:\n        tri_num = i * (i + 1) // 2\n        num_digits = len(str(tri_num))\n        if num_digits == n:\n            break\n        i += 1\n    \n    return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_nums = []\n    triangular_nums.append(1)\n    for i in range(1, n):\n        triangular_nums.append(triangular_nums[-1] + triangular_nums[-2])\n\n    return triangular_nums.index(min(triangular_nums))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the variables\n    count = 1\n    triangular = 1\n    smallest_triangular = triangular\n\n    # Check the triangular numbers with n digits\n    while len(str(triangular)) < n:\n        triangular = int(triangular * 10 + 1)\n        count += 1\n        smallest_triangular = min(smallest_triangular, triangular)\n\n    # Return the index of the smallest triangular number with n digits\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initializing the variables\n    triangular = 0\n    index = 0\n\n    # Looping till n digits\n    while n > 0:\n\n        # Adding a digit to triangular number\n        triangular = triangular * 10 + 1\n\n        # Incrementing index by 1\n        index += 1\n\n        # Subtracting one from triangular number\n        triangular = triangular - 1\n\n        # Decrementing n by 1\n        n -= 1\n\n    # Returning the index of smallest triangular number with n digits\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Base case: smallest triangular number with 1 digit is 10\n    if n == 2:\n        return 10\n\n    # Initialize variables for calculating triangular number and index of triangular number\n    triangular_number = 10\n    index = n\n\n    # Calculate the number of digits in the triangular number\n    while triangular_number >= 10:\n        triangular_number /= 10\n        index += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Base case: If n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    num = 0\n    index = 0\n    \n    # Loop till n digits are added to num\n    while n > 0:\n        \n        # Append the next digit to num and increment the index\n        num = num * 10 + 1\n        index += 1\n        \n        # Decrement n\n        n -= 1\n    \n    # Return the index\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a dictionary\n    # Use zip to iterate over adjacent pairs\n    # Use dict() to convert the zipped pairs to a dictionary\n    return dict(zip(*test_tup))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    i = 0\n    while i < len(test_tup):\n        test_dict[i] = test_tup[i]\n        i += 2\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 0:\n        d = {}\n        for i in range(0, len(test_tup), 2):\n            d[test_tup[i]] = test_tup[i+1]\n        return d\n    else:\n        print(\"The length of the tuple must be even.\")"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Length of the tuple should be even.\")\n        return None\n    else:\n        dict_tup = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_tup[key] = value\n        return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        print(\"Invalid input. Please provide a tuple with an even number of elements.\")\n        return None\n    else:\n        result = {}\n        for i in range(0, len(test_tup), 2):\n            result[test_tup[i]] = test_tup[i+1]\n        return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n\n    # iterate over the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    # return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Define an empty dictionary to store the key-value pairs\n    result_dict = {}\n\n    # Iterate through the elements of the tuple\n    for i in range(len(test_tup)):\n        # If the current element is an odd integer, add it as a key to the result dictionary with the value of the next element\n        if i % 2 == 1:\n            result_dict[test_tup[i]] = test_tup[i + 1]\n\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize the first character of the string as the first character of the result\n    result = s[0]\n    # loop through the rest of the characters of the string\n    for char in s[1:]:\n        # if the current character is not equal to the result, return False\n        if char!= result:\n            return False\n        # otherwise, update the result to the current character\n        result = char\n    # if all the characters have been checked, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    list_s = list(s)\n    # Check if all the elements in the list are same\n    if len(list_s) == 1:\n        return True\n    elif list_s[1:] == list_s[:-1]:\n        return all_Characters_Same(list_s[:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        for i in range(1, len(s)):\n            if s[i]!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2 / 4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate the area of a tetrahedron\n    area = (1/6) * side**2 * math.sqrt(2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula for the area of a tetrahedron is (1/6) * s^2\n    s = side / 2\n    area = (1/6) * s**2\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2 / 4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (side + math.sqrt(3)*side**2)/2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    area = math.sqrt(3)*s*s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * (side + math.sqrt(2)) + math.sqrt(2) * side) / 2\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (s * (s - side) * (s - math.sqrt(2)) * (s - 2 * side)) / (4 * math.tan(math.pi / 3))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # if m is greater than n, return original list\n    if m > n:\n        return list\n    \n    # if m is greater than n/2, rotate to the left by m-n/2 items\n    if m > n//2:\n        for i in range(n-m):\n            list.append(list.pop(0))\n        return list\n    \n    # if m is less than n/2, rotate to the right by m items\n    for i in range(m):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.reverse()\n    list[:m] = list[m:] + list[:m]\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    \n    # Calculate the required number of rotations\n    rotations = m % n\n    \n    # If no rotations are required, return the list as it is\n    if rotations == 0:\n        return list\n    \n    # Reverse the entire list\n    list = list[::-1]\n    \n    # Rotate the list by the required number of rotations\n    for i in range(rotations):\n        list.append(list.pop(0))\n    \n    # Reverse the list again\n    list = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If m is greater than or equal to n, no rotation is needed.\n    if m >= n:\n        return list\n    \n    # Convert m to positive value.\n    m = m % n\n    \n    # Reverse the first half of the list.\n    list = list[n-m:] + list[:n-m]\n    \n    # Reverse the whole list.\n    list = list[::-1]\n    \n    # Return the rotated list.\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        list = list[-m:] + list[:-m]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list.extend(list[m:])\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    # move m items to the right\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple contains at least one None value, otherwise returns False.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(startnum)]\n    for num in range(startnum, endnum+1):\n        if all(num % d == 0 for d in digits):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(num % digit == 0 for digit in str(num))\n    \n    return filter(is_divisible_by_digit, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(n):\n        '''\n        Check if a number is divisible by every digit it contains.\n        '''\n        digits = [int(d) for d in str(n)]\n        return all(d in digits for d in digits)\n\n    result = filter(lambda n: is_divisible_by_digits(n), range(startnum, endnum+1))\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n    for i in range(10):\n        digits.append(str(i))\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in digits:\n            if num % int(digit)!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments - startnum and endnum - and returns a list of all numbers within the given range where every number is divisible by every digit it contains.\n\n    >>> divisible_by_digits(10, 100)\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        This helper function checks if a number is divisible by every digit it contains.\n        \"\"\"\n        digit_count = 0\n        for digit in str(num):\n            digit_count += int(digit)\n        return digit_count == 1\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Use a lambda function to filter out the numbers that are not divisible by every digit\n    filtered_numbers = list(filter(lambda x: all(digit % i == 0 for digit in str(x)), range(startnum, endnum + 1)))\n\n    # Print the filtered numbers\n    print(filtered_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by any digit\n    check_divisible = lambda num: all(num % i == 0 for i in range(1, 10))\n\n    # Use a list comprehension to generate all numbers within the given range from startnum to endnum\n    divisible_numbers = [num for num in range(startnum, endnum+1) if check_divisible(num)]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    s = math.sin(math.radians(a/2))\n    area = r*r*s\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * r * math.sin(math.radians(a/2))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if angle is larger than 360 degrees, return None\n    if a > 360:\n        return None\n    else:\n        # calculate the area of the sector\n        area = r * a * math.sin(a * math.pi / 360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within range\n    if a > 360:\n        return None\n    # convert angle to radians\n    a = math.radians(a)\n    # find length of arc\n    arc_len = r * math.sin(a/2)\n    # calculate area using formula\n    area = arc_len * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle to radians\n    a = a / 180.0 * math.pi\n    \n    # Check if angle is within valid range\n    if a > 2 * math.pi:\n        print(\"Invalid angle\")\n        return None\n    \n    # Calculate area\n    area = math.pi * r * r\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    area = math.pi * (r**2) * (a / 360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = r * math.sin(math.radians(a))\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    def dp(x, y, z):\n        if len(x) == 0 or len(y) == 0 or len(z) == 0:\n            return 0\n\n        if x[0] == y[0] == z[0]:\n            return 1 + dp(x[1:], y[1:], z[1:])\n\n        return max(dp(x, y[1:], z), dp(x[1:], y, z[1:]), dp(x[1:], y[1:], z[1:]))\n\n    return dp(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a list to store the lengths of the LCS for each of the three strings\n    lengths = []\n    # Loop through the three strings and calculate the length of the longest common subsequence\n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    lengths.append(0) \n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]: \n                    lengths.append(lengths[i - 1] + 1) \n                else: \n                    lengths.append(max(lengths[i], lengths[j], lengths[k])) \n    # Find the length of the longest common subsequence\n    lcs_length = lengths[len(X)]\n    # Create a 2D list to store the LCS for each of the three strings\n    LCS = []\n    # Loop through the three strings backwards and append the LCS for each string to the 2D list\n    for i in range(len(X), -1, -1): \n        for j in range(len(Y), -1, -1): \n            for k in range(len(Z), -1, -1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS.append(\"\") \n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]: \n                    LCS.append(LCS[i - 1] + X[i - 1]) \n                else: \n                    LCS.append(max(LCS[i], LCS[j], LCS[k], key=len)) \n    # Return the LCS of the three strings\n    return LCS[:lcs_length]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    '''\n    \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # creating a table to store length of longest common subsequence \n    # for subsequence ending at different positions in X, Y and Z. \n    L = [[0] * (p+1) for i in range(m+1)] \n  \n    # Following steps build L[m+1] in bottom up fashion. Note that L[i][0] and L[0][j] \n    # are not used in below L[i][j] computation. \n    for i in range(m+1): \n        for j in range(p+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Following steps print the length of longest common subsequence for all \n    # possible subsequences of X, Y and Z. \n    for i in range(m+1): \n        for j in range(p+1): \n            if i == 0 or j == 0: \n                continue \n            if X[i-1] == Y[j-1]: \n                lcs = L[i-1][j-1] + X[i-1] \n                print(\"Length of LCS ending at i=\" + str(i-1) + \", j=\" + str(j-1) + \" is \" + str(lcs)) \n            else: \n                lcs = max(L[i-1][j], L[i][j-1]) \n                print(\"Length of LCS ending at i=\" + str(i-1) + \", j=\" + str(j-1) + \" is \" + str(lcs)) \n  \n    # Following steps print the longest common subsequence for all possible \n    # subsequences of X, Y and Z. \n    for i in range(m+1): \n        for j in range(p+1): \n            if i == 0 or j == 0: \n                continue \n            if X[i-1] == Y[j-1]: \n                lcs = L[i-1][j-1] + X[i-1] \n                lcs_seq = lcs_seq + X[i-1] \n                print(\"LCS ending at i=\" + str(i-1) + \", j=\" + str(j-1) + \" is \" + str(lcs) + \" and is \" + lcs_seq) \n                lcs_seq = lcs_seq[0:lcs_seq.index(X[i-1])] + X[i-1] \n            else: \n                lcs = max(L[i-1][j], L[i][j-1]) \n                print(\"LCS ending at i=\" + str(i-1) + \", j=\" + str(j-1) + \" is \" + str(lcs) + \" and is \" + lcs_seq) \n                lcs_seq = lcs_seq[0:lcs_seq.index(X[i-1])] + X[i-1] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS for all prefixes of X, Y, and Z\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # construct the LCS by backtracking\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1])\n    return dp"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a list of all possible subsequences of X, Y and Z\n    subsequences = [[], []]\n    for i in range(len(X)):\n        subsequences[0].append(X[i])\n    for j in range(len(Y)):\n        subsequences[1].append(Y[j])\n\n    # loop through the list of subsequences\n    for i in range(2, len(X) + len(Y) + 1):\n        # loop through the list of subsequences\n        for j in range(i - 2, -1, -1):\n            # if the subsequences match, add the common characters to the result list\n            if X[j] == Y[j - 1] and X[j] == Z[i - 2]:\n                subsequences[0].append(X[j])\n                subsequences[1].append(Y[j - 1])\n                subsequences[2].append(Z[i - 2])\n\n    # find the longest common subsequence\n    lcs_length = max(len(subsequences[0]), len(subsequences[1]), len(subsequences[2]))\n    lcs = []\n    for i in range(lcs_length):\n        if i < len(subsequences[0]):\n            lcs.append(subsequences[0][i])\n        if i < len(subsequences[1]):\n            lcs.append(subsequences[1][i])\n        if i < len(subsequences[2]):\n            lcs.append(subsequences[2][i])\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y, Z): \n        M = len(X) \n        N = len(Y) \n        O = len(Z) \n        dp = [[[0]*(O+1) for j in range(N+1)] for i in range(M+1)] \n        for i in range(M+1): \n            for j in range(N+1): \n                for k in range(O+1): \n                    if i == 0 or j == 0 or k == 0: \n                        dp[i][j][k] = 0 \n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1 \n                    else: \n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n        return dp[M][N][O] \n    \n    return lcs(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # function to find the longest common subsequence for two given strings\n    def longest_common_subsequence(X, Y):\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n+1) for i in range(m+1)]\n        \n        # fill in the table\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        \n        # trace the backtracking path to find the lcs\n        i, j = m, n\n        lcs = []\n        while i > 0 and j > 0:\n            if X[i-1] == Y[j-1]:\n                lcs.append(X[i-1])\n                i -= 1\n                j -= 1\n            elif dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        \n        # reverse the lcs\n        return ''.join(reversed(lcs))\n    \n    # find the lcs of X and Y\n    X_Y_lcs = longest_common_subsequence(X, Y)\n    \n    # find the lcs of X_Y_lcs and Z\n    X_Y_Z_lcs = longest_common_subsequence(X_Y_lcs, Z)\n    \n    return X_Y_Z_lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # create a 2D table to store lengths of LCS for all prefixes of X and all prefixes of Y\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # backtrack through the table to find the LCS of X and Y\n    i, j = m, n\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    # reverse the LCS to obtain the final result\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n = len(X), len(Y)\n    t = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                t[i][j] = t[i - 1][j - 1] + 1\n            else:\n                t[i][j] = max(t[i - 1][j], t[i][j - 1])\n\n    lcs = \"\"\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif t[i - 1][j] > t[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1] if lcs else \"\""
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all the words starting with capital letters in the string\n    words = re.findall(r'\\b[A-Z]\\w+\\b', str1)\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over all the words found in the string\n    for word in words:\n        # If the first letter of the word is capital, add a space before it\n        if word[0].isupper():\n            # Concatenate the first letter with the rest of the word and add a space in between\n            result.append(''+ word)\n        else:\n            # If the first letter is not capital, simply append the word to the list\n            result.append(word)\n    \n    # Join the list of words into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters\n    str2 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # Split the string into words\n    words = str2.split()\n    # Initialize a list to store the capitalized words\n    capitalized_words = []\n    # Iterate through the words and capitalize them if they start with capital letter\n    for word in words:\n        if word[0].isupper():\n            capitalized_word = word.capitalize()\n            capitalized_words.append(capitalized_word)\n        else:\n            capitalized_words.append(word)\n    # Join the capitalized words into a single string and return it\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first word and join the words with spaces\n    return words[0].capitalize() +''.join(words[1:])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # replace all non-word characters with spaces\n    string = re.sub(r'[^\\w\\s]','', string)\n    # split the string into words\n    words = string.split()\n    # capitalize the first word\n    words[0] = words[0].capitalize()\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the current word is capitalized\n        if words[i][0].isupper():\n            # If yes, add a space\n            words[i] = words[i].lstrip('a-zA-Z') +'' + words[i][1:]\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"(?<=[a-z])[A-Z](?=[a-z])\"\n    return re.sub(pattern, \" \", str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    result = re.sub(pattern, r'\\1 ', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    capitalized_words =''.join(words)\n    return capitalized_words"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(int(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x.replace(\",\", \".\")))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str = [int(num) for num in nums_str if num.isdigit()] # Filter out non-numeric strings\n    nums_str.sort(key=lambda x: int(x)) # Sort the numeric strings using a lambda function as the key\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Function to convert a string to a number\n    def str_to_num(s):\n        try:\n            return float(s)\n        except ValueError:\n            return None\n\n    # Convert all strings to numbers and filter out None values\n    nums = list(filter(lambda x: x is not None, list(map(str_to_num, nums_str))))\n\n    # Sort the numbers in ascending order\n    nums.sort()\n\n    # Convert the sorted numbers back to strings\n    sorted_nums_str = list(map(str, nums))\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to floats and sort them\n    nums = sorted(list(map(float, nums_str)))\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to numbers\n    nums = [int(num) for num in nums_str]\n    \n    # sort the numbers\n    nums.sort()\n    \n    # convert the sorted numbers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and returns a sorted list of strings.\n    \"\"\"\n    # Convert all the strings to numbers\n    nums = [float(num) for num in nums_str]\n    # Sort the list of numbers\n    nums.sort()\n    # Convert the sorted list of numbers back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and sorts them numerically using the built-in `sorted()` function.\n\n    :param nums_str: A list of strings of numbers.\n    :return: A list of strings of numbers sorted in numerical order.\n    \"\"\"\n    # Convert all strings in the list to float numbers\n    nums = [float(num) for num in nums_str]\n    # Sort the list using the built-in `sorted()` function\n    sorted_nums = sorted(nums)\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the float numbers in ascending order\n    nums_float.sort()\n    # Convert the sorted float numbers back to strings\n    nums_str_sorted = [str(num) for num in nums_float]\n    # Return the sorted list of strings\n    return nums_str_sorted"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Add the list to the test_list\n    test_list = test_list + test_list\n    # Convert the list back to a tuple\n    test_tup = tuple(test_list)\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 0:\n        if arr[i] > arr[(i-1)//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        # Check if the left child of the current node is smaller than the current node.\n        if arr[i] < arr[int((i - 1) / 2)]:\n            return False\n    # Check if the current node is larger than all the nodes in its subtree.\n    for j in range(2*i + 1, len(arr), 2):\n        if arr[i] > arr[j]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i >= len(arr) // 2:\n        return True\n\n    # check if left child is greater than parent and right child is greater than parent\n    if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n        return False\n\n    # recursively check left and right children\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # check if the array is a single element\n    if len(arr) == 1:\n        return True\n\n    # check if the array is a min heap\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case for the recursion\n    if i > len(arr) // 2:\n        return True\n\n    # Check if the left child of the node i is less than its parent\n    if arr[i] > arr[2*i]:\n        return False\n\n    # Check if the right child of the node i is less than its parent\n    if i < len(arr) - 1 and arr[i] > arr[2*i+1]:\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check the array size is odd\n    if len(arr) % 2 == 0:\n        return False\n\n    # Check if the root is greater than or equal to its children\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i-1)/2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i-1)/2))\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 1:\n        return False\n    else:\n        return check_min_heap_helper(arr, len(arr)//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    else:\n        left = 2*i\n        right = 2*i + 1\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Find the smallest element in the subarray\n    min_idx = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[min_idx]:\n        min_idx = left\n\n    if right < len(arr) and arr[right] < arr[min_idx]:\n        min_idx = right\n\n    # If the smallest element is not in the subarray, the array is not a min heap\n    if min_idx!= i:\n        return False\n\n    # Recursively check the heap in the subarray\n    return check_min_heap_helper(arr, min_idx)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Call the helper function with the first index\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] > arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Returns True if the given array represents a min heap, False otherwise.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i // 2]:\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the list with the first 12 elements of the sequence\n    lst = [0, 1]\n    for i in range(2, n+1):\n        # Calculate the next element of the sequence\n        next_element = (lst[i-1] + lst[i-2]) % 2\n        # Add the next element to the list\n        lst.append(next_element)\n    # Return the nth element of the list\n    return lst[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n - 1) * jacobsthal_num(n - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return 2 * (jacobsthal_num((n - 1) // 2) + 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (4*n**2 + 1) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n    if n > 0 and n <= len(jacobsthal):\n        return jacobsthal[n-1]\n    else:\n        return None"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 2 * jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398103, 2796205, 5592411, 11184821, 22369643, 44739285, 89478571, 178957141, 357914283, 715828565, 1431657131, 2863314263, 5726628525, 11453257051, 22906514103, 45813028205, 91626056411, 183252112821, 366504225643, 733008451285, 1466016902571, 2932033805141, 5864067610283, 11728135220565, 23456270441131, 46912540882261, 93825081764523, 187650163529045, 375300327058091, 750600654116181, 1501201308232363, 3002402616464725, 6004805232929451, 12009610465858903, 24019220931717805, 48038441863435611, 96076883726871221, 192153767453742443, 384307534907484885, 768615069814969771, 1537230139629939541, 3074460279259879083, 6148920558519758165, 12297841117039516331, 24595682234079032661, 49191364468158065323, 98382728936316130645, 196765457872632261291, 393530915745264522581, 787061831490529045163, 1574123662981058090325, 3148247325962116180651, 6"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num((n - 1) // 2)\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num((n - 1) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n <= 0:\n        return \"Invalid input\"\n\n    jacobsthal = 0\n\n    if n == 1:\n        return jacobsthal\n\n    jacobsthal = 1\n    for i in range(2, n+1):\n        jacobsthal = jacobsthal*i\n\n    return jacobsthal"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = sorted(test_list, key=lambda x: x[1])\n    min_list = min_list[:K]\n    min_list = [x[0] for x in min_list]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # find the minimum number of elements in the tuple list\n    min_count = min([len(item) for item in test_list])\n\n    # iterate through each tuple in the list and keep track of the minimum K elements\n    min_items = []\n    for item in test_list:\n        if len(item) < min_count:\n            continue\n        if len(min_items) < K:\n            min_items.append(item)\n        else:\n            min_items.pop(0)\n\n    return min_items"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    test_list = sorted(test_list, key=lambda x: (-x[1], x[0]))  # sort the list based on (score, name)\n    min_scores = test_list[:K]\n    min_names = [min_scores[i][1] for i in range(K)]\n    return min_scores, min_names\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty dictionary to store the minimum k records\n    min_records = {}\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)):\n        # If the length of the current record is less than k, continue\n        if i + 1 > K:\n            break\n\n        # If the current record is not in the dictionary, add it\n        if test_list[i][0] not in min_records:\n            min_records[test_list[i][0]] = [test_list[i]]\n        # If the current record is already in the dictionary, add it to the list of minimum k records\n        else:\n            min_records[test_list[i][0]].append(test_list[i])\n\n    # Initialize an empty list to store the final result\n    final_result = []\n\n    # Iterate through the keys of the min_records dictionary\n    for key in min_records:\n        # Sort the list of minimum k records based on the third element of each tuple\n        min_records[key].sort(key=lambda x: x[2])\n\n        # Iterate through the sorted list of minimum k records and add them to the final result\n        for record in min_records[key]:\n            final_result.append(record)\n\n    return final_result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    min_list = []\n    for i in range(len(test_list) - K + 1):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Initialize min_count to be infinity\n    min_count = float('inf')\n    # Initialize min_list to be empty\n    min_list = []\n    \n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Increment the count of this record\n        test_list[i][1] += 1\n        # If the count is less than the minimum count, update the min_count and min_list\n        if test_list[i][1] < min_count:\n            min_count = test_list[i][1]\n            min_list = [test_list[i]]\n        # If the count is the same as the minimum count, add the record to the min_list\n        elif test_list[i][1] == min_count:\n            min_list.append(test_list[i])\n        # If the count is greater than the minimum count and the record is less than the kth smallest, remove the smallest record from the min_list and add the new record\n        elif test_list[i][1] > min_count and i < K:\n            min_list.pop(0)\n            min_list.append(test_list[i])\n    \n    # Return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store frequency of each key in the list\n    freq_dict = {}\n    for i, item in enumerate(test_list):\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Create a heap of tuples containing (key, frequency)\n    heap = []\n    for key, value in freq_dict.items():\n        heapq.heappush(heap, (value, key))\n\n    # Initialize minimum count and minimum key\n    min_count = heap[0][0]\n    min_key = heap[0][1]\n\n    # Iterate through the heap\n    for i in range(K):\n        # If the heap size is greater than K, pop the minimum key and its frequency from the heap\n        if len(heap) > K:\n            freq, key = heapq.heappop(heap)\n\n        # Check if the frequency of the current key is less than the minimum frequency\n        if freq < min_count:\n            min_count = freq\n            min_key = key\n\n    # Return the minimum key and its frequency\n    return min_key, min_count\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples containing integers.\n    K (int): The number of records to find.\n\n    Returns:\n    A list containing the K smallest integers from the test_list.\n    '''\n    sorted_list = sorted(test_list)\n    result = []\n    count = 0\n\n    for i, item in enumerate(sorted_list):\n        if count == K:\n            break\n        result.append(item[1])\n        count += 1\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the test list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to keep track of the minimum k records found so far\n    minimum_k_records = []\n\n    # Traverse the sorted test list from left to right\n    for i in range(len(test_list)):\n        # If there are enough minimum k records found so far, break out of the loop\n        if len(minimum_k_records) >= K:\n            break\n\n        # If there are less than K minimum k records found so far, add the first record from the test list\n        if len(minimum_k_records) < K:\n            minimum_k_records.append(test_list[i])\n\n        # If there are more than K minimum k records found so far, compare the first element of the current record with the first element of the minimum k records\n        else:\n            if test_list[i][0] < minimum_k_records[0][0]:\n                minimum_k_records[0] = test_list[i]\n\n    # Return the minimum k records found so far\n    return minimum_k_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Find the intersection of all lists\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Iterate through the first list\n    for i in range(len(l1)):\n        # If the element is present in all three lists, add it to the common list\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n\n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common = []\n    # Iterate through each element in l1 and l2\n    for i in l1:\n        if i in l2:\n            # If the element appears in l2, check if it appears in l3\n            if i in l3:\n                # If the element appears in l3, add it to the common list\n                common.append(i)\n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each element of list 1\n    for element1 in l1:\n        # Loop through each element of list 2\n        for element2 in l2:\n            # Loop through each element of list 3\n            for element3 in l3:\n                # If all three elements match, add it to the common elements list\n                if element1 == element2 and element2 == element3:\n                    common_elements.append(element1)\n    \n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements.\")\n    sorted_nums = sorted(numbers)\n    return sorted_nums[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min1, min2 = numbers[0], numbers[1]\n    for num in numbers[2:]:\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2 and num!= min1:\n            min2 = num\n    return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list should have at least two elements to find the second smallest number.\"\n\n    numbers.sort()\n\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List should have at least two elements.\"\n    \n    # sort the list in ascending order\n    numbers.sort()\n\n    # return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        return second_smallest(numbers[1:])\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # Return the second smallest number\n    return sorted_list[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_zero_one(text):\n    # Find all matches in the string\n    matches = re.findall(r'(a)(b)*', text)\n    # If there are matches, print them\n    if matches:\n        print(\"Matches found in the text:\", matches)\n    else:\n        print(\"No matches found in the text.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found!\")\n    else:\n        print(\"Match not found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b{1,})'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    return re.findall(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog. The cat is on the mat.\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a dictionary to store the count of reverse strings\n    count_dict = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n        # Reverse the string\n        reversed_string = string[::-1]\n\n        # Check if the reversed string is already in the dictionary\n        if reversed_string in count_dict:\n            # If it is, increment the count of the original string\n            count_dict[string] += 1\n        else:\n            # If it's not, add it with a count of 1\n            count_dict[string] = 1\n\n    # Create a list to store the pairs of reverse strings and their counts\n    pairs_list = []\n\n    # Iterate through the dictionary and add the pairs to the list\n    for string, count in count_dict.items():\n        # If the count of the original string is less than the number of characters in the string\n        if count < len(string):\n            # Add the pair to the list\n            pairs_list.append((string, string[::-1]))\n\n    # Return the list of pairs\n    return pairs_list"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    # Initialize the count of reverse pairs to zero\n    count = 0\n    \n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Check if the string is not empty or contains only one character\n        if len(test_list[i]) > 1:\n            # Reverse the string and check if it is in the list\n            if test_list[i][::-1] in test_list[:i] + test_list[i+1:]:\n                # Increment the count of reverse pairs\n                count += 1\n    \n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Count the number of pairs of reverse strings in the list\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(j+1, len(test_list[i])):\n                if test_list[i][j] == test_list[i][k][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    Args:\n        test_list (list): List of strings\n\n    Returns:\n        int: Number of pairs of reverse strings in the given list\n    \"\"\"\n\n    # Create a dictionary to store the count of each string\n    count_dict = {}\n\n    # Iterate over the list and update the count of each string in the dictionary\n    for string in test_list:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n\n    # Initialize the count of pairs of reverse strings\n    pair_count = 0\n\n    # Iterate over the dictionary and check if the reverse of the string exists in the dictionary\n    for string in count_dict:\n        if string[::-1] in count_dict:\n            pair_count += count_dict[string]\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the reverse of string[i] is present in the string list\n            if test_list[j][::-1] in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the count of each unique sublist\n    counts = {}\n    # Loop through each list in the input list\n    for i in list1:\n        # Convert the list to a tuple and add it to the counts dictionary\n        if tuple(i) in counts:\n            counts[tuple(i)] += 1\n        else:\n            counts[tuple(i)] = 1\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if tuple(sublist) in count:\n            count[tuple(sublist)] += 1\n        else:\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list2.append(list1[i:j+1])\n    sublist_dict = {}\n    for sublist in list2:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the counts of lists\n    count_dict = {}\n\n    # Iterate through each list in the original list\n    for i in range(len(list1)):\n\n        # Convert the list to a tuple and check if it exists in the dictionary\n        if (tuple(list1[i]),) in count_dict:\n\n            # If it does, increment its count in the dictionary\n            count_dict[(tuple(list1[i]),)] += 1\n\n        else:\n\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[(tuple(list1[i]),)] = 1\n\n    # Return the dictionary of counts of unique sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # loop through each element of the list\n    for element in list1:\n        # convert the element to a tuple and check if it is already in the dictionary\n        if tuple(sorted(element)) not in count_dict:\n            # if the element is not in the dictionary, add it with a value of 1\n            count_dict[tuple(sorted(element))] = 1\n        else:\n            # if the element is in the dictionary, increment its value by 1\n            count_dict[tuple(sorted(element))] += 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_dict = {}\n    # loop through the list\n    for sublist in list1:\n        # convert each sublist to a tuple\n        tuple_sublist = tuple(sublist)\n        # check if the tuple exists in the dictionary\n        if tuple_sublist in sublist_dict:\n            # if it does, increment its value by 1\n            sublist_dict[tuple_sublist] += 1\n        else:\n            # if it doesn't, add it with a value of 1\n            sublist_dict[tuple_sublist] = 1\n    # return the dictionary\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    counts = {}\n    \n    # iterate over each element in the list\n    for element in list1:\n        # if the element is a list, convert it to a tuple and add its length as a value to the counts dictionary\n        if isinstance(element, list):\n            counts[tuple(element)] = len(element)\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the counts of lists\n    count_dict = {}\n\n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple exists in the dictionary\n        if sublist_tuple in count_dict:\n            # If it does, increment the count of that tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n\n    # Return the dictionary of counts of unique sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique tuples\n    counts = {}\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple to count the occurrences of its elements\n        tuple_sublist = tuple(sublist)\n        # If the tuple already exists in the dictionary, increment its count\n        if tuple_sublist in counts:\n            counts[tuple_sublist] += 1\n        # If the tuple does not exist in the dictionary, add it with a count of 1\n        else:\n            counts[tuple_sublist] = 1\n            \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[(list1[i:j])] = sublists.get((list1[i:j]), 0) + 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input is empty\n    if not num.strip():\n        return False\n    \n    # Check if the input contains only digits and a decimal point\n    if '.' not in num or not num.replace('.', '').isdigit():\n        return False\n    \n    # Check if the input is a valid decimal number with a precision of 2\n    for char in num:\n        if not char.isdigit():\n            return False\n    \n    # Check if the input is a valid decimal number with a precision of 2\n    if '.' in num:\n        if len(num.split('.')[0]) > 2 or len(num.split('.')[1]) > 2:\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Define a regular expression pattern to match a valid decimal number with a precision of 2\n    pattern = r'^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$'\n\n    # Use the `re.match` function to match the pattern to the input string\n    match = re.match(pattern, num)\n\n    # Return True if a match was found, False otherwise\n    return bool(match)"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if num.count('.') == 1 and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input string is empty\n    if not num:\n        return False\n\n    # Check if the input string contains any non-numeric characters\n    for char in num:\n        if not char.isdigit() and char!= '.':\n            return False\n\n    # Check if the input string is a decimal number with a precision of 2\n    if len(num) > 3 and num[-2] == '.' and num[-1] == '0':\n        return True\n    elif num[-1] == '.' and num[-2] == '0':\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Split the input into a list of characters\n    chars = list(num)\n\n    # Check if the first character is a digit\n    if not chars[0].isdigit():\n        return False\n\n    # Check if the input is a decimal number with a precision of 2\n    for i in range(1, len(chars)):\n        # If the current character is not a digit, return False\n        if not chars[i].isdigit():\n            return False\n\n        # If the current character is a digit, check if the previous character is also a digit\n        if i > 1 and not chars[i-1].isdigit():\n            return False\n\n        # Check if the current and previous characters are both digits and their difference is less than or equal to 2\n        if int(chars[i]) - int(chars[i-1]) > 2:\n            return False\n\n    # If we make it through the loop without returning False, the input is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    if len(num.split('.')[1])!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove any non-numeric characters from the input\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the string contains more than one digit\n    if len(num) > 1:\n        return False\n    \n    # Check if the string has a decimal point and a digit following it\n    if '.' not in num or not num[num.index('.') + 1:]:\n        return False\n    \n    # Split the string into integer and decimal parts\n    integer = num[:num.index('.')]\n    decimal = num[num.index('.') + 1:]\n    \n    # Check if the integer part contains more than 1 digit\n    if len(integer) > 1:\n        return False\n    \n    # Check if the integer part contains any non-numeric characters\n    if not integer.isdigit():\n        return False\n    \n    # Convert the integer and decimal parts to integers\n    integer = int(integer)\n    decimal = int(decimal)\n    \n    # Check if the decimal part has more than 2 digits\n    if len(str(decimal)) > 2:\n        return False\n    \n    # Check if the decimal part contains any non-numeric characters\n    if not decimal.isdigit():\n        return False\n    \n    # Check if the integer and decimal parts are equal\n    if integer == decimal:\n        return True\n    \n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer() and abs(num - int(num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Initialize variables for number of digits, decimal point, and integer part\n    num_of_digits = 0\n    decimal_point = False\n    integer_part = True\n    \n    # Iterate through each character in the input string\n    for i in range(len(num)):\n        # Check if the character is a digit\n        if num[i].isdigit():\n            # Increment the number of digits\n            num_of_digits += 1\n            # Check if the character is the decimal point\n            if not decimal_point:\n                if num[i] == '.':\n                    decimal_point = True\n        # If the character is not a digit, reset the integer_part flag\n        else:\n            integer_part = False\n            # If there are more than 1 decimal points, return False\n            if decimal_point and num_of_digits > 1:\n                return False\n    \n    # If there are exactly 2 digits, return True\n    if num_of_digits == 2:\n        return True\n    \n    # Otherwise, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Check if the list contains only one element\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Check if the list contains only one distinct element\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        count = 0\n        for i in arr:\n            if arr.count(i) == 1:\n                count += 1\n        return count == len(arr)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n\n    unique_num = False\n\n    for num in arr:\n        if arr.count(num) == 1:\n            unique_num = True\n            break\n\n    return unique_num"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set()\n    for num in arr:\n        if num in distinct_elements:\n            return False\n        distinct_elements.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the month number is in the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number. Month numbers are from 1 to 12.\")\n        return\n\n    # check the last day of the month using the month number\n    month_last_day = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month = monthnum3\n\n    # check if the month has 30 days or not\n    if month == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if year % 100 == 0 and year % 400!= 0:\n                month_last_day[month - 1] = 29\n            else:\n                month_last_day[month - 1] = 28\n        else:\n            month_last_day[month - 1] = 29\n\n    # print the result\n    print(monthnum3, \"has\", month_last_day[month - 1], \"days in it.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Dictionary to map month numbers to days in a month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    # Check if the month number is in the dictionary\n    if monthnum3 in days_in_month:\n        # Check if the month has 30 days\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If the month number is not in the dictionary, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 3 == 0 and monthnum3 % 5 == 0 and monthnum3 % 10 == 0:\n        print(\"This month has 30 days.\")\n    else:\n        print(\"This month does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days:\n        if days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                days_in_months[1] = 29\n            else:\n                days_in_months[1] = 28\n        return days_in_months[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        return days_in_month[monthnum3-1] == 30\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Initialize min_diff to infinity\n    min_diff = float('inf')\n\n    # Iterate through all possible pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compute the absolute difference between the elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update min_diff if current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the final value of min_diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    This function takes an array and its length as inputs and returns the minimum difference between any two elements in the array.\n    The minimum difference is calculated by subtracting the minimum element from the maximum element.\n    '''\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    return max_val - min_val"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize minimum difference\n    min_diff = arr[1] - arr[0]\n    # Traverse through the array\n    for i in range(1, n):\n        # Find the difference between current element and previous element\n        diff = arr[i] - arr[i-1]\n        # Update minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # sort the array\n    arr.sort()\n\n    # initialize variables\n    diff = arr[1] - arr[0]\n    min_diff = diff\n\n    # loop through the array and update variables\n    for i in range(2,n):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array in ascending order\n\n    # Initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[n-1]\n\n    # Initialize a variable to store the minimum difference between any two elements in the array\n    min_diff = max_val - min_val\n\n    # Iterate through the array and calculate the minimum difference between any two elements\n    for i in range(1, n-1):\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Returns the minimum difference between any two elements in the given array.\n    \"\"\"\n    if n <= 1:\n        return 0  # For arrays with only one or zero elements, the minimum difference is 0.\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[-1] - arr[-2]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next two elements\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum and maximum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update the maximum difference if the current difference is larger\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize the list of primes\n    primes = [True] * (int(math.sqrt(n)) + 1)\n\n    # Start with 2 as the first prime\n    p = 2\n\n    # Iterate through the list of primes\n    while p * p <= n:\n        if primes[p]:\n            # If p is prime, multiply it to all primes greater than it\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n\n    # Check if n is prime\n    if primes[n]:\n        return n\n\n    # Otherwise, find the next prime number greater than n\n    for p in range(n + 1, int(math.sqrt(n)) + 1):\n        if primes[p]:\n            return p"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # initialize variables\n    a = 2\n    b = 1\n    \n    # check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"n must be a positive integer\"\n    \n    # initialize the polite number\n    polite = a\n    \n    # loop until the nth polite number is found\n    for i in range(1, n+1):\n        # update the polite number by adding the previous two numbers\n        polite = a + b\n        \n        # update the values of a and b for the next iteration\n        a = b\n        b = polite\n    \n    # return the nth polite number\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize polite numbers\n    polite_numbers = [0]\n\n    # check if n is even or odd\n    if n % 2 == 0:\n        # calculate the nth polite number\n        for i in range(1, n // 2 + 1):\n            polite_numbers.append((polite_numbers[-1] + math.sqrt(polite_numbers[-1] ** 2 + 4)) // 2)\n        return polite_numbers[-1]\n    else:\n        # calculate the nth polite number\n        for i in range(1, n // 2 + 1):\n            polite_numbers.append((polite_numbers[-1] + math.sqrt(polite_numbers[-1] ** 2 + 4)) // 2)\n        return polite_numbers[-1] + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    # find the maximum number of significant digits in the decimal expansion of the first n-1 polite numbers\n    m = math.log10(n-1) + 1\n    # calculate the nth polite number as the number whose decimal expansion has a maximum of n significant digits\n    n = 10**(m/2) + 1\n    return n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        num = 5\n        k = 1\n        while k < n:\n            num += 2 * k\n            k += 1\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1:\n        return \"Invalid input! Please enter a positive integer.\"\n\n    a = (n * (n + 1) * (2 * n + 1)) // 6\n    b = (2 * n ** 2 + 1) // 3\n    c = (2 * n ** 2 - 1) // 3\n    polite_number = ((a ** b) ** c) ** (1 / c)\n\n    return polite_number\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 9\n    else:\n        polite_num = 3\n        for i in range(4, n + 1):\n            polite_num += 2\n            if math.sqrt(polite_num) % 1 == 0:\n                polite_num += 2\n        return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function returns the nth polite number.\n    A polite number is a positive integer that is the product of two consecutive positive integers.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 10\n    elif n == 3: \n        return 25\n    elif n == 4: \n        return 50\n    elif n == 5: \n        return 100\n    else: \n        x = 1\n        y = 10\n        for i in range(2, int(math.sqrt(n))+1): \n            if n%i == 0: \n                x = i\n                y = n//i\n        return x*y\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return math.ceil(math.sqrt(8*n - 1)) + 2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # create an empty list to store pairs\n    pairs = []\n    # iterate through the list using a for loop\n    for i in range(len(l1)-1):\n        # add the first element and the second element to the list of pairs\n        pairs.append((l1[i], l1[i+1]))\n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum,\n    \"\"\"\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input, and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list which contains the elements of list1 that are not present in list2.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n\n    Parameters:\n    li1 - A list\n    li2 - Another list\n\n    Return:\n    diff - The difference between the two lists\n    '''\n\n    # Get the length of both lists\n    len1 = len(li1)\n    len2 = len(li2)\n\n    # Create an empty list to store the difference\n    diff = []\n\n    # Check if the length of both lists is equal\n    if len1 == len2:\n        # Iterate through the lists and find the difference\n        for i in range(len1):\n            if li1[i]!= li2[i]:\n                diff.append(li1[i])\n    else:\n        # If the length of both lists is not equal, there is no difference\n        return diff\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the difference between the two lists.\n    \"\"\"\n    # Creating an empty list to store the difference\n    diff_list = []\n    # Iterating over each element of both lists\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of list1 that are not in list2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as arguments and returns the difference between the two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i**4\n        sum_of_powers += fourth_power\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize a variable to hold the sum of fourth powers\n    sum_of_powers = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Check if the number is odd\n        if i % 2 == 1:\n            # Calculate the fourth power of the number\n            fourth_power = i ** 4\n            # Add the fourth power to the sum of powers\n            sum_of_powers += fourth_power\n\n    # Return the sum of powers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add fourth power of i to sum\n        sum += i**4\n    \n    # return the sum of fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # check if i is odd\n        if i % 2!= 0:\n            # add fourth power of i to sum\n            sum += i**4\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum_of_powers = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # find fourth power of i\n        fourth_power = i**4\n        \n        # add fourth power to sum of powers\n        sum_of_powers += fourth_power\n        \n    # return the sum of powers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum of fourth power to 0\n    sum = 0\n\n    # Iterate through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate fourth power of i\n        fourth_power = i**4\n\n        # Add fourth power to sum\n        sum += fourth_power\n\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    brackets = {'(': ')', '[': ']', '{': '}'}\n\n    for char in exp:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if not stack:\n                return False\n            if brackets[stack.pop()]!= char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            popped = stack.pop()\n            if popped >= i-1:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    # Initialize stack and create a deque to keep track of opening parentheses\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            # Check if the opening parenthesis is at the top of the stack\n            if not stack:\n                return False\n            # Pop the top of the stack, and check if it matches the closing parenthesis\n            if stack[-1] in '([{':\n                stack.pop()\n            else:\n                return False\n    # If we reach this point, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    # Initialize a stack for storing the opening parentheses\n    stack = deque()\n\n    # Traverse the expression from left to right\n    for char in exp:\n        # If the character is an opening parentheses, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parentheses, pop the opening parentheses from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n\n    # If the stack is not empty, then the expression is not balanced\n    if stack:\n        return False\n\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char.isdigit():\n            continue\n        \n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    \n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    if not stack:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_str = ''\n    for word in words:\n        if len(word)!= K:\n            new_str +='' + word +''\n    return new_str.strip()"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    new_str = []\n    for word in test_str:\n        if len(word)!= K:\n            new_str.append(word)\n    return''.join(new_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the non-length-K words\n    non_K_words = []\n    # Iterate through the words and check if their length is not K\n    for word in words:\n        if len(word)!= K:\n            non_K_words.append(word)\n    # Join the non-length-K words into a string and return it\n    return''.join(non_K_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    filtered_string = \" \".join(filtered_words)\n    return filtered_string"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words using whitespace as separator\n    words = test_str.split()\n    # Initialize an empty list to store the final output\n    final_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, add the word to the final list\n            final_words.append(word)\n    # Join the final list of words into a single string and return it\n    return''.join(final_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Match found at position {match.start()} with length {len(match.group())}\")\n        return None\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        for i in range(len(result)):\n            print(f'{i+1}. {result[i]}')\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(f\"Substring found at index {start} and length {end}\")\n            return (start,end)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Find the position of each match in the text\n    positions = [m.start() for m in re.finditer(pattern, text)]\n\n    # If there is only one match, return the position and the match\n    if len(matches) == 1:\n        return positions[0], matches[0]\n\n    # Otherwise, return a list of positions and matches\n    return [(p, m) for p, m in zip(positions, matches)]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over all the matches\n    for match in matches:\n        # Find the position of the match in the text\n        index = text.find(match)\n        \n        # Add the match and its position to the result list\n        result.append((match, index))\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Substring '{}' found at position '{}'\".format(match.group(), match.start()))\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        return result.group(),result.start(),result.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i], nums[i+1]]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize a variable to keep track of whether every odd index contains odd numbers\n    result = True\n\n    # Iterate through each number in the list\n    for num in nums:\n\n        # Check if the number is odd\n        if num % 2!= 0:\n\n            # Check if the number is in the odd index\n            if num % 2!= 0:\n                result = False\n                break\n\n    # Return the result\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether all odd indices contain odd numbers\n    all_odd = True\n\n    # Loop through each index in the list\n    for i in range(len(nums)):\n        # If the current index is odd, check if the number at that index is odd\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            # If the current number at the odd index is odd, set the boolean variable to False\n            all_odd = False\n            # Break out of the loop since we found an odd index that contains an odd number\n            break\n\n    # Return the boolean variable indicating whether all odd indices contain odd numbers\n    return all_odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if not any(num % 2 == 1 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    # loop through each index in the list\n    for i in range(0, len(nums), 2):\n        # check if the current odd index contains an odd number\n        if nums[i] % 2!= 0:\n            # if the odd number is not present, return False\n            return False\n    # if all odd indices contain odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through the list\n    for i in range(len(nums)):\n        # if the index is odd, check if the number at that position is odd\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            # if it's not, return False\n            return False\n    # if we make it through the loop without finding any odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if len([num for num in nums if num % 2!= 0 and num == nums[i]]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum([1 for x in nums[i:] if x % 2!= 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            count = 0\n            for j in nums[i]:\n                if j % 2 == 0:\n                    count += 1\n                if count > 1:\n                    return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i - 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # initialize a set to store unique elements of the list\n    unique_elements = set(arr)\n    # initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # iterate over the unique elements in the list\n    for element in unique_elements:\n        # if the element is not already in the sum_of_non_repeated, add it and the count of the element to the sum\n        if element not in arr:\n            sum_of_non_repeated += element*arr.count(element)\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the indices of the elements in the list\n    indices = {}\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate over the elements in the list\n    for i, num in enumerate(arr):\n        # Check if the current element has already been seen before\n        if num in indices:\n            # If it has, calculate the difference between the index of the current element and the index of its previous occurrence\n            total += i - indices[num]\n        # If the current element has not been seen before, add its index to the dictionary and set it to 0\n        else:\n            indices[num] = i\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the unique elements of the list\n    unique_elements = set(arr)\n    # Calculate the sum of the unique elements\n    total_sum = sum(unique_elements)\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the list and add unique elements to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Initialize a sum variable to store the sum of non-repeated elements\n    sum_of_unique = 0\n\n    # Iterate over the unique set and add each element to the sum\n    for num in unique_set:\n        sum_of_unique += num\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty dictionary to store unique elements\n    unique_dict = {}\n\n    # Iterate through the list\n    for i in arr:\n        # If the element is not already in the dictionary, add it\n        if i not in unique_dict:\n            unique_dict[i] = True\n\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_dict.keys())\n\n    # Return the sum\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the non-repeated elements in the list\n    unique_elements = set(arr)\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_unique_elements = 0\n    \n    # Iterate through the set to calculate the sum of unique elements\n    for element in unique_elements:\n        sum_of_unique_elements += element\n    \n    # Return the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the elements of the list\n    unique_elements = set(arr)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n    # Return the sum of non-repeated elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr)) # Remove duplicates using set()\n    return sum(unique_elements) # Add up all unique elements in the list"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of non-repeated elements.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # Remove duplicates and sort the list in ascending order\n    unique_arr = sorted(list(set(arr)))\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n\n    # Iterate through the sorted list\n    for num in unique_arr:\n        # If the number is not the first element of the list, add it to the sum\n        if num!= unique_arr[0]:\n            sum_non_repeated += num\n\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if k == 0]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(sorted(lst))\n    result = []\n    for key, group in grouped:\n        if key == lst[0]:\n            result.append(list(group))\n        else:\n            result.append([key] + list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools groupby function to group consecutive duplicates\n    grouped_list = list(groupby(list1))\n    # Create a list to store the packed sublists\n    packed_list = []\n    # Loop through the grouped list and append each sublist to the packed list\n    for sublist in grouped_list:\n        packed_list.append(list(sublist))\n    return packed_list\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            grouped_list.append([group])\n        else:\n            if len(list(group)) == len(list(list1[0])):\n                grouped_list[-1].append(list(group))\n            else:\n                grouped_list.append([list(group)])\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using the itertools.groupby function to group the list elements based on their values\n    grouped_lst = groupby(lst)\n\n    # Creating an empty list to store the sublists of consecutive duplicates\n    sub_lst = []\n\n    # Looping through each group of consecutive duplicates\n    for key, group in grouped_lst:\n        # Checking if the group contains at least two elements\n        if len(list(group)) >= 2:\n            # Creating a sublist with the consecutive duplicates\n            sub_lst.append(list(group))\n\n    # Returning the list of sublists of consecutive duplicates\n    return sub_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        if key == key:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = [group]\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function will pack consecutive duplicates of the given list into sublists.\n    \"\"\"\n    for key, group in groupby(lst):\n        if next(group, False):  # check if there is a next element\n            yield key, [next(group)]  # yield the key and the next element"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store unique sublists and their counts\n    unique_sublists_dict = {}\n\n    # loop through each element of the list\n    for sublist in list1:\n        # check if the sublist is already a tuple, if not, convert it to a tuple\n        if not isinstance(sublist, tuple):\n            sublist = (sublist,)\n\n        # check if the tuple is already in the dictionary\n        if sublist not in unique_sublists_dict:\n            # if not, add it and set its count to 1\n            unique_sublists_dict[sublist] = 1\n        else:\n            # if it is, increment its count\n            unique_sublists_dict[sublist] += 1\n\n    # return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            count[(item[0],)] = count.get((item[0],), 0) + 1\n        elif isinstance(item, tuple):\n            count[item] = count.get(item, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through the list1 and count the occurrences of each sublist\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # if the tuple already exists in the dictionary, increment its count\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        # otherwise, add the sublist to the dictionary with a count of 1\n        else:\n            counts[sublist_tuple] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if item not in sublist_count:\n            sublist_count[item] = 1\n        else:\n            sublist_count[item] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through the list and add each sublist to the dictionary\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    \n    # Return the dictionary with the counts of sublists\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each list in the input list\n    for item in list1:\n        # Check if the item is already in the dictionary\n        if item in counts:\n            # Increment the count for the tuple\n            counts[item] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[item] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(tuple(sorted(x)) for x in list1)\n    # Create a dictionary to store the counts\n    count_dict = {}\n    # Loop through the set to count the occurrences of each sublist\n    for sublist in unique_set:\n        count = len([x for x in list1 if tuple(sorted(x)) == sublist])\n        count_dict[sublist] = count\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of each unique sublist\n    sublist_counts = {}\n\n    # Loop through each item in the list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Turn the list into a tuple and add it to the dictionary\n            sublist_counts[tuple(item)] = sublist_counts.get(tuple(item), 0) + 1\n\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple,\n    and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count_dict = {}\n    for item in list1:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples containing all possible combinations of sums with tuples in the given list of tuples.\n    \"\"\"\n    combined_list = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            combined_list.append(tuple(comb))\n    return combined_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Get the sum of the first tuple\n    sum_1 = sum(test_list[0])\n\n    # Initialize the list to store the combinations\n    combinations_list = []\n\n    # Iterate over all possible combinations of the tuples in the list\n    for i in range(1, len(test_list)+1):\n        # Create the combinations\n        comb = combinations(test_list, i)\n\n        # Iterate over all combinations and check if their sum is equal to the sum of the first tuple\n        for comb_tuple in comb:\n            sum_comb = sum(comb_tuple)\n            if sum_comb == sum_1:\n                # Append the combination to the list\n                combinations_list.append(tuple(comb_tuple))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Define a function to calculate the sum of a tuple\n    def sum_tuple(t):\n        return sum(t)\n\n    # Define a function to check if a tuple contains a certain value\n    def contains_value(t, val):\n        return val in t\n\n    # Define a function to check if a tuple contains all the values\n    def contains_all_values(t, values):\n        for val in values:\n            if val not in t:\n                return False\n        return True\n\n    # Define a function to check if a combination of values contains a certain value\n    def contains_value_combination(t, values):\n        for val in values:\n            if val not in t:\n                return False\n        return True\n\n    # Define a function to check if a combination of values contains all the values\n    def contains_all_values_combination(t, values):\n        for val in values:\n            if val not in t:\n                return False\n        return True\n\n    # Define a function to find all possible combinations of values\n    def find_combinations_helper(start, end, combination, values):\n        if start == end:\n            if contains_value_combination(combination, values):\n                print(combination)\n        else:\n            for i in range(start, end+1):\n                if i not in combination:\n                    combination.append(i)\n                    find_combinations_helper(start+1, end, combination, values)\n                    combination.pop()\n\n    # Define the main function to find the combinations of sums with tuples in the given tuple list\n    def find_combinations_sum(test_list):\n        # Calculate the sum of all tuples in the test list\n        total_sum = sum_tuple(test_list)\n\n        # Define a list to store the tuples with their sums\n        result = []\n\n        # Define a list of values that need to be present in the tuple\n        values = []\n\n        # Iterate through each tuple in the test list\n        for tup in test_list:\n            # Check if the tuple contains all the values in the list of values\n            if contains_all_values(tup, values):\n                # Calculate the sum of the tuple with all the values in the list of values\n                tup_sum = sum_tuple(tup)\n                # Check if the sum of the tuple with all the values is equal to the total sum\n                if tup_sum == total_sum:\n                    result.append(tup)\n\n        # Define a list to store the values that need to be present in each combination\n        combination = []\n\n        # Iterate through each tuple in the test list\n        for tup in test_list:\n            # Define a list to store the values that need to be present in the current tuple\n            values_in_tup = []\n\n            # Iterate through each value in the current tuple\n            for val in tup:\n                # Check if the value is already present in the values_in_tup list\n                if val not in values_in_tup:\n                    # Append the value to the values_in_tup list\n                    values_in_tup.append(val)\n\n            # Find all possible combinations of values_in_tup\n            find_combinations_helper(0, len(values_in_tup)-1, combination, values_in_tup)\n\n        # Print all the combinations of sums with tuples in the given tuple list\n        for combination in result:\n            print(combination)\n\n    # Call the main function to find the combinations of sums with tuples in the given tuple list\n    find_combinations_sum(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(1, n+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                return comb\n    return None"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            comb.append(tuple(sorted(test_list[i:j])))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a function to check if two tuples have the same elements\n    def tuple_compare(t1, t2):\n        if len(t1)!= len(t2):\n            return False\n        for i in range(len(t1)):\n            if t1[i]!= t2[i]:\n                return False\n        return True\n\n    # Iterate through all pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the pairs are the same\n            if tuple_compare(test_list[i], test_list[j]):\n                # If they are, calculate the sum and check if it is in the list\n                sum_pair = test_list[i] + test_list[j]\n                if sum_pair in test_list:\n                    # If it is, add it to the combinations list\n                    combinations_list.append(sum_pair)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the maximum sum and its index\n    max_sum = max(test_list)\n    max_sum_index = test_list.index(max_sum)\n\n    # Create a list of tuples with the maximum sum as the last element of each tuple\n    # and shift all the tuples to the right by 1 so that they can be combined\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append((max_sum, test_list[max_sum_index]))\n        max_sum -= test_list[i]\n        max_sum_index += 1\n\n    # Find the combinations of sums using itertools.combinations()\n    result_list = list(combinations(temp_list, len(temp_list[0])))\n\n    # Filter out the duplicates and convert the result to a set to get unique combinations\n    result_set = set()\n    for combination in result_list:\n        if combination not in result_set:\n            result_set.add(tuple(combination))\n\n    # Convert the result set to a list and return it\n    return list(result_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                result.append(tuple(sorted(test_list[i] + test_list[j])))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            combinations_list.append(combo)\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Function to count the number of divisors of a number\n    def count_divisors_helper(num):\n        count = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if num // i!= i:\n                    count += 1\n        return count\n\n    # Calculate the count of divisors using helper function\n    divisors = count_divisors_helper(n)\n\n    # Check if count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(str(n) + \" has even count of divisors\")\n    else:\n        print(str(n) + \" has odd count of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer input and returns True if the count of divisors is even and False otherwise.\n    '''\n    if n == 1:\n        return True\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            i += 1\n    \n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # initialize count variable to 0\n    count = 0\n    # loop through the range of 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # if n is divisible by i, add 1 to the count variable\n        if n % i == 0:\n            count += 1\n    # if the count is even, print True\n    if count % 2 == 0:\n        print(True)\n    # if the count is odd, print False\n    else:\n        print(False)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd, based on the given integer n.\n    '''\n\n    # Function to check if the given number is divisible by the given divisor\n    def is_divisible(num, div):\n        return num % div == 0\n\n    # Find the number of divisors of the given number\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if is_divisible(n, i):\n            divisors.append(i)\n            if n % i == 0:\n                divisors.append(n//i)\n    if n > 1:\n        divisors.append(n)\n\n    # Count the number of even and odd divisors\n    count_even = count_odd = 0\n    for d in divisors:\n        if d % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    # Check whether the count of even and odd divisors is even or odd\n    if count_even == 0:\n        return 'The count of even divisors is even.'\n    elif count_even == count_odd:\n        return 'The count of even and odd divisors is even.'\n    else:\n        return 'The count of even divisors is odd.'"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # Calculate the sum of all numbers from 1 to n\n    total = (n * (n + 1)) // 2\n\n    # Calculate the count of divisors of n\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n\n    # Count the count of divisors of n\n    count = len(divisors)\n\n    # Calculate the number of factors of n\n    factors = math.factorial(n)\n\n    # Check if the count of divisors is even\n    if count % 2 == 0 and factors % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    # create a dictionary to store the sum of odd length subarrays\n    subarray_sum = {}\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # calculate the sum of the odd length subarray starting from index i\n        subarray_sum[i] = sum(arr[i:i+2])\n    \n    # return the sum of all the odd length subarrays\n    return sum(subarray_sum.values())"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable to 0\n    sum_odd = 0\n\n    # Loop through the array and calculate the sum of odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2!= 0:\n                # If the length is odd, add the sum of elements in the subarray\n                sum_odd += arr[i] + arr[j]\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if j - i + 1 % 2 == 1:  # if length is odd\n                subarray_sum = sum(arr[i:j+1])  # add the sum of the subarray to the running sum\n                sum_of_subarrays += subarray_sum\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:  # only sum odd length subarrays\n                subarray_sum = sum(arr[i:j+1])\n                total_sum += subarray_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n    # Traverse the array from left to right\n    for i in range(n):\n        # If the current element is odd, then add it to the sum and increment the count\n        if i % 2!= 0:\n            sum += arr[i]\n            count += 1\n        # If the count becomes odd, then return the sum and exit the loop\n        if count % 2!= 0:\n            return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                sum_of_odd_length_subarrays += arr[j]\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_odd_subarrays = 0\n    \n    # Iterate through each element of the array\n    for i in range(len(arr)):\n        # Get the sum of odd length subarrays up to the current index\n        subarray_sum = sum(arr[i:i+2])\n        \n        # Add the sum of odd length subarrays to the total sum\n        sum_odd_subarrays += subarray_sum\n    \n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    ans = 0\n\n    for i in range(1, n):\n        if i % 2 == 1:\n            for j in range(i):\n                if arr[j] % 2 == 1:\n                    ans += arr[j]\n\n    return ans"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum of odd length subarrays\n    sum_odd = 0\n    # Initialize the index for the current subarray\n    start = 0\n    # Initialize a variable to store the length of the current subarray\n    length = 1\n\n    # Iterate through the array\n    for end in range(1, len(arr)):\n        # Check if the length of the current subarray is odd\n        if length % 2 == 1:\n            # If the length of the current subarray is odd, add its sum to the sum of odd length subarrays\n            sum_odd += sum(arr[start:end+1])\n        # If the length of the current subarray is even, move to the next subarray\n        length += 1\n        start = end\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays in the array.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1: # check if odd length\n                subarray = arr[i:j+1]\n                sum += sum(subarray) # add subarray elements together\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n\n    # Convert r, g, b to a tuple of int values\n    r, g, b = int(r), int(g), int(b)\n\n    # Find minimum and maximum values in rgb\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find delta value\n    delta = max_val - min_val\n\n    # Find h, s and v values\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = int(h * 60)\n        if h == 0:\n            s = 0\n        elif h == 180:\n            s = 0\n        elif h > 180:\n            h -= 180\n\n        # Find s and v values\n        if delta == 0:\n            s = 0\n        elif max_val == r:\n            s = (g - b) / delta\n        elif max_val == g:\n            s = (b - r) / delta\n        else:\n            s = (r - g) / delta\n\n        v = max_val\n\n    # Return the h, s, and v values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return round(h), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): red color component (0-255)\n        g (int): green color component (0-255)\n        b (int): blue color component (0-255)\n\n    Returns:\n        h (int): hue (0-360)\n        s (int): saturation (0-100)\n        v (int): value (0-100)\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_c, min_c = max(r, g, b), min(r, g, b)\n    del_c = max_c - min_c\n    v = max_c * 100\n    if max_c == 0:\n        s = 0\n    else:\n        s = del_c / max_c * 100\n    if max_c == min_c:\n        h = 0\n    else:\n        if r == max_c:\n            h = 60 * ((g - b) / del_c) % 6\n        elif g == max_c:\n            h = 60 * ((b - r) / del_c) + 120\n        else:\n            h = 60 * ((r - g) / del_c) + 240\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters (r, g, b) representing the red, green, and blue values of an rgb color.\n    It returns a tuple (h, s, v) representing the hue, saturation, and value of the hsv color.\n\n    The conversion from rgb to hsv is done as follows:\n\n    h = (r / 255 * 360)\n    s = ((max(r, g, b) - min(r, g, b)) / max(r, g, b)) * 100\n    v = max(r, g, b) * 100\n\n    where max(r, g, b) is the maximum value of r, g, and b, respectively.\n\n    Note: This function assumes that the input values are in the range [0, 255]. If the values are not in this range,\n    the output will be incorrect.\n    \"\"\"\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate saturation\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        s = ((max_val - min_val) / max_val) * 100\n\n    # Calculate hue\n    if max_val == r:\n        h = ((g - b) / (max_val - min_val)) * 60\n    elif max_val == g:\n        h = ((b - r) / (max_val - min_val)) + 120\n    elif max_val == b:\n        h = ((r - g) / (max_val - min_val)) + 240\n\n    # Normalize hue to 0-360\n    if h < 0:\n        h += 360\n\n    # Calculate value\n    v = max_val\n\n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if cmax == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h * 60\n    if h < 0:\n        h += 360\n    v = cmax\n    s = delta / (1 - abs(2 * cmax - 1))\n    return int(h*255), int(s*255), int(v*255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        hsv_color = (0, 0, max_val)\n    else:\n        if delta == 0:\n            hsv_color = (0, 0, 0)\n        else:\n            if max_val == r:\n                h = (g - b) / delta\n            elif max_val == g:\n                h = 2 + (b - r) / delta\n            else:\n                h = 4 + (r - g) / delta\n\n            if h < 0:\n                h += 6\n\n            hsv_color = (h * 60, delta / max_val, max_val)\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes RGB values as input and returns the HSV values.\n\n    :param r: int - red value of the color (0-255)\n    :param g: int - green value of the color (0-255)\n    :param b: int - blue value of the color (0-255)\n    :return: tuple - HSV values (hue, saturation, value)\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    value = max_value\n\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    hue = hue % 6\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_val = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        s = del_val / max_val\n    \n    if del_val == 0:\n        h = 0\n    elif r == max_val:\n        h = (g - b) / del_val\n    elif g == max_val:\n        h = 2 + (b - r) / del_val\n    else:\n        h = 4 + (r - g) / del_val\n    \n    h = h / 6\n    \n    if h < 0:\n        h += 1\n    \n    return h, s, del_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB color values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the delta value\n    delta = max_value - min_value\n\n    # Calculate the hue, saturation and value\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n\n    if h < 0:\n        h += 360\n\n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the value\n    value = max_value\n\n    # Convert the values to float and return as a tuple\n    return (h, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # calculate the difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # calculate the hue value\n    if max_val == r:\n        h = ((g - b) / diff) % 6\n    elif max_val == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n\n    # calculate the saturation and value\n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n\n    if s == 0:\n        v = 0\n    else:\n        v = max_val / 255\n\n    # convert the hue value to degrees\n    h *= 60\n    h = int(h)\n\n    # return the hsv color\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # Check if the number is odd\n        else:\n            odd_count += 1\n            \n    # If both even and odd numbers are present, multiply them and return the result\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n        return product\n    # If only one or both even and odd numbers are present, return the product of those numbers\n    elif even_count > 0 and odd_count == 0:\n        product = even_count\n        return product\n    elif even_count == 0 and odd_count > 0:\n        product = odd_count\n        return product\n    # If none of the even and odd numbers are present, return 1 as the product\n    else:\n        return 1"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even = 1\n    odd = 1\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        product *= even + odd\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    \n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            result *= i\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # Iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # If both even and odd numbers exist, find the product and return it\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n        return product\n    \n    # If only odd numbers exist, return the product of odd count and 1\n    elif odd_count > 0:\n        product = odd_count\n        return product\n    \n    # If only even numbers exist, return the product of even count and 1\n    elif even_count > 0:\n        product = even_count\n        return product\n    \n    # If no even or odd numbers exist, return 1\n    else:\n        return 1"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= i\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables for even and odd numbers\n    even = 0\n    odd = 0\n\n    # loop through each element in the list\n    for num in list1:\n\n        # check if the number is even\n        if num % 2 == 0:\n            even += num\n\n        # check if the number is odd\n        else:\n            odd += num\n\n    # return the product of even and odd numbers\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and first odd number in the list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            elif first_even!= num:\n                return first_even * first_odd\n        else:\n            if first_odd is None:\n                first_odd = num\n            elif first_odd!= num:\n                return first_even * first_odd\n    return first_even * first_odd"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def tuple_to_int(lst):\n        \"\"\"\n        Convert a tuple to an integer.\n        \"\"\"\n        return sum(int(x) for x in lst)\n\n    def string_to_tuple(s):\n        \"\"\"\n        Convert a string to a tuple.\n        \"\"\"\n        return tuple(s.split(\",\"))\n\n    # Split the string by comma and convert each string to a tuple\n    test_tuples = [string_to_tuple(s.strip()) for s in test_str.split(\",\")]\n\n    # Convert each tuple to an integer\n    result = [tuple_to_int(t) for t in test_tuples]\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize a variable to store the converted integer tuple\n    converted_tuple = ()\n\n    # split the input string into a list of words\n    words = test_str.split()\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the word is a valid integer\n        try:\n            # convert the word to an integer and append it to the converted_tuple\n            converted_tuple += (int(word),)\n        except ValueError:\n            # if the word is not a valid integer, do nothing and continue to the next word\n            pass\n\n    # return the converted_tuple\n    return converted_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of integers\n    str_int_list = [int(char) for char in test_str]\n    # Convert the list to a tuple\n    int_tuple = tuple(str_int_list)\n    # Return the converted tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by spaces and convert it to a list\n    test_list = test_str.split()\n\n    # Convert each element in the list to an integer and add it to a new list\n    int_list = [int(x) for x in test_list]\n\n    # Return the new integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_tuple = tuple(map(int, test_str.strip(\"()\").split(\",\")))\n        return test_tuple\n    except ValueError:\n        print(\"Invalid tuple string\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    split_str = test_str.split(\",\")\n    # Initialize an empty tuple to store the integers\n    int_tuple = ()\n    # Iterate over each string in the split string\n    for str_item in split_str:\n        # Convert the string to integer and append to the tuple\n        int_tuple += (int(str_item),)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to tuple\n    test_tuple = eval(test_str)\n\n    # convert tuple to integer tuple\n    int_tuple = tuple(map(int, test_tuple))\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for num in test_str:\n        if num.isdigit():\n            int_tuple += (int(num),)\n        else:\n            int_tuple += (num,)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer and append to a new list\n    int_list = [int(s) for s in str_list]\n\n    # Convert the new list to a tuple\n    result = tuple(int_list)\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by comma\n    tuple_str = test_str.split(',')\n    # create an empty list to store the converted tuples\n    converted_tuples = []\n    # iterate over the list of tuples\n    for tup_str in tuple_str:\n        # convert the string to integer and append it to the list\n        converted_tuples.append(int(tup_str))\n    # return the converted list of tuples\n    return tuple(converted_tuples)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_left to find the index where the value should be inserted\n    index = bisect.bisect_left(a, x)\n\n    # If the value is already present in the list, return the index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # If the value is greater than the last element in the list, insert at the end\n    if index == len(a):\n        return index\n\n    # If the value is between two elements in the list, search for the correct position\n    # using binary search\n    left, right = index - 1, index\n    while left >= 0 and a[left] > x:\n        left -= 1\n    while right < len(a) and a[right] < x:\n        right += 1\n    return left + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] > x:\n            return index - 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search algorithm to find the index of the last element of the array\n    index = bisect.bisect_right(a, x)\n\n    # If the last element is equal to x, return its index\n    if a[index - 1] == x:\n        return index - 1\n    \n    # If the index is 0, return 0\n    elif index == 0:\n        return 0\n    \n    # If the last element is greater than x, return the index of the last element\n    elif a[index - 1] > x:\n        return index - 1\n    \n    # If the last element is greater than the previous element, return the index of the last element\n    elif a[index - 1] > a[index - 2]:\n        return index - 1\n    \n    # If the last element is equal to the previous element, return the index of the previous element\n    else:\n        return index - 2"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif x < a[i]:\n        return bisect.bisect_left(a[:i], x)\n    else:\n        return bisect.bisect_left(a[i:], x) + i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a+b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_three(text):\n    pattern = r'a{3}b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'[ab]*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str + ''.join(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n    # Reverse the list\n    test_list.reverse()\n    # Convert the list back to a tuple\n    new_tuple = tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n\n    # Combine the two lists into one\n    new_list = test_list + [test_str]\n\n    # Convert the list into a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list into a tuple\n    tup_list = tuple(test_list)\n    # add the string to the list\n    tup_list = tup_list + (test_str,)\n    # convert the list back into a tuple\n    new_tup = tuple(tup_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list + (test_str,))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    tuple_list = tuple(test_list)\n    # Convert the string to a list\n    string_list = list(test_str)\n    # Join the two lists into a new list\n    combined_list = string_list + tuple_list\n    # Create a new tuple from the combined list\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n        if count == len(nums)//2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Loop through the list and check if the current index is even\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # Check if the current index contains even numbers\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                if count % 2!= 0:\n                    return False\n    # If all even indices have even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a boolean variable to track whether the list contains even numbers\n    contains_even = True\n\n    # Iterate through the list\n    for i in range(len(nums)):\n        # If the current index is even\n        if i % 2 == 0:\n            # If the current index doesn't contain even numbers\n            if nums[i] % 2!= 0:\n                # Set the boolean variable to False\n                contains_even = False\n                break\n\n    # Return the boolean variable\n    return contains_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums if num % 2 == 0])!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            flattened_list.append(element)\n        else:\n            flattened_list.extend(remove_nested(element))\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the final tuple\n    final_tup = []\n    # Loop through each element of the given tuple\n    for elem in test_tup:\n        # If the element is not a tuple, add it to the final list\n        if not isinstance(elem, tuple):\n            final_tup.append(elem)\n    # Return the final list\n    return final_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return [i for sublist in test_tup for i in sublist]\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(lst):\n    count = 0\n    for i in lst:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # binary search for the last occurrence of x\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # x found in the middle of the array\n            left = mid + 1\n        elif arr[mid] < x:\n            # x not found in the left half of the array\n            left = mid + 1\n        else:\n            # x not found in the right half of the array\n            right = mid - 1\n    return left - 1 if left < len(arr) and arr[left] == x else -1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two parameters:\n    arr - the sorted array\n    x - the element to search for\n    \n    This function returns the last position of the element x in the sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x as arguments and returns\n    the index of the last occurrence of x in the array. If x is not present in the array,\n    it returns -1.\n    '''\n    # initialize a variable to store the index of the last occurrence of x\n    last_index = -1\n    # loop through the array and find the last occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            i = mid + 1\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Traverse through the array using two pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Keep track of the current position\n    current_position = -1\n\n    # Compare the current element with the given x\n    while left <= right:\n        current_position = (left + right) // 2\n\n        # If the current element is equal to x, update the last position\n        if arr[current_position] == x:\n            last_position = current_position\n\n        # If the current element is greater than x, update the right pointer\n        elif arr[current_position] > x:\n            right = current_position - 1\n\n        # If the current element is less than x, update the left pointer\n        else:\n            left = current_position + 1\n\n    # Return the last position found\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # binary search for the last occurrence of x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # if x is found at mid position, search to the left for the last occurrence of x\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x not found in arr"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    i = l-1\n    \n    while i>=0 and arr[i]!=x:\n        i-=1\n        \n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the last index to -1\n    last_index = -1\n    # Iterate through the sorted array and check for the last occurrence of x\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            last_index = i\n            break\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n    \n    # Iterate through the array and search for the element x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    \n    # Return the last position\n    return last_position"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z])a.*b(?![a-zA-Z])'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i)a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two parameters - lower and upper limit of the range. \n    It returns the sum of all odd natural numbers within the range.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    else:\n        l = 1\n        r = n\n        total = 0\n        while l <= r:\n            if l % 2!= 0:\n                total += l\n            l += 1\n        return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n    # loop through the range from l to r, inclusive\n    for i in range(n+1):\n        # if i is odd, add it to the total\n        if i % 2!= 0:\n            total += i\n    # return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        odd_sum = 0\n        for i in range(n, 0, -2):\n            odd_sum += i\n        return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        total += l\n        if l % 2!= 0:\n            l += 2\n        else:\n            l += 1\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_odd = 0\n    for i in range(2, n+1, 2):\n        sum_odd += i\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n % 2 == 0:\n        n += 1\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:  \n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff # for 32 bit numbers\n    n = n & mask # mask out any extra bits beyond 32 bits\n    d = d % 32 # make sure d is within the range of 0 to 31\n    n = ((n << d) | (n >> (32-d))) & mask # rotate left by d bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF # assuming the number is 32 bit\n    n = n & mask # masking out the upper bits\n    shift = d & mask # shifting left d bits\n    return (n<<shift) | (n>>(32-shift)) # right shifting by 32-shift and then left shifting by shift"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert decimal number to binary number\n    binary = bin(n)[2:]\n    # Pad binary number with zeroes to make it d bits long\n    padded = '0'*(d-len(binary)) + binary\n    # Convert padded binary number back to decimal number\n    rotated = int(padded, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary representation of number to list of bits\n    num_bits = 32\n    binary_num = bin(n)[2:].zfill(num_bits)\n    binary_num = [int(bit) for bit in binary_num]\n\n    # Rotate left by d bits\n    for i in range(d):\n        bit = binary_num.pop(0)\n        binary_num.append(bit)\n\n    # Convert rotated bits back to binary\n    rotated_bits = [str(int(bit)) for bit in binary_num]\n    rotated_bits = ''.join(rotated_bits)\n    rotated_num = int(rotated_bits, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of times to rotate left\n    rotate_count = d % 32\n\n    # Calculate the number of bits to rotate\n    rotate_bits = rotate_count % 32\n\n    # Calculate the number of bits to shift the bits to the left\n    shift_bits = 32 - rotate_bits\n\n    # Shift the bits to the left\n    shifted_n = (n << shift_bits) & 0xFFFFFFFF\n\n    # Rotate the bits to the left\n    rotated_n = ((n >> rotate_bits) | (shifted_n << rotate_bits)) & 0xFFFFFFFF\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the new value of n\n    new_n = ((n << d) | (n >> (32 - d))) & 0xffffffff\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary representation of n to list of digits\n    bin_n = bin(n)[2:]\n    bin_n = [int(digit) for digit in bin_n]\n    \n    # Rotate left d bits and convert back to binary\n    rotated_bin = bin_n[-d:] + bin_n[:-d]\n    rotated_bin = [int(digit) for digit in rotated_bin]\n    \n    # Convert list of digits back to binary number\n    rotated_n = int(''.join(map(str, rotated_bin)))\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary string\n    binary_string = bin(n)[2:]\n    # if d is greater than the number of bits in binary string\n    if d > len(binary_string):\n        # shift the bits to the left by d bits\n        shifted_binary_string = '0'*(d-len(binary_string)) + binary_string\n        # convert back to integer\n        rotated_number = int(shifted_binary_string, 2)\n    else:\n        # shift the bits to the left by d bits\n        shifted_binary_string = '0'*(32-d) + binary_string[:d]\n        # convert back to integer\n        rotated_number = int(shifted_binary_string, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n << d | n >> (32 - d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary representation\n    binary_n = bin(n)[2:]\n    # pad the left side with zeros\n    binary_n = '0'*(32-len(binary_n))+binary_n\n    # rotate the left side by d bits\n    rotated_binary_n = binary_n[d:] + binary_n[:d]\n    # convert the rotated binary string to an integer\n    rotated_n = int(rotated_binary_n, 2)\n    return rotated_n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all spaces with an empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with an empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            for j in range(x, y+1):\n                if i % 2 == 0 and j % 2 == 0:\n                    if i == j:\n                        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # initialize a counter variable to keep track of the number of equal numbers\n    count = 0\n    # loop through the three given integers and compare each pair with the rest of the list\n    for i in range(len(x)):\n        if x[i] == y[i]:\n            if y[i] == z[i]:\n                count += 1\n        elif x[i] == z[i]:\n            if y[i] == z[i]:\n                count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y:\n            count += 1\n        if x == z:\n            count += 1\n        if y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # initialize variables\n    count = 0\n\n    # loop through the given integers\n    for num in [x, y, z]:\n        # check if the number is equal to any of the other numbers\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x,y,z), min(x,y,z)+1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # Initialize variables for count and result\n    count = 0\n    result = 0\n\n    # Check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # Check if array is already in ascending order\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return -1\n\n    # Check if array is in decreasing order\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            return -1\n\n    # Check if array is already a palindrome\n    for i in range(n // 2):\n        if arr[i]!= arr[n - 1 - i]:\n            return -1\n\n    # Count the number of rotations required to sort the array\n    for i in range(n):\n        if arr[i] < arr[i - 1]:\n            count += 1\n            if count == 1:\n                result = i - 1\n\n    # Return the count of rotations\n    return result"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # Check if arr[left] is greater than arr[mid]\n        if arr[left] > arr[mid]:\n            # If it is, then the array is already sorted\n            return 0\n        else:\n            # If not, then we need to rotate the array\n            count += right - mid\n            # Move the left pointer to the right side of the array\n            left = mid + 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of rotations required to generate a sorted array.\n    \"\"\"\n    # sort the array in ascending order\n    sorted_arr = sorted(arr)\n    # count the number of rotations required\n    count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n    \n    while i < j:\n        if sorted_arr[i] < sorted_arr[j]:\n            i += 1\n        elif sorted_arr[i] > sorted_arr[j]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n            count += 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    # Base case\n    if len(arr) <= 1:\n        return 0\n\n    # Initialize the count and the index of the smallest element\n    count = 0\n    left = 0\n\n    # Traverse the array from the left to the right\n    for i in range(len(arr)):\n        # If the element is smaller than the previous element, increment the count and update the left index\n        while left > 0 and arr[i] < arr[left - 1]:\n            count += 1\n            left = i\n\n        # Update the left index\n        left = i\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # If array is already sorted, return 0\n    if n <= 1:\n        return 0\n\n    # Calculate the total number of rotations required\n    total_rotations = 0\n    # We have to find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Calculate the number of rotations required to make the first element as the last element\n    total_rotations += n - 1 - min_element\n\n    # Now we have to find the minimum element in the array after rotating the array by one position\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[(i - min_element) % n] < min_element:\n            min_element = arr[(i - min_element) % n]\n    # Calculate the number of rotations required to make the last element as the first element\n    total_rotations += n - 1 - min_element\n\n    # Now we have to find the minimum element in the array after rotating the array by two positions\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[(i - min_element) % n] < min_element:\n            min_element = arr[(i - min_element) % n]\n    # Calculate the number of rotations required to make the second to last element as the last element\n    total_rotations += n - 1 - min_element\n\n    return total_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Count the number of inversions\n    inversions = 0\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                inversions += n - i - 1\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return inversions"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[n-i-1]:\n            return n-i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef count_rotation(arr):\n    merge_sort(arr)\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n            elif arr[j] > arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = n ** 0.5  # calculate square root of the given number\n    int_sqrt_n = int(sqrt_n)  # convert the square root to an integer\n    if sqrt_n == int_sqrt_n ** 2:  # check if the square root is an integer\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # Initialize a variable to store the square root of the number.\n    square_root = 0\n\n    # Initialize a variable to store the difference between the square root of the number and the input number.\n    difference = 0\n\n    # Check whether the input number is greater than 0.\n    if n <= 0:\n        return False\n\n    # Initialize a variable to store the loop variable.\n    i = 1\n\n    # Calculate the square root of the input number using the formula: sqrt(x) = (x + y/x) / 2, where y is the difference between the square root of the input number and the number.\n    while square_root * square_root < n:\n        square_root += difference\n        difference = (square_root + n / square_root) / 2\n\n    # Check whether the square root of the input number is equal to the number.\n    if square_root * square_root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is positive and a whole number\n    if n <= 0 or n % 1!= 0:\n        return False\n\n    # Calculate the square root of n using the bisection method\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If we reach here, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # find the square root of n using the Newton-Raphson method\n    x = n\n    while x*x > n:\n        x = (x + n/x)/2\n    return x == int(x)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return \"Number should be non-negative.\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check if a number is a perfect square or not\n    def is_square(x):\n        # Check if x is negative\n        if x < 0:\n            return False\n        # Check if x is equal to 0 or 1\n        elif x == 0 or x == 1:\n            return True\n        # Check if x is divisible by 2\n        elif x % 2 == 0:\n            return is_square(x//2)\n        else:\n            return False\n\n    # Check if the given number is a perfect square or not\n    return is_square(n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n ** 0.5) + 1\n    for i in range(2, root):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check if a number is a perfect square or not\n    def isPerfectSquare(num):\n        if num == 0 or num == 1:\n            return True\n        i = 2\n        while i*i <= num:\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n\n    # Check if the input number is a perfect square or not\n    if isPerfectSquare(n):\n        print(n, \"is a perfect square\")\n    else:\n        print(n, \"is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # function to check if the number is a perfect square or not\n    def isPerfectSquare(num):\n        \"\"\"\n        Check if the given number is a perfect square or not.\n        \"\"\"\n        # Find the square root of the given number\n        square_root = int(num ** 0.5) + 1\n        # Check if the square root is equal to the square of the given number or not\n        if square_root * square_root == num:\n            return True\n        else:\n            return False\n    \n    # Check if the given number is a perfect square or not\n    if isPerfectSquare(n):\n        print(n, \"is a perfect square.\")\n    else:\n        print(n, \"is not a perfect square.\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    left = 0\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize variables to store the product of numbers in the list and the sum of the numbers in the list\n    product = 1\n    sum_arr = sum(arr)\n    \n    # Loop through the list and calculate the product of numbers\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or odd\n    if product % 2 == 0:\n        print(f\"The product of the numbers in the list {arr} is even.\")\n    else:\n        print(f\"The product of the numbers in the list {arr} is odd.\")\n        \n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of numbers\n    product = 1\n\n    # Iterate over each element in the list\n    for num in arr:\n        # Multiply the product by the current number\n        product *= num\n    \n    # Check if the product is even or odd\n    if product % 2 == 0:\n        # If the product is even, return True\n        return True\n    else:\n        # If the product is odd, return False\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        print(\"The product is even.\") \n    else: \n        print(\"The product is odd.\") "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for list_ in lists:\n        sum_ = sum(list_)\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = list_\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + current_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to the first element of the first list\n    max_sum = lists[0][0]\n\n    # Loop through the lists\n    for i in range(len(lists)):\n        # Loop through the elements in the list\n        for j in range(len(lists[i])):\n            # Add the current element and the sum of the previous element to the max_sum\n            max_sum = max(max_sum, lists[i][j] + lists[i][j - 1])\n\n    # Create a list of tuples with the indices of the lists that have the highest sum\n    indices = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] == max_sum:\n                indices.append((i, j))\n\n    # Find the list with the highest sum\n    max_list = []\n    for i in indices:\n        max_list.append(lists[i[0]][i[1]])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                current_sum = lists[i][j][k]\n                for l in range(i, len(lists)):\n                    for m in range(j, len(lists[l])):\n                        for n in range(k, len(lists[l][m])):\n                            current_sum += lists[l][m][n]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = lists[i][j][k]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Loop through each list in the input list of lists\n    for list_ in lists:\n        # Calculate the sum of the elements in the list\n        sum_ = sum(list_)\n        \n        # If the sum is greater than the current maximum sum, update the variables\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = list_\n    \n    # Return the maximum list that satisfies the condition\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum among all possible sublists\n    max_sum = float('-inf')\n    for sublist in lists:\n        sum_of_sublist = sum(sublist)\n        if sum_of_sublist > max_sum:\n            max_sum = sum_of_sublist\n\n    # Find the list in the original list of lists that maximizes the sum\n    for sublist in lists:\n        sum_of_sublist = sum(sublist)\n        if sum_of_sublist == max_sum:\n            return sublist\n\n    # If no sublist maximizes the sum, return an empty list\n    return []"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # sort the lists in decreasing order of length\n    sorted_lists = sorted(lists, key=len, reverse=True)\n    # initialize variables for maximum sum and corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    # loop through the sorted lists\n    for l in sorted_lists:\n        # initialize variables for sum and current list\n        sum_list = 0\n        curr_list = []\n        # loop through the elements of the list\n        for x in l:\n            # add each element to the sum\n            sum_list += x\n            # append the current element to the list\n            curr_list.append(x)\n            # if the sum is greater than the maximum sum, update the maximum sum and corresponding list\n            if sum_list > max_sum:\n                max_sum = sum_list\n                max_list = curr_list\n    # return the list with the highest sum\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n            # If the current run is greater than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n            # Reset the current run\n        else:\n            current_run = 0\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_run = 0\n    curr_run = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            curr_run += 1\n        # If the current character is not uppercase, reset the current run to 0\n        else:\n            curr_run = 0\n        \n        # If the current run is greater than the maximum run, update the maximum run and length\n        if curr_run > max_run:\n            max_run = curr_run\n            max_length = i - max_run + 1\n            \n    # Return the maximum run and length\n    return max_run, max_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    run_length = 0\n    current_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            run_length += 1\n            if char!= current_char:\n                max_run = max(max_run, run_length)\n                current_char = char\n        else:\n            run_length = 0\n    \n    max_run = max(max_run, run_length)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    run_count = 0\n    max_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            run_count += 1\n        else:\n            if run_count > max_run:\n                max_run = run_count\n            run_count = 0\n\n    if run_count > max_run:\n        max_run = run_count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > current_run:\n                max_run = current_run\n            current_run = 0\n            uppercase_count = 0\n    \n    if uppercase_count > current_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 1\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 1\n        i += 1\n    if count > max_run:\n        max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the maximum run and the current run\n    max_run = 0\n    current_run = 0\n    \n    # Loop through the string and update the variables as needed\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # If there is a remainder, it is also part of the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    curr_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n                curr_char = char\n        else:\n            curr_run = 0\n            \n    return max_run, curr_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = None\n\n    # iterate through the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, check if it is the start of a new run\n            if current_char is None:\n                current_char = char\n                current_run += 1\n            # if it is, check if it is part of the current run\n            elif char == current_char:\n                current_run += 1\n            # if it is not part of the current run, update the max_run variable\n            else:\n                if current_run > max_run:\n                    max_run = current_run\n                current_char = char\n                current_run = 1\n        # if the current character is not uppercase, reset the current run and character\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_char = None\n            current_run = 0\n\n    # check if there are any characters left after iterating through the string\n    if current_run > max_run:\n        max_run = current_run\n\n    # return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    run_start = 0\n    upper_case = False\n    count = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, update the count and start index\n            count += 1\n            run_start = i\n        else:\n            # If it isn't, reset the count and start index\n            if count > max_run:\n                max_run = count\n            count = 0\n            run_start = i\n\n    # If there is a last run, update the count and max run\n    if count > max_run:\n        max_run = count\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found in the list"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    # loop through the list\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            return num\n\n    # if no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and checks if it contains K or not.\n    '''\n    if len(test_tup) >= K and len(test_tup) <= 2*K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    k_count = 0\n    for tup in test_tup:\n        if tup in K:\n            k_count += 1\n        if k_count >= K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i]!= K:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        for elem in tup:\n            if elem == K:\n                count += 1\n                break\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for tup in test_tup:\n            if len(tup)!= K:\n                return False\n            else:\n                if K > 0 and K!= len(tup):\n                    return False\n                else:\n                    for i in range(len(tup)):\n                        if tup[i] not in range(1, K+1):\n                            return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and returns True if it contains the K value\n    and False otherwise.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    return test_tup[K-1] in test_tup[:K]"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # If we made it through the loop without finding any false positive, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the number of elements in the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        # Loop through the elements of the second tuple\n        for i in range(len(test_tup2)):\n            # Check if the element in the second tuple is smaller than the element in the first tuple\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        # If all elements of the second tuple are smaller than their corresponding elements in the first tuple, return True\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    }
]