[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the shared set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared.append(item)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets and convert it back to a list\n    shared_elements = list(set1.intersection(set2))\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from both lists to get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the sets\n    intersect = set1.intersection(set2)\n    \n    # Return the elements as a list\n    return list(intersect)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item1 in test_tup1:\n        if item1 in test_tup2:\n            shared_elements.append(item1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n\n    # create sets of common elements\n    common_set1 = set(test_tup1)\n    common_set2 = set(test_tup2)\n\n    # find common elements in sets\n    shared_elements = common_set1.intersection(common_set2)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a\n    prime number, otherwise False.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks whether a given number is prime or not.\n    A number is prime if it is divisible only by 1 and itself.\n    '''\n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a positive integer as input and returns True if the integer is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a Python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n == 5:\n        return False\n    elif n == 7:\n        return False\n    elif n == 11:\n        return False\n    elif n == 13:\n        return False\n    elif n == 17:\n        return False\n    elif n == 19:\n        return False\n    elif n == 23:\n        return False\n    elif n == 29:\n        return False\n    elif n == 31:\n        return False\n    elif n == 37:\n        return False\n    elif n == 41:\n        return False\n    elif n == 43:\n        return False\n    elif n == 47:\n        return False\n    elif n == 53:\n        return False\n    elif n == 59:\n        return False\n    elif n == 61:\n        return False\n    elif n == 67:\n        return False\n    elif n == 71:\n        return False\n    elif n == 73:\n        return False\n    elif n == 79:\n        return False\n    elif n == 83:\n        return False\n    elif n == 89:\n        return False\n    elif n == 97:\n        return False\n    elif n == 101:\n        return False\n    elif n == 103:\n        return False\n    elif n == 107:\n        return False\n    elif n == 109:\n        return False\n    elif n == 113:\n        return False\n    elif n == 127:\n        return False\n    elif n == 131:\n        return False\n    elif n == 137:\n        return False\n    elif n == 139:\n        return False\n    elif n == 149:\n        return False\n    elif n == 151:\n        return False\n    elif n == 157:\n        return False\n    elif n == 163:\n        return False\n    elif n == 167:\n        return False\n    elif n == 173:\n        return False\n    elif n == 179:\n        return False\n    elif n == 181:\n        return False\n    elif n == 191:\n        return False\n    elif n == 193:\n        return False\n    elif n == 197:\n        return False\n    elif n == 199:\n        return False\n    elif n == 211:\n        return False\n    elif n == 223:\n        return False\n    elif n == 227:\n        return False\n    elif n == 229:\n        return False\n    elif n == 233:\n        return False\n    elif n == 239:\n        return False\n    elif n == 241:\n        return False\n    elif n == 251:\n        return False\n    elif n == 257:\n        return False\n    elif n == 263:\n        return False\n    elif n == 269:\n        return False\n    elif n == 271:\n        return False\n    elif n == 277:\n        return False\n    elif n == 281:\n        return False\n    elif n == 283:\n        return False\n    elif n == 293:\n        return False\n    elif n == 307:\n        return False\n    elif n == 311:\n        return False\n    elif n == 313:\n        return False\n    elif n == 317:\n        return False\n    elif n == 331:\n        return False\n    elif n == 337:\n        return False\n    elif n == 347:\n        return False\n    elif n == 349:\n        return False\n    elif n == 353:\n        return False\n    elif n == 359:\n        return False\n    elif n == 367:\n        return False\n    elif n == 373:\n        return False\n    elif n == 379:\n        return False\n    elif n == 383:\n        return False\n    elif n == 389:\n        return False\n    elif n == 397:\n        return False\n    elif n == 401:\n        return False\n    elif n == 409:\n        return False\n    elif n == 419:\n        return False\n    elif n == 421:\n        return False\n    elif n == 431:\n        return False\n    elif n == 433:\n        return"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number. Otherwise, it returns False.\n    \"\"\"\n    # check if n is less than 2\n    if n < 2:\n        return True\n    \n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n    \n    # check if n is divisible by odd numbers from 3 to n-1\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n\n    return [i for i in range(2, limit + 1) if primes[i]]\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    primes = sieve_of_eratosthenes(n)\n    return n not in primes"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Create a min-heap of the first n elements\n    heap = hq.nsmallest(n, nums)\n\n    # Iterate through the remaining elements\n    for num in nums[n:]:\n        # If the new element is greater than the smallest element in the heap, remove the smallest element from the heap\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n        # If the new element is smaller than or equal to the smallest element in the heap, simply push it to the heap\n        else:\n            hq.heappush(heap, num)\n\n    # Return the top n elements from the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a max heap\n    heap = nums[:n]\n    hq.heapify(heap)\n    # remove the max heap from the list\n    for i in range(n, len(nums)):\n        # replace the max element with the last element of the list\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    # return the max heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a max heap\n    hq.heapify(nums)\n    \n    # extract the n largest integers from the max heap and return them as a list\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with the first n elements of the list as the initial elements\n    heap = hq.nsmallest(n, nums)\n\n    # Iterate over the remaining elements and remove the smallest element from the heap\n    for num in nums[n:]:\n        # If the number is larger than the smallest element, update the heap and continue\n        if num > heap[0]:\n            heap[0] = num\n            hq.heapify(heap)\n        # If the number is smaller than or equal to the smallest element, remove the smallest element and continue\n        else:\n            hq.heappop(heap)\n\n    # Return the n largest elements of the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the list of numbers\n    heap = hq.nsmallest(n, nums)\n    # return the elements in descending order from the min heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a min heap\n    nums_heap = hq.nsmallest(n, nums)\n\n    # Extract the n largest integers from the heap and return them in descending order\n    return [heapq.heappop(nums_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap and find n largest elements\n    heap = hq.nsmallest(n, nums)\n    # convert heap to list and return it\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap of n largest integers\n    hq.heapify(nums[:n])\n    \n    # Extract the n largest integers from the min heap\n    result = [hq.heappop(nums) for _ in range(n)]\n    \n    # Return the list of n largest integers in descending order\n    return sorted(result, reverse=True)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if it is a power of two, else False.\n    A number is said to be a power of two if it can be expressed as 2^n, where n is an integer.\n    '''\n    if x == 1:\n        return True\n    elif x == 0 or x & (x-1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x-1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x > 0: # check if x is positive\n        if x & (x-1) == 0: # check if x has only one bit set\n            return True\n        else:\n            return False\n    else: # if x is negative\n        if (x | -x) == 0: # check if x has only one bit set\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert both numbers to binary strings\n    binary_string_x = bin(x)[2:]\n    binary_string_y = bin(y)[2:]\n    \n    # Find the index of the first bit that differs\n    for i in range(len(binary_string_x)):\n        if binary_string_x[i]!= binary_string_y[i]:\n            return i\n            \n    # If no bit is found to differ, return False\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary format\n    binary = bin(x)[2:]\n    # Remove leading zeroes\n    binary = binary.lstrip('0')\n    # Check if x is a power of two\n    if len(binary)!= 1:\n        return False\n    # Check if x is a power of two by checking the number of set bits\n    count = binary.count('1')\n    if count == 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the number is a power of two\n    if x == 0 or (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the binary representation of x and its complement (x^2) have different bits at one position\n    diff = bin(x^2)[2:].count(\"1\")\n\n    # If the count is zero, then x and x^2 differ at one position, otherwise they don't\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    A, B = bin(x)[2:], bin(x)[2:]\n    if A == B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Find all words in the string using the regular expression\n    words = re.findall(pattern, text)\n    # Return a list of words which are at least 4 characters long\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with length less than 4\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the list of filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with less than 4 characters\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words shorter than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words as a list\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Compile a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all matches using the compiled pattern and return them as a list\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Filter out words that are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    # Join the filtered words back into a string\n    long_words =''.join(filtered_words)\n\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            return i+1\n    return n//2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j] == str[j:i][::-1]:\n                return j - i\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            min_rotations += 1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    # Find the length of the string \n    n = len(str) \n\n    # Initialize variables for left and right pointers \n    left = 0 \n    right = n - 1 \n\n    # Initialize a dictionary to store the count of characters in the string \n    char_count = {} \n    for char in str: \n        if char in char_count: \n            char_count[char] += 1 \n        else: \n            char_count[char] = 1 \n\n    # Check if the string has only one character \n    if n == 1: \n        return 0 \n\n    # Check if the string has only two characters and both characters are same \n    if n == 2 and str[0] == str[1]: \n        return 0 \n\n    # Initialize variables for minimum rotations and current rotations \n    min_rotations = n \n    current_rotations = n \n\n    # Loop while the left pointer is not greater than the right pointer \n    while left < right: \n\n        # Update the current rotations count \n        current_rotations = 0 \n\n        # Loop while the left and right pointers are not equal \n        while left < right: \n\n            # Check if the left and right characters are same \n            if str[left] == str[right]: \n                current_rotations += 1 \n                left += 1 \n                right -= 1 \n\n            # If the left and right characters are different, \n            # update the count of the left character and move the left pointer to the right \n            else: \n                char_count[str[left]] -= 1 \n                if char_count[str[left]] == 0: \n                    del char_count[str[left]] \n                left += 1 \n\n        # Check if the minimum rotations count is less than current rotations count \n        if current_rotations < min_rotations: \n            min_rotations = current_rotations \n\n        # Update the left and right pointers based on the current rotations count \n        left = max(left + current_rotations, 0) \n        right = min(right - current_rotations, n - 1) \n\n    # Return the minimum rotations count \n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Check if the input string is empty\n    if len(str) == 0:\n        return 0\n    \n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for i in range(1, len(str)):\n        # If the i-th character is in the string, calculate the number of rotations\n        if str[i] in freq and freq[str[i]] > 0:\n            # Calculate the minimum number of rotations to make the i-th character the same as the j-th character\n            min_rotations = min(min_rotations, find_Rotations(str[:i] + str[i] * (freq[str[i]] - 1) + str[i + 1:]) + 1)\n        \n        # If the i-th character is not in the string, calculate the number of rotations for all j < i\n        for j in range(i):\n            if str[j] in freq and freq[str[j]] > 0:\n                min_rotations = min(min_rotations, find_Rotations(str[:j] + str[i] * (freq[str[j]] - 1) + str[j + 1:]))\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # create a list of tuples, where each tuple contains the frequency of each character and its corresponding character\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # initialize the minimum number of rotations required to get the same string\n    min_rotations = 0\n\n    # iterate through the sorted list of tuples and find the minimum number of rotations required to get the same string\n    for count, char in sorted_chars:\n        min_rotations += count - 1\n        if char == str:\n            break\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str) # Convert string to a list of characters\n    n = len(str)\n    \n    # Initialize variables for minimum number of rotations and last character\n    min_rot = n\n    last_char = str[0]\n    \n    # Iterate through the string and find the minimum number of rotations\n    for i in range(1, n):\n        if str[i]!= last_char:\n            min_rot = min(min_rot, i+1)\n            last_char = str[i]\n            \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # get the length of the string\n    n = len(str)\n    \n    # loop through all possible rotations of the string\n    for i in range(n//2):\n        # get the first character of the first string\n        c1 = str[i]\n        # get the last character of the first string\n        c2 = str[n-i-1]\n        # check if the characters are the same\n        if c1!= c2:\n            # check if the characters are in reverse order\n            if c1 == str[n-1-i]:\n                # if the characters are in reverse order, the minimum number of rotations required is n-1-i\n                return n-1-i\n    \n    # if no rotations are found, the string is already the same\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[j] < str[i]:\n                max_len = max(max_len, j-i+1)\n    return max_len"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    temp = str\n    while temp!= str:\n        count += 1\n        temp = temp[1:] + str[0]\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '') #remove all occurrences of ch from string\n    s = s[:len(s)-len(ch)] #remove only last occurrence of ch from string\n    s = s[len(ch):] #remove only first occurrence of ch from string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    chars = list(s)\n\n    # Find the index of the first occurrence of the character\n    first_index = chars.index(ch)\n\n    # Find the index of the last occurrence of the character\n    last_index = chars.rindex(ch)\n\n    # Remove the first and last occurrence of the character from the list\n    del chars[first_index]\n    del chars[last_index]\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Check if the character is present at the beginning of the string\n    if s[0] == ch: \n        # Remove the first occurrence of the character from the string\n        s = s[1:] \n\n    # Check if the character is present at the end of the string\n    if s[-1] == ch: \n        # Remove the last occurrence of the character from the string\n        s = s[:-1] \n\n    # Return the modified string\n    return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the first occurrence of the character\n    s = s.replace(ch,'')\n    # Remove the last occurrence of the character\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # remove leading and trailing whitespaces\n    if ch in s: # check if the character is present in the string\n        s = s.replace(ch, \"\") # remove all occurrences of the character\n        if s[0] == ch: # check if the first character is the same as the character to remove\n            s = s[1:] # remove the first character\n        if s[-1] == ch: # check if the last character is the same as the character to remove\n            s = s[:-1] # remove the last character\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 2:\n        return s.replace(ch,'',1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\") # Removing all occurrences of the character\n    if len(s) < 1: # If the length of the string is zero after removing occurrences of the character, return an empty string\n        return \"\"\n    else:\n        return s[1:-1] # Removing first and last character if they are not the character to be removed"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sum variable\n    sum_M = 0\n    \n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Add the sum of the current row to the sum variable\n        sum_M += sum(M[i])\n    \n    # Sort the matrix in ascending order of sum of rows\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            # Check if the current element is not equal to the previous element\n            if M[i][j]!= M[i][j-1]:\n                # Find the index of the first element greater than the current element\n                k = j\n                while k < len(M[i]) and M[i][k] <= M[i][j]:\n                    k += 1\n                    \n                # Swap the elements at the current index and the index of the first element greater than the current element\n                M[i][j], M[i][k-1] = M[i][k-1], M[i][j]\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix M as input and returns the sorted matrix.\n    The matrix is sorted in ascending order based on the sum of its rows.\n    '''\n    n = len(M)\n    result = []\n    for i in range(n):\n        max_sum = float('-inf')\n        for j in range(i, n):\n            max_sum = max(max_sum, sum(row[j] for row in M[:j+1]))\n        result.append([max_sum])\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by the row sums\n    sorted_M = sorted(M, key=lambda x: x[row_sums.index(min(row_sums))])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    M.sort(key=lambda row: row_sums.index(row_sums.index(sum(row))))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples with the indices of each element in the matrix\n    indices = [(i,j) for i in range(len(M)) for j in range(len(M[0]))]\n    \n    # Sort the list of tuples based on the sum of its rows\n    indices.sort(key=lambda x: sum([M[i][j] for i in range(len(M)) if i!=x[0]]))\n    \n    # Create a new matrix with the sorted elements\n    sorted_M = [[M[i][j] for i,j in indices if i!=x[0]] for x in range(len(M))]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix in ascending order of its rows\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(j, len(M[i])):\n                if M[i][j] + M[i][k] < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n\n    # Print the sorted matrix\n    for row in M:\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # Iterate over the rows of the matrix\n    for i in range(n):\n        # Initialize a variable to store the minimum value in the current row\n        min_value = M[i][0]\n        \n        # Iterate over the columns of the matrix\n        for j in range(m):\n            # Check if the current value is smaller than the minimum value so far\n            if M[i][j] < min_value:\n                # If it is, update the minimum value\n                min_value = M[i][j]\n        \n        # Iterate over the columns of the matrix again\n        for j in range(m):\n            # Check if the current value is greater than the minimum value so far\n            if M[i][j] > min_value:\n                # If it is, swap it with the minimum value\n                M[i][j], M[i][m-1] = M[i][m-1], M[i][j]\n                # Iterate over the previous columns of the matrix and swap their values with the minimum value\n                for k in range(m-2, j-1, -1):\n                    if M[i][k] < min_value:\n                        M[i][k], M[i][k+1] = M[i][k+1], M[i][k]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the variable to store the final sorted matrix\n    final_matrix = []\n    \n    # Iterate over each row of the matrix\n    for i in range(len(M)):\n        # Initialize the variable to store the current row\n        current_row = M[i]\n        \n        # Sort the current row in ascending order\n        current_row.sort()\n        \n        # Append the sorted row to the final matrix\n        final_matrix.append(current_row)\n    \n    # Return the final sorted matrix\n    return final_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort each row in descending order based on the sum of the row elements\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sorted(M[i], reverse=True)\n    \n    # Sort the matrix in ascending order based on the sum of its rows\n    M = sorted(M, key=lambda row: sum(row))\n    \n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b # Calculate the area of the triangle\n    volume = area * h # Calculate the volume of the triangle\n    return volume # Return the volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, breadth, and height of a triangular prism and returns its volume.\n    '''\n\n    # calculating the volume of the triangular prism\n    volume = l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the lengths of the sides of a triangular prism (l, b, h) as input and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h #calculate volume using Heron's formula\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * b * h) / 2\n    volume = math.sqrt(area)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\w)(?=[a-z])(?=[A-Z])|(?<=[a-z])(?=[A-Z])|(?<=[a-z])[A-Z](?=[a-z])'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # define the regular expression pattern for matching lowercase letters followed by an underscore\n    pattern = r'[a-z][a-z_]*'\n\n    # use the pattern to match the input text and return True if a match is found, False otherwise\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"([a-z]+)_\"\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+[_a-z]+[a-z]+$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Remove all non-letter and non-underscore characters from the input string\n    pattern = r'\\W|'\n    text = re.sub(pattern, '', text)\n    \n    # Check if the resulting string has at least one underscore and if all characters in the string are lowercase\n    result = re.match(r'_+$', text) and text == text.lower()\n    \n    return result"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+_)*[a-z]+'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]+'\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore = r'_[a-z]+'\n    pattern = r'^(?!.*_)([a-z]+)_*([a-z]+)$'\n    match = re.search(pattern, text)\n    if match:\n        if '_' in match.group(1) and '_' in match.group(2):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    string_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in string_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string) # converting the string to list to make it mutable\n    for i in range(len(string)):\n        if string[i] in string[i+1:]: # checking if the current character is present in the next characters of the string\n            string.pop(i) # removing the current character from the list\n    return ''.join(string) # converting the list back to string and returning the result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop over the characters in the first string\n    for char in list1:\n        # If the character is not in the second string, add it to the result\n        if char not in list2:\n            result.append(char)\n    # Convert the result to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as an input and removes the characters present in the second string.\n    '''\n    # Remove characters present in the second string from the first string\n    for char in string:\n        if char in string2:\n            string = string.replace(char, '')\n    \n    # Convert the remaining string into a list of characters\n    char_list = [char for char in string]\n    \n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    string_list = [0] * NO_OF_CHARS\n    for char in string:\n        if char not in string_list:\n            string_list[ord(char)] = 1\n    string_list = [chr(i) for i in range(NO_OF_CHARS) if string_list[i]]\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for char in string: \n        if char not in remove_chars: \n            result.append(char) \n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    list_of_chars = [chr(i) for i in range(no_of_chars)]\n    no_of_chars = len(list_of_chars)\n    \n    for i in range(len(string)):\n        if string[i] in list_of_chars:\n            del list_of_chars[list_of_chars.index(string[i])]\n    \n    result = ''.join(list_of_chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    new_string = \"\"\n    for char in string:\n        if char not in char_set:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes in a string and returns a list of characters that are not present in the second string.\n    \"\"\"\n    char_set = set(string)\n    no_of_chars = 256\n    list_of_chars = [chr(i) for i in range(no_of_chars) if i not in char_set]\n    return list_of_chars\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the input string into a list\n    input_list = list(string)\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Loop through the input list\n    for char in input_list: \n\n        # If the character is not present in the second string\n        if char not in string:\n\n            # Add the character to the result list\n            result_list.append(char)\n\n    # Convert the result list into a string\n    result_string = ''.join(result_list)\n\n    return result_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # loop through each element in the array\n    for num in arraynums:\n        # if the element is already in the set, then there is a duplicate\n        if num in unique_set:\n            return True\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n\n    # if no duplicates were found, then the array is valid\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if the set has more than one element\n    return len(unique_set) > 1"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the counts of each element in the array\n    count_dict = {}\n    # Loop through each element in the array and update the count in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Loop through the dictionary and check if any element has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through the array and add each number to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # If the set has any items, it means there are duplicates in the array\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    elements = {}\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in elements:\n            return True\n        # Add the element to the dictionary\n        else:\n            elements[num] = True\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements in the array\n    unique_nums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        # If yes, then there are no duplicates in the array\n        return False\n    else:\n        # If not, then there are duplicates in the array\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'The number is woodball.'\n    else:\n        return 'The number is not woodball.'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    elif x > 100:\n        return False\n    else:\n        for i in range(1, 11):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 15 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(2, x//2+1):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 10 and x <= 100"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"Woodball\"\n    elif x < 0:\n        return \"Not a woodball\"\n    else:\n        return \"Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        if x % 10 == 5:\n            if x % 100 == 50:\n                return True\n        elif x % 5 == 0:\n            if x % 25 == 20:\n                return True\n    else:\n        if x % 10 == 0:\n            if x % 100 == 0:\n                return True\n        elif x % 5 == 0:\n            if x % 25 == 0:\n                return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x % 3 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp //= 10\n    \n    return num - reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return rev_num == num*2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (int(str(num)[::-1]) + 2)\n\nnum = int(input(\"Enter a number: \"))\nprint(rev(num))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # Check if the reversed number is one less than twice its original number\n    if int(reversed_num) == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        return \"The input must be an integer.\"\n    \n    # Reverse the input number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    \n    # Check if the reversed number is one less than twice its reverse\n    if rev_num + 1 < 2 * rev_num:\n        return \"The number is one less than twice its reverse.\"\n    else:\n        return \"The number is not one less than twice its reverse.\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    reverse = num[::-1]\n    twice_reverse = reverse * 2\n    return int(num) < int(twice_reverse)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n\n    return abs(num - rev_num) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the input number to a string\n    str_num = str(num)\n    \n    # find the reverse of the string and convert it back to an integer\n    rev_num = int(str_num[::-1])\n    \n    # check if the reversed number is one less than twice the original number\n    if rev_num < num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the input array in non-decreasing order\n    arr.sort()\n    # Initialize a variable to store the maximum number\n    max_num = 0\n    # Iterate through the sorted array\n    for i in range(len(arr)):\n        # Calculate the next possible number by concatenating the digits of the current number and appending the next digit\n        next_num = arr[i] + arr[i+1]\n        # Update the maximum number if the next number is greater\n        if next_num > max_num:\n            max_num = next_num\n    # Return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort() #sort the list in ascending order\n    n = len(arr)\n    max_num = 0\n\n    for i in range(n-1,-1,-1): #start from the last digit and move backward\n        max_num += arr[i]*(10**i) #multiply current digit with the current product of all previous digits\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize the maximum number to 0\n    max_num = 0\n\n    # Loop through each digit in the list\n    for digit in arr:\n\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Check if the digit can be formed as the sum of two digits in the current maximum number\n        for i in range(max_num, digit):\n            if i % digit == 0:\n                max_num = i\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum possible number that can be formed by adding the digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n    # Initialize the maximum number with the first digit of the list\n    max_num = arr[0]\n    # Initialize the carry variable with zero\n    carry = 0\n    # Loop through the list of digits\n    for num in arr:\n        # Calculate the sum of the current digit and the carry\n        curr_sum = num + carry\n        # If the sum of the current digit and the carry is greater than 9, then add 10 to the carry and subtract 10 from the sum\n        if curr_sum > 9:\n            carry = 1\n            curr_sum = curr_sum - 10\n        else:\n            carry = 0\n        # Update the maximum number if the sum is greater than the current maximum number\n        if curr_sum > max_num:\n            max_num = curr_sum\n    # Return the maximum number formed by adding the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed using the digits.\n    \"\"\"\n    arr = [int(digit) for digit in arr]  # convert the list of digits to integers\n    n = len(arr)  # get the length of the list of digits\n\n    # initialize the maximum number and the current sum\n    max_num = 0\n    current_sum = 0\n\n    # iterate through the list of digits\n    for i in range(n):\n        # check if the current digit can be added to the current sum\n        if current_sum + arr[i] > max_num:\n            max_num = current_sum + arr[i]\n\n        # add the current digit to the current sum\n        current_sum = current_sum + arr[i]\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # initialize max_num as 0\n    max_num = 0\n    # loop through each element in the array\n    for num in arr:\n        # loop through each digit in the number\n        for digit in str(num):\n            # calculate the power of the digit and add it to max_num\n            max_num += int(digit) ** len(arr)\n    # return the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = 0\n            for k in range(i, j):\n                num += arr[k]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) > max_num:\n                max_num = sum(arr[i:j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and arr[i] < arr[j]:\n                max_num = max(max_num, arr[i] + arr[j])\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integer inputs and checks whether they have opposite sign or not.\n    \"\"\"\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integer arguments x and y and returns a boolean value indicating whether\n    the two integers have opposite signs or not.\n    \"\"\"\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both numbers have same sign\n    if x >= 0 == y >= 0:\n        return False\n    # Check if both numbers have different sign\n    elif x < 0!= y < 0:\n        return True\n    # If numbers have different signs, then one of them is positive and the other is negative\n    else:\n        if x > 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, and False otherwise.\n    '''\n    if x * y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n\n    # Check if both numbers have opposite signs\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x<0 and y<0: \n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize the base number and the counter\n    oct_num = 0\n    counter = 1\n\n    # Loop until we reach the nth octagonal number\n    while counter <= n:\n        # Calculate the next octagonal number\n        oct_num = 8 * (counter - 1) ** 2 + 1\n\n        # Increment the counter\n        counter += 1\n\n    # Return the octagonal number\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1 or n > 1000000:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (n * 2 - 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Initialize variables\n    current_num = 0\n    next_num = 1\n    octagonal_number = 1\n    \n    # Loop until n octagonal numbers are found\n    while octagonal_number < n:\n        # Calculate the next octagonal number\n        octagonal_number = current_num**2 + next_num**2\n        \n        # Check if the next octagonal number is greater than n\n        if octagonal_number > n:\n            # If it is, calculate the next number greater than n\n            next_num = octagonal_number - n\n            \n            # Increment the current number\n            current_num += 1\n    \n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n < 1:\n        return None\n\n    octagonal_numbers = [1]\n\n    for i in range(2, n):\n        if i**2 + 1 in octagonal_numbers:\n            octagonal_numbers.append(i**2 + 1)\n        if i**2 - 1 in octagonal_numbers:\n            octagonal_numbers.append(i**2 - 1)\n\n    return octagonal_numbers[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    j = 1\n    octagonal = 0\n    \n    while i <= n:\n        j = 1\n        while j <= i:\n            octagonal += 1\n            j += 1\n        i += 1\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return (8 * n * n) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # Base case\n    if n <= 0:\n        return None\n    \n    # Recursive case\n    elif n == 1:\n        return 1\n    else:\n        return (n * (1 + 8 * (n - 1))**0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        octagonal = i*i*2 - 1\n        print(octagonal)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    return n**2 == 16 * n + 1\n\ndef octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    if not is_octagonal(n):\n        raise ValueError(\"n is not an octagonal number\")\n    return (n**2 - 16 * n + 1) // 2\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a positive integer: \"))\n    print(\"The\", n, \"th octagonal number is:\", octagonal(n))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    d = defaultdict(int) # Dictionary to store the count of substrings\n    \n    for i in range(len(s)):\n        d[(sum(map(int, s[i:j+1])), j-i+1)] += 1\n    \n    return d[0]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the given condition.\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of the given string.\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring is a valid substring with sum of digits equal to its length.\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count[s[i:j+1]] += 1\n\n    # Return the count of substrings with the given condition.\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n    # iterate over each character in the string\n    for i in range(len(s)):\n        # initialize the sum variable\n        sum_ = 0\n        # iterate over each character in the current substring\n        for j in range(i, len(s)):\n            # add the ASCII value of the current character to the sum\n            sum_ += ord(s[j])\n        # check if the sum is equal to the length of the substring\n        if sum_ == len(s):\n            # increment the count for the substring in the dictionary\n            count_dict[sum_] += 1\n    # return the dictionary containing the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the number of substrings with the given length\n    count = defaultdict(int)\n    \n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # increment the count of substrings with the given length\n                count[len(s[i:j])] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            count[digits_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to the length of the substring\n            if sum(map(int, s[i:j])) == len(s[i:j]):\n                # update the count of substrings in the dictionary\n                count_dict[s[i:j]] += 1\n\n    # return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0] * 26 for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(26):\n            if s[i] == chr(j+97):\n                dp[i][j] = 1\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(25, -1, -1):\n            if dp[i][j] == 1:\n                if j + 1 == 0:\n                    count += 1\n                else:\n                    count += dp[i+1][j-1]\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    def count_substrings_helper(s, i, j, k, prev_sum, curr_sum, prev_count):\n        if i > j:\n            return prev_count\n\n        if curr_sum == k:\n            prev_count[curr_sum] += 1\n\n        if s[i] == s[j]:\n            count_substrings_helper(s, i + 1, j - 1, k, prev_sum, curr_sum + 1, prev_count)\n            count_substrings_helper(s, i + 1, j, k, prev_sum, curr_sum + 1, prev_count)\n        else:\n            count_substrings_helper(s, i + 1, j, k, prev_sum, curr_sum + 1, prev_count)\n            count_substrings_helper(s, i, j - 1, k, prev_sum, curr_sum + 1, prev_count)\n\n        return prev_count\n\n    # initialize the dictionary to store the count of substrings with given sum\n    prev_count = defaultdict(int)\n\n    # calculate the sum of digits of length k\n    k = len(str(k))\n\n    # loop through all possible substrings of length k in the string s\n    for i in range(len(s) - k + 1):\n        # calculate the sum of digits of the current substring\n        curr_sum = sum(int(digit) for digit in s[i:i + k])\n\n        # call the helper function to count the number of substrings\n        count_substrings_helper(s, i, i + k - 1, k, curr_sum, curr_sum, prev_count)\n\n    # return the count of substrings with given sum\n    return prev_count[k]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            sub = s[i:j]\n            if sum([int(x) for x in sub]) == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return \"List is empty\"\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list of tuples by their first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the maximum difference to be the difference between the first and last elements\n    max_diff = test_list[-1][0] - test_list[0][0]\n\n    # Iterate through the sorted list and compare the differences between adjacent elements\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples representing the available pairs of numbers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given list of tuples by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    max_diff = 0\n    prev_second = 0\n\n    # Iterate through the sorted list and calculate the difference between each pair of numbers\n    for second, number in test_list:\n        diff = second - prev_second\n        if diff > max_diff:\n            max_diff = diff\n        prev_second = second\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    pairs = sorted(set(test_list))\n    n = len(pairs)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(pairs[i] - pairs[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    test_list.sort()\n    max_diff = 0\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = float('-inf') # initialize max difference to negative infinity\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][1] # calculate difference between i and j\n            if diff > max_diff: # update max_diff if diff is greater\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_tuples_by_second_value(tuples_list):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(tuples_list, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Recursively flatten a list.\n        \"\"\"\n        if isinstance(lst, list):\n            return [flatten(x) for x in lst]\n        else:\n            return lst\n\n    flattened_list = flatten(data_list)\n    total = sum(flattened_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(nested_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        flattened_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result += flatten(item)\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, accumulator=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            accumulator += recursive_list_sum(item, accumulator)\n    else:\n        return accumulator"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                data_list.append(item)\n    return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        '''\n        Helper function to flatten the list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(lst):\n        if isinstance(lst, list):\n            return sum(flatten_and_sum(x) for x in lst)\n        else:\n            return lst\n\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:  # Base case: if the input list has only one element, return it\n        return data_list[0]\n    else:  # Recurse on each sublist\n        sublist_sum = recursive_list_sum(data_list[1:])  # skip the first element (which is the head of the original list)\n        return data_list[0] + sublist_sum  # add the first element to the sum of the sublists"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list or only one element\n    if len(data_list) == 0 or len(data_list) == 1:\n        return sum(data_list)\n    \n    # Recursive case: sum first element and then sum the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 20\n    if n == 5:\n        return 120\n    if n == 6:\n        return 720\n    if n == 7:\n        return 5040\n    if n == 8:\n        return 40320\n    if n == 9:\n        return 362880\n    if n == 10:\n        return 3628800"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate from 0 to n (excluding n)\n    for i in range(n):\n        # Calculate the number of ways to partition the set of i Bell numbers\n        ways = (i+1)**(n-1)\n\n        # Update the count variable\n        count += ways\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = [1, 1]\n    for i in range(2, n+1):\n        bell_set.append(bell_set[-1] + bell_set[-2])\n    return bell_set[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables for Bell numbers and count\n    bell = [0]*(n+1)\n    count = 0\n    \n    # Calculate Bell numbers recursively\n    for i in range(1, n+1):\n        bell[i] = sum(bell[:i])\n        count += bell[i]\n    \n    # Return the count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): the number of elements in the partition\n\n    Returns:\n    int: the number of ways to partition the set of Bell numbers into n parts\n    \"\"\"\n\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 1\n\n    # Iterate through all possible partition sizes\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers into i parts\n        ways *= (n - i + 1) // i\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    def partition(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return partition(n-1) + partition(n-2)\n    return partition(n)\n\nprint(bell_number(5)) # Output: 120"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    This function calculates the number of ways to partition a set of Bell numbers.\n    '''\n    # The number of ways to partition a set of Bell numbers is 1 if n is 0 or 1.\n    if n == 0 or n == 1:\n        return 1\n    # If n is even, then there are n/2 ways to partition the set with the first half of the numbers.\n    elif n % 2 == 0:\n        return bell_number(n//2)\n    # If n is odd, then there are n/2+1 ways to partition the set with the first half of the numbers.\n    else:\n        return bell_number(n//2) + bell_number(n//2) + 1"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or not\n    if len(A) <= 1: \n        return True\n    \n    # Initialize two variables\n    prev_val = A[0]\n    curr_val = A[1]\n    \n    # Iterate through the array\n    for i in range(2, len(A)): \n        if A[i] < prev_val: \n            return False\n        elif A[i] > prev_val: \n            curr_val = A[i]\n        prev_val = curr_val\n    \n    # If all elements in the array are equal, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    # Check if the array has only one increasing and one decreasing subsequence\n    if A[1] > A[0] and A[-2] < A[-1]:\n        return True\n    # Check if the array has only one decreasing and one increasing subsequence\n    if A[-1] < A[-2] and A[1] > A[0]:\n        return True\n    # Check if the array has only one increasing subsequence and one decreasing subsequence\n    for i in range(len(A) - 2):\n        if A[i] > A[i+1] and A[i+2] < A[i+3]:\n            return True\n        if A[i] < A[i+1] and A[i+2] > A[i+3]:\n            return True\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    if A[0] >= A[-1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] <= A[-1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False \n    return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for monotonicity in increasing order\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    # check for monotonicity in decreasing order\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    elif A[0] >= A[1] and A[1] <= A[2]:\n        return is_Monotonic(A[1:])\n    elif A[0] <= A[1] and A[1] >= A[2]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or contains only one element\n    if len(A) < 2:\n        return True\n    \n    # compare the first two elements\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # If the length of the array is less than 2, return False as it is always monotonic\n    if len(A) < 2: \n        return False\n    \n    # Initialize a variable to check if the array is monotonic or not\n    is_monotonic = True\n    \n    # Loop through the array and check if the array is monotonic or not\n    for i in range(len(A) - 1): \n        if A[i] > A[i+1]: \n            # If the current element is greater than the next element, the array is not monotonic\n            is_monotonic = False\n            break\n    \n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A of integers and returns a boolean value indicating whether the array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    \n    for i in range(len(l)):\n        if l[i] not in s:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(x in l for x in s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return any(s[0] in sl for sl in is_sublist(l[1:], s[1:]))"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to keep track of the count of equal length tuples\n    count = 0\n\n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Check if the length of the tuple is equal to the length of the first tuple\n        if len(tup) == len(Input[0]):\n            # If it is, increment the count variable\n            count += 1\n\n    # Return the count of equal length tuples\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_equal = True\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_tuples = []\n    for i in Input:\n        all_tuples.append(tuple(i))\n    for i in range(1, len(all_tuples)):\n        if len(all_tuples[0])!= len(all_tuples[i]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_equal = True\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    # initialize swapped to True, so that the first iteration of the loop will not set it to False\n    swapped = True\n    # initialize gap to n\n    gap = n\n    # while swapped is True\n    while swapped:\n        # set swapped to False\n        swapped = False\n        # for i from n-2 to 0 with a step of -1\n        for i in range(n-2, -1, -1):\n            # if nums[i] is greater than nums[i+gap]\n            if nums[i] > nums[i+gap]:\n                # swap nums[i] and nums[i+gap]\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # set swapped to True\n                swapped = True\n        # decrease gap by a factor of 1.3 (the golden ratio)\n        gap = int(gap * 1.3)\n        # if gap is still less than 1 (which would mean the list is already sorted)\n        if gap < 1:\n            # set swapped to False\n            swapped = False\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = min(gap, n)\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        n -= gap\n        gap = max(1, int(gap/1.3))\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Initialize parameters\n    gap = len(nums)\n    swapped = True\n    \n    # Main loop\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        \n        # Sort the list\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        # Decrease the gap size\n        if not swapped:\n            gap = int(gap / 1.3)\n        \n        # Print the sorted list\n        print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n\n    # Initialize the gap and the swapping flag\n    gap = n\n    swapping = True\n\n    # While the gap is larger than 1 and swapping is True\n    while gap > 1 and swapping:\n\n        # Set the gap to the half of the current gap\n        gap = gap // 1\n\n        # Set the swapping flag to False\n        swapping = False\n\n        # For each element from the first element to the last element\n        for i in range(n - gap):\n\n            # If the element is greater than the next element\n            if nums[i] > nums[i + gap]:\n\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # Set the swapping flag to True\n                swapping = True\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    \n    # Apply insertion sort repeatedly until the gap size is no longer halved\n    while gap > 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    \n    n = len(nums)\n    gap = n\n    \n    while gap > 1:\n        gap = min(gap, n//gap)\n        for i in range(gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n        \n        if gap == n//gap:\n            gap *= 10\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = min(gap, n//2)\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        n -= gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of numbers using the Comb Sort algorithm.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n\n    # Set the initial gap size and set the maximum gap to half the length of the list\n    gap = len(nums)\n    max_gap = int(gap / 2)\n\n    # Perform the comb sort algorithm\n    while gap > 1 or nums[0]!= nums[-1]:\n        # Reduce the gap size by half\n        gap = int(gap / 1.3)\n\n        # If the gap is too small, set it to 1\n        if gap < 1:\n            gap = 1\n\n        # Reset the range of the list to be sorted\n        range_start = 0\n        range_end = len(nums) - 1\n\n        # If the list is already sorted, stop here\n        if nums[range_start] <= nums[range_end]:\n            break\n\n        # Swap adjacent elements if they are in the wrong order\n        while range_start < range_end:\n            if nums[range_start] > nums[range_end]:\n                nums[range_start], nums[range_end] = nums[range_end], nums[range_start]\n\n            # Move the range boundaries one step closer to the middle\n            range_start += 1\n            range_end -= 1\n\n        # Move the range boundaries one step closer to the middle\n        if range_start > 0:\n            range_start -= 1\n        if range_end < len(nums) - 1:\n            range_end += 1\n\n        # Check if the list is sorted\n        if nums[range_start] <= nums[range_end]:\n            break\n\n        # Set the new maximum gap\n        max_gap = gap\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is a square\n    if n**0.5**2 == int(n**0.5**2):\n        print(f'{n} is a square')\n        # Check if the difference of the square root of the number and the square root of the square of the number is a square\n        if (int(n**0.5)**2 - int(n**0.5))**0.5**2 == int((int(n**0.5)**2 - int(n**0.5))**0.5**2):\n            print(f'{n} can be represented as the difference of two squares')\n        else:\n            print(f'{n} cannot be represented as the difference of two squares')\n    else:\n        print(f'{n} is not a square')"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the given number is a perfect square or not\n    def isPerfectSquare(num):\n        return num == int(num ** 0.5 + 0.5) ** 2\n    \n    # Calculate the difference of the given number and all its perfect squares\n    diff = 0\n    for i in range(1, n+1):\n        diff += i ** 2\n    \n    # Check if the difference of the given number and all its perfect squares is a perfect square or not\n    if isPerfectSquare(diff):\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is already a square\n    if n**0.5 == int(n**0.5):\n        return True\n    else:\n        # Calculate the difference of two squares\n        diff = (n**0.5)**2 - n**0.5\n        # Check if the difference is a square\n        if diff**0.5 == int(diff**0.5):\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for base cases\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    \n    # check for sub-cases\n    for i in range(1, int(n ** 0.5) + 1):\n        if i ** 2 + n == 0:\n            return True\n        elif i ** 2 + n == i ** 2 + n + 1:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether a given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is even or odd\n    if n % 2 == 0: \n        return False\n    \n    # Find the square root of the given number\n    sqrt = int(n ** 0.5)\n    \n    # Check if the square root is an integer\n    if sqrt ** 2!= n: \n        return False\n    \n    # Check if the square root can be represented as the difference of two squares\n    for i in range(2, sqrt + 1): \n        if (sqrt - i) ** 2 == n: \n            return True\n        elif (sqrt + i) ** 2 == n: \n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Square of the difference\n    diff_square = n**2 - n\n    \n    # Check if the difference is a square\n    if diff_square**2 == n:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(i) for i in str(n)]\n    # Initialize a variable to store the difference of squares\n    diff = 0\n    # Loop through the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # Add the product of the digit and its square to the difference of squares\n        diff += digits[i] * digits[i]\n    # Check if the difference of squares is equal to the given number\n    if diff == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n\n    # iterate through the range of numbers from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # check if i squared is equal to n\n        if i*i == n:\n            # check if (n-i)^2 is equal to i^2\n            if (n-i)**2 == i**2:\n                return True\n\n    # if we reach this point, it means we didn't find a pair of squares that add up to n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # We need to check if n is a positive integer\n    if n < 1:\n        return \"Invalid Input\"\n    \n    # We need to check if n is a perfect square\n    is_square = False\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            is_square = True\n            break\n        i += 1\n    \n    # If n is not a perfect square, it cannot be represented as the difference of two squares\n    if not is_square:\n        return \"Invalid Input\"\n    \n    # We need to check if the difference of squares of n and its closest perfect square is a perfect square\n    diff_squares = n - i*i\n    is_square = False\n    i = 1\n    while i*i <= diff_squares:\n        if diff_squares % i == 0:\n            is_square = True\n            break\n        i += 1\n    \n    # If the difference of squares of n and its closest perfect square is not a perfect square, n cannot be represented as the difference of two squares\n    if not is_square:\n        return \"Invalid Input\"\n    \n    return \"Yes\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # check if n is a perfect square\n    is_square = lambda x: x**0.5 == int(x**0.5)\n\n    # check if n is a difference of two squares\n    is_difference = lambda x: is_square(abs(x-n))\n\n    # check if n is a difference of two squares or a perfect square\n    if is_square(n):\n        return True\n    elif is_difference(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for pattern in patterns:\n        if count >= len(colors):\n            return False\n        if colors[count]!= pattern[count]:\n            return False\n        count += 1\n    if count!= len(colors):\n        return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the index\n    index = 0\n    # Initialize the length of the colors list\n    colors_length = len(colors)\n    # Initialize the length of the patterns list\n    patterns_length = len(patterns)\n\n    # Loop through the patterns array\n    while index < patterns_length:\n        # Check if the current color is the same as the one in the pattern\n        if colors[index] == patterns[index]:\n            # Increment the index\n            index += 1\n        else:\n            # If the current color is not the same as the one in the pattern,\n            # reset the index and return False\n            index = 0\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i] == patterns[j]:\n                for k in range(j+1, n):\n                    if colors[j] == patterns[k]:\n                        for l in range(k+1, n):\n                            if colors[k] == patterns[l]:\n                                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # first, check that all colors are unique\n    if len(colors)!= len(set(colors)):\n        return False\n\n    # then, check that each pattern appears in the colors array exactly once\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n        colors.remove(pattern)\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i] == patterns[i] and colors[i+1] == patterns[i+1]:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check the length of the colors and patterns arrays\n    if len(colors)!= len(patterns):\n        return False\n    # loop through the colors array and check if each color matches the corresponding pattern in the patterns array\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize the count of colors\n    count = {}\n\n    # Loop through the colors array\n    for color in colors:\n\n        # If the color is not already in the count dictionary, set it to 1\n        if color not in count:\n            count[color] = 1\n        # If the color is already in the count dictionary, increment its count by 1\n        else:\n            count[color] += 1\n\n    # Loop through the patterns array\n    for pattern in patterns:\n\n        # If the count of the current pattern is not equal to the count of the previous pattern, return False\n        if count[pattern]!= patterns[patterns.index(pattern) - 1]:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for color in colors:\n        if color == patterns[pattern_index]:\n            pattern_index += 1\n        if pattern_index == len(patterns):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K!= 0:\n                count += 1\n                if count == len(tup):\n                    tuples_list.append(tup)\n                    break\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list of tuples): A list of tuples, where each tuple contains a sequence of integers.\n    K (integer): An integer, the divisor to use when checking if all elements in a tuple are divisible by it.\n\n    Returns:\n    list of tuples: A list of tuples containing the elements of the input list that are divisible by K.\n    \"\"\"\n    # initialize an empty list to hold the tuples that meet the condition\n    result = []\n\n    # loop through the input list of tuples\n    for tup in test_list:\n        # loop through the elements of the tuple and check if they are divisible by K\n        for elem in tup:\n            if elem % K!= 0:\n                # if any element is not divisible by K, immediately break out of the inner loop\n                break\n        else:\n            # if the inner loop completes without finding any undivisible elements, add the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Parameters:\n    test_list (list): A list of tuples.\n    K (int): The number of elements that should be divisible by K in each tuple.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    # create an empty list to store the tuples that meet the condition\n    result = []\n    # loop through the list of tuples and check if each tuple has all elements divisible by K\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            # add the tuple to the result list if it meets the condition\n            result.append(tup)\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples\n    result = []\n    \n    # Loop through each tuple in the test_list\n    for tuple1 in test_list:\n        # Check if all the elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tuple1):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tuple1)\n    \n    # Return the list of tuples that meet the conditions\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if sum(test_list[i]) % K == 0:\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples from the given list of tuples which have all elements divisible by k.\n    \n    Args:\n    test_list: list of tuples\n    K: int, the divisor for dividing all elements in the tuples\n    \n    Returns:\n    list of tuples, the found tuples\n    \n    \"\"\"\n    found_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            found_tuples.append(tup)\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the divisible tuples\n    result = []\n\n    # Iterate through each tuple in the input list\n    for tup in test_list:\n        # Check if each element of the tuple is divisible by k\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 1: # if length of the word is odd\n            return True\n    return False # if all the words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string by space\n    for word in words:\n        if len(word) % 2 == 0: # if the length of the word is even\n            print(word, \"is an even word.\")\n        else:\n            print(word, \"is an odd word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return 'The length of the word is even'\n        else:\n            return 'The length of the word is odd'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    word_len = len(word)\n    if word_len % 2 == 0:\n        print(word, \"is an even word.\")\n    else:\n        print(word, \"is an odd word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or even.\n    If the length of the word is odd, it returns True.\n    If the length of the word is even, it returns False.\n    '''\n    # Removing whitespaces from the input string\n    s = s.replace(\" \", \"\")\n    # Splitting the input string into words\n    words = s.split()\n    # Initializing a variable to keep track of the length of the word\n    word_len = 0\n    # Iterating through the words and updating the word_len variable\n    for word in words:\n        word_len += len(word)\n    # Checking if the length of the word is odd or even\n    if word_len % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length\")\n        else:\n            print(f\"{word} is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # Split the string into words\n    for word in words:\n        if len(word) % 2!= 0: # Check if the length of each word is odd\n            return False\n    return True # If all the words have odd lengths, return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n + 1) * (n + 2) // 6\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a, b, c, d = 0, 0, 0, 0\n\n    for i in range(1, n+1):\n        a = i * (2*i - 1) * (2*i - 1) // 6\n        b = (2*i - 1) * (2*i - 1) // 2\n        c = (2*i - 1) * (2*i - 1) * (2*i - 2) // 6\n        d = (2*i - 1) * (2*i - 1) * (2*i - 2) // 12\n\n        print(a, b, c, d)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # initialize variables\n    k = 1\n    num = 1\n\n    # loop until we get n tetrahedral numbers\n    while num <= n:\n        # add k to the number\n        num += k\n        # increment k and repeat the process until k is greater than n\n        k += 1\n\n    # return the n-th tetrahedral number\n    return num - n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (3*n**2 - 1)//2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a variable to store the sum of the first n Fibonacci numbers\n    sum_fib = 0\n    \n    # Initialize the first two Fibonacci numbers\n    fib1, fib2 = 0, 1\n    \n    # Loop through the first n-1 Fibonacci numbers\n    for i in range(n-1):\n        # Calculate the next Fibonacci number\n        fib3 = fib1 + fib2\n        # Add it to the sum of the Fibonacci numbers\n        sum_fib += fib3\n        # Update the Fibonacci numbers for the next iteration\n        fib1 = fib2\n        fib2 = fib3\n    \n    # Return the sum of the first n Fibonacci numbers\n    return sum_fib"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((1 + 8 * n) * (1 + 8 * n)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    \n    if n == 1:\n        return 1\n    \n    # First three tetrahedral numbers\n    a = 1\n    b = 2\n    c = 3\n    \n    # Starting from 4th tetrahedral number\n    for i in range(4, n+1):\n        # Calculate the next tetrahedral number\n        d = a + b + c + i\n        \n        # Check if the next tetrahedral number is a tetrahedron\n        if is_tetrahedron(a, b, c, d):\n            return d\n        \n        # Update a, b, and c\n        a, b, c = b, c, i + 1\n\ndef is_tetrahedron(a, b, c, d):\n    '''\n    Check if the given sides of a triangle form a tetrahedron.\n    '''\n    return a**2 + b**2 + c**2 == d**2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_sum(m):\n        if m <= 1:\n            return m\n        else:\n            return m + tetrahedral_sum(m - 1)\n\n    return tetrahedral_sum(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        result = n * (n - 1) * (n - 2)\n        return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Function to find the factorial of a number\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Find the sum of first n natural numbers\n    first_n = 1\n    sum_first_n = 0\n    for i in range(1, n+1):\n        first_n = factorial(i)\n        sum_first_n += first_n\n\n    # Find the sum of first n natural numbers divided by the factorial of n\n    sum_first_n_div_factorial_n = 0\n    for i in range(1, n+1):\n        sum_first_n_div_factorial_n += first_n // factorial(i)\n\n    # Return the result\n    return sum_first_n_div_factorial_n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nresult = volume_sphere(r)\nprint(\"The volume of the sphere is:\", result)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize variables\n    sum_ascii = 0\n    # Iterate through each character of the string\n    for char in strr:\n        # Convert the character to ASCII\n        ascii_char = ord(char)\n        # Add the ASCII value to the sum of ASCII values\n        sum_ascii += ascii_char\n    # Convert the sum of ASCII values to a character\n    char = chr((sum_ascii % 26) + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char = char % 26\n    char_str = chr(char)\n    return char_str"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initialize the sum variable to zero\n    sum = 0\n\n    # iterate over each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # add the ASCII value modulo 26 to the sum\n        sum += ascii_val % 26\n\n    # convert the sum modulo 26 back to a character and return it\n    return chr(sum % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    char = (ascii_val % 26) + 65\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char = (char - 65 + 1) % 26 + 65\n        if char >= 97:\n            char = char - 32\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize a variable to store the character\n    char = ''\n\n    # iterate over each character of the string\n    for char_i in strr:\n        # add the ASCII value of the character to the variable char\n        char += chr(ord('a') + ord(char_i) % 26)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # initialize the variable to store the final character\n    char = \"\"\n    # loop through each character of the string\n    for i in range(len(strr)):\n        # add the ASCII value of the character to the variable\n        char += str(ord(strr[i]))\n        # add the ASCII value of 10 (to ensure that the last digit is 0) to the variable\n        char += str(10)\n    # divide the final character by 26 to get the index of the character\n    final_index = int(char) // 26\n    # return the character by subtracting the ASCII value of 'a' (which is 97) and multiplying by 26 (since the character has 26 letters)\n    return chr(final_index * 26 - 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Traverse through each character in the given string\n    for char in strr:\n        # Convert each character to its ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value to the result string\n        result += chr(ascii_value)\n    # Return the result string\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n+1)\n    sequence[0] = 0\n    sequence[1] = 1\n    for i in range(2, n+1):\n        sequence[i] = 4 * (sequence[i-1] - sequence[i-2]) + sequence[i-1]\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first number in the sequence\n    sequence = [1]\n    # Loop through each number in the sequence\n    for i in range(2, n+1):\n        # Check if the current number is even or odd\n        if i % 2 == 0:\n            # If it is even, add 2 to it and append it to the sequence\n            sequence.append(sequence[i-2] + 2)\n        else:\n            # If it is odd, append 4 to it and append it to the sequence\n            sequence.append(sequence[i-1] + 4)\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    for i in range(n):\n        a = (a + 1) % 2\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n): \n        sequence.append(4 * sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 1, 0, 1, 0, 1]\n    for i in range(n-1):\n        for j in range(len(sequence)-1):\n            if sequence[j] == 1 and sequence[j+1] == 0:\n                sequence[j+1] = 1\n            else:\n                sequence[j+1] = 0\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(b, end=' ')\n        a, b = b, a+b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence as a list of integers\n    sequence = [1]\n\n    # calculate the length of the sequence\n    length = n * 2 - 1\n\n    # iterate over each index in the sequence\n    for i in range(2, length):\n        # if the number at the current index is a prime, double it\n        if is_prime(sequence[i - 1]):\n            sequence.append(sequence[i - 1] * 2)\n        # otherwise, set it to 1\n        else:\n            sequence.append(1)\n\n    # return the nth number in the sequence\n    return sequence[length - 1]\n\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n\n    # check if the number is less than 2\n    if n < 2:\n        return False\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [0, 1, 0, 1]\n    for i in range(2, n+1):\n        seq.append(seq[-1] + seq[-2])\n    return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with 1\n    sequence = [1]\n\n    # loop until n is reached\n    for i in range(1, n+1):\n        # copy the sequence list to a new list\n        new_sequence = list(sequence)\n\n        # calculate the new number by adding the previous number to the previous number plus 1\n        new_number = (sequence[-1] + new_sequence[-2]) % 2\n\n        # append the new number to the sequence list\n        new_sequence.append(new_number)\n\n        # update the sequence variable with the new sequence list\n        sequence = new_sequence\n\n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]  # initialize sequence with first number\n    for i in range(n - 1):\n        next_number = (sequence[-1] * 2) % 10  # compute next number in sequence\n        sequence.append(next_number)\n    return sequence[-1]  # return last number in sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere using the formula for the\n    # surface area of a sphere (pi * r^2)\n    surface_area = math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula: 4*pi*(r^2)\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Args:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the surface area of the sphere\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Formula: C = (n * (6 * n - 1)) / 2\n    # Note: n is the input value of the function\n    C = (n * (6 * n - 1)) // 2\n    return C"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(a, b, c):\n        '''\n        Helper function to calculate centered hexagonal number.\n        '''\n        return a + b + c\n    \n    a, b, c = 1, 1, 0\n    for i in range(1, n+1):\n        print(centered_hexagonal(a, b, c))\n        a, b, c = b, centered_hexagonal(b, c, a)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n + 1):\n            result += 6 * (i ** 2)\n        return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * ((3 * n - 1) ** 2 + (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # calculate the total number of centered hexagonal numbers\n    total_centered_hexagonal_numbers = n * 2 - 1\n    # calculate the number of centered hexagonal numbers to skip\n    centered_hexagonal_numbers_to_skip = (n - 1) // 2\n    # find the total number of centered hexagonal numbers to skip\n    total_centered_hexagonal_numbers_to_skip = centered_hexagonal_numbers_to_skip * 2\n    # calculate the number of rows and columns needed to cover the centered hexagonal numbers\n    rows = total_centered_hexagonal_numbers // 2\n    columns = 2 * rows + 1\n    # initialize a 2D list to store the centered hexagonal numbers\n    centered_hexagonal_numbers = [[0] * columns for _ in range(rows)]\n    # calculate and store the centered hexagonal numbers\n    for i in range(1, rows + 1):\n        for j in range(1, columns):\n            if i == 1 or i == rows or j == 1 or j == columns - 1:\n                centered_hexagonal_numbers[i - 1][j - 1] = 1\n            else:\n                centered_hexagonal_numbers[i - 1][j - 1] = centered_hexagonal_numbers[i - 1][j - 2] + centered_hexagonal_numbers[i - 1][j - 3]\n    # calculate and return the nth centered hexagonal number\n    return centered_hexagonal_numbers[0][columns // 2 - 1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 15\n    elif n == 3:\n        return 85\n    elif n == 4:\n        return 315\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The centered hexagonal number for\", n, \"is:\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 8\n    c = 16\n    \n    # Calculate centered hexagonal number\n    centered_hexagonal = a + ((b - a) * (n // 3)) + ((c - b) * ((n % 3) // 2))\n    \n    # Return centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        n -= 1\n    return (2 * n - 1) * (2 * n - 1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 6\n    \n    # Calculate the nth centered hexagonal number\n    for i in range(1, n+1):\n        centered_hexagonal = a + b - 1\n        a = b\n        b = centered_hexagonal\n    \n    return centered_hexagonal"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # create a new empty dictionary\n    merged = {}\n    # iterate over the keys of each dictionary\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # check if the key exists in both dictionaries\n        if key in dict1 and key in dict2:\n            # add the value of the key from both dictionaries to the new dictionary\n            merged[key] = dict1[key] + dict2[key]\n        # check if the key exists only in the first dictionary\n        elif key in dict1:\n            merged[key] = dict1[key]\n        # check if the key exists only in the second dictionary\n        elif key in dict2:\n            merged[key] = dict2[key]\n        # if the key does not exist in either dictionary, skip it\n        else:\n            continue\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as inputs and returns a single dictionary with all the\n    key-value pairs from all three dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n\n    # Combine three dictionaries using the | operator\n    combined_dict = dict1 | dict2 | dict3\n\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    diff = abs(N)\n    while n >= 1:\n        if abs(N-n) < diff:\n            diff = abs(N-n)\n        n -= 1\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    while True:\n        if n == 1:\n            break\n        elif n == 0:\n            return 0\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    min_diff = float('inf')\n    closest_num = None\n    \n    for i in range(N):\n        if i == N-1:\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n                closest_num = i\n        else:\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n                closest_num = i\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    min_diff = float(\"inf\")\n    closest = n\n    for i in range(1, n+1):\n        if i!= n:\n            diff = abs(i - n)\n            if diff < min_diff:\n                min_diff = diff\n                closest = i\n    print(\"The closest smaller number than\", n, \"is\", closest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')  # Initialize smallest_num to infinity\n    smallest_diff = float('inf')  # Initialize smallest_diff to infinity\n    \n    for num in range(1, N+1):  # Iterate through all numbers from 1 to N\n        diff = abs(N-num)  # Calculate the difference between N and num\n        \n        if diff < smallest_diff:  # If the difference is less than smallest_diff, update both smallest_num and smallest_diff\n            smallest_num = num\n            smallest_diff = diff\n        \n        elif diff < smallest_diff and diff < abs(N-smallest_num):  # If the difference is less than smallest_diff and the difference is less than the difference between N and smallest_num, update smallest_num only\n            smallest_num = num\n    \n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_numbers = []\n    for i in range(1, N+1):\n        smaller_numbers.append(i)\n    \n    closest = min(smaller_numbers)\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    m = n\n    for i in range(1, 10):\n        m = m - 1\n        if m < n:\n            break\n    print(\"The closest smaller number to\", n, \"is\", m)\n\nif __name__ == \"__main__\":\n    closest_num(10)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(1, N+1))\n    closest_num = num_list[0]\n\n    for num in num_list:\n        if num < closest_num:\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N - 1\n    while True:\n        if num < N:\n            num += 1\n        else:\n            num -= 1\n        if num > N:\n            break\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    smallest = N\n    smallest_diff = abs(smallest - N)\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list as input and returns the length of the longest word in the list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for s in str1:\n            if s in sub_str:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"The substring '{sub_str}' is present in the string '{str1}'.\")\n    else:\n        print(f\"The substring '{sub_str}' is not present in the string '{str1}'.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n\n    # Initialize an empty list to store the indices of all occurrences of the substring\n    sub_indices = []\n\n    # Loop through the list of string values\n    for i in range(len(str1)):\n        # Check if the substring is present at the current index\n        if str1[i:i + len(sub_str)] == sub_str:\n            # If it is, add the index to the list of indices\n            sub_indices.append(i)\n\n    # Return the list of indices of all occurrences of the substring\n    return sub_indices"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (str): The main string to be searched.\n    sub_str (str): The substring to be searched for.\n\n    Returns:\n    bool: True if the main string contains the substring, False otherwise.\n    \"\"\"\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check for 0, 1, 2, 3, and 4\n    if n == 0 or n == 1 or n == 2 or n == 3 or n == 4:\n        return True\n\n    # Check for multiples of 7\n    if n % 7 == 0:\n        return True\n\n    # Check for multiples of 5 and 7\n    if n % 5 == 0 and n % 7 == 0:\n        return True\n\n    # Check for multiples of 11\n    if n % 11 == 0:\n        return True\n\n    # If none of the above conditions are true, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n < 10:\n        return True\n    else:\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a number n as input and returns True if it's \n    an odd number greater than 5, and False otherwise.\n    '''\n    if n % 2 == 0 or n > 5:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        print(\"The number is undulating.\")\n    else:\n        print(\"The number is not undulating.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Define the undulating numbers\n    undulating_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n\n    # Check if the given number is in the undulating_numbers list\n    if n in undulating_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is positive or not\n    if n <= 0:\n        return False\n\n    # Check if the given number is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n\n    # Check if the given number is divisible by 15 and not divisible by 3 or 5\n    if n % 15 == 0 and n % 3!= 0 and n % 5!= 0:\n        return True\n\n    # If none of the above conditions are met, the given number is not undulating\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    This function takes two parameters, 'a' and 'b'. It calculates the value of 'a' to the power of 'b' and returns the result.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sorting the list of tuples by the second value\n    test_list.sort(key=itemgetter(1))\n    # returning the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n\n    # Use the built-in min function to find the index of the smallest second value in the list\n    index = min(range(len(test_list)), key=lambda i: test_list[i][1])\n\n    # Return the first value of the tuple with the index found\n    return test_list[index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element of each tuple in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list based on the second value of each tuple\n    return test_list[0][0] # return the first value of the first tuple in the sorted list\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = 1000000000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sublist in lst:\n        if min_len is None:\n            min_len = len(sublist)\n        else:\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0]) # Assuming all the sublists have the same length as the first sublist\n    for sublist in lst:\n        if len(sublist) < min_length: # Check if the length of the sublist is less than the previous minimum length\n            min_length = len(sublist) # Update the minimum length if a smaller length is found\n    return min_length # Return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the smallest list length found so far\n    min_length = None\n\n    # Loop through each sub-list in the input list\n    for sub_list in lst:\n\n        # Check if the current sub-list is shorter than the current minimum length found so far\n        if min_length is None or len(sub_list) < min_length:\n            min_length = len(sub_list)\n\n    # Return the smallest list length found so far\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function calculates the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div += 2 if i!= n//i else 1\n    return div"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(element, list):\n            freq_dict[element] = 1\n        # if the element is a list, recursively call the function on that list and add its frequency to the main dictionary\n        else:\n            freq_dict[element] = frequency_lists(element)\n\n    # return the final dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list and add its frequency to the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to store frequency counts\n    freq_dict = {}\n    \n    # loop over each item in the list\n    for item in list1:\n        # if the item is a list, recursively call the function to find its frequency\n        if isinstance(item, list):\n            item_freq = frequency_lists(item)\n            # merge the frequency dictionary with the current item's frequency dictionary\n            freq_dict = {**freq_dict, **item_freq}\n        # if the item is not a list, check if it is already in the dictionary\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        # if the item is not in the dictionary yet, add it with a frequency count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total // len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n\n    # loop through each bit of the decimal number and convert it to its binary equivalent\n    while n > 0:\n        # extract the least significant bit from the decimal number\n        bit = n % 2\n\n        # convert the least significant bit to its binary equivalent and append it to the binary string\n        binary_str = str(bit) + binary_str\n\n        # shift the decimal number to the right by one bit\n        n = n // 2\n\n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # convert decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n\n    # remove leading zeros from binary string\n    while binary.startswith(\"0\"):\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal number to binary using recursion\n    def decimal_to_binary_helper(num, result=''):\n        if num == 0:\n            return result\n        else:\n            return decimal_to_binary_helper(num//2, result+str(num%2))\n\n    # Return the binary equivalent of the decimal number\n    return decimal_to_binary_helper(n)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # check if the reversed string is less than or equal to the original string\n    while num_str <= num_str:\n        num_str = str(int(num_str) + 1)[::-1]\n\n    # convert the reversed string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    reverse_num_str = num_str[::-1]\n    max_num = int(reverse_num_str[::-1])\n    for i in range(1000000, max_num+1):\n        next_num_str = str(i)\n        next_reverse_num_str = next_num_str[::-1]\n        if next_num_str < reverse_num_str and next_reverse_num_str < num_str:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find all palindromes of length less than or equal to num\n    palindromes = [num * int(str(num)[::-1]), num * int(str(num)[::-1][1:])]\n    # Find the smallest palindrome greater than num\n    smallest_palindrome = min(palindromes)\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def get_next_palindrome(n):\n        n_str = str(n)\n        for i in range(len(n_str)):\n            if int(n_str[:i+1]) + int(n_str[i+1:]) < 0:\n                n_str = n_str[:i] + str(abs(int(n_str[:i]) + int(n_str[i+1:]))).zfill(len(n_str)-i-1) + n_str[i+1:]\n                break\n        return int(n_str)\n\n    if is_palindrome(num):\n        return num\n\n    next_num = get_next_palindrome(num)\n    while not is_palindrome(next_num):\n        next_num = get_next_palindrome(next_num)\n\n    return next_num\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_smallest_palindrome = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that number.\n    \n    Args:\n    num (int): the integer for which the next smallest palindrome is to be found.\n    \n    Returns:\n    int: the next smallest palindrome of the given integer.\n    \"\"\"\n    \n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Initialize the variables for the next smallest palindrome\n    smallest_palindrome = -1\n    last_palindrome = -1\n    \n    # Iterate through all possible palindromes from the input number to the last digit\n    for i in range(len(num_str)):\n        for j in range(i, len(num_str)):\n            \n            # Convert the palindrome to an integer\n            palindrome = int(num_str[i:j+1])\n            \n            # Check if the palindrome is smaller than the current smallest palindrome\n            if palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n                last_palindrome = num_str[i:j+1]\n                \n    # Convert the last palindrome to an integer\n    last_palindrome = int(last_palindrome)\n    \n    # Increment the last palindrome by 1\n    last_palindrome += 1\n    \n    # Return the next smallest palindrome\n    return last_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    palindromes = []\n    for i in range(len(num_str)):\n        if int(num_str[::-1][:i+1]) == num:\n            palindromes.append(int(num_str[::-1][:i+1]))\n    if palindromes:\n        return palindromes[0] + 1\n    else:\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the given integer to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # iterate through the string and check if each character is even or odd\n    for i in range(len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            # if the character is even, add 1 to it\n            num_str[i] = str(int(num_str[i]) + 1)\n        else:\n            # if the character is odd, add 2 to it\n            num_str[i] = str(int(num_str[i]) + 2)\n    \n    # convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if input is a positive integer\n    if num <= 0 or not isinstance(num, int):\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Reverse the input number\n    reversed_num = str(num)[::-1]\n\n    # Check if reversed number is a palindrome\n    if reversed_num == reversed_num[::-1]:\n        return \"There is no next smallest palindrome.\"\n\n    # Get the length of the reversed number\n    length = len(reversed_num)\n\n    # Initialize variables for result and current number\n    result = 0\n    current_num = 0\n\n    # Loop through each digit in the reversed number\n    for i in range(length):\n        # Get the current digit\n        current_digit = int(reversed_num[i])\n\n        # Add the current digit to the result and check if it's a palindrome\n        if current_digit + result > 9:\n            result = current_digit + result - 10\n            current_num += 10\n        else:\n            result += current_digit\n\n        # Check if the result is a palindrome\n        if str(result)[::-1] == str(result):\n            return result\n\n    # If no palindrome is found, return the next smallest palindrome\n    return next_smallest_palindrome(current_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Reverse the number and add 1 to it to get the next smallest palindrome\n    rev_num = str(num)[::-1]\n    next_palindrome = int(rev_num) + 1\n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize a flag to check if a palindrome was found\n    palindrome_found = False\n\n    # Loop until a palindrome is found or the maximum integer is reached\n    while not palindrome_found and num < sys.maxsize:\n\n        # Check if the number is a palindrome\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n\n            # If it is, return the number\n            return num\n\n        # Increment the number and check if it is a palindrome\n        num += 1\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n            palindrome_found = True\n\n    # If a palindrome was not found, return the current number\n    return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError('k is greater than the length of the array')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array has at least k elements\n    if len(arr) < k:\n        return None\n    \n    # find the kth element by iterating through the array from left to right\n    i = 0\n    while i < k - 1:\n        i += 1\n        if i >= len(arr):\n            i = 0\n    \n    return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid - 1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = n-1\n        while left <= right:\n            pivot = (left + right) // 2\n            if pivot == k-1:\n                return arr[pivot]\n            elif arr[pivot] < arr[k-1]:\n                left = pivot + 1\n            else:\n                right = pivot - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Create a set to store the elements in the array\n    set_arr = set(arr)\n    \n    # Get the kth element using the set_arr\n    kth_element = next(iter(set_arr))\n    \n    # Check if kth element is the kth element in the original array\n    if k == len(arr):\n        return kth_element\n    \n    # Check if the kth element is in the next set of elements\n    for i in range(len(set_arr)):\n        if k == i + 1:\n            return set_arr[i]\n    \n    # If the kth element is not in the array, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    words = word.split(\"_\")\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    first_part = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            first_part += char.lower()\n        elif char.isupper():\n            first_part += \"_\" + char.lower()\n        else:\n            first_part += char\n    return first_part"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word, prev_char=''):\n    \"\"\"\n    Convert a snake case string to camel case string using recursion.\n    \"\"\"\n    if len(word) == 0:\n        return prev_char\n    elif word[0].isupper():\n        return prev_char + word[0].lower() + word[1:]\n    else:\n        return prev_char + word[0].upper() + snake_to_camel(word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif letter.isupper():\n            camel_case += '_' + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        elif word[i] == '_':\n            camel_word += word[i]\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the string to a list of words\n    word_list = word.split('_')\n\n    # Convert the first letter of each word to uppercase\n    first_word = word_list[0].capitalize()\n    camel_case = first_word\n\n    # Convert the rest of the words to lowercase and join them into a string\n    for word in word_list[1:]:\n        camel_case += word.capitalize()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: snake case string to convert\n    :return: camel case string\n    \"\"\"\n\n    # Initialize camel case string\n    camel_case_word = \"\"\n\n    # Iterate through each character in the word\n    for char in word:\n        # If the character is uppercase\n        if char.isupper():\n            # Add a space between camel case characters\n            if len(camel_case_word) > 0:\n                camel_case_word += \"_\"\n\n            # Add the lowercase character to the camel case string\n            camel_case_word += char.lower()\n        else:\n            # Add the character to the camel case string\n            camel_case_word += char\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Convert the first letter to uppercase\n    first_letter = words[0][0].upper()\n    \n    # Convert the rest of the letters to lowercase\n    remaining_letters = [word.lower()[1:] for word in words[1:]]\n    \n    # Combine the first letter and the remaining letters into a new string\n    camel_case_word = first_letter + ''.join(remaining_letters)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i > 0 else x.lower() for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 0:\n        return m\n    elif n == 1:\n        return 2*m\n    # Recursive case\n    else:\n        return eulerian_num(n-1, 2*m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculates the Eulerian number a(n, m)\n\n    Parameters:\n    n (int): number of vertices\n    m (int): number of edges\n\n    Returns:\n    a (int): the Eulerian number a(n, m)\n    \"\"\"\n    # Initialize a list to store the degrees of each vertex\n    degrees = [0] * (n+1)\n\n    # Iterate over the edges and update the degrees of the vertices\n    for _ in range(m):\n        a, b = map(int, input().split())\n        degrees[a] += 1\n        degrees[b] -= 1\n\n    # Calculate the Eulerian number a(n, m) by iterating over the degrees\n    a = 0\n    for i in range(1, n+1):\n        a += (degrees[i] * (degrees[i] - 1)) // 2\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Finding the value of 1/n! and 1/m!\n    numerator = 1\n    denominator = 1\n    for i in range(1, n+1):\n        numerator *= i\n    for i in range(1, m+1):\n        denominator *= i\n    # Finding the value of n! / (m! * n!)\n    numerator /= denominator\n    return numerator"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the base cases\n    if n == 1 or m == 1:\n        return 1\n    elif n == m:\n        return n * eulerian_num(n-1, m-1)\n    else:\n        return n * eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    def is_prime(num): \n        '''\n        Function to check if a given number is prime or not.\n        '''\n\n        if num < 2: \n            return False\n\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n\n        return True\n\n    def num_divisible(num, divisor): \n        '''\n        Function to check if a given number is divisible by a given divisor or not.\n        '''\n\n        if num % divisor == 0: \n            return True\n        else: \n            return False\n\n    def gcd(a, b): \n        '''\n        Function to find the greatest common divisor of two numbers.\n        '''\n\n        while b: \n            a, b = b, a % b \n        return a\n\n    def lcm(a, b): \n        '''\n        Function to find the least common multiple of two numbers.\n        '''\n\n        return (a * b) // gcd(a, b)\n\n    def eulerian_formula(n, m, a): \n        '''\n        Function to calculate the Eulerian number a(n, m) using the Euler's formula.\n        '''\n\n        numerator = (n * m) // gcd(n, m)\n        denominator = 1 + a * (n - 1) + (m - 1) * (m - 1)\n        return numerator // denominator\n\n    def eulerian_algorithm(n, m): \n        '''\n        Main function to find the Eulerian number a(n, m).\n        '''\n\n        # Check if n and m are prime numbers\n        if not (is_prime(n) and is_prime(m)): \n            raise ValueError(\"n and m must be prime numbers.\")\n\n        # Check if n is less than or equal to m\n        if n > m: \n            raise ValueError(\"n must be less than or equal to m.\")\n\n        # Calculate the first term of the Eulerian number sequence\n        a = 0\n\n        # Find the least common multiple of n and m\n        lcm_n_m = lcm(n, m)\n\n        # Initialize a counter variable\n        counter = 0\n\n        # Find the first term of the sequence using the Euler's formula\n        while True: \n            counter += 1\n            if eulerian_formula(n, m, a) > lcm_n_m: \n                break\n            a += 1\n\n        # Find the number of divisors of n and m\n        num_div_n_m = sum([1 for i in range(n, lcm_n_m+1) if i % n == 0 or i % m == 0])\n\n        # Return the Eulerian number a(n, m) using the Euler's formula\n        return eulerian_formula(n, m, a) + (num_div_n_m * lcm_n_m // (n * m)) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n * m // (n + m - 2)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Helper function to find the multiplicity of a number in a list\n    def multiplicity(num, lst):\n        return sum(1 for x in lst if x == num)\n    \n    # Helper function to generate all permutations of a list\n    def permutations(lst):\n        if len(lst) == 1:\n            return [lst]\n        result = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            for p in permutations(rest):\n                result.append([lst[i]] + p)\n        return result\n    \n    # Helper function to calculate the number of prime divisors of a number\n    def prime_divisors(num):\n        divisors = []\n        for i in range(2, num+1):\n            if num % i == 0 and is_prime(i):\n                divisors.append(i)\n        return divisors\n    \n    # Helper function to calculate the Eulerian number for a given n and m\n    def eulerian_num_helper(n, m):\n        num = 1\n        divisor_count = 0\n        prime_divisor_count = 0\n        primes = []\n        # Generate primes up to sqrt(n)\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_prime(i):\n                    primes.append(i)\n        # Check if n is a prime number\n        if n > 1:\n            if n % 2 == 0:\n                num *= 2\n            else:\n                num += 1\n        # Count the number of divisors of n\n        for i in range(len(primes)):\n            divisor_count += multiplicity(primes[i], prime_divisors(n))\n        # Count the number of prime divisors of n\n        for i in range(len(primes)):\n            prime_divisor_count += multiplicity(primes[i], prime_divisors(n))\n        # Calculate the Eulerian number for a given n and m\n        result = num * divisor_count + prime_divisor_count * prime_divisor_count\n        return result\n    \n    # Find the Eulerian number for a given n and m\n    result = eulerian_num_helper(n, m)\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 2 and m == 1:\n        return 2\n    else:\n        return (n * eulerian_num(n-1, m-1)) % (10**9 + 7)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a boolean matrix to store the paths\n    paths = [[False] * (n + 1) for i in range(m + 1)]\n\n    # set the starting point\n    paths[1][1] = True\n\n    # loop through the matrix\n    for i in range(2, m + 1):\n        for j in range(1, n + 1):\n            # check if the next point is a valid neighbor\n            if paths[i - 1][j] or paths[i][j - 1]:\n                paths[i][j] = True\n\n    # loop through the matrix again to find the Eulerian number\n    for i in range(m, 0, -1):\n        for j in range(n, 0, -1):\n            # check if the next point is a valid neighbor\n            if paths[i][j] and (i + j) % 2 == 1:\n                # increment the Eulerian number and break the loop\n                euler = paths[i][j]\n                break\n\n    return euler"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers as input, n and m. \n    It returns the value of the Eulerian number a(n, m) as an integer.\n    '''\n\n    # Define the Eulerian number as 0\n    eulerian = 0\n\n    # Define the values of a(n, m)\n    if n == 0:\n        a = 1\n    else:\n        a = eulerian_num(n-1, m)\n\n    # Calculate the value of a(n, m) using the identity: a(n, m) = (n*m)^(n-1)\n    eulerian = (n * m) ** (n - 1)\n\n    return eulerian"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist\n    for sublist in input_list:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create an empty list to store the sorted sublists\n    sorted_sublists = []\n    # loop through each sublist in the input list\n    for sublist in input_list:\n        # convert the sublist to a string and sort it\n        sorted_sublist = sorted(str(sublist))\n        # convert the sorted sublist back to a list and append it to the sorted_sublists list\n        sorted_sublists.append(list(sorted_sublist))\n    # return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        sublist.sort()\n        input_list[i] = sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_true(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the test_list to the test_tup\n    test_tup = test_tup + test_list\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples to make the append operation possible\n    test_list_tup = tuple(test_list)\n    test_tup_list = list(test_tup)\n    \n    # Append the list to the tuple\n    test_tup_list.extend(test_list_tup)\n    \n    # Convert the updated list back to a tuple\n    test_tup_list = tuple(test_tup_list)\n    \n    # Return the updated tuple\n    return test_tup_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    for i in test_tup:\n        i = list(i)\n        i.extend(test_list)\n        i = tuple(i)\n        test_tup[test_tup.index(i)] = i\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list.copy()\n    for i in range(len(test_tup)):\n        test_tup[i] += test_list.pop(0)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append test_list to test_tup using the extend method\n    test_tup.extend(test_list)\n    \n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a min heap to store the numbers from the three lists\n    min_heap = []\n    for num in num1 + num2 + num3:\n        heapq.heappush(min_heap, num)\n    \n    # create a new list to store the sorted numbers from the three lists\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize an empty heap\n    heap = []\n    # Append the elements of num1, num2 and num3 to the heap\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    # Merge the elements of the heap into a single sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Sort the three lists using heapq\n    num1_heap = []\n    num2_heap = []\n    num3_heap = []\n    for num in num1:\n        heapq.heappush(num1_heap, num)\n    for num in num2:\n        heapq.heappush(num2_heap, num)\n    for num in num3:\n        heapq.heappush(num3_heap, num)\n\n    # Merge the sorted lists using heapq\n    sorted_list = []\n    while num1_heap and num2_heap and num3_heap:\n        if heapq.heappop(num1_heap) <= heapq.heappop(num2_heap) <= heapq.heappop(num3_heap):\n            heapq.heappush(sorted_list, heapq.heappop(num1_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num2_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num3_heap))\n        elif heapq.heappop(num1_heap) <= heapq.heappop(num3_heap):\n            heapq.heappush(sorted_list, heapq.heappop(num1_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num3_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num2_heap))\n        elif heapq.heappop(num2_heap) <= heapq.heappop(num3_heap):\n            heapq.heappush(sorted_list, heapq.heappop(num2_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num3_heap))\n            heapq.heappush(sorted_list, heapq.heappop(num1_heap))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and merges them into a single sorted list.\n    \"\"\"\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # Merge the three input lists\n    while num1 and num2 and num3:\n        # Compare the first element of each list and add the smaller one to the merged list\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2.pop(0))\n        else:\n            merged_list.append(num3.pop(0))\n\n    # Add any remaining elements of the first input list to the merged list\n    merged_list += num1\n\n    # Add any remaining elements of the second input list to the merged list\n    merged_list += num2\n\n    # Add any remaining elements of the third input list to the merged list\n    merged_list += num3\n\n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use a min heap to merge three lists into a single sorted list\n    min_heap = []\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists\n    combined_list = num1 + num2 + num3\n\n    # create a max heap from the combined list\n    max_heap = []\n    for num in combined_list:\n        heapq.heappush(max_heap, -num)\n\n    # extract the elements from the max heap and create a new list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge two lists into a single list\n    sorted_list = num1 + num2\n\n    # Remove duplicates from the merged list\n    unique_list = list(set(sorted_list))\n\n    # Merge the unique list with the third list\n    merged_list = unique_list + num3\n\n    # Sort the merged list\n    sorted_merged_list = sorted(merged_list)\n\n    return sorted_merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two sorted lists and the third list\n    merged_list = heapq.merge(heapq.merge(num1, num2), num3)\n    # Convert the merged list to a list and return it\n    return list(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert the lists to heaps\n    heap1 = []\n    heapq.heapify(heap1)\n    for i in num1:\n        heapq.heappush(heap1, i)\n    heap2 = []\n    heapq.heapify(heap2)\n    for i in num2:\n        heapq.heappush(heap2, i)\n    heap3 = []\n    heapq.heapify(heap3)\n    for i in num3:\n        heapq.heappush(heap3, i)\n\n    # Merge the heaps\n    result = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            result.append(heap1.pop(0))\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            result.append(heap2.pop(0))\n        else:\n            result.append(heap3.pop(0))\n\n    # Add the remaining elements\n    while heap1:\n        result.append(heap1.pop(0))\n    while heap2:\n        result.append(heap2.pop(0))\n    while heap3:\n        result.append(heap3.pop(0))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one and then sort it\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    s = bin(int(s, 2))[2:]  #converting binary string to integer\n    l = len(s)\n    ans = 0\n    for i in range(n):\n        s = s[l-1:] + s[:l-1]\n    for i in range(l):\n        if s[i] == '1':\n            ans += 1\n    return ans"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(len(s)-1, -1, -1):\n            if int(s[j]) % 2 == 1:\n                count += 1\n                s = s[j] + s[:j] + s[j+1:]\n                break\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n): \n        s = s[::-1] + s \n    for i in range(len(s)): \n        if int(s[i]) % 2 == 1: \n            count += 1 \n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Convert the binary string to a list of digits\n    s = list(map(int, list(s)))\n\n    # Loop through each rotation\n    for _ in range(n):\n        # Reverse the list\n        s.reverse()\n        # Reverse the first and last elements\n        s[0], s[-1] = s[-1], s[0]\n\n    # Count the number of odd values\n    count = 0\n    for digit in s:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    # Convert the input binary string to a list of integers\n    binary_list = [int(digit) for digit in s]\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        temp = binary_list[-1]\n        for j in range(len(binary_list)-1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[0] = temp\n        # Count the number of odd values in the rotated list\n        for digit in binary_list:\n            if digit % 2!= 0:\n                count += 1\n    # Return the final count of odd values in the rotated list\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n, and returns the number of odd values in the binary string after rotating it n times.\n    \"\"\"\n    # Initialize the number of odd values found to zero\n    count = 0\n    # Initialize the current position of the binary string\n    current_pos = 0\n    # Initialize the length of the binary string\n    length = len(s)\n    # Iterate through the binary string n times\n    for i in range(n):\n        # If the current position is an odd number, increment the count\n        if current_pos % 2 == 1:\n            count += 1\n        # Calculate the new position by adding n to the current position\n        new_pos = (current_pos + n) % length\n        # If the new position is within the bounds of the binary string, update the current position to the new position\n        if new_pos >= 0:\n            current_pos = new_pos\n        else:\n            # If the new position is outside the bounds of the binary string, wrap around to the beginning of the string\n            current_pos = new_pos % length\n    # Return the count of odd values found after rotating the binary string the given number of times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Count the number of odd numbers in the binary string\n    odd_count = sum(1 for bit in s if bit == '1')\n\n    # Calculate the number of rotations required\n    rotations = (odd_count * n) // len(s)\n\n    # Initialize a list to store the rotated binary string\n    rotated_bits = []\n\n    # Rotate the binary string n times\n    for _ in range(rotations):\n        rotated_bits.append(s[-1] + s[:-1])\n\n    # Count the number of odd numbers in the rotated binary string\n    odd_count_rotated = sum(1 for bit in rotated_bits if bit == '1')\n\n    # Return the number of odd numbers in the rotated binary string\n    return odd_count_rotated"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize a counter to keep track of the number of odd values\n    count = 0\n    # Create a list to store the binary values of the input string\n    binary = [int(digit) for digit in s]\n    # Rotate the binary string the given number of times\n    binary = [binary[-i] for i in range(1, n+1)] + binary[:n]\n    # Loop through the list of binary values and count the number of odd values\n    for value in binary:\n        if value % 2!= 0:\n            count += 1\n    # Return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_list = []\n    for i in s:\n        binary_list.append(int(i))\n    binary_list = binary_list[::-1]  #rotates the list by n positions\n    odd_count = 0\n    for i in binary_list:\n        if i % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # First, flatten the nested list to a list of elements\n    flatlist = [item for sublist in nestedlist for item in sublist]\n    # Create a set of unique elements\n    unique_set = set(flatlist)\n    # Create a set of common elements\n    common_set = set()\n    # Iterate over the first list and check if each element is in the unique set\n    for item in nestedlist[0]:\n        if item in unique_set:\n            common_set.add(item)\n    # Convert the set of common elements to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[j][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n                nestedlist.remove(nestedlist[i])\n                j -= 1\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common_elements:\n                    common_elements.remove(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the common elements in the list.\n    '''\n    # first, we need to flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n\n    # then, we can use a set to find the unique elements\n    unique_list = list(set(flat_list))\n\n    # now, we can create a dictionary to map each element to its index\n    index_dict = {item: i for i, item in enumerate(unique_list)}\n\n    # now, we can iterate through the original list and find the indices for each element\n    common_list = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in unique_list:\n                common_list.append(index_dict[item])\n\n    # finally, we can sort the common indices and return the result\n    common_list = sorted(common_list)\n    return unique_list[common_list]"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(set(sublist))\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_list.append(nestedlist[i])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common_set = set()\n    \n    # Iterate over all nested lists\n    for sublist in nestedlist:\n        # Check if the sublist is a list\n        if isinstance(sublist, list):\n            # Recursively call the function on the sublist\n            common_set.update(common_in_nested_lists(sublist))\n        else:\n            # Add the sublist's elements to the common set\n            common_set.update(sublist)\n    \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def is_common(a, b):\n        if type(a)!= type(b):\n            return False\n        elif type(a) in (int, float, str):\n            return a == b\n        elif type(a) == list:\n            for x in a:\n                if x not in b:\n                    return False\n            return True\n\n    def find_common(lst1, lst2):\n        common = []\n        for item in lst1:\n            if item in lst2 and is_common(item, lst2[item]):\n                common.append((item, lst2[item]))\n        return common\n\n    common_items = []\n    for lst1 in nestedlist:\n        for lst2 in nestedlist:\n            if lst1!= lst2:\n                common_lst = find_common(lst1, lst2)\n                if common_lst:\n                    common_items.extend(common_lst)\n\n    return common_items\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # check if the string is empty\n    if not text:\n        return False\n\n    # convert the string to a list of characters\n    chars = list(text)\n\n    # check if the first character is a negative sign\n    if chars[0] == '-':\n        if len(chars) > 1:\n            return False\n        else:\n            return True\n\n    # check if the string contains any non-numeric characters\n    for char in chars:\n        if not char.isdigit():\n            return False\n\n    # check if the string is a valid integer\n    try:\n        num = int(text)\n        if num < -2**31 or num > 2**31 - 1:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(d, dict) and d.keys() == [] for d in list1):\n        print(\"All dictionaries in the list are empty.\")\n    else:\n        print(\"Not all dictionaries in the list are empty.\")"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple into a list and sum up its elements\n    total = sum(nums)\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_of_nums = 0\n\n    # Loop through each element in the tuple\n    for num in nums:\n        # Add each element to the sum_of_nums variable\n        sum_of_nums += num\n\n    # Return the sum_of_nums variable as the result\n    return sum_of_nums"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple of integers into a string and concatenate them with commas\n    string_nums = ', '.join(str(num) for num in nums)\n    \n    # Convert the string of integers into an integer and return it\n    return int(string_nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable to zero\n    result = 0\n    \n    # Iterate through the tuple and add each element to the sum variable\n    for num in nums:\n        result += num\n    \n    # Return the sum variable as the single integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n    for item in test_list:\n        for sub_item in item:\n            try:\n                converted_list.append(float(sub_item))\n            except ValueError:\n                pass\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n                if isinstance(item, int):\n                    item = float(item)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n                if not isinstance(test_list[i][j], float):\n                    raise TypeError('All elements in a sublist must be convertible to float.')\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Loop through each list in the test_list\n    for item in test_list:\n        # Check if the item is an iterable\n        if hasattr(item, '__iter__'):\n            # If it is, loop through each item in the iterable\n            for subitem in item:\n                # Check if the item is a convertible type (e.g., int, float, str)\n                if isinstance(subitem, (int, float, str)):\n                    # If it is, convert it to a float and assign it back to the subitem\n                    subitem = float(subitem)\n        # Check if the item is a convertible type (e.g., int, float, str)\n        elif isinstance(item, (int, float, str)):\n            # If it is, convert it to a float and assign it back to the item\n            item = float(item)\n\n    # Return the modified test_list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                raise ValueError(f\"Element {item} in sublist {sublist} cannot be converted to float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                test_list[test_list.index(item)] = float(item)\n            except ValueError:\n                continue\n        else:\n            test_list[test_list.index(item)] = float(item)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # initialize count and element to store the count and element\n    count = 1\n    element = arr[0]\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n\n        # if the current element is equal to the previous element and count is 1\n        # then the element appears only once in the array and we update the count and element\n        if arr[i] == element and count == 1:\n            count = 2\n            element = arr[i]\n\n        # if the current element is not equal to the previous element or count is not 1\n        # then we reset the count and element to 1\n        else:\n            count = 1\n            element = arr[i]\n\n    # return the element\n    return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Initialize an integer to store the number of times an element appears only once\n    count = 0\n\n    # Iterate through the array and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and count the number of elements that appear only once\n    for num, freq_num in freq.items():\n        if freq_num == 1:\n            count += 1\n\n    # If there is only one element that appears only once, return that element\n    if count == 1:\n        return next(iter(freq.keys()))\n\n    # If there are multiple elements that appear only once, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        # If the element is not in the hash table, add it with a frequency of 1\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        # If the element is already in the hash table, increment its frequency by 1\n        else:\n            freq[arr[i]] += 1\n    \n    # Initialize a variable to store the element that appears only once in the array\n    unique = None\n    \n    # Iterate through the hash table and find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            unique = key\n    \n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    for i in range(n):\n        if count[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is not in the set, add it and break the loop\n        if arr[i] not in unique_set:\n            unique_set.add(arr[i])\n            break\n    \n    # If all elements are unique, return None\n    if len(unique_set) == len(arr):\n        return None\n    \n    # Otherwise, return the unique element\n    else:\n        return list(unique_set)[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the element that appears only once in the array\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # check if the array is empty or has only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return None\n\n    # initialize variables to keep track of the count and current element\n    count = 0\n    current_element = arr[0]\n\n    # loop through the array starting from index 1\n    for i in range(1, len(arr)):\n\n        # if the current element is equal to the previous element, increment the count\n        if arr[i] == current_element:\n            count += 1\n\n        # if the count reaches 2 (the element appears only once), return the current element\n        elif count == 2:\n            return current_element\n\n        # if the count becomes greater than 2, update the current element and count\n        else:\n            current_element = arr[i]\n            count = 1\n\n    # if the loop completes without finding an element that appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the elements and their frequency\n    freq_dict = {}\n    \n    # Iterate through the array and update the frequency count in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n            \n    # Iterate through the dictionary and find the element that appears only once\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # initialize variables\n    max_product = float('-inf')\n    max_product_tuple = None\n    \n    # loop through list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate absolute product of pairs of numbers in tuple\n            product = abs(list1[i][0] * list1[j][1])\n            \n            # update max product and tuple if current product is greater than max_product\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (list1[i], list1[j])\n    \n    # return max product and tuple\n    return max_product, max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n                max_pair = (list1[i], list1[j])\n    \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # calculate the absolute product of the two numbers in the pair\n            product = abs(lst[i]*lst[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    temp = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp = abs(list1[i] * list1[j])\n            if temp > max_product:\n                max_product = temp\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0] * list1[j][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_abs_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0]*list1[j][1])\n            if current_product > max_abs_product:\n                max_abs_product = current_product\n                \n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a number as input and returns the sum of all amicable numbers from 1 to the input number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    This function takes a number as input and returns True if it is an amicable number and False otherwise.\n    '''\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(sum_amicable_numbers(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i!= 1:\n            if sum([i, limit-i]) == i and sum([i, limit-i]) == limit-i:\n                amicable_sum += i + limit-i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables for sum and count of amicable numbers\n    total = 0\n    count = 0\n    \n    # Loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if number is amicable\n        if is_amicable(i):\n            # Add to total and increment count\n            total += i\n            count += 1\n    \n    # Return sum of amicable numbers\n    return total\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable.\n    '''\n    # Initialize variables for divisor and dividend\n    divisor = 2\n    dividend = n\n    \n    # Loop through divisors until divisor is greater than dividend\n    while divisor <= dividend:\n        # Check if divisor divides dividend evenly\n        if dividend % divisor == 0:\n            return False\n        # Increase divisor\n        divisor += 1\n    \n    # Return True if divisor is greater than dividend\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i > 1 and is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num in amicable_numbers:\n        return False\n    for i in range(1, num):\n        if num % i == 0 and is_amicable(i):\n            return False\n    amicable_numbers.append(num)\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i == sum_of_divisors(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of all divisors of a number n.\n    '''\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\nlimit = 28123\nresult = amicable_numbers_sum(limit)\nprint(result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes a number as input and returns the sum of all the amicable numbers from 1 to that number.\n    '''\n\n    # Function to check if a number is amicable to a specified number\n    def is_amicable(num, limit):\n        if num < limit:\n            for i in range(2, num):\n                if (num % i == 0) and (i!= num // i):\n                    return False\n        return True\n\n    # Function to sum all amicable numbers between 1 and the input limit\n    def sum_amicable(limit):\n        amicable_sum = 0\n        for num in range(1, limit):\n            if is_amicable(num, limit):\n                amicable_sum += num\n        return amicable_sum\n\n    # Calling the function and printing the result\n    amicable_sum = sum_amicable(limit)\n    print(f\"The sum of all the amicable numbers from 1 to {limit} is {amicable_sum}.\")"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_of_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if is_prime(num) and num!= 1:\n            for i in range(1, num // 2 + 1):\n                if num % i == 0 and is_prime(num // i):\n                    amicable_numbers.add(num)\n                    break\n    return sum(amicable_numbers)\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_of_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_prime(num) and is_prime(num+2) and num+2 == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    \"\"\"\n    This function takes a number as input and returns the sum of its divisors.\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes an integer limit and returns the sum of all amicable numbers from 1 to the limit.\n    \n    The amicable numbers are numbers that can be written as the sum of two smaller proper divisors of their own. In this case, we can define a function to check whether a number is amicable or not.\n    \n    We can define a function called is_amicable that takes an integer n as its argument and returns True if n is amicable, and False otherwise. We can start by writing a loop that iterates over all numbers from 2 to n/2. For each number, we can check whether n is a factor of that number. If n is a factor of the current number, we can check if the current number is a factor of the divisor of n. If so, we can return False, indicating that n is not amicable. Otherwise, we can return True, indicating that n is amicable.\n    \n    We can then define the main function amicable_numbers_sum that takes an integer limit as its argument and returns the sum of all amicable numbers from 1 to the limit. We can start by initializing a variable called amicable_sum to 0. We can then iterate over all numbers from 2 to limit. For each number, we can check if it is amicable using the is_amicable function. If it is amicable, we can add it to the amicable_sum variable. Finally, we can return the amicable_sum variable.\n    '''\n    \n    def is_amicable(n):\n        '''\n        This function takes an integer n as its argument and returns True if n is amicable, and False otherwise.\n        '''\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    amicable_sum = 0\n    for i in range(2, limit+1):\n        if is_amicable(i) and is_amicable(limit - i):\n            amicable_sum += i\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Calculate the sum of all amicable numbers\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num in [i for i in range(1, limit) if num!= i]:\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers and returns the angle of the complex number in radians.\n    \"\"\"\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus and argument of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    argument = cmath.phase(modulus + a*1j + b*1j)\n    \n    # convert the argument to degrees\n    angle_degrees = argument * 180 / cmath.pi\n    \n    # print the angle in degrees\n    print(\"The angle of the complex number\", a, \"+\", b, \"is\", angle_degrees, \"degrees.\")"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real if angle < 0 else angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = max(diff, abs(count_0 - count_1))\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n    for char in string:\n        if char == '0':\n            curr_count += 1\n        else:\n            curr_count = 0\n        diff = curr_count - prev_count\n        max_diff = max(diff, max_diff)\n        prev_count = curr_count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        diff = 0\n        j = i + 1\n        while j < n:\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            j += 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count += 1\n            else:\n                break\n        for j in range(i+1, n):\n            if string[j] == '1':\n                count += 1\n            else:\n                break\n        diff = count - (n-i-1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    # Initialize variables to store the number of 0s and 1s in the binary string\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through each character in the binary string\n    for char in string:\n        # If the character is 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n        # If the character is neither 0 nor 1, raise an error\n        else:\n            raise ValueError(\"The binary string contains a character other than 0 or 1.\")\n\n    # Find the length of the longest sub-string that contains an equal number of 0s and 1s\n    length = 0\n    for i in range(1, len(string)+1):\n        for j in range(i, len(string)+1):\n            if string[j-1] == '0' and string[j-2] == '0':\n                count_0 = 0\n            elif string[j-1] == '1' and string[j-2] == '1':\n                count_1 = 0\n            elif string[j-1] == '0' and string[j-2] == '1':\n                count_0 = 0\n                count_1 = 1\n            elif string[j-1] == '1' and string[j-2] == '0':\n                count_0 = 1\n                count_1 = 0\n            else:\n                raise ValueError(\"The binary string contains a character other than 0 or 1.\")\n\n            if count_0 == count_1:\n                length = max(length, j-i)\n\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(length):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            diff = abs(count_zeros - count_ones)\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n            count_1 += 0\n        else:\n            count_0 += 0\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    length = len(string)\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n            count_1 = max(count_1 - 1, 0)\n        else:\n            count_1 += 1\n            count_0 = max(count_0 - 1, 0)\n            \n        diff = count_0 - count_1\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    max_diff = 0\n    n = len(string)\n    for i in range(n-1): \n        diff = 0\n        for j in range(i+1, n): \n            if string[j] == '0': \n                diff += 1\n            else: \n                diff -= 1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find the common divisors of two numbers\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # calculate the sum of common divisors\n    sum_cd = sum(set(range(1, a + 1)) & set(range(1, b + 1)))\n\n    # find the common divisors of the original two numbers\n    gcd_ab = gcd(a, b)\n\n    # calculate the difference between the sum of common divisors and the common divisors of the original two numbers\n    diff_cd = abs(sum_cd - gcd_ab)\n\n    return diff_cd\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integer values 'a' and 'b' as input and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = set()\n    divisors = []\n\n    # Find all the divisors of 'a'\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.append(i)\n\n    # Find all the divisors of 'b'\n    for j in range(1, b + 1):\n        if b % j == 0:\n            divisors.append(j)\n\n    # Find the common divisors of 'a' and 'b'\n    for k in range(1, max(a, b) + 1):\n        if k in divisors and a % k == 0 and b % k == 0:\n            common_divisors.add(k)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    \"\"\"\n    # create a list of all the numbers from 1 to b\n    numbers = list(range(1, b + 1))\n    # filter out all the numbers that are not divisible by a\n    numbers = list(filter(lambda x: x % a == 0, numbers))\n    # add all the numbers to the list of numbers\n    numbers.extend(list(range(a, b + 1, a)))\n    # find the sum of all the numbers in the list\n    return sum(numbers)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a % b == 0:\n        return b + sum(b, a // b)\n    else:\n        return sum(a, a - b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is a divisor of another number\n    def is_divisor(num, divisor):\n        \"\"\"\n        Function to check if a number is a divisor of another number.\n        \"\"\"\n        if num % divisor == 0:\n            return True\n        else:\n            return False\n\n    # Function to find the common divisors of two numbers\n    def common_divisors(num1, num2):\n        \"\"\"\n        Function to find the common divisors of two numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, num1 + 1):\n            if is_divisor(i, num1) and is_divisor(i, num2):\n                divisors.append(i)\n        return divisors\n\n    # Find the common divisors of a and b\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n\n    # Find the sum of common divisors\n    sum_common_divisors = sum(divisors_a) + sum(divisors_b)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two integers as input and returns the sum of their common divisors.\n    If there are no common divisors, it returns 0.\n    '''\n    divisors_set = set()\n    for num in range(1, a+1):\n        if num % a == 0 and num % b == 0:\n            divisors_set.add(num)\n    if len(divisors_set) == 0:\n        return 0\n    else:\n        return sum(divisors_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Initialize a variable to store the sum of common divisors\n    result = 0\n\n    # Loop through all the numbers between 1 and the larger of the two given numbers\n    for i in range(1, max(a,b)+1):\n\n        # If the number is a divisor of both a and b, add it to the result variable\n        if a % i == 0 and b % i == 0:\n            result += i\n\n    # Return the result\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y & 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to a list of words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    # Iterate over the words in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the long_words_list\n            long_words_list.append(word)\n    # Return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and a number n as inputs and returns a list of words that are longer than n characters.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the given string into words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the long word to the list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Initialize a set to keep track of the values in the matrix\n    used_values = set()\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check if the row contains the magic square values\n        if sum(my_matrix[i]) == n*n:\n            return True\n        # Check if the column contains the magic square values\n        for j in range(n):\n            if sum(my_matrix[j]) == n*n:\n                return True\n        # Check if the sub-matrix contains the magic square values\n        for k in range(n):\n            for l in range(n):\n                submatrix = [[my_matrix[k][l], my_matrix[l][k]], [my_matrix[k][l], my_matrix[l][k]]]\n                if sum(submatrix) == n*n:\n                    return True\n\n    # If we make it here, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # check if all elements in the matrix are unique\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) * len(my_matrix):\n        return False\n\n    # check if the sum of each row and column is equal to the diagonal element\n    for row in my_matrix:\n        if sum(row)!= row[0] + row[4] + row[8]:\n            return False\n    for col in range(len(my_matrix)):\n        if sum(row[col] for row in my_matrix)!= col + 1:\n            return False\n\n    # check if any pair of elements in the matrix form a magic square\n    for row in my_matrix:\n        for col in range(len(my_matrix)):\n            for i in range(len(my_matrix)):\n                for j in range(len(my_matrix)):\n                    if i!= j and i!= col and j!= col:\n                        if row[i] == row[j] or row[i] == row[k] or row[i] == row[l] or \\\n                           row[j] == row[k] or row[j] == row[l] or \\\n                           row[k] == row[l]:\n                            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Find the size of the matrix\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n**2!= sum(sum(x) for x in my_matrix):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the current element is the sum of the diagonal elements minus the sum of the upper left to lower right diagonal elements\n            if my_matrix[i][j]!= (n*i + j - sum(my_matrix[:i][j+1:i+1] for i in range(n)) - sum(my_matrix[i+1:j][j+1:i+1] for j in range(n))):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(3):\n        row_sum = 0\n        for j in range(3):\n            row_sum += my_matrix[i][j]\n        if row_sum!= magic_sum:\n            return False\n        magic_sum += row_sum\n\n    for i in range(3):\n        col_sum = 0\n        for j in range(3):\n            col_sum += my_matrix[j][i]\n        if col_sum!= magic_sum:\n            return False\n        magic_sum += col_sum\n\n    for i in range(3):\n        box_sum = 0\n        box_row = i // 3\n        box_col = i % 3\n        for j in range(3):\n            box_sum += my_matrix[box_row*3+j][box_col*3+j]\n        if box_sum!= magic_sum:\n            return False\n        magic_sum += box_sum\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Calculate the sum of the elements of the matrix\n    sum_elements = sum(sum(row) for row in my_matrix)\n    # Check if the sum is equal to the product of the matrix dimensions\n    if sum_elements == n*(n**2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check that the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # calculate the sum of the elements in each row\n    row_sums = [sum(row) for row in my_matrix]\n\n    # calculate the sum of the elements in each column\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n\n    # check that the diagonal and row sums are equal\n    if diagonal_sum!= row_sums[0] or diagonal_sum!= col_sums[0]:\n        return False\n\n    # check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] not in (row_sums[i], col_sums[j], diagonal_sum - row_sums[i] - col_sums[j]):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 101\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum:\n                return False\n            magic_sum += 1\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[j][i]!= magic_sum:\n                return False\n            magic_sum += 1\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == magic_sum:\n                return True\n            magic_sum += 1\n\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix must have the same number of rows and columns.\"\n\n    # Check if all the values in the matrix are distinct\n    distinct = True\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            distinct = False\n            break\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the values in the matrix are adjacent to each other\n            if (my_matrix[i][j] == my_matrix[i-1][j] and\n                my_matrix[i][j] == my_matrix[i+1][j] and\n                my_matrix[i][j] == my_matrix[i][j-1] and\n                my_matrix[i][j] == my_matrix[i][j+1]):\n                continue\n            else:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the correct dimensions (n x n)\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # Check if the matrix has unique elements\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] in my_matrix[i][j+1:n] or my_matrix[i][j] in my_matrix[i+1:n][j] or my_matrix[i][j] in my_matrix[i+1:n][j+1:n]:\n                return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n\n    :param my_matrix: a list of lists representing a 3x3 magic square\n    :return: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # check if rows and cols are equal to 3\n    if rows!= cols or rows!= 3:\n        return False\n\n    # check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n\n    # check if each row, column, and 3x3 square is the same\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, i + 3):\n                if my_matrix[i][j]!= my_matrix[k][j]:\n                    return False\n            for k in range(j, j + 3):\n                if my_matrix[i][j]!= my_matrix[i][k]:\n                    return False\n\n    # check if the sum of the diagonals is equal to the sum of the off-diagonal elements\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(rows):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][rows - i - 1]\n    if diag1_sum!= diag2_sum:\n        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = float('-inf')\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to store the count of each element in the list\n    count_dict = defaultdict(int)\n\n    # Iterate over the list and update the count in the dictionary\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the maximum count\n    max_count = max(count_dict.values())\n    max_item = [k for k, v in count_dict.items() if v == max_count][0]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a dictionary to keep track of the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and increment the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int) # dictionary to store frequency count of each item\n    \n    # count frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_item = None\n    max_freq = 0\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_item = item\n            max_freq = freq_count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, freq in count.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_count = 0\n    max_item = None\n    \n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    reversed_str = ''\n    \n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            if vowel_count == 2:\n                reversed_str += char\n        else:\n            reversed_str += char\n    \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in str1:\n        if char not in vowels:\n            reversed_vowels.insert(0, char)\n    return ''.join(reversed_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            if vowel_count % 2 == 0:\n                result = char + result\n            else:\n                result = result + char\n            vowel_count += 1\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            new_string = char + new_string\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = []\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str.append(char)\n    reversed_str = reversed_str[::-1]\n    return ''.join(reversed_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    result = ''.join(result[::-1])\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the str() function\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the elements of the tuple into a string\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Find the value of n and multiply by 2, then subtract 1\n    num = (n * 2) - 1\n    # Convert the value to a string and then to a float\n    hex_num = float(hex(num))\n    # Multiply the value by 1.5 and round the result to two decimal places\n    return round(hex_num * 1.5, 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (2 * n) ** 2 + (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    for i in range(1, n+1):\n        print(f\"{a:b}\")\n        a, b = b, 4*a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    while n > 0:\n        n -= 1\n        a += 6\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define the formula for hexagonal numbers\n    a = 1\n    b = 6\n    c = a * b\n    \n    # Calculate the nth hexagonal number using the formula\n    result = c * n\n    \n    return result"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def sum_of_squares(n):\n        '''\n        Helper function to find the sum of squares of first n positive integers.\n        '''\n        return sum([i**2 for i in range(1, n+1)])\n\n    hexagonal_num = (2*(n-1) + 1)**2 - sum_of_squares(n-1)\n\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2*n - 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Convert the input array to an array of unsigned integers\n    nums = array('I', nums)\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    ratio = non_zeros / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create a new array of integers to store the non-zeroes\n    non_zero_array = array('i', [0] * len(nums))\n\n    # Iterate through the original array and add 1 to the corresponding index in the new array if the element is not zero\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            non_zero_array[i] = 1\n\n    # Calculate the ratio of non-zeroes to total numbers in the array\n    zero_count = sum(non_zero_array) / len(nums)\n\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the input array to a list of integers to make it easier to count the zeros\n    nums = list(nums)\n\n    # initialize counters for non-zeroes and zeros\n    non_zeros = 0\n    zeros = 0\n\n    # iterate over the list of integers\n    for num in nums:\n        # if the integer is non-zero, increment the counter for non-zeros\n        if num!= 0:\n            non_zeros += 1\n        # if the integer is zero, increment the counter for zeros\n        else:\n            zeros += 1\n\n    # calculate the ratio of zeros to non-zeros\n    ratio = zeros / non_zeros if non_zeros!= 0 else 0\n\n    # return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two counters to count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and increment the counter for each non-zero value\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = 0\n    if non_zero_count!= 0:\n        zero_ratio = zero_count / non_zero_count\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in arr:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    ratio = float(zero_count) / non_zero_count if non_zero_count!= 0 else 0\n    \n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create a new array of integers with the same size as the original array\n    result = array('i', [0] * len(nums))\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n            result[count] = 0\n        else:\n            result[count] = 1\n            count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = count / len(nums)\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of integers to store the count of each number\n    counts = array('i', [0] * max(nums) + [1] * sum(nums))\n    \n    # count the number of zeroes and non-zeroes in the array\n    for num in nums:\n        counts[num] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = counts[0] / (counts[1] + counts[0])\n    \n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def sum_of_powers_of_two(n):\n        '''\n        Helper function to find the sum of non-zero powers of 2 in a number.\n        '''\n        count = 0\n        while n!= 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    # Check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n\n    # Check if n can be represented as sum of powers of 2\n    count1 = 0\n    count2 = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count1 += 1\n        n >>= 1\n    if count1 == 1:\n        return True\n    if count2 == 1:\n        return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    else:\n        count = 0\n        while n > 0:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            else:\n                break\n        if count == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check if the given number is a power of 2\n    if n == 0:\n        return False\n\n    while n % 2 == 0:\n        n = n // 2\n\n    # check if the given number is a sum of non-zero powers of 2\n    for i in range(50):\n        if n == 0:\n            return True\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through all possible values of powers of 2\n    for i in range(2, int(n**0.5)+1):\n\n        # Check if the number can be represented as sum of powers of 2\n        if n - (i*i) == 0:\n            return True\n\n    # If no such number can be found, then the number is not sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n\n    count = 0\n    while n > 2:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n = 3 * n + 1\n            count += 1\n\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # Check if the first two digits are both 0\n    if n // 100 == 0:\n        return False\n\n    # Initialize sum and power variables\n    sum = 0\n    power = 1\n\n    # Iterate over the digits of n and add the powers of 2 to the sum\n    while n > 0:\n        sum += power\n        n //= 2\n        power *= 2\n\n    # Check if the sum is equal to n\n    if n == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    return count == 3"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(n):\n        \"\"\"\n        Helper function to check whether a given number is a power of 2 or not.\n        \"\"\"\n        return n and (n & (n - 1)) == 0\n\n    def is_sum_of_powers_of_two(n):\n        \"\"\"\n        Helper function to check whether the sum of non-zero powers of 2 of a given number is equal to the original number.\n        \"\"\"\n        return all(2 ** i == n for i in range(0, int(log2(n)) + 1))\n\n    def log2(n):\n        \"\"\"\n        Helper function to calculate logarithm of base 2 of a given number.\n        \"\"\"\n        return int(math.log2(n))\n\n    def is_representable(n):\n        \"\"\"\n        Main function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        \"\"\"\n        if is_power_of_two(n):\n            return True\n        elif is_sum_of_powers_of_two(n):\n            return True\n        else:\n            return False\n\n    return is_representable(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # If the number is already a power of 2, then it can be represented as a sum of powers of 2\n    if n == 1:\n        return True\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_2 = 0\n\n    # Check if the number is divisible by 2\n    while n % 2 == 0:\n        # Add 1 to the sum of powers of 2\n        sum_of_powers_of_2 += 1\n        # Divide the number by 2\n        n /= 2\n\n    # Check if the number can be expressed as a sum of powers of 2\n    if n == 1:\n        return True\n    elif n % 3 == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n + 1): \n        if n == 2 ** i: \n            return True \n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # using the formula of circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2 * pi * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference\n    circumference = 2 * 3.14 * r\n    \n    # return the value of circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159  # define the value of pi\n    circumference = 2 * pi * r  # calculate the circumference\n    return circumference  # return the circumference as output"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r  # Formula for circumference of a circle"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r  # (pi * r)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_numbers = set(flattened_list)\n    return sorted(list(unique_numbers))\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    flattened_set = set(flattened_list)\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def sort(nums, start, end):\n        if start >= end:\n            return nums\n        pivot = nums[end]\n        i = start\n        for j in range(start, end):\n            if nums[j] >= pivot:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        nums[i], nums[end] = nums[end], nums[i]\n        return sort(nums, start, i - 1)\n\n    def helper(nums, start, end):\n        if start >= end:\n            return nums\n\n        mid = start + (end - start) // 2\n        nums = helper(nums, start, mid)\n        nums = helper(nums, mid + 1, end)\n        nums = merge(nums[:mid + 1], nums[mid + 1:])\n\n        return sort(nums, start, end)\n\n    return helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Store the length of the input list\n    n = len(nums)\n\n    # Initialize the count of swaps and the largest index\n    count = 0\n    max_index = 0\n\n    # Loop through the list until no swaps are made\n    while count < n:\n        # Find the index of the largest element in the unsorted part of the list\n        for i in range(n-1-count):\n            if nums[i] < nums[i+1]:\n                max_index = i\n                break\n\n        # Swap the largest element with the last element in the unsorted part of the list\n        nums[max_index], nums[n-1-count] = nums[n-1-count], nums[max_index]\n\n        # Increment the count of swaps\n        count += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Function to generate all the pancakes\n    def generate_pancakes(n):\n        for i in range(n, 0, -1):\n            yield i\n    \n    # Function to sort the list of elements\n    def sort_list(nums):\n        pancakes = list(generate_pancakes(len(nums)))\n        for i in range(len(nums)):\n            nums[i], nums[pancakes[i]-1] = nums[pancakes[i]-1], nums[i]\n    \n    # Call the function to sort the list\n    sort_list(nums)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements in ascending order.\n\n    Example:\n    >>> pancake_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n    [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n\n    '''\n    # Helper function to find the largest element in the array\n    def find_max_index(nums):\n        max_val = nums[0]\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_index = i\n        return max_index\n\n    # Helper function to move the largest element to the end of the array\n    def move_to_end(nums, max_index):\n        nums[max_index], nums[-1] = nums[-1], nums[max_index]\n\n    # Helper function to sort the array using the pancake sort algorithm\n    def sort_array(nums):\n        for i in range(len(nums) - 1, 0, -1):\n            max_index = find_max_index(nums[:i])\n            move_to_end(nums, max_index)\n\n    # Sort the array using the pancake sort algorithm\n    sort_array(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def sort_inner(nums, start, end):\n        if start >= end:\n            return nums\n\n        # Find the largest element in the sublist.\n        max_idx = start\n        for i in range(start, end):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap the largest element with the first element of the sublist.\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # Recursively sort the sublist.\n        sort_inner(nums, start + 1, end)\n\n    # Sort the list using the pancake sort algorithm.\n    sort_inner(nums, 0, len(nums) - 1)\n\n    # Print the sorted list.\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    def pancake_sort_inner(nums, k):\n        # reverse the k-th element\n        nums[k], nums[0] = nums[0], nums[k]\n        \n        # bubble sort the remaining elements\n        for i in range(1, k):\n            for j in range(0, len(nums)-1-i):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        \n        # reverse the k-th element back\n        nums[0], nums[k] = nums[k], nums[0]\n    \n    # find the largest element\n    largest_element = max(nums)\n    \n    # bubble sort to find the largest element in its correct position\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    \n    # bubble sort to put the largest element at the end\n    for i in range(len(nums)-2, -1, -1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    \n    # sort the remaining elements in the original order\n    for i in range(len(nums)-1, -1, -1):\n        pancake_sort_inner(nums, i)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # reverse the unsorted part of the list\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # create a copy of the input list to avoid modifying it\n    nums_copy = nums.copy()\n\n    # start with the largest element\n    for i in range(n-1, 0, -1):\n        # find the index of the largest element in the remaining unsorted part of the array\n        max_index = 0\n        for j in range(1, i+1):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n\n        # swap the largest element with the first element of the unsorted part of the array\n        nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n\n        # reverse the order of the elements from the first element to the largest element\n        for j in range(i):\n            nums_copy[j], nums_copy[i-j-1] = nums_copy[i-j-1], nums_copy[j]\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the array\n        largest = nums[i]\n        for j in range(i, n):\n            if nums[j] > largest:\n                largest = nums[j]\n\n        # swap the largest element with the element at the current position\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements.\"\n    else:\n        max_diff = 0\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize variables to store the maximum and minimum values\n    max_diff = 0\n    min_val = arr[0]\n    \n    # Loop through the array and find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n        \n        # Calculate the difference between the current value and the minimum value\n        curr_diff = max_val - min_val\n        \n        # Update the maximum difference if the difference is greater than the current maximum\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize variables for the x and y values\n    x = None\n    y = None\n    \n    # Loop through all possible values of x\n    for i in range(1, n // a + 1):\n        # Calculate the value of y\n        y = (n - a * i) // b\n        \n        # Check if the value satisfies the equation\n        if a * x + b * y == n:\n            # If it does, return the solution\n            return (x, y)\n    \n    # If no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # if it is positive, find the roots\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # check if the roots are integers\n        if root1.is_integer() and root2.is_integer():\n            return (int(root1), int(root2))\n        \n        # if not, return None\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is zero\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            # check if b is positive\n            if b > 0:\n                return None\n            else:\n                return (0, -b)\n    else:\n        # compute x and y such that ax + by = n\n        x = -n / a\n        y = -x * b\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a, b, and n are all integers\n    if not all(isinstance(x, int) for x in [a, b, n]):\n        return None\n\n    # Check if a and b are both positive integers\n    if a <= 0 or b <= 0:\n        return None\n\n    # Check if n is a multiple of a and b\n    if n % a!= 0 or n % b!= 0:\n        return None\n\n    # Initialize variables to store x and y values\n    x = 0\n    y = 0\n\n    # Iterate until x and y satisfy a*x + b*y = n\n    while (a*x + b*y!= n):\n        if a*x + b*y < n:\n            x += 1\n        elif a*x + b*y > n:\n            y += 1\n\n    # Check if a*x + b*y = n and return a tuple of (x, y)\n    if a*x + b*y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 0, 1\n    y1, y2 = 1, 0\n    \n    while x2 <= n:\n        x = (a * x1 + b * x2) % n\n        y = (a * y1 + b * y2) % n\n        \n        if x == n:\n            return (x1, y1)\n        elif x < n:\n            x1, x2 = x1, x2 + 1\n            y1, y2 = y1, y2 + 1\n        else:\n            x1, x2 = x1 + 1, x2\n            y1, y2 = y1 + 1, y2\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-100, 101):\n        for y in range(-100, 101):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function takes three arguments: the first two integers a and b, which are the coefficients of the quadratic equation, and n, which is the value of the quadratic function.\n    The function returns a tuple of two integers x and y, such that ax + by = n. If there is no solution, it returns None.\n    \"\"\"\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n\n    # Check if there is a solution\n    if disc < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + disc**0.5)/(2*a)\n    x2 = (-b - disc**0.5)/(2*a)\n\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    for i in range(n):\n        if a * i + b * (n - 1 - i) == n:\n            x, y = i, n - 1 - i\n            break\n    return (x, y) if x is not None else None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    for x in range(n // b + 1):\n        if b * x * x + a * n - b * x == 0:\n            return (x, n // b)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate k and b\n    k = -a / b\n    \n    # Calculate x and y using kx + b\n    x = int((-n + k * b) / (1 - k))\n    y = int((-n - k * b) / (1 - k))\n    \n    # Check if n is equal to kx + b\n    if n == k * x + b:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through each element of the first list\n    for i in range(len(list1)):\n        # Check if the element is present in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the first list\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes in two lists as input and removes all elements from the first list\n    present in the second list.\n    \"\"\"\n    # Loop through the first list and remove the elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1 # Decrement the index to ensure that the loop continues until the end of the list\n\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Use a set to remove duplicates from the second list\n    list2 = set(list2)\n    # Use a list comprehension to remove the elements from the first list that are in the set of second list\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Remove all elements present in list2 from list1\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate over the list1 elements and remove those present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using set() to remove duplicates\n    list1 = set(list1)\n    list1 -= set(list2)\n    return list(list1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += n - 2 * i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2!= 0:\n        return None\n    else:\n        sum = 0\n        for i in range(n // 2):\n            sum += (n - 2 * i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through the range from i=0 to n//2\n    for i in range(n//2):\n        # Add the sum of the series n - 2*i to the sum variable\n        sum += (n - 2*i)\n        # Check if the sum of the series has exceeded n-x\n        if sum > n - i:\n            # If it has, return the sum\n            return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2 * i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        x = n // 2 - 1\n    else:\n        x = n // 2\n        \n    sum_series = 0\n    for i in range(0, x+1):\n        sum_series += (n - 2*i)\n    \n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    if n % 2 == 0:\n        n -= 2\n    else:\n        n -= 1\n    return n * (n + 1) // 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2)/4 * pi\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side of the polygon\n    a = s / l\n\n    # Calculate the area of the polygon using the formula for the area of a regular polygon\n    area = 0.5 * s * l * (tan(pi/l)) ** 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert degrees to radians\n    theta = pi/180\n    \n    # Calculate the area using the formula A = (s(sin(theta))^2 + l(sin(theta))^2) * tan(theta)\n    area = (s*(tan(theta)**2))**2 + (l*(tan(theta)**2))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-l) * (s-2*l)) / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l) * (i*(i-1))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    # Check if the sum of the divisors is the same as n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(divisors(n)))\n    # Check if the sum of the divisors of n and n is the same\n    return div_sum == n\n\ndef divisors(n):\n    \"\"\"\n    Calculate the set of divisors of a given integer.\n    \"\"\"\n    divs = set()\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n))+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If it is, add i and n/i to the set of divisors\n            divs.add(i)\n            divs.add(n//i)\n    # Add n to the set of divisors if it is not already in it\n    if n not in divs:\n        divs.add(n)\n    return divs"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_list = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            divisor_list.append(divisor)\n        divisor += 1\n\n    return divisor_list, sum(divisor_list)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_div += i + n // i\n\n    # Check if the sum of the divisors of n and n itself are the same\n    if sum_div == n:\n        print(f\"{n} has a divisors sum of {sum_div}.\")\n    else:\n        print(f\"{n} does not have a divisors sum of {sum_div}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes in two integers and checks if the sum of their divisors is the same.\n    '''\n\n    div_sum = 0\n\n    # Calculate the sum of the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n\n    # Calculate the sum of the divisors of n+1\n    for i in range(1, int(math.sqrt(n))+1):\n        if (n+1) % i == 0:\n            div_sum += i\n\n    # Check if the sum of the divisors is the same\n    if div_sum == (n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n \n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n    # Return True if div_sum is equal to the sum of the divisors of n \n    return div_sum == sum([i for i in range(1, n+1)])"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Finding the sum of divisors of two integers\n    a = math.sqrt(n)\n    b = math.sqrt(2*n)\n    c = int(math.sqrt(2*n**2))\n\n    sum_a = sum_b = sum_c = 0\n\n    for i in range(1, a+1):\n        if n % i == 0:\n            sum_a += i\n\n    for i in range(1, b+1):\n        if n % i == 0:\n            sum_b += i\n\n    for i in range(1, c+1):\n        if n % i == 0:\n            sum_c += i\n\n    if sum_a == sum_b == sum_c:\n        print(n, \"and\", 2*n, \"have the same sum of divisors.\")\n    else:\n        print(n, \"and\", 2*n, \"do not have the same sum of divisors.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    if len(set(div_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors of n and 1 are the same\n    return sum_div == n + 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to make the case insensitive comparison possible\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    count_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    # Iterate through the string and count the number of characters at each position in the English alphabet\n    for char in str1:\n        if char.isalpha() and char in count_dict:\n            count_dict[char] += 1\n    # Return the count of characters at each position in the English alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to store the counts of each character in the alphabet\n    count_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter in the alphabet, add 1 to its count in the dictionary\n        if char.isalpha():\n            count_dict[char] += 1\n    # Print the counts of each character in the alphabet\n    for key in count_dict:\n        print(f'{key}: {count_dict[key]}')"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase and remove spaces\n    str1 = str1.lower().replace(\" \", \"\")\n\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter in the English alphabet, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the dictionary as a list of tuples, where the first element is the character and the second element is the count\n    return list(char_count.items())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    # define a dictionary to store the frequency of each character in the English alphabet\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase and check if it is a lowercase English letter\n        if char.lower() in freq:\n            freq[char.lower()] += 1\n        else:\n            freq[char.lower()] = 1\n    # loop through each character in the string again and count the number of times it occurs at the same position in the English alphabet\n    count = 0\n    for char in str1:\n        # convert the character to lowercase and check if it is a lowercase English letter\n        if char.lower() in freq:\n            # if it occurs at the same position in the English alphabet, increment the count\n            if freq[char.lower()] == ord(char.lower())-ord('a')+1:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().find(chr(i+97).lower())!= -1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert string to lowercase and remove spaces\n    str1 = str1.lower().replace(' ', '')\n\n    # Initialize an empty dictionary to store character counts\n    char_counts = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter (ignoring spaces), add it to the dictionary with a count of 1\n        if char.isalpha():\n            char = char.lower()\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n\n    # Return the character counts dictionary\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # count the frequency of characters in the English alphabet\n    alphabet_freq = {chr(i): 0 for i in range(ord('a'), ord('z')+1)}\n\n    # count the frequency of characters at each position\n    for i in range(len(str1)):\n        alphabet_freq[str1[i]] += 1\n\n    # count the frequency of characters at each position in the English alphabet\n    for i in range(len(str1)):\n        if str1[i] in alphabet_freq:\n            count_freq = 0\n            for j in range(ord('a'), ord('z')+1):\n                if chr(j) == str1[i]:\n                    count_freq += 1\n            alphabet_freq[str1[i]] = count_freq\n\n    # find the maximum frequency of characters at each position in the English alphabet\n    max_freq = max(alphabet_freq.values())\n\n    # find the number of characters in the string that occur at the same position in the string as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet_freq and alphabet_freq[str1[i]] == max_freq:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the number of characters at each position in the English alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n    \n    # Return the dictionary with the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each letter in the English alphabet\n    letter_count = {}\n    # Iterate through the string\n    for i in range(len(str1)):\n        # If the character is in the English alphabet\n        if ord('a') <= ord(str1[i]) <= ord('z'):\n            # Get the lowercase version of the character\n            char = chr(ord(str1[i]) + ord('a') - ord('A'))\n            # If the character is already in the dictionary, increment its count\n            if char in letter_count:\n                letter_count[char] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                letter_count[char] = 1\n    # Return the count of each letter in the dictionary\n    return letter_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each element in the list\n    for i in range(len(A)):\n        # Calculate the xor of the current element and the remaining elements\n        xor = sum(A[i:] ^ A)\n        # If the xor is even, increment the count by 1\n        if xor % 2 == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] + A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n\n    # Loop until we find the next power of 2 greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 *= 2\n\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n    return power_of_two"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return 2 ** (n - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary string\n    binary = bin(n)[2:]\n    # Initialize count variable\n    count = 0\n    # Initialize result variable\n    result = 1\n    # Iterate through binary string\n    for bit in binary:\n        if bit == '1':\n            # If current bit is 1, multiply result by 2 raised to the power of count\n            result *= 2 ** count\n        # Increment count\n        count += 1\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize a variable to keep track of the smallest power of 2 greater than or equal to n\n    power_of_2 = n\n\n    # Loop until power_of_2 is a power of 2 greater than or equal to 2^32\n    while power_of_2 < 2**32:\n        power_of_2 *= 2\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    low = 1\n    high = n\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid < n:\n            low = mid + 1\n        elif mid == n:\n            return mid\n        else:\n            high = mid\n\n    return high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0: \n        n = n | (n & -n) \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to a given number n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to integer and calculate its binary representation\n    n = int(n)\n    binary_representation = bin(n)[2:]\n    \n    # Find the position of the first 1 in the binary representation\n    index = 0\n    while index < len(binary_representation) and binary_representation[index] == '0':\n        index += 1\n        \n    # Add 1 to the binary representation to the left of the first 1 and then convert it to an integer\n    power_of_2 = int(binary_representation[:index] + '1' + binary_representation[index:], 2)\n    \n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # create a dictionary to store the frequency of each number\n    freq = {}\n\n    # iterate through the list and increment the frequency of each number in the dictionary\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # count the frequency of the target number in the dictionary\n    count = 0\n    for num in freq:\n        if num == x:\n            count += freq[num]\n\n    # return the count\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    perimeter = circumference * 5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nprint(\"The perimeter of the pentagon with side length\", a, \"is\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # convert the input value to radians\n    angle = math.radians(30)\n    # calculate the side length of the pentagon\n    side_length = a * math.sin(angle)\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * side_length\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Using the formula for the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    count = 0\n    for char in s:\n        if char =='s' or char == 't' or char == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = 0\n    while True:\n        index = s.find('std', start_index)\n        if index == -1:\n            break\n        count += 1\n        start_index = index + 3\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n\n    for item in test_tuple:\n        data_types.append(type(item))\n\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    data_types = []\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n        data_types.append(type(element))\n    return data_types"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Check if all elements in tuple have same data type\n    for item in test_tuple:\n        if data_type is None:\n            data_type = type(item)\n        else:\n            if type(item)!= data_type:\n                return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for element in test_tuple:\n        type_set.add(type(element))\n\n    if len(type_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Iterate through each element in the tuple\n    for i in range(len(test_tuple)):\n        # Get the data type of the current element\n        current_type = type(test_tuple[i])\n        # If the data type of the current element is not same for all elements, return False\n        if current_type!= type(test_tuple[0]):\n            return False\n    # If all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element x and returns whether the element x is the majority element in the given sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        n (int): The length of the array.\n        x (int): The element to be checked for being the majority element.\n\n    Returns:\n        bool: True if x is the majority element in arr, False otherwise.\n    \"\"\"\n\n    # Find the count of x in the array\n    count = arr.count(x)\n\n    # Check if the count is greater than n//2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize a counter and a count of the element we're looking for\n    counter = 0\n    count = 0\n\n    # Loop through the array and check if the element is in it\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            counter += 1\n            count = 0\n\n    # Return whether the element is the majority element in the array\n    return counter == 1"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1 # check if the least significant bit is 1\n        n >>= 1 # shift the number to the right by 1 bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer `n` as input and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0: # check if the index value is even\n            new_str += str[i] # add the even characters to the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Parameters:\n    str (str): A string to remove odd-indexed characters from.\n\n    Returns:\n    str: A new string with odd-indexed characters removed.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_str += str[i]\n    return odd_index_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Loop through the characters of the string and remove the odd characters\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = ''\n    # Loop through each character in the given string\n    for char in str:\n        # If the index of the character is odd, append it to the new string\n        if str.index(char) % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    odd_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Get the number of bits in the given range\n    num_bits = r - l + 1\n    # Initialize a boolean variable to store the result\n    all_bits_set = True\n\n    # Check whether all the bits are set in the given range or not\n    for i in range(num_bits):\n        # Get the bit number in the given range\n        bit_num = l + i\n        # Check whether the bit is set or not\n        if not ((n >> bit_num) & 1):\n            # If the bit is unset, set the boolean variable to False and break out of the loop\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n)[2:].zfill(64)[i] == '1':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    return count == n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input: n must be a positive integer.\"\n    \n    # Check if l and r are positive integers\n    if not isinstance(l, int) or not isinstance(r, int) or l <= 0 or r <= 0:\n        return \"Invalid input: l and r must be positive integers.\"\n    \n    # Check if l <= r\n    if l > r:\n        return \"Invalid input: l must be less than or equal to r.\"\n    \n    # Convert l and r to binary strings\n    l_binary = bin(l)[2:]\n    r_binary = bin(r)[2:]\n    \n    # Compare the binary strings\n    if l_binary == r_binary:\n        return \"All bits are set in the given range.\"\n    else:\n        return \"Some bits are unset in the given range.\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters: n (the integer to check), l (the lower limit of the range), and r (the upper limit of the range).\n\n    It returns True if all the bits are unset in the given range or False otherwise.\n    '''\n\n    # Initialize a variable to store the result\n    all_bits_unset = True\n\n    # Loop through each bit from the lower limit to the upper limit\n    for i in range(l, r + 1):\n        # Get the value of the bit at the current position i\n        current_bit_value = (n >> i) & 1\n\n        # If the current bit value is not 0, then all the bits are unset\n        if current_bit_value!= 0:\n            all_bits_unset = False\n            break\n\n    # Return the result\n    return all_bits_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize an integer variable `temp` to store the value of n after lth bit is flipped to 0\n    temp = n ^ (1 << l)\n    \n    # Check whether all the bits in temp are unset or not\n    if temp == 0:\n        return True\n    else:\n        # If not, keep on flipping the lth bit and checking the result\n        for i in range(l, r+1):\n            if temp & (1 << i):\n                temp = temp ^ (1 << i)\n                if temp == 0:\n                    return True\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_bits = 0\n    unset_bits = 0\n    for i in range(l,r+1):\n        if i & 1:\n            unset_bits |= 1 << i\n        else:\n            set_bits |= 1 << i\n    return unset_bits == 0 and set_bits == (1 << (r-l+1)) - 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):  \n        if bin(i)[2:].count('0')!= 32:  \n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # convert the input integers to binary strings\n    n_bin = bin(n)[2:]\n    l_bin = bin(l)[2:]\n    r_bin = bin(r)[2:]\n\n    # find the length of the binary strings\n    len_n = len(n_bin)\n    len_l = len(l_bin)\n    len_r = len(r_bin)\n\n    # check that the input integers are within the range of the binary strings\n    if len_n < len_l or len_l < len_r or len_n < len_r or n < l or n > r:\n        return \"Invalid input\"\n\n    # check that all the bits are set in the range\n    for i in range(len_n):\n        if n_bin[i] == '1' and l_bin[i] == '1' and r_bin[i] == '1':\n            return \"All bits are set in the given range\"\n\n    # if all the bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n: An integer representing the binary number.\n        l: An integer representing the lower bound of the range.\n        r: An integer representing the upper bound of the range.\n\n    Returns:\n        A boolean value indicating whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a boolean variable to keep track of whether all bits are unset in the range or not.\n    is_all_unset = True\n    # Iterate over each bit in the binary representation of the number.\n    for i in range(l, r + 1):\n        # If the bit is set, set the is_all_unset variable to False and break out of the loop.\n        if n & (1 << i):\n            is_all_unset = False\n            break\n    return is_all_unset"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Create a dictionary to keep track of the indices of the positive and negative elements\n    positive_indices = {}\n    negative_indices = {}\n\n    # Loop through the first n elements of the array\n    for i in range(n):\n\n        # If the element is positive, add its index to the dictionary of positive elements\n        if arr[i] > 0:\n            positive_indices[arr[i]] = i\n\n        # If the element is negative, add its index to the dictionary of negative elements\n        elif arr[i] < 0:\n            negative_indices[-arr[i]] = i\n\n    # Create a list to store the re-arranged elements\n    result = []\n\n    # Loop through the first n elements of the array again and add them to the result list\n    for i in range(n):\n\n        # If the element is positive, add it to the result list at the position specified by the positive_indices dictionary\n        if arr[i] > 0:\n            result.append(arr[i])\n            result.append(positive_indices[arr[i]])\n\n        # If the element is negative, add it to the result list at the position specified by the negative_indices dictionary\n        elif arr[i] < 0:\n            result.append(arr[i])\n            result.append(negative_indices[-arr[i]])\n\n    # Return the re-arranged list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables\n    negative = []\n    positive = []\n    i = 0\n    while i < len(arr):\n        # Move negative elements to the front of the array\n        if arr[i] < 0:\n            negative.append(arr[i])\n            del arr[i]\n            i -= 1\n        # Move positive elements to the end of the array\n        else:\n            positive.append(arr[i])\n            del arr[i]\n\n    # Reverse the order of negative and positive elements\n    negative.reverse()\n    positive.reverse()\n\n    # Concatenate negative and positive elements\n    result = negative + positive\n\n    # Remove duplicates\n    result = list(set(result))\n\n    # Return the final result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    zero = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n        else:\n            zero.append(arr[i])\n    \n    result = negative + positive + zero\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two variables to store the count of negative and positive elements respectively\n    neg_count = 0\n    pos_count = 0\n\n    # Iterate through the array and count the number of negative and positive elements\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n        elif i > 0:\n            pos_count += 1\n\n    # If the number of negative elements is less than n, return the original array\n    if neg_count < n:\n        return arr\n\n    # Create a new array to store the re-arranged elements\n    new_arr = []\n\n    # Iterate through the original array and re-arrange the elements\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n            i += 1\n            neg_count -= 1\n        else:\n            new_arr.append(arr[i])\n            i += 1\n            pos_count -= 1\n\n    # Add the remaining elements to the new array\n    while i < len(arr):\n        new_arr.append(arr[i])\n        i += 1\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, find the indices of the negative and positive elements\n    neg_indices = [i for i, x in enumerate(arr) if x < 0]\n    pos_indices = [i for i, x in enumerate(arr) if x >= 0]\n\n    # Sort the indices so that they are in ascending order\n    neg_indices.sort()\n    pos_indices.sort()\n\n    # Calculate the maximum index for each array\n    max_neg_index = neg_indices[-1] if n >= len(neg_indices) else neg_indices[-n:]\n    max_pos_index = pos_indices[0] if n >= len(pos_indices) else pos_indices[:n]\n\n    # Concatenate the indices and their corresponding elements to create the final array\n    final_arr = []\n    for i in range(max_neg_index + 1):\n        if i in neg_indices:\n            final_arr.append(-arr[i])\n        elif i in pos_indices:\n            final_arr.append(arr[i])\n\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two empty lists to store negative and positive elements respectively\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the given array and append all negative and positive elements into their respective lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Concatenate the negative and positive lists into a single list and sort it in descending order\n    sorted_list = neg_list + pos_list\n    sorted_list.sort(reverse=True)\n    \n    # Iterate through the sorted list and append the first n elements to a new array\n    new_arr = []\n    for num in sorted_list[:n]:\n        new_arr.append(num)\n    \n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the counts of negative and positive numbers in the array\n    neg_count = 0\n    pos_count = 0\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    # calculate the minimum number of negative and positive numbers that need to be moved\n    min_neg = min(neg_count, n)\n    min_pos = min(pos_count, n)\n    # move negative numbers to the front of the array\n    if min_neg > 0:\n        for _ in range(min_neg):\n            arr.pop(0)\n        arr.extend([-1] * min_neg)\n    # move positive numbers to the end of the array\n    if min_pos > 0:\n        for _ in range(min_pos):\n            arr.pop()\n        arr.extend([1] * min_pos)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists for negative and positive elements\n    neg = []\n    pos = []\n    # Iterate over the input array\n    for num in arr:\n        # If the number is negative, add it to the negative list\n        if num < 0:\n            neg.append(num)\n        # If the number is positive, add it to the positive list\n        else:\n            pos.append(num)\n    # Concatenate the negative and positive lists\n    result = neg + pos\n    # If the length of the result is less than n, repeat the process with the original array\n    while len(result) < n:\n        arr.append(-arr.pop(0))\n    # Return the first n elements of the result\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initializing two empty lists to store negative and positive elements respectively\n    neg_lst = []\n    pos_lst = []\n\n    # Iterating through the array\n    for i in range(n):\n        # Checking if the current element is negative or positive\n        if arr[i] < 0:\n            # Appending the negative element to the negative list\n            neg_lst.append(arr[i])\n        else:\n            # Appending the positive element to the positive list\n            pos_lst.append(arr[i])\n\n    # Concatenating the negative and positive lists and re-arranging the elements in the array\n    for i in range(n):\n        # Checking if the current element is negative or positive\n        if arr[i] < 0:\n            # Replacing the current element with the negative element from the negative list\n            arr[i] = neg_lst.pop(0)\n        else:\n            # Replacing the current element with the positive element from the positive list\n            arr[i] = pos_lst.pop(0)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers to the beginning of the array and two empty lists to store positive and negative elements\n    pos, neg = [], []\n    # iterate over the array using two pointers\n    for i in range(n):\n        # if the current element is negative, add it to the negative list and move the pointer to the next element\n        if arr[i] < 0:\n            neg.append(arr[i])\n            arr[i] = arr[i+1]\n        # if the current element is positive, add it to the positive list and move the pointer to the next element\n        else:\n            pos.append(arr[i])\n            arr[i] = arr[i+1]\n    # add the remaining elements to the positive list\n    pos += arr[:n]\n    # add the negative list to the beginning of the array\n    arr[:n] = neg + pos"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 ="
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ', char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n    # Build the min-heap\n    for i in range(n, len(list1)):\n        if list1[i] > -heapq.heappop(min_heap):\n            heapq.heappush(min_heap, -list1[i])\n    # Extract the n largest items from the min-heap\n    result = []\n    while min_heap:\n        result.append(-heapq.heappop(min_heap))\n    result.reverse()\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # extract the n largest elements from the heap and add them to a new list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min heap of size n\n    heap = []\n    # initialize heap with first n elements of list1\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # add remaining elements of list1 to heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n    # extract the n largest elements from heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        raise ValueError(\"n is greater than the length of the list\")\n    else:\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap,list1[i])\n        return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap with the n largest items\n    max_heap = []\n    for i in range(n):\n        max_heap.append(list1[i])\n    heapq.heapify(max_heap)\n    \n    # Iterate over the remaining items in the list and update the max heap\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, list1[i])\n    \n    # Return the n largest items from the list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n\n    # Pop and add each element of the list to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > -heapq.heappop(min_heap):\n            heapq.heappush(min_heap, -list1[i])\n\n    # Convert the min heap to a list and return it\n    return [-x for x in min_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Return the first n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = math.pi * r**2 * h #calculating the lateral surface area using the formula pi r^2 h\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Find the lateral surface area of the cylinder using the formula:\n    #   Lateral Surface Area = 2 * pi * r * h\n    # where pi is a mathematical constant approximately equal to 3.14159\n    pi = 3.14159\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159*r**2*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n    r (float): Radius of the cylinder.\n    h (float): Height of the cylinder.\n\n    Returns:\n    float: Lateral surface area of the cylinder.\n    \"\"\"\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area using the formula:\n    #A = 2*pi*r*h\n    A = 2*3.14159*r*h\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r * r + math.pi * r * h + math.pi * h * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            result += 1\n        else:\n            # If the bit is odd, set it to 0\n            result += 0\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the number with even bits set to 1\n    even_bits_set_number = n | (n >> 1) | (n >> 2) | (n >> 3) | (n >> 4) | (n >> 5) | (n >> 6) | (n >> 7)\n    return even_bits_set_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    \n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the corresponding bit in the result variable to 1\n        if int(bit) % 2 == 0:\n            result |= 1 << int(bit)\n    \n    # Return the modified number\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # create an empty list to store the even bits\n    even_bits = []\n    # loop through each bit of the number\n    for i in range(32):\n        # check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # add the even bit to the list\n            even_bits.append(2**i)\n    # set the even bits of the number\n    result = 0\n    for bit in even_bits:\n        result |= bit\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is even\n        if (n & 1) == 0:\n            # Set the i-th bit in the result to 1\n            result |= 1 << i\n        # Shift the n by 1 bit to move to the next bit\n        n >>= 1\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n.bit_length()):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if the bit is even, append a 1 to the result list\n        if int(bit) == 0:\n            result.append(0)\n        else:\n            result.append(1)\n\n    # join the list of results into a single number\n    return int(''.join(map(str, result)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    for i in range(n.bit_length()):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Find all the even bits in the given number\n    even_bits = [i for i in range(n.bit_length()) if n & (1 << i)]\n    # Set all even bits of the number to 1\n    n = n | (1 << even_bits[0]) | (1 << even_bits[-1])\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number to store the even bits\n    even_bits = 0\n    \n    # Iterate through each bit of the original number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the new number\n        if int(bit) == 0:\n            even_bits = even_bits | 1\n    \n    # Return the new number with even bits set\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for item in test_list:\n        # If the tuple is in the dictionary, increment its count\n        if item in count_dict:\n            count_dict[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[item] = 1\n\n    # Return the dictionary with the count of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Count the occurrences of each tuple using the Counter class\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter to count the occurrences of each tuple in the list\n    counts = Counter(test_list)\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over the counts dictionary and add each key-value pair to the results dictionary\n    for key, value in counts.items():\n        results[key] = value\n\n    # Return the results dictionary\n    return results"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    count_dict = {}\n\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Create an empty dictionary to store the results\n    result_dict = {}\n    # Iterate over the count dictionary and add each unique tuple to the result dictionary with the count as the value\n    for key, value in count_dict.items():\n        result_dict[key] = value\n    # Return the result dictionary\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use Counter to count the occurrences of each unique tuple\n    counts = Counter(test_list)\n    # convert the Counter to a dictionary\n    result = dict(counts)\n    return result"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= \"\":\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    # Initialize count variable to 0\n    count = 0\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # Iterate through all possible starting positions for the substring\n        for j in range(i, len(string)+1):\n            # If the substring is non-empty, increment the count variable\n            if string[j-1]!= string[j-2]:\n                count += 1\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    # Initialize count to zero\n    count = 0\n    # Loop over each character in the string\n    for i in range(len(s)):\n        # Check if the character is a letter\n        if s[i].isalpha():\n            # Loop over each possible substring starting from the current position\n            for j in range(i, len(s)):\n                # Check if the substring is non-empty\n                if len(s[i:j+1]) > 0:\n                    # Increment the count by 1\n                    count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the count to zero\n    count = 0\n    \n    # Initialize the current sequence to an empty list\n    current_sequence = []\n    \n    # Loop through the range of possible lengths of the sequence\n    for length in range(2, n+1):\n        # Loop through the range of possible starting points\n        for start in range(m - 2*length + 1):\n            # Append the current element to the sequence\n            current_sequence.append(start)\n            # Loop through the remaining elements in the sequence\n            for i in range(length-1):\n                # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n                if start + 2*i + 2 <= m:\n                    # Append the next element to the sequence\n                    current_sequence.append(start + 2*i + 2)\n            # If the current sequence is a valid length, increment the count\n            if len(current_sequence) == length:\n                count += 1\n                # Reset the current sequence to an empty list\n                current_sequence = []\n    \n    # Return the count of valid sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    # Initialize variables\n    count = 0\n    previous_element = 0\n\n    # Iterate through all possible elements of length n\n    for i in range(n):\n        # Calculate the next element\n        next_element = min(2*previous_element, m)\n\n        # Check if the next element is within the range\n        if next_element >= 2*previous_element and next_element <= m:\n            count += 1\n\n        # Update the previous element for the next iteration\n        previous_element = next_element\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    current_sequence = [2]\n\n    for i in range(1, n + 1):\n        if i <= m:\n            current_sequence.append(i)\n        else:\n            for j in range(len(current_sequence) - 1, 0, -1):\n                if current_sequence[j - 1] < 2 * current_sequence[j]:\n                    current_sequence[j] += 1\n                    break\n            else:\n                break\n\n        if len(current_sequence) == n:\n            count += 1\n            current_sequence = [2]\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables for sum of all possible sequences and count of possible sequences\n    total_sequences = 0\n    count_sequences = 0\n    # Loop through all possible sequences of length n\n    for i in range(m+1, m+n+1):\n        # Check if each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n        if all(isinstance(x, int) and x >= 2*i and x <= m for x in range(1, i)):\n            # Increment count of possible sequences\n            count_sequences += 1\n            # Add 1 to the sum of all possible sequences\n            total_sequences += 1\n    # Return the total number of possible sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(m, 1, -1):\n            if i % 2 == 0 and i >= m * 2 and i <= m:\n                count += 1\n        return count + get_total_number_of_sequences(m, n - 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the counter variable to 0\n    counter = 0\n\n    # Initialize the current sequence to an empty list\n    sequence = []\n\n    # Loop through each element from 1 to m\n    for i in range(1, m+1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2*sequence[-1] <= m:\n            # If it is, add it to the current sequence and check if it is of length n\n            if len(sequence) == n:\n                # If it is, increment the counter\n                counter += 1\n            # If it is not of length n, add the current element to the sequence\n            else:\n                sequence.append(i)\n\n    # Return the total number of sequences\n    return counter"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    count = 0\n    previous_element = 1\n    \n    # Loop through all possible sequences of length n\n    for i in range(m, m + 2 * n):\n        # Check if each element is greater than or equal to twice the previous element and less than or equal to m\n        if i % 2 == 0 and i >= previous_element * 2 and i <= m:\n            count += 1\n        # Update the previous element\n        previous_element = i\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    prev = 0\n\n    for i in range(1, m+1):\n        if i >= 2*prev and i <= m:\n            total += 1\n        prev = i\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    def is_valid_sequence(sequence):\n        for i in range(len(sequence)-1):\n            if sequence[i] >= 2*sequence[i+1] and sequence[i] <= m:\n                return True\n        return False\n\n    sequence = [0] * n\n    total_sequences = 0\n\n    for i in range(1,m+1):\n        if is_valid_sequence(sequence):\n            total_sequences += 1\n            sequence.append(i)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n    prev_num = 2 * m - 1\n    for i in range(1, 2 * n):\n        if prev_num >= m and prev_num <= 2 * m:\n            count += 1\n        prev_num += 1\n\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    n = len(list1)\n    \n    # Replace the last element of the first list with the elements of the second list\n    for i in range(n-1, -1, -1):\n        list1[i] = list2[i%len(list2)]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        list1.pop()\n    elif len(list2) < len(list1):\n        list1.append(list2.pop())\n    else:\n        list1[-len(list2):] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length1 = len(list1)\n\n    # Check if the length of the second list is less than or equal to the length of the first list\n    if len(list2) > length1:\n        raise ValueError(\"Second list cannot be longer than the first list.\")\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2[-1:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Extract the last element of the first list\n    last_element = list1[-1]\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # Return the modified list1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Check if the length of the second list is greater than or equal to the length of the first list\n    if len(list2) >= length:\n        # Use slicing to replace the last element of the first list with the elements of the second list\n        list1[-1:] = list2[:length]\n    else:\n        print(\"The second list is not long enough to replace all of the elements of the first list.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    list1.extend(list2)\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Get the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Round the square root down to the nearest integer\n    sqrt_N = int(sqrt_N)\n\n    # Calculate the next perfect square greater than N\n    next_square = 2 * sqrt_N * sqrt_N - N\n\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    # Convert the input number to a float\n    N = float(N)\n    # Use binary search to find the next perfect square greater than N\n    left, right = 1, N\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid > N:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    sqrt_N = int(sqrt_N) + 1\n    next_sqrt = (sqrt_N * sqrt_N)\n\n    return next_sqrt\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return math.isqrt(num) ** 2 == num\n\n    # Helper function to find the next perfect square\n    def find_next_square(num):\n        # Make num a perfect square if it isn't already\n        while not is_perfect_square(num):\n            num += 1\n        return num\n\n    # Find the next perfect square greater than N\n    next_num = find_next_square(N)\n\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef next_Perfect_Square(N):\n    '''\n    This function calculates the next perfect square greater than a given number.\n    '''\n    # Initialize the two variables to store the smallest and largest perfect squares\n    min_square = 1\n    max_square = int(math.sqrt(N))\n    \n    # While the smallest perfect square is greater than the given number\n    while min_square <= N:\n        # While the largest perfect square is less than or equal to the given number\n        while max_square >= N:\n            # Calculate the midpoint of the current range\n            mid = (min_square + max_square) // 2\n            \n            # If the square is perfect\n            if mid * mid == N:\n                # If the next square is also perfect\n                if mid * mid == N + 1:\n                    # Return the next perfect square\n                    return mid * mid\n                # If the next square is not perfect\n                else:\n                    # Update the min_square to the current midpoint\n                    min_square = mid\n            # If the square is not perfect\n            else:\n                # Update the max_square to the current midpoint\n                max_square = mid\n    \n    # If there is no next perfect square greater than the given number\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    def get_next_prime_square(num):\n        if num % 2 == 0:\n            num += 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    def next_prime_square(num):\n        if is_perfect_square(num):\n            return num\n        next_prime = get_next_prime_square(num)\n        while not is_prime(next_prime):\n            next_prime = get_next_prime_square(next_prime)\n        return next_prime\n\n    next_square = next_prime_square(N)\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # loop to find the next perfect square greater than N\n    while True:\n        N += 1\n        square = int(math.sqrt(N))\n        if square*square == N:\n            break\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Function to find the next perfect square greater than a given number\n    def isPerfectSquare(num):\n        x = num\n        y = int(math.sqrt(num))\n        while x!= y**2:\n            x = (y + num // y) // 2\n            y = int(math.sqrt(x))\n        return x\n\n    # Find the next perfect square greater than N\n    i = 1\n    next_square = N + 1\n    while next_square <= N:\n        if isPerfectSquare(next_square) > N:\n            return next_square\n        i += 1\n        next_square = N + i**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(n):\n        if n < 2:\n            return True\n        root = int(math.sqrt(n))\n        return root*root == n\n\n    def binary_search(lo, hi):\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if is_perfect_square(mid):\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    for i in range(1000):\n        if is_perfect_square(N + i):\n            return N + i\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Taking the square root of N and finding its integer part\n    sqrtN = int(math.sqrt(N))\n    # Adding 1 to the integer part to get the next perfect square greater than N\n    next_sqrtN = sqrtN + 1\n    # Calculating the square of the next perfect square\n    next_sqrt_sq = next_sqrtN ** 2\n    # Adding 1 to the square of the next perfect square to get the next perfect square greater than the square of the next perfect square\n    next_sqrt_sq_plus_one = next_sqrt_sq + 1\n    # Returning the next perfect square greater than N\n    return next_sqrt_sq_plus_one"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            current_sum += arr[i]\n        else:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n            \n    if current_sum > max_sum:\n        max_sum = current_sum\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n    \n    max_sum = float('-inf')\n    min_val = float('inf')\n    prev_min = float('inf')\n    \n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            if arr[i] > prev_min:\n                max_sum = max(max_sum, arr[i] + arr[i+1])\n                prev_min = arr[i]\n            elif arr[i+1] < prev_min:\n                min_val = min(min_val, arr[i+1])\n        elif arr[i] < arr[i+1]:\n            if arr[i] < prev_min:\n                max_sum = max(max_sum, arr[i] + arr[i+1])\n                prev_min = arr[i]\n            elif arr[i+1] > prev_min:\n                min_val = min(min_val, arr[i+1])\n        else:\n            return max(arr[i], arr[i+1])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Find the sum of all the elements of the array\n    total_sum = sum(arr)\n\n    # Initialize variables for first and last elements\n    first = arr[0]\n    last = arr[-1]\n\n    # Initialize variables for first and last sums\n    first_sum = last\n    last_sum = first\n\n    # Iterate through the array and update the variables as we go\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1]:\n            first_sum += arr[i]\n        elif arr[i] < arr[i-1]:\n            last_sum += arr[i]\n        else:\n            continue\n\n        if first_sum > last_sum:\n            first = arr[i]\n            first_sum = first_sum\n        else:\n            last = arr[i]\n            last_sum = last_sum\n\n    # Find the maximum sum of the bitonic subsequence\n    max_sum = first_sum + last_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize the maximum sum to be zero\n    max_sum = 0\n    \n    # Check if the array has at least two elements\n    if len(arr) < 2: \n        return 0\n    \n    # Initialize variables to store the previous element and the current element\n    prev_elem = arr[0]\n    curr_elem = arr[1]\n    \n    # Loop through the array\n    for i in range(2, len(arr)):\n        \n        # Check if the current element is greater than the previous element\n        if curr_elem > prev_elem:\n            \n            # If the current element is greater, check if the difference between the current element and the previous element is greater than the maximum sum\n            if curr_elem - prev_elem > max_sum: \n                max_sum = curr_elem - prev_elem\n        \n        # If the current element is less than the previous element, check if the difference between the current element and the previous element is greater than the maximum sum\n        elif curr_elem - prev_elem > max_sum: \n            max_sum = curr_elem - prev_elem\n        \n        # Update the previous element and current element\n        prev_elem = curr_elem\n        curr_elem = arr[i]\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # initialize variables\n    n = len(arr)\n    max_sum = float('-inf')\n    max_left = float('-inf')\n    max_right = float('-inf')\n    left_sum = 0\n    right_sum = 0\n\n    # iterate through array and find max_sum and max_left and max_right\n    for i in range(n):\n        if i % 2 == 0:\n            # increase left_sum and right_sum\n            left_sum += arr[i]\n            right_sum += arr[i]\n        else:\n            # decrease left_sum and right_sum\n            left_sum -= arr[i]\n            right_sum -= arr[i]\n\n        # update max_sum and max_left and max_right\n        if left_sum > max_left:\n            max_sum = max(left_sum, right_sum)\n            max_left = left_sum\n        elif right_sum > max_left:\n            max_sum = max(left_sum, right_sum)\n            max_left = right_sum\n\n        if left_sum < max_right:\n            max_sum = max(left_sum, right_sum)\n            max_right = left_sum\n        elif right_sum < max_right:\n            max_sum = max(left_sum, right_sum)\n            max_right = right_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Calculate the cumulative sum of the array\n    cum_sum = [0] * len(arr)\n    cum_sum[0] = arr[0]\n    for i in range(1, len(arr)):\n        cum_sum[i] = cum_sum[i-1] + arr[i]\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum_so_far = arr[0]\n\n    # Initialize pointers for the increasing and decreasing subsequences\n    inc_start = 0\n    dec_start = 0\n\n    # Iterate through the cumulative sum\n    for i in range(1, len(cum_sum)):\n        if cum_sum[i] > cum_sum[i-1]:\n            # If the current element is greater than the previous one, check if the current subsequence is increasing\n            if i - inc_start > 1 and cum_sum[i-1] < cum_sum[i-2] and cum_sum[i] > cum_sum[i-3]:\n                # If the current subsequence is increasing, update the maximum sum so far\n                max_sum_so_far = max(max_sum_so_far, cum_sum[i] - cum_sum[inc_start])\n                inc_start = i\n            elif i - inc_start > 1 and cum_sum[i-1] > cum_sum[i-2] and cum_sum[i] < cum_sum[i-3]:\n                # If the current subsequence is decreasing, update the decreasing subsequence pointer\n                dec_start = i\n        else:\n            # If the current element is less than the previous one, check if the current subsequence is decreasing\n            if i - dec_start > 1 and cum_sum[i-1] > cum_sum[i-2] and cum_sum[i] < cum_sum[i-3]:\n                # If the current subsequence is decreasing, update the maximum sum so far\n                max_sum_so_far = max(max_sum_so_far, cum_sum[i] - cum_sum[dec_start])\n                dec_start = i\n            elif i - dec_start > 1 and cum_sum[i-1] < cum_sum[i-2] and cum_sum[i] > cum_sum[i-3]:\n                # If the current subsequence is increasing, update the increasing subsequence pointer\n                inc_start = i\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n\n    # Calculate maximum sum of increasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n    # Calculate maximum sum of decreasing subsequence\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            dp[i] = max(dp[i], dp[i + 1] + arr[i])\n        else:\n            dp[i] = arr[i]\n\n    # Find maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # check if the array is bitonic or not\n    if is_bitonic(arr):\n        # check if the array has 2 elements or not\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        else:\n            # create a variable to store the maximum sum of a decreasing subsequence\n            max_sum_decreasing = max_sum(arr[1:])\n            # create a variable to store the maximum sum of an increasing subsequence\n            max_sum_increasing = max_sum(arr[:-1])\n            # return the maximum sum of a bitonic subsequence\n            return max(max_sum_decreasing, max_sum_increasing)\n    else:\n        return None\n\n\ndef is_bitonic(arr): \n    '''\n    Checks if the given array is bitonic or not. A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # check if the array is empty or not\n    if not arr:\n        return False\n    # check if the array has only 1 element or not\n    elif len(arr) == 1:\n        return True\n    # check if the array is increasing or decreasing\n    else:\n        if arr[1] >= arr[0]:\n            return is_bitonic(arr[1:])\n        else:\n            return False"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    inc_sum = 0\n    dec_sum = 0\n    max_sum = float('-inf')\n\n    # Loop through the array\n    for num in arr:\n        if num < arr[0]:  # If the number is less than the first element, it is increasing\n            inc_sum += num\n        elif num > arr[0]:  # If the number is greater than the first element, it is decreasing\n            dec_sum += num\n        else:  # If the number is equal to the first element, it is neither increasing nor decreasing\n            pass\n\n        # Update the maximum sum\n        max_sum = max(max_sum, inc_sum + dec_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    left = [float('-inf')] * n\n    right = [float('-inf')] * n\n\n    # Find maximum sum of increasing subsequence\n    left[0] = arr[0]\n    for i in range(1, n):\n        left[i] = max(arr[i], left[i - 1] + arr[i])\n\n    # Find maximum sum of decreasing subsequence\n    right[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        right[i] = max(arr[i], right[i + 1] + arr[i])\n\n    # Find maximum sum of bitonic subsequence\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, left[i] + right[i + 1])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the square root to be a very small number\n    x = 1e-15\n    # initialize the number of iterations\n    i = 0\n    # initialize the denominator\n    d = 2 * x - number\n    # iterate until the denominator is smaller than the tolerance\n    while d > 1e-15:\n        # update the denominator\n        d = 2 * x - number\n        # update the iteration count\n        i += 1\n        # compute the new approximation for the square root\n        x = (number + x) / d\n    # return the approximation for the square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the variable to keep track of the number of iterations\n    i = 0\n\n    # use the babylonian method to find the square root of the number\n    while True:\n        # calculate the next approximation of the square root using the formula:\n        # x_{n+1} = (1 + x_n/n) / 2\n        x_new = (1 + number / i) / 2\n\n        # check if the difference between the current approximation and the true square root is less than 0.00001\n        if abs(x_new - number**0.5) < 0.00001:\n            break\n\n        # update the number of iterations\n        i += 1\n\n    return i, x_new"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    tolerance = 1e-6\n    while True:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n        if abs(guess - previous_guess) < tolerance:\n            break\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 1\n    guess = 0\n    tolerance = 0.0001\n    \n    # compute square root using babylonian method\n    while abs(guess*guess - number) > tolerance:\n        i += 1\n        guess = (number/guess + guess)/2\n        \n    print(\"Babylonian method used to compute square root of\", number, \"in\", i, \"iterations.\")\n    print(\"The square root is approximately:\", guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    start = 0\n    end = number\n    while end - start > 1e-10:\n        mid = (start + end) / 2\n        diff = number / mid\n        if diff < mid:\n            start = mid\n        else:\n            end = mid\n    return start"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    #initialize variables\n    a = 0.5\n    b = number/a\n    c = b/2\n\n    #continue until c is less than a\n    while c > a:\n        a = b\n        b = c\n        c = (b+number/b)/2\n\n    #return the square root\n    return b"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # find the number of iterations required to achieve the desired accuracy\n    # using the formula: n = 1 + log(accuracy)\n    iterations = 1 + int(1 + 1 / number)\n\n    # initialize the current guess as the square root of the input number\n    guess = number / (1.0 + 1.0 / (2.0 * number))\n\n    # initialize the difference between the guess and the actual square root\n    # as the difference between the current guess and the desired guess\n    diff = guess * guess - number\n\n    # iterate until the difference is less than or equal to the desired accuracy\n    for i in range(iterations):\n        diff *= i / (2 * i + 1)\n        guess -= diff / (2 * guess + 1)\n\n    # return the final guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0 # Initial guess\n    previous_guess = 0.0 # Initialize previous guess as 0\n    while abs(guess * guess - number) > 0.001: # Stop when the difference between the square of the guess and the number is less than 0.001\n        previous_guess = guess # Save previous guess for comparison\n        guess = (guess + number / guess) / 2.0 # Compute new guess\n    return guess # Return final guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Args:\n    number (int): A positive integer to compute the square root of.\n\n    Returns:\n    float: The square root of the input number using the babylonian method.\n    \"\"\"\n\n    # Use the babylonian method to compute the square root\n    x = number\n    y = (x + number // x) // 2\n\n    while y < 1 or y > x:\n        x = y\n        y = (x + number // x) // 2\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Use the babylonian method to compute the square root\n    epsilon = 0.00001\n    x = number\n    while True:\n        y = x + number/x\n        if abs(y - x) <= epsilon:\n            return y\n        x = y"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the first row and first column\n    for i in range(n):\n        dp[i][i] = 1 if str[i] == str[i] else 0\n\n    # Fill the rest of the DP table\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    # create a dictionary to store lengths of longest palindromic subsequences\n    lps_dict = {}\n    # initialize max_length to 0\n    max_length = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # construct the current subsequence\n        current_subsequence = str[i:i+max_length+1]\n        # check if the subsequence is already in the dictionary\n        if current_subsequence in lps_dict:\n            # update max_length if the current subsequence is longer than max_length\n            max_length = max(max_length, lps_dict[current_subsequence]+1)\n        # if the subsequence is not in the dictionary, calculate its length and store it\n        else:\n            # calculate the length of the current subsequence\n            current_length = 0\n            # loop through each character in the current subsequence\n            for j in range(i, i+max_length):\n                # if the current character is the same as the next character, add 1 to the length\n                if str[j] == str[j+1]:\n                    current_length += 1\n                # if the current character is different from the next character, break the loop\n                else:\n                    break\n            # store the length and subsequence in the dictionary\n            lps_dict[current_subsequence] = current_length\n            # update max_length if the current subsequence is longer than max_length\n            max_length = max(max_length, current_length)\n    # return the maximum length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index\n    # Initialize the table with 1's\n    table = [[1 for _ in range(len(str)+1)] for _ in range(len(str)+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            # If the characters at the current indices are same, then the length of the longest palindromic subsequence ending at i-1 and j-1 will be the sum of the lengths of the longest palindromic subsequence ending at i-1 and j-2 and the length of the longest palindromic subsequence ending at i-2 and j-1\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            # If the characters at the current indices are not same, then the length of the longest palindromic subsequence ending at i-1 and j-1 will be the maximum of the lengths of the longest palindromic subsequence ending at i-1 and j-2 and the length of the longest palindromic subsequence ending at i-2 and j-1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Create a list of lengths to store the length of longest palindromic subsequences ending at each index\n    len_list = [0] * len(str)\n    \n    # Initialize the maximum length to be 1\n    max_len = 1\n    \n    # Iterate through the string and calculate the length of the longest palindromic subsequences ending at each index\n    for i in range(1, len(str)):\n        # Check if the substring ending at index i is a palindrome\n        if str[i] == str[i-1]:\n            # If it is, update the length of the longest palindromic subsequences ending at index i to be 2 plus the length of the longest palindromic subsequences ending at index i-1\n            len_list[i] = 2 + len_list[i-1]\n            # Update the maximum length if necessary\n            max_len = max(max_len, len_list[i])\n        else:\n            # If it's not a palindrome, check if the substring ending at index i-1 is a palindrome\n            if i >= 2 and str[i] == str[i-2] and str[i-1] == str[i-3]:\n                # If it is, update the length of the longest palindromic subsequences ending at index i to be 3 plus the length of the longest palindromic subsequences ending at index i-1 and index i-2\n                len_list[i] = 3 + len_list[i-1] + len_list[i-2]\n                # Update the maximum length if necessary\n                max_len = max(max_len, len_list[i])\n            else:\n                # If it's not a palindrome, update the length of the longest palindromic subsequences ending at index i to be 1\n                len_list[i] = 1\n    \n    # Return the maximum length\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n    # create two tables of length n+1 to store LPS values\n    # for subsequences of length 1 and 2 respectively\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    # initialize the first row and column\n    for i in range(n+1):\n        dp[i][0] = 0\n        dp[0][i] = 0\n    # fill the tables using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # return the length of the longest subsequence\n    return dp[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create a 2D array to store lengths of longest palindromic subsequences\n    dp = [[0 for j in range(len(str))] for i in range(len(str))]\n\n    # length of the longest palindromic subsequence ending at index i \n    for i in range(len(str)): \n        for j in range(len(str)): \n            # if the characters at i and j are same, then \n            if str[i] == str[j]: \n                # longest palindromic subsequence ending at index i and j are same as longest palindromic subsequence ending at index i-1 and index j-1 \n                dp[i][j] = dp[i-1][j-1] + 2 \n            # if the characters at i and j are different, then \n            else: \n                # longest palindromic subsequence ending at index i and j are same as longest palindromic subsequence ending at index i-1 and index j \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at index i and j\n    return dp[len(str)-1][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        # If current character is same as previous one, then we can extend the current palindrome\n        if str[i] == str[i-1]:\n            # Get length of current palindrome\n            k = 2\n            while i+k < n and str[i+k] == str[i]:\n                k += 1\n            # Update max_len and start if current palindrome is greater than max_len\n            if k > max_len:\n                max_len = k\n                start = i-k\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 1\n    start = 0\n    for i in range(1, len(str)):\n        # checking for odd length palindrome\n        if str[i] == str[i - 1]:\n            if i + 1 == len(str):\n                max_length = 2\n                start = i - 1\n            else:\n                max_length = 2\n                start = i - 1\n            for j in range(i + 2, len(str)):\n                if str[i] == str[j]:\n                    if i - 1 == j:\n                        max_length = 3\n                        start = j - 1\n                    else:\n                        max_length = 3\n                        start = j - 1\n        # checking for even length palindrome\n        elif str[i] == str[i - 1] and str[i - 1] == str[i + 1]:\n            if i + 2 == len(str):\n                max_length = 4\n                start = i - 1\n            else:\n                max_length = 4\n                start = i - 1\n            for j in range(i + 3, len(str)):\n                if str[i] == str[j]:\n                    if i - 1 == j:\n                        max_length = 5\n                        start = j - 1\n                    else:\n                        max_length = 5\n                        start = j - 1\n    return max_length, start\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a 2D array of size (len(str) + 1) x (len(str) + 1) with zeros\n    dp = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # Fill the first row and first column of the array with 1\n    for i in range(1, len(str) + 1):\n        dp[i][i] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                # If the characters are the same, consider both palindromes as one\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                # If the characters are different, consider only one palindrome\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest palindromic subsequence is stored at dp[len(str)][len(str)]\n    return dp[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # initializing a 2D list to store the length of longest palindromic subsequence for all prefixes of the given string\n    lps_table = [[0] * len(str) for _ in range(len(str) + 1)]\n\n    # base case: length of longest palindromic subsequence for an empty string is 0\n    lps_table[0][0] = 0\n\n    # filling in the LPS table using dynamic programming approach\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                lps_table[i][j] = lps_table[i - 1][j - 1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i - 1][j], lps_table[i][j - 1])\n\n    # finding the length of the longest palindromic subsequence for the given string\n    return lps_table[-1][-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2 + (1/(n-1))**2 +... + (1/(n-n))**2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1) / 2\n\nn = int(input(\"Enter a number: \"))\nresult = harmonic_sum(n)\nprint(\"Harmonic sum of\", n, \"-\", result)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(n-1):\n        harmonic_sum += 1 / (i+1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n < 2:\n        return 0\n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    \n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1.0 / i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(n-1):\n        harmonic_sum += 1 / (i+1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1/n + harmonic_sum(n-1)) / (1/2 + harmonic_sum(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Creating an empty set to store the common elements\n    common_set = set()\n    # Looping through the arrays\n    for i in array_nums1:\n        # Checking if each element is present in the second array\n        if i in array_nums2 and i not in common_set:\n            # Adding the element to the common set\n            common_set.add(i)\n    # Returning the common set as a list\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n        array_nums1 (list): A list of integers.\n        array_nums2 (list): A list of integers.\n\n    Returns:\n        list: A list of integers that are common to both arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a set from array_nums1 and array_nums2\n    set_nums = set(array_nums1 + array_nums2)\n\n    # Convert the set to a list and return it\n    return list(set_nums)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in array1\n    freq_array1 = {}\n    for num in array_nums1:\n        if num in freq_array1:\n            freq_array1[num] += 1\n        else:\n            freq_array1[num] = 1\n\n    # Create a dictionary to store the frequency of each element in array2\n    freq_array2 = {}\n    for num in array_nums2:\n        if num in freq_array2:\n            freq_array2[num] += 1\n        else:\n            freq_array2[num] = 1\n\n    # Find the intersection of the two dictionaries using set intersection\n    intersection = set(freq_array1.keys()).intersection(set(freq_array2.keys()))\n\n    # Create a list to store the intersection elements\n    intersection_list = []\n\n    # Loop through the intersection set and add the elements to the intersection list\n    for num in intersection:\n        intersection_list.append(num)\n\n    # Sort the intersection list in ascending order\n    intersection_list.sort()\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays of numbers and returns the intersection of the two arrays.\n    \"\"\"\n    # Initialize an empty set to store the unique elements of array_nums1\n    set1 = set()\n    # Loop through array_nums1 and add each element to set1\n    for num in array_nums1:\n        set1.add(num)\n    # Initialize an empty set to store the unique elements of array_nums2\n    set2 = set()\n    # Loop through array_nums2 and add each element to set2\n    for num in array_nums2:\n        set2.add(num)\n    # Find the intersection of set1 and set2 and return the result as a list\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize a set to store the unique elements of array_nums1\n    set1 = set(array_nums1)\n    # Initialize an empty list to store the intersection\n    intersection = []\n    # Iterate through array_nums2\n    for num in array_nums2:\n        # Check if num is in the set of unique elements of array_nums1\n        if num in set1:\n            # If it is, add it to the intersection list\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n    array_nums1 (list): The first array of numbers.\n    array_nums2 (list): The second array of numbers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n    # Create a set from the second array, so we only keep unique values\n    set_nums2 = set(array_nums2)\n    # Create a new empty list to store the intersection\n    intersection = []\n    # Loop through the first array and check if each value is in the set of values in the second array\n    for num1 in array_nums1:\n        if num1 in set_nums2:\n            intersection.append(num1)\n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the input arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersect)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup):\n    x_count = 0\n    for word in tup:\n        if 'X' in word:\n            x_count += 1\n    return x_count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0,list[i])\n    new_list.insert(0,element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize an empty list to store the modified list\n    modified_list = []\n    \n    # Iterate through each element in the original list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        modified_list.insert(i, element)\n    \n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(i, element)\n        else:\n            list.insert(i, list[i-1])\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        else:\n            new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n    result = []\n    for complex_number in complex_numbers:\n        magnitude = abs(complex_number)\n        angle = cmath.phase(complex_number) * 180 / cmath.pi\n        result.append((magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Split the number into real and imaginary parts\n        r, theta = num.real, num.imag\n        \n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(r**2 + theta**2)\n        angle = cmath.phase(num)\n        \n        # Convert the angle from radians to degrees\n        angle = cmath.degrees(angle)\n        \n        # Print the polar coordinates\n        print(f\"({magnitude:.2f}, {angle:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        print(f\"{real} + {imag}i, magnitude: {magnitude}, angle: {angle}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num) for num in numbers.split()]\n    polar_coordinates = []\n    for num in complex_numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each complex number in the input list\n    for num in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Print the polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts them to polar coordinates.\n    '''\n    # loop through each number in the list and convert it to polar coordinates\n    for number in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number in radians\n        angle = cmath.phase(number)\n        \n        # create a new complex number with the magnitude and angle\n        new_number = cmath.rect(magnitude, angle)\n        \n        # print the original and new complex numbers\n        print(f\"Original number: {number}\")\n        print(f\"New number: {new_number}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            phi = cmath.phase(num)\n            result.append([r, phi])\n        else:\n            print(\"Not a valid complex number.\")\n            break\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples with each complex number converted to polar coordinates.\n    The tuples are of the form (magnitude, angle) where magnitude is the absolute value of the complex number and angle is the angle in radians measured counter-clockwise from the positive x-axis.\n    '''\n    result = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        angle = cmath.phase(complex(real, imag))\n        magnitude = abs(complex(real, imag))\n        print(f\"({angle:.2f}\u00b0, {magnitude:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list\n    for num in numbers:\n        # Convert the number to a complex number\n        z = complex(num[0], num[1])\n        # Calculate the magnitude and phase of the complex number\n        mag = abs(z)\n        phase = cmath.phase(z)\n        # Convert the magnitude to degrees and the phase to radians\n        degrees = phase * 180 / cmath.pi\n        radians = cmath.pi * (degrees / 180)\n        # Print the result as a string\n        print(\"({}, {}) -> ({:.2f}\u00b0, {:.2f}\u00b0)\".format(num[0], num[1], mag, radians))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    '''\n    This function takes in a list and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[:i] + l[i+1:], n-1):\n            color_combinations.append((l[i],) + tuple(j))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Generate all combinations with repetition of the elements of the list\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            # Append each combination as a tuple to the combinations list\n            combinations.append(tuple(comb))\n\n    # Return the combinations list\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Generate all combinations of length n with replacement\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # generate all combinations of length n with replacement\n    combinations = list(combinations_with_replacement(l, n))\n\n    # convert each combination to a tuple\n    combinations = [tuple(combination) for combination in combinations]\n\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n\n    comb = combinations_with_replacement(l, n)\n    # convert to a list of tuples\n    comb_list = list(comb)\n    return comb_list"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a list of booleans to represent whether each number is prime or not\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n\n    # Iterate over each number from 2 to n\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            # If a number is prime, mark all its multiples as composite\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # Count the number of prime numbers less than n\n    count = sum(is_prime)\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a boolean array \"prime[0..n]\" and initialize all entries it as true.\n    prime = [True for i in range(n+1)]\n    p = 2\n\n    # Iterate over all numbers from 2 to n-1.\n    while (p**2 <= n):\n\n        # If prime[p] is not changed, then it is a prime number.\n        if (prime[p] == True):\n\n            # Update all multiples of p greater than or equal to the square of p.\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n\n        p += 1\n\n    # Count the number of prime numbers less than or equal to n.\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize variables\n    count = 0\n    i = 2\n    \n    # loop through all numbers from 2 to n-1\n    while i <= n:\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # creating a boolean array \"prime[0..n]\" and initializing\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p**2 <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    count = 0\n    # loop for counting prime numbers\n    for i in range(2, n+1):\n        if prime[i] == True:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store the maximum values\n    max_value1, max_value2 = test_tup1[0], test_tup2[0]\n\n    # Loop through the tuples and compare the values\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value1:\n            max_value1 = test_tup1[i]\n        if test_tup2[i] > max_value2:\n            max_value2 = test_tup2[i]\n\n    # Return the tuple containing the maximum values\n    return (max_value1, max_value2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # if either tuple is empty, return the other tuple\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    \n    # if both tuples have the same first element, check the rest of the elements recursively\n    if test_tup1[0] == test_tup2[0]:\n        return maximize_elements(test_tup1[1:], test_tup2[1:])\n    \n    # otherwise, return the tuple with the higher first element\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # get the maximum value for each tuple element\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    # return the maximum value\n    return max(max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n\n    # Initialize max values to None\n    max_val1 = None\n    max_val2 = None\n\n    # Loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max_val1 is None or test_tup1[i] > max_val1:\n                max_val1 = test_tup1[i]\n        elif test_tup2[i] > test_tup1[i]:\n            if max_val2 is None or test_tup2[i] > max_val2:\n                max_val2 = test_tup2[i]\n\n    # Return the maximum values from both tuples\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have equal number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples have different number of elements\"\n    \n    # Check if all elements in the first tuple are greater than all elements in the second tuple\n    if all(test_tup1[i] > test_tup2[i] for i in range(len(test_tup1))):\n        return test_tup1\n    # Check if all elements in the second tuple are greater than all elements in the first tuple\n    elif all(test_tup2[i] > test_tup1[i] for i in range(len(test_tup2))):\n        return test_tup2\n    # If all else fails, return \"Cannot maximize\"\n    else:\n        return \"Cannot maximize\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables for max_tup1 and max_tup2\n    max_tup1 = test_tup1\n    max_tup2 = test_tup2\n    \n    # Iterate over each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Check if element in test_tup1 is greater than element in test_tup2\n        if test_tup1[i] > test_tup2[i]:\n            # If so, update max_tup1 with the current element in test_tup1\n            max_tup1 = test_tup1\n        # Check if element in test_tup2 is greater than element in test_tup1\n        elif test_tup2[i] > test_tup1[i]:\n            # If so, update max_tup2 with the current element in test_tup2\n            max_tup2 = test_tup2\n            \n    # Return the tuple with the maximum value\n    return max(max_tup1, max_tup2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # set i to 2\n    i = 2\n\n    # loop through all odd numbers from 3 to sqrt(n)\n    while i <= int(n**0.5):\n\n        # if i is a factor of n, n is not a newman\u2013shanks\u2013williams prime number\n        if n % i == 0:\n            return \"n is not a newman\u2013shanks\u2013williams prime number.\"\n\n        # if i is not a factor of n, increment i\n        else:\n            i += 2\n\n    # if the loop completes without finding a factor of n, n is a newman\u2013shanks\u2013williams prime number\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the nth\n    newman-shanks-williams prime number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    # initialize a variable to keep track of the number of primes found\n    count = 0\n    # initialize the list of primes to be searched for\n    primes = [2]\n    # loop through the list of primes and check if each prime satisfies the\n    # Newman-Shanks-Williams conditions\n    while count < n:\n        # check if the current prime is a Newman-Shanks-Williams prime\n        if is_newman_shanks_williams_prime(primes[-1]):\n            count += 1\n            # add the prime to the list of primes to be searched for\n            primes.append(primes[-1] + 2)\n        else:\n            # if the prime is not a Newman-Shanks-Williams prime, update its value\n            primes[-1] += 2\n    # return the nth prime in the list of primes\n    return primes[-1]\n\ndef is_newman_shanks_williams_prime(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if n is\n    a newman-shanks-williams prime, and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 1\n    prime = 2\n    while prime <= n:\n        if prime == 2 or (i == 1 or i == prime):\n            i += 1\n        else:\n            j = 2\n            while j * j <= prime:\n                if prime % j == 0:\n                    prime = 0\n                    break\n                j += 1\n            if prime!= 0:\n                prime = i\n                i += 1\n        prime += 1\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # create a list of prime numbers less than or equal to n\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\n    # calculate the nth newman prime\n    nth_prime = primes[n - 1]\n\n    return nth_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_s_williams_prime(n):\n        \"\"\"\n        Helper function to generate the nth newman-shanks-williams prime number.\n        \"\"\"\n        num = 5\n        while True:\n            if is_prime(num):\n                yield num\n                num += 1\n            else:\n                num += 2\n\n    for i, prime in enumerate(newman_s_williams_prime(n), start=1):\n        if i == n:\n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the first and last numbers of the sequence\n    first_num = 2\n    last_num = 3\n\n    # Loop through the sequence to find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n):\n        # Calculate the next number in the sequence\n        next_num = (first_num ** 2 - last_num ** 2) / (2 * last_num)\n\n        # Check if the next number is a prime number\n        if is_prime(next_num):\n            return next_num\n\n        # Update the first and last numbers of the sequence for the next iteration\n        first_num = next_num\n        last_num = next_num\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if the number is divisible by any number from 4 to the square root of the number\n    for i in range(4, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If the number is not divisible by any number from 4 to the square root of the number, it is prime\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Define the first two primes in the sequence\n    primes = [2, 3]\n    \n    # Apply the Newman-Shanks-Williams sequence until the sequence contains n primes\n    while len(primes) < n:\n        # Get the previous two primes\n        p1, p2 = primes[-2:]\n        \n        # Calculate the smallest prime factor of the previous two primes\n        min_prime_factor = min(p1, p2)\n        \n        # Iterate over the sequence of factors of p1 and p2\n        for i in range(1, min_prime_factor):\n            # Calculate the quotient of p1 and p2 divided by i\n            quotient = p1 // i\n            if quotient * i == p1:\n                primes.append(quotient)\n        \n        # Add the previous two primes to the sequence if the quotient is prime\n        if p1 + p2 > 0:\n            if p1 % p2 == 0:\n                primes.append(p1 // p2)\n            else:\n                primes.append(p1)\n                primes.append(p2)\n    \n    # Return the nth prime in the sequence\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # First, we define the function to check if a number is prime\n    def is_prime(num): \n        # If the number is less than 2, it's not prime\n        if num < 2: \n            return False\n        # Check if the number is divisible by any number between 2 and its square root\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n    \n    # Now we can define the main function that iterates through the numbers from 2 to n and checks if each number is prime\n    for i in range(2, n+1): \n        if is_prime(i): \n            # If it is prime, we print it and break out of the loop\n            print(i)\n            break"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    num = 2\n    count = 0\n    prime_count = 0\n\n    # Iterate until we have found n prime numbers\n    while prime_count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the count and increment the prime count\n        if is_prime:\n            count += 1\n            prime_count += 1\n\n        # Increment the number by 1 and reset the count if we have reached 5000\n        num += 1\n        if count == 5000:\n            count = 0\n\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    p = 2\n    while count < n:\n        prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n        p += 1\n    return p-1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([a / b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # iterate over the tuples and perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        # perform division operation on the corresponding elements of the tuples\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two input tuples should be the same.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero.\")\n            return\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of equal length.\")\n        return\n    \n    # perform element-wise division of the two tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the first tuple should be equal to the length of the second tuple!\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Cannot perform division operation on zero values!\")\n            return\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    result_list = []\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_list.append(result)\n        except ZeroDivisionError:\n            print(\"Cannot divide by zero.\")\n            return\n    \n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: The length of the first tuple must be equal to the length of the second tuple.'\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            return 'Error: The first tuple or second tuple contains zero(s).'\n        if test_tup1[i] < 0 or test_tup2[i] < 0:\n            return 'Error: Both tuples should have the same sign for division.'\n    return tuple((x/y if y!= 0 else float('nan') for x, y in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the given list into two parts\n    list1 = list1[:L]\n    list2 = list1[L:]\n    # Return the resulting lists in a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: The length of the list must be greater than or equal to L.\")\n        return None\n    else:\n        mid = len(list1) // 2\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is at least L\n    if len(list1) >= L:\n        # Split the list into two parts with length L\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # Raise an error if the length of the list is not at least L\n        raise ValueError(\"The length of the list is not at least L\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n\n    Parameters:\n    lst (list): The list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two parts of the input list.\n    \"\"\"\n    # Check if the length of the input list is greater than L\n    if len(lst) > L:\n        # Split the input list into two parts\n        first_part = lst[:L]\n        second_part = lst[L:]\n    else:\n        # If the length of the input list is less than or equal to L, the first part is the input list\n        first_part = lst\n        second_part = []\n\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise ValueError(\"The length of the list is not divisible by L.\")\n    else:\n        half = len(list1) // 2\n        return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # if L is greater than the length of list1, return an error message\n    if L > len(list1):\n        return \"Error: L is greater than the length of list1.\"\n    \n    # create an empty list to store the first part of the list\n    part1 = []\n    \n    # loop through the elements of list1 and add them to part1 if they are less than L\n    for element in list1:\n        if len(part1) < L:\n            part1.append(element)\n        else:\n            break\n    \n    # create an empty list to store the second part of the list\n    part2 = []\n    \n    # loop through the elements of list1 and add them to part2 if they are greater than or equal to L\n    for element in list1[L:]:\n        part2.append(element)\n    \n    # return the two parts of the list in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"Length of the list should be greater than or equal to L\")\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) % L == 0:\n        # If the length of the list is divisible by L, then there will be no remainder, so we can split it in half\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)\n    else:\n        # If the length of the list is not divisible by L, then we need to split it in the middle\n        mid = len(list1) // 2\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed_age = 12 # assuming a breed that is expected to be 12 years old\n    dog_age = h_age - breed_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = int(h_age) * 7\n    print(f\"The dog is {years} years old.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(height_inches):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    height_meters = height_inches * 0.0254\n    age_years = height_meters / 5\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate the dog's years\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7*h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = h_age * 7\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # convert the human age into dog years\n    dog_years = h_age * 7\n\n    # return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    # loop through each element in the input list\n    for i in range(0, len(S), step):\n        # slice the input list from index i to the end and append it to the result list\n        result.append(S[i:])\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Create an empty list to store the resulting sublists\n    sublists = []\n    # Loop through the list until the end is reached\n    for i in range(0, len(S), step):\n        # Slice the original list into the desired sublist\n        sublist = S[i:i+step]\n        # Append the sublist to the result list\n        sublists.append(sublist)\n    # Return the result list of sublists\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    # initialize empty list to store results\n    results = []\n    # initialize index variable to 0\n    i = 0\n    # while i is less than the length of the input list\n    while i < len(S):\n        # if the current index is a multiple of step, append the current slice of S to the results list\n        if i % step == 0:\n            results.append(S[i:i+step])\n        # increment i by the step value\n        i += step\n    # return the results list\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            result.append(S[i:i+step])\n        i += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    n = len(S)\n    results = []\n    for i in range(0, n, step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 2*(l*l)\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) + (12 * l) + 8"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (6 * l * l + 12 * l * l + 8 * l * l) / 3\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube using the formula:\n    # Lateral surface area = 2 x (l x h)\n    h = l\n    return 2 * (l * h)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i**2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the square of the odd natural number\n        square = i*i\n        # Add the square to the sum\n        sum += square\n    # Return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    num = 1\n    while num <= n:\n        sum_of_squares += num*num\n        num += 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize a variable to store the number of stars\n    num_stars = 0\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1): \n        # add the current number to the total number of stars\n        num_stars += i\n\n        # print the number of stars\n        print(\"*\" * num_stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n - 1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Start the loop for n times\n    for i in range(1, n+1):\n        # If the count is even, print a star\n        if count % 2 == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n        # Increment the count by 1\n        count += 1\n        # Print a new line after each iteration\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Create an empty string to store the star number\n    star_num = ''\n    # Loop n times to add stars to the string\n    for i in range(n):\n        # Check if the number is odd or even\n        if i % 2 == 0:\n            # If even, add two stars\n            star_num += '**'\n        else:\n            # If odd, add one star\n            star_num += '*'\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print(\"Invalid input\")\n    else:\n        for i in range(n):\n            print(\"*\" * (2 * n - i - 1))\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = \"\"\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            star_num += \"*\"\n        else:\n            star_num += \" \"\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first two numbers in the sequence to 1 and 2\n    prev1, prev2 = 1, 2\n    # Iterate n times\n    for i in range(1, n): \n        # Compute the next number in the sequence by adding the previous two numbers\n        curr = prev1 + prev2\n        # Update the previous two numbers to the current two numbers\n        prev1, prev2 = prev2, curr\n    # Return the last number in the sequence (which is n)\n    return prev1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    count = 1\n    result = ''\n    \n    # Loop until count reaches n\n    while count <= n:\n        # Append * to result string\n        result += '*'\n        \n        # Increment count\n        count += 1\n    \n    # Return result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    elif isinstance(k, int):\n        pass\n    else:\n        raise TypeError('k must be a string or an integer')\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90}\n    if k in ascii_dict.keys():\n        return ascii_dict[k]\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122\n    }\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n\n    if even_index == -1:\n        return \"There is no even number in the list.\"\n    else:\n        return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through the list\n    for i in range(len(arr)):\n        # if the current number is even and its position is even, add it to the sum\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0  \n    for i in range(len(arr)):  \n        if arr[i] % 2 == 0 and i % 2 == 0:  \n            sum += arr[i]  \n    return sum  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n        if count_even == len(arr)//2:\n            break\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_power = 0\n    for i in range(2, n+1):\n        sum_of_even_power += i**5\n    return sum_of_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    \n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    \n    # return sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the i raised to the fifth power to the sum\n        sum += i ** 5\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 2**i\n        if num % 2 == 0:\n            sum += num\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0 \n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple_item in test_list:\n        rear_elements.append(tuple_item[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    return new_tuple"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element in the second tuple from the first tuple\n        test_tup1[i] -= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create a new tuple that is the length of the shorter tuple\n    result_tup = (None,)*min(len(test_tup1), len(test_tup2))\n    # iterate over the tuples and subtract the elements of the second tuple by the elements of the first tuple with the same index\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup[i] = test_tup1[i] - test_tup2[i]\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            sub_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            sub_tup += (test_tup1[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element of test_tup2 with the same index from the element of test_tup1\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    # loop through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length.')\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            raise TypeError('The elements of the two tuples should be of the same type.')\n    sub_tup = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return sub_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n\n    # Use a loop to iterate over each index in the range 0 to n\n    for i in range(n):\n        # Calculate the even-indexed binomial coefficient\n        even_coeff = math.comb(n, i+2)\n\n        # Add the even-indexed binomial coefficient to the sum\n        sum += even_coeff\n\n    # Return the sum of even-indexed binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                total += math.comb(i, j)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum and loop variable\n    sum_even = 0\n    i = 0\n\n    # Calculate the binomial coefficient for even indices\n    while i <= n:\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coeff\n        i += 1\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize the sum and coefficients list\n    sum = 0\n    coeffs = []\n\n    # generate the even binomial coefficients\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            coeffs.append(math.comb(n, i))\n\n    # calculate the sum of the even binomial coefficients\n    for i in range(2, n+1):\n        sum += coeffs[i-2]\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input: n should be a positive integer\"\n    else:\n        even_bin_coeff_sum = 0\n        for i in range(1, n+1):\n            bin_coeff = math.factorial(n)/(math.factorial(i-1)*math.factorial(n-i+1))\n            if i%2 == 0:\n                even_bin_coeff_sum += bin_coeff\n        return even_bin_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    sum_even_index = 0\n    \n    # Calculate even index binomial coefficients\n    for i in range(2, n+1):\n        even_coeff = math.factorial(n)/(math.factorial(i-1)*math.factorial(n-i+1))\n        if i % 2 == 0:\n            sum_even_index += even_coeff\n    \n    return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # initializing sum to zero\n    sum = 0\n\n    # initializing two variables for the loop\n    i = 0\n    j = 0\n\n    # loop to calculate sum of even index binomial coefficients\n    while i <= n:\n        j = i * (n - i + 1) // 2\n        sum += j\n        i += 1\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 1/3 * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Using the formula for volume of a cylinder, A = pi * r^2 * h\n    volume = (3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return (1/3) * pi * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    # calculate volume using formula V = pi * r^2 * h\n    volume = (3.14 * r**2 * h)\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # initialize an empty list to store the filtered entries\n    filtered_entries = []\n    # loop through the dictionary\n    for key, value in dict.items():\n        # if the value is greater than or equal to n, add the entry to the filtered list\n        if value >= n:\n            filtered_entries.append((key, value))\n    # return the filtered dictionary\n    return dict(filtered_entries)"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            continue\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    decagonal_count = 1\n    for i in range(1, n+1):\n        decagonal_count += i\n    return decagonal_count\n\nn = int(input(\"Enter a number: \"))\nresult = is_num_decagonal(n)\nprint(f\"The {n}th decagonal number is: {result}\")"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the variables for the decagonal number.\n    decagonal_num = 0\n    decagonal_index = 1\n    # Loop through the number of times required.\n    for i in range(n):\n        # Calculate the decagonal number and add it to the list.\n        decagonal_num += decagonal_index ** 2\n        # Increase the index for the next time.\n        decagonal_index += 1\n    # Return the final result.\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    # Define the formula for the nth decagonal number\n    formula = (n * (3 * n - 1)) // 2\n    # Return the nth decagonal number\n    return formula"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize a counter variable\n    count = 1\n    \n    # Iterate through the number of rows\n    for i in range(1, n + 1):\n        # Iterate through the number of columns in each row\n        for j in range(1, i + 1):\n            # Add the column number to the counter\n            count += j\n        \n        # Print the current row number\n        print(i)\n    \n    # Return the counter value\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the counter to 1\n    count = 1\n    \n    # Iterate over the numbers starting from 1 to n\n    for i in range(1, n+1):\n        # Add the current number to the count\n        count += i\n        \n        # Check if the sum is a decagonal number\n        if count == 1 + 2*i:\n            # If it is, return True\n            return True\n            \n    # If no decagonal number is found, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Helper function to find nth triangular number\n    def nth_triangular(n):\n        return n * (n + 1) // 2\n\n    # Calculate n-th triangular number\n    nth_triangular_n = nth_triangular(n)\n\n    # Calculate the square root of nth triangular number\n    sqrt_nth_triangular_n = round(nth_triangular_n ** 0.5)\n\n    # Calculate the decagonal number\n    decagonal_n = 4 * sqrt_nth_triangular_n + 1\n\n    return decagonal_n\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_num(n):\n        num = 0\n        for i in range(1, n+1):\n            num += i * i * i\n        return num\n    \n    return decagonal_num(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return is_num_decagonal(n-2) + 2*is_num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal = 0\n    while count <= n:\n        decagonal += count\n        count += 2\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_num_decagonal(n))"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (True, index) if index!= -1 else (False, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n        \n    # Check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an input and returns True if all the elements in the list are unique, False otherwise.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    \n    # loop through the list and update the count dictionary\n    for elem in test_list:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    \n    # check if all the counts are equal to 1\n    for count in count.values():\n        if count!= 1:\n            return False\n    \n    # if all the checks pass, the list is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(test_list) <= 1:\n        return True\n\n    # Initialize a set to store the elements of the list\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n\n    return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # creating a set to store unique elements\n    unique_set = set()\n    \n    # iterating over each element of the list\n    for element in test_list:\n        # checking if the element is already present in the set\n        if element in unique_set:\n            # if the element is already present, return False\n            return False\n        # if the element is not present in the set, add it to the set\n        else:\n            unique_set.add(element)\n    \n    # if all the elements of the list are unique, return True\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a-b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the result.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Initialize the result list with zeros\n    result = [0] * len(nums1)\n    # Loop through each element in the lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements and add the result to the result list\n        result[i] = nums1[i] - nums2[i]\n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return\n    \n    # Subtract each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have equal length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must be of the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in str(n): \n        freq[i] = freq.get(i, 0) + 1\n    \n    for i in freq: \n        if freq[i] > i: \n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Create an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through each character in the string\n    for char in num_str:\n        # If the character is already present in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Iterate through each digit in the integer and check if the frequency of its digit is less than or equal to its digit\n    for digit in range(10):\n        # If the frequency of the digit in the string is greater than or equal to the digit itself, return False\n        if freq[str(digit)] >= digit:\n            return False\n\n    # If all digits have a valid frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit in the input integer\n    digit_frequency = {}\n\n    # Traverse through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        if digit in digit_frequency:\n            digit_frequency[digit] += 1\n        else:\n            digit_frequency[digit] = 1\n\n    # Traverse through the dictionary and check if the frequency of each digit is greater than or equal to the digit itself\n    for digit, freq in digit_frequency.items():\n        if freq > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # create a list of the digits in the number\n    digits = [int(digit) for digit in str(n)]\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through the digits and update the frequency in the dictionary\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # loop through the digits and check whether the frequency is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10  # Create a list of zeroes with a length of 10\n    \n    # Loop through each digit in the integer\n    for digit in digits:\n        freq[digit] += 1  # Increment the frequency count of the digit in the list\n    \n    # Loop through each digit in the frequency list and check if it is greater than or equal to its value\n    for digit in freq:\n        if digit >= digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize an array to store the frequency of each digit\n    \n    for i in range(len(str(n))):  # iterate through each digit of the integer\n        freq[int(str(n)[i])] += 1  # increment the frequency of that digit\n    \n    for i in range(10):\n        if freq[i] > i:\n            return False  # if the frequency of i is greater than i, the number is not valid\n    \n    return True  # if the number is valid, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n    for i in range(10):\n        count[i] = n.count(str(i))\n    for i in range(10):\n        if count[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # check if the number is positive\n    if n < 0:\n        return False\n\n    # get the length of the number\n    length = len(str(n))\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through the number and count the frequency of each digit\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # loop through the length of the number and check if the frequency of the digit is less than or equal to the digit itself\n    for i in range(length):\n        digit = str(n)[i]\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10 # Initialize a list of size 10 to store the frequency of each digit.\n    for i in str(n): # Iterate through each digit in the integer and update its frequency in the list.\n        freq[int(i)] += 1\n    for i in range(10): # Iterate through each digit in the list and check if its frequency is greater than the digit itself.\n        if freq[i] > i: # If the frequency is greater than the digit itself, return False.\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, ele):\n    '''\n    A function that takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(ele == x for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and element as input and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Use the all() function to check if all items in the list are equal to the given element\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b[23]')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the pattern\")\n    else:\n        print(\"The string does not contain the pattern\")\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initializing the sum of the first k elements of the array as the maximum sum\n    sum_of_first_k_elements = sum(a[:k])\n    \n    # initializing the sum of the modified array\n    sum_of_modified_array = sum_of_first_k_elements\n    \n    # iterating through the rest of the array\n    for i in range(k, n):\n        # updating the sum of the first k elements of the array\n        sum_of_first_k_elements += a[i] - a[i-k]\n        \n        # updating the sum of the modified array\n        sum_of_modified_array += sum_of_first_k_elements\n    \n    # returning the maximum sum of the modified array\n    return max(sum_of_modified_array, sum_of_first_k_elements)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k:\n            current_sum -= a[i - k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize max_sum with the first element of the array\n    max_sum = a[0]\n\n    # Initialize sum and start with the first element\n    sum_of_elements = a[0]\n    start = 0\n\n    # Loop through the array n-k times (i.e., k times the last element of the array)\n    for i in range(n-k):\n        # Calculate the sum of the elements from the current start to i\n        sum_of_elements += a[i]\n\n        # If the sum is greater than the max_sum, update max_sum and start\n        if sum_of_elements > max_sum:\n            max_sum = sum_of_elements\n            start = i\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum and the sum of the first k elements of the array\n    max_sum = max(a[:k])\n    current_sum = a[0]\n    \n    # Loop through the rest of the array\n    for i in range(k, n): \n        # Update the maximum sum and the current sum\n        max_sum = max(max_sum + a[i], a[i])\n        current_sum = a[i]\n        \n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    sum_1 = sum_2 = max_sum = float('-inf')\n\n    # Iterate through the array and compute the sum\n    for i in range(n):\n        sum_1 += a[i]\n        if i >= k - 1:\n            sum_2 -= a[i - k + 1]\n\n    # Update the maximum sum\n    max_sum = max(max_sum, sum_1)\n\n    # Compute the largest sum of the modified array\n    for i in range(k - 1, n):\n        sum_1 += a[i]\n        sum_2 += a[i]\n        if i >= k - 1:\n            sum_2 -= a[i - k + 1]\n        max_sum = max(max_sum, max(sum_1, sum_2))\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the max sum, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - k + 1\n\n        # If the current sum is greater than k times the current element, update the current sum to k times the current element\n        elif current_sum > k * a[i]:\n            current_sum = k * a[i]\n\n        # If the current sum is less than k times the current element, remove the first element of the array\n        elif current_sum < k * a[i]:\n            current_sum -= a[start]\n            start += 1\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes in an array a, its size n, and the number of times to repeat the array k.\n    It finds the largest sum of a contiguous array in the modified array formed by repeating the array k times.\n    '''\n    # Find the maximum sum of a single contiguous subarray\n    max_sum = max(a)\n\n    # Repeat the array k times to obtain the modified array\n    modified_array = [a[0]] * k\n    for i in range(1, n):\n        modified_array.append(a[i] + modified_array[-1])\n\n    # Find the maximum sum of any contiguous subarray from the modified array\n    max_sum_modified = max(modified_array)\n\n    # Return the maximum sum of a contiguous array formed by repeating the array k times\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a copy of the given array\n    arr = a.copy()\n\n    # Repeat the given array k times\n    for i in range(k):\n        arr = arr + arr\n    \n    # Calculate the maximum sum of a contiguous array formed by repeating the given array k times\n    max_sum = max(arr)\n    \n    # Initialize the sum of the current sub-array\n    current_sum = 0\n    \n    # Iterate through the given array and calculate the sum of the current sub-array\n    for i in range(n):\n        current_sum += arr[i]\n        \n        # If the current sub-array sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum of a contiguous array formed by repeating the given array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    start_index = 0\n\n    # iterate through the array\n    for i in range(n):\n        # if the current index is less than k, add it to the subarray sum\n        if i < k:\n            subarray_sum = a[i]\n        # if the current index is equal to k, add it to the subarray sum\n        elif i == k:\n            subarray_sum = a[i]\n        # if the current index is greater than k, add the element at the start index to the subarray sum, \n        # and then add the element at the current index to the subarray sum\n        else:\n            subarray_sum = a[i] + a[start_index]\n\n        # update the maximum subarray sum if the current subarray sum is greater than the maximum subarray sum\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            start_index = i\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize variables to keep track of the current subarray sum, max subarray sum, and the current index\n    curr_sum = a[0]\n    max_sum = curr_sum\n    curr_index = 0\n\n    # repeat the array k times\n    for i in range(k):\n        # calculate the sum of the current subarray and add it to the current sum\n        curr_sum += a[0]\n\n        # update the current subarray sum and the max subarray sum if the current subarray sum is greater than the max subarray sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_index = 0\n\n        # move the current index to the next index\n        curr_index += 1\n\n    # move the current index to the next index\n    curr_index += 1\n\n    # calculate the sum of the current subarray and add it to the current sum\n    curr_sum += a[n-1]\n\n    # update the current subarray sum and the max subarray sum if the current subarray sum is greater than the max subarray sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        curr_index = n-1\n\n    # move the current index to the next index\n    curr_index += 1\n\n    # calculate the sum of the current subarray and subtract the sum of the first n-k subarrays from it\n    curr_sum = curr_sum - (n-k)*a[0]\n\n    # update the current subarray sum and the max subarray sum if the current subarray sum is greater than the max subarray sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        curr_index = n-k\n\n    # return the index of the maximum subarray sum\n    return curr_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n\n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    current_number = 2\n    \n    while current_number <= n:\n        sum_of_squares += current_number**2\n        current_number += 2\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''  \n    sum = 0  \n    for i in range(n):  \n        if i % 2 == 0:  \n            sum += i*i  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize a counter variable\n    counter = 0\n    #initialize a variable to hold the sum of squares\n    square_sum = 0\n    #iterate through the first n even natural numbers\n    while counter < n:\n        #add the square of the current number to the sum of squares\n        square_sum += counter*counter\n        #increment the counter\n        counter += 1\n    #return the sum of squares\n    return square_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize a variable to store the sum of squares of even natural numbers\n    even_sum = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n\n        # check if the current number is even\n        if i % 2 == 0:\n\n            # square the number and add it to the sum\n            even_sum += i*i\n\n    # return the sum of squares of even natural numbers\n    return even_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        length = len(sublist)\n        if length not in max_length_list:\n            max_length_list.append(length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(len(max(list1[i], key=len)))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(x) for x in sublist]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list) or len(max_list) == 0:\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Returns a list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the dictionary to store the number of ways for each color\n    color_count = {i: 0 for i in range(k)}\n\n    # Iterate through the first n-1 posts\n    for i in range(n-1):\n        # Increment the count of the colors in the second and third posts\n        color_count[i+2] += 1\n        # Decrement the count of the colors in the first and third posts\n        color_count[i] -= 1\n        # Decrement the count of the colors in the second and fourth posts\n        color_count[i+3] -= 1\n\n    # Increment the count of the colors in the second and third posts\n    color_count[n-2] += 1\n    # Increment the count of the colors in the first and third posts\n    color_count[n-3] += 1\n\n    # Initialize the variables for the number of ways and the current path\n    ways = 1\n    path = []\n\n    # Iterate through the colors and count the ways for each color\n    for color in color_count:\n        if color_count[color] > 0:\n            ways *= (color_count[color] + 1) // 2\n        else:\n            ways = 0\n\n    # Return the number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    ways = [1] * k\n    for i in range(1, n):\n        for j in range(k):\n            ways[j] += ways[j] - 1\n        for j in range(k-1, -1, -1):\n            ways[j] += ways[j] - 1\n    return ways[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 2:\n        return 0\n    if n == 0 or k == 0:\n        return 1\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        if i <= k:\n            dp[i] = 1\n        else:\n            for j in range(1, k+1):\n                if i >= j:\n                    dp[i] += dp[i-j]\n            dp[i] %= (10**9+7)\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    fence_colors = set()  # To store the colors present in the fence\n    for i in range(n):\n        color = input(\"Enter the color for post {}: \".format(i+1))\n        fence_colors.add(color)\n    \n    if len(fence_colors) > k:\n        print(\"Not possible to paint the fence with the given colors and posts.\")\n        return\n    \n    # Base case\n    if len(fence_colors) == k:\n        return 1\n    \n    # Recursive case\n    count = 0\n    for color in fence_colors:\n        new_fence_colors = set(fence_colors)  # To avoid modifying the original fence_colors set\n        new_fence_colors.remove(color)\n        count += count_no_of_ways(n, k)\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list to store the number of ways for each color combination\n    ways = [[0] * k for _ in range(n + 1)]\n\n    # Initialize the first row and column of the matrix with 1\n    ways[0][0] = 1\n\n    # Iterate through the remaining rows and columns\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # If the current post has the same color as the previous post, then there are two ways to paint it\n            if j == 1:\n                ways[i][j] = ways[i - 1][j]\n            # If the current post has a different color, then there is only one way to paint it\n            elif j == 2:\n                ways[i][j] = ways[i - 1][j - 1] + ways[i - 1][j]\n            # If the current post has the same color as the previous two posts, then there are three ways to paint it\n            else:\n                ways[i][j] = ways[i - 1][j - 1] + ways[i - 1][j] + ways[i - 1][j - 2]\n\n    # Return the number of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    if n == 0 or k == 0: \n        return 1 \n\n    if n == 1: \n        return k \n\n    if n > 1 and k == 1: \n        return 1 \n\n    if n == 2: \n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + count_no_of_ways(n - 3, k)\n\n    if n > 2: \n        return count_no_of_ways(n - 1, k) * count_no_of_ways(n - 2, k) * count_no_of_ways(n - 3, k)\n\nWe first check if n and k are zero or one. In such cases, there is only one way to paint the fence. \n\nIf n is 1, then there is only one way to paint the fence. \n\nIf n is greater than 1 and k is 1, then there is only one way to paint the fence with at most one adjacent post having the same color. \n\nIf n is 2, then there are three ways to paint the fence with at most two adjacent posts having the same color. \n\nIf n is greater than 2, then we have the case where n is greater than 2. In this case, we have the case where n is greater than 2. We need to count the number of ways of painting the fence with at most two adjacent posts having the same color by multiplying the count of ways of painting the fence with at most one adjacent post having the same color with the count of ways of painting the fence with at most two adjacent posts having the same color. \n\nTo count the count of ways of painting the fence with at most one adjacent post having the same color, we can use a nested function as shown below:\n\ndef count_adjacent_same_color_ways(n, k): \n    if n == 0 or k == 0: \n        return 1 \n\n    if n == 1: \n        return k \n\n    if n > 1 and k == 1: \n        return 1 \n\n    if n == 2: \n        return count_adjacent_same_color_ways(n - 1, k) + count_adjacent_same_color_ways(n - 2, k) + count_adjacent_same_color_ways(n - 3, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If k is less than or equal to 2, there are only 2 possible ways to paint the fence\n    if k <= 2:\n        return n\n    \n    # Base case: If n is 0, there is only 1 way to paint the fence\n    if n == 0:\n        return 1\n    \n    # Recursive case: Count the number of ways to paint the fence with n-1 posts and (k-1) colors using the same algorithm\n    ways1 = count_no_of_ways(n-1, k)\n    ways2 = count_no_of_ways(n-1, k-1)\n    \n    # Return the sum of the two sub-problems\n    return ways1 + ways2"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Check for edge cases\n    if n < 2 or k < 2:\n        return 0\n    elif n == 2 and k == 2:\n        return 1\n\n    # Initialize variables\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n\n    # Fill the dp array using dynamic programming\n    for i in range(3, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                # If the previous post has black color, there are only two ways to paint the fence with i posts and j colors\n                dp[i] += dp[i - 2]\n            else:\n                # If the previous post has any other color, there are 2 ways to paint the fence with i posts and j-1 colors and 1 way to paint the fence with i-1 posts and j colors\n                dp[i] += dp[i - 2] + dp[i - 1]\n\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(i, count, colors):\n        if i == n:\n            if colors.count(colors[0]) <= 1:\n                count += 1\n            return count\n        if colors.count(colors[0]) <= 1:\n            backtrack(i+1, count, colors[:]+[colors[0]])\n            backtrack(i+1, count, colors)\n        else:\n            backtrack(i+1, count, colors)\n    \n    return backtrack(0, 0, [1]*k)\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\n\nprint(\"Number of ways of painting the fence:\", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # We will iterate over all possible ways to paint the fence.\n    ways = 0\n    for i in range(2, n + 1):\n        for j in range(i - 2, n - 2):\n            for l in range(j - 2, i - 2):\n                ways += 1\n    # We will also count the number of ways of painting the fence such that all adjacent posts have the same color.\n    ways += n - 2 * k\n    # Finally, we will return the total number of ways.\n    return ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return \"Error: Division by Zero\"\n    else:\n        q=n//m\n        return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    if result * m!= n:\n        result += 1\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient and remainder\n    q = n // m\n    r = n % m\n    \n    # calculate the quotient rounded down to the nearest integer\n    # if the remainder is greater than or equal to 0.5, add 1 to the quotient\n    if r >= 0.5:\n        q += 1\n    \n    # return the quotient\n    return q"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # using the formula for the semi-perimeter\n    s = (w + h)**0.5\n    # using the formula for the length of the third side\n    third_side = 2 * s * math.sin(math.pi/3)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w**2 + h**2) / 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    c = w / s\n    return c * s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # calculate the length of the third side\n    c = math.sqrt(s**2 - w**2)\n    \n    # print the result\n    print(\"The third side of the right angled triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two parameters: width and height of the right angled triangle.\n    It returns the third side of the triangle.\n    '''\n    third_side = (w**2 + h**2 - w**2*math.sin(math.radians(60)))**0.5\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    c = (w/2)**0.5\n    return s - c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = w\n    b = h\n    c = math.sqrt((a**2) + (b**2))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Compute the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Use Heron's formula to compute the length of the third side\n    third_side = math.sqrt(s * (s - w) * (s - h))\n    \n    return third_side\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Input should be a list!\")\n        return\n    \n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    \n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for item in listval:\n            if item > max_val:\n                max_val = item\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list of heterogeneous data and returns the maximum value in the list.\n    '''\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n    \n    # loop through each element in the list\n    for val in listval:\n        # if the current value is greater than the current maximum, update the maximum\n        if val > max_val:\n            max_val = val\n            \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize variables to store the maximum value and type of the list\n    max_val = None\n    max_type = None\n\n    # iterate through each element of the list\n    for element in listval:\n        # check if the current element is greater than the maximum value\n        if max_val is None or element > max_val:\n            # update the maximum value and type if the current element is greater\n            max_val = element\n            max_type = type(element).__name__\n\n    # return the maximum value and its type\n    return (max_val, max_type)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    # iterate over all elements of the list\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n\n    # Loop through each number from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the number is divisible by i\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n    \n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    while left < right:\n        # Find the partitioning element\n        pivot = arr[left]\n        i = left + 1\n        j = right\n        \n        while True:\n            # Move the left pointer to the right of the pivot\n            while i <= j and arr[i] < pivot:\n                i += 1\n            # Move the right pointer to the left of the pivot\n            while i <= j and arr[j] > pivot:\n                j -= 1\n            # If the pointers meet, we are done with the partitioning\n            if i <= j:\n                arr[i], arr[j] = arr[j], arr[i]\n            else:\n                break\n        \n        # If the pivot is in its correct position, move it to the beginning\n        if arr[left] == pivot:\n            left += 1\n        elif arr[right] == pivot:\n            right -= 1\n        else:\n            # Find the inversion point\n            inv_point = i - 1\n            # Count the inversions\n            inv_count += inv_point - left + 1\n            # Move the pointers\n            left = i\n            right = j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n\n    # Count inversions in left half\n    if mid > 0:\n        count += get_Inv_Count(arr[:mid])\n\n    # Count inversions in right half\n    if n - mid > 0:\n        count += get_Inv_Count(arr[mid:])\n\n    # Count inversions in main part of the array\n    for i in range(mid):\n        for j in range(mid, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged\n    \ndef get_Inv_Count(arr):\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n    \n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - i - j\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # get the size of the array\n    \n    # calculate the number of inversions in the array\n    def count_inversions(start, end): \n        if start >= end:  # base case: array is sorted\n            return 0\n        \n        mid = (start + end) // 2\n        inv_count_left = count_inversions(start, mid)  # count inversions in left half\n        inv_count_right = count_inversions(mid + 1, end)  # count inversions in right half\n        \n        # count inversions in the current subarray\n        left_ptr = start  # initialize left pointer\n        right_ptr = mid + 1  # initialize right pointer\n        inv_count = 0\n        while left_ptr <= mid and right_ptr <= end:\n            if arr[left_ptr] <= arr[right_ptr]:  # if left element is smaller or equal to right element, add to count\n                inv_count += mid - left_ptr + 1  # add the number of elements in the left half to the count\n                left_ptr += 1\n            else:  # otherwise, add to right pointer and increment count\n                inv_count += mid - left_ptr + 1  # add the number of elements in the left half to the count\n                right_ptr += 1\n        \n        # combine inversions in the left and right halves\n        return inv_count_left + inv_count_right + inv_count\n    \n    return count_inversions(0, n - 1)  # return the final count of inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    count = 0\n    \n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                count += len(sorted_arr) - i - 1\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result.extend(left[i:])\n        result.extend(right[j:])\n\n        return result\n\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += (j - i)\n            j -= 1\n        else:\n            i += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function counts the number of inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    inv_count = 0\n    # Traverse the array from the second element\n    for i in range(1, n): \n        # If the element is greater than the next element\n        if arr[i] > arr[i-1]: \n            inv_count += n - i\n            # Traverse the array from the next element\n            for j in range(i+1, n): \n                # If the element is greater than the previous element\n                if arr[j] > arr[i-1]: \n                    # Swap the elements\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # get the length of the array\n    \n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:  # swap if the element is greater than the next element\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    # Count the inversions\n    inv_count = 0\n    for i in range(1, n):\n        left, right = 0, i-1\n        while left < right:\n            if arr[left] < arr[i]:\n                left += 1\n            elif arr[left] > arr[i]:\n                right -= 1\n            else:  # arr[left] == arr[i]\n                inv_count += right - left + 1\n                left += 1\n                right -= 1\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    A function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param list1: A nested list to flatten.\n    :return: A flattened list with all sublists removed.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list) or isinstance(item, tuple):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists into a single list.\n\n    Parameters:\n    - lst: a list of lists to be flattened.\n\n    Returns:\n    - The flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Use recursion to flatten list\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    # Call flatten function\n    flat_list = flatten(list1)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        name, amount = item\n        max_dict[name] += amount\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each month\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        # extract the month and the maximum aggregate for that month\n        month, max_agg = item\n        # update the maximum aggregate for that month in the dictionary\n        max_aggr[month] = max(max_aggr[month], max_agg)\n    # return the maximum aggregate for each month\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    max_dict = defaultdict(int)\n    for item in stdata:\n        if item[1] > max_agg:\n            max_agg = item[1]\n        max_dict[item[0]] = item[1]\n\n    return max_agg, max_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n\n    Args:\n    - stdata (list of tuples): a list of tuples where each tuple contains the number of units sold by each product in a specific month.\n\n    Returns:\n    - max_aggregate (int): the maximum aggregate value from the list of tuples.\n    '''\n\n    # create a defaultdict to store the maximum aggregate and the products sold\n    max_aggr = defaultdict(int)\n\n    # iterate through the list of tuples\n    for i in range(len(stdata)):\n        # extract the number of units sold by each product in a specific month\n        units_sold = [x[i] for x in stdata[i][1:]]\n        # calculate the maximum aggregate for the specific month\n        max_aggr[i] = max(units_sold)\n\n    # return the maximum aggregate value\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_list = defaultdict(int)\n    for student, scores in stdata:\n        for score in scores:\n            max_list[student] = max(max_list[student], score)\n    return max(max_list.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    max_pair = None\n    \n    for name, amount in stdata:\n        max_sum += amount\n        max_dict[name] += amount\n        \n        if max_dict[name] > max_sum:\n            max_sum = max_dict[name]\n            max_pair = (name, amount)\n    \n    return max_pair"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create an empty dictionary to store the count of each item\n    counts = defaultdict(int)\n\n    # Loop through the list of tuples\n    for item, quantity in stdata:\n        # Increment the count of the current item in the dictionary\n        counts[item] += quantity\n\n    # Use the max function to find the maximum value in the dictionary\n    return max(counts.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of each customer's purchase for each item\n    item_sums = defaultdict(int)\n\n    # Iterate through the list of tuples and update the sum of each item for each customer\n    for item, price, customer in stdata:\n        item_sums[item] += price * customer\n\n    # Find the maximum aggregate for each item using the max() function\n    max_aggr = {item: max(item_sums[item]) for item in item_sums}\n\n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i,j in stdata:\n        max_dict[i] += j\n        max_dict[j] += i\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    The maximum aggregate is calculated by taking the sum of the values of all the tuples in the list.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through each tuple in the list and update the max_agg_dict accordingly\n    for st, cost in stdata:\n        max_agg_dict[st] = max(max_agg_dict[st], cost)\n\n    # Return the maximum aggregate for each day\n    return max_agg_dict"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        if i == sum(int(digit) for digit in bin(i)[2:].zfill(n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in seq[:n]) == sum(int(bit) for bit in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[-n:].zfill(n)\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n+1):\n        first = i // 2**n\n        last = i % (2**n)\n        if first + last == 2**n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    sum_first = 0\n    sum_last = 0\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first = bin(i)[2:2+n]\n        # Extract the last n bits\n        last = bin(i)[-2-n:-2]\n        # Add the first and last bits and check if they have the same parity bit\n        if (int(first, 2) + int(last, 2)) % 2 == 0:\n            # Increment the count\n            count += 1\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    def binary_seq(a, b):\n        if a == 0:\n            return 0\n        elif a > 0 and a % 2 == 0 and b % 2 == 0:\n            return binary_seq(a // 2, b // 2) + 1\n        elif a > 0 and a % 2 == 0:\n            return binary_seq(a // 2, b)\n        elif a > 0 and a % 2 == 1:\n            return binary_seq(a // 2, b) + binary_seq((a - 1) // 2, b)\n\n    count = 0\n    for i in range(1, 2**n + 1):\n        count += binary_seq(i, 2**n - 1)\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    sum_first = 0\n    sum_last = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        sum_first += int(binary[:n])\n        sum_last += int(binary[-n:])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables to store the count and sum of first and last n bits\n    count = 0\n    first_bit_sum = 0\n    last_bit_sum = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        \n        # Convert the current binary sequence to a list of bits\n        bits = [int(bit) for bit in bin(i)[2:]]\n        \n        # If the sum of the first n bits is equal to the sum of the last n bits, increment the count\n        if first_bit_sum == last_bit_sum:\n            count += 1\n        \n        # Update the sum of first and last bits\n        first_bit_sum = sum(bits[:n])\n        last_bit_sum = sum(bits[-n:])\n\n    # Return the count of all binary sequences of length 2n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    # Create a list of binary sequences of length 2n\n    binary_seq = []\n    for i in range(2**n):\n        binary_seq.append(bin(i)[2:].zfill(n))\n\n    # Initialize a count variable\n    count = 0\n\n    # Iterate through all binary sequences and check if their sums are equal\n    for i in range(len(binary_seq)):\n        for j in range(i+1, len(binary_seq)):\n            if int(binary_seq[i], 2) == int(binary_seq[j], 2) + int(binary_seq[j][::-1], 2):\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        temp = bin(i)[2:].zfill(n)\n        if sum(temp[:n]) == sum(temp[n:]): \n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth to 1\n    depth = 1\n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # Increase the depth by 1\n            depth += 1\n        # Check if the value is a list\n        elif isinstance(d[key], list):\n            # Check if any of the items in the list are dictionaries\n            for item in d[key]:\n                if isinstance(item, dict):\n                    # Increase the depth by 1\n                    depth += 1\n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth variable to 0\n    depth = 0\n    # Loop through the dictionary keys\n    for key in d:\n        # Check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # Increment the depth by 1\n            depth += 1\n        # Check if the value is a list\n        elif isinstance(d[key], list):\n            # Loop through each element in the list\n            for item in d[key]:\n                # Check if the element is another dictionary\n                if isinstance(item, dict):\n                    # Increment the depth by 1\n                    depth += 1\n                # Check if the element is a list\n                elif isinstance(item, list):\n                    # Loop through each element in the list\n                    for subitem in item:\n                        # Check if the subitem is a dictionary\n                        if isinstance(subitem, dict):\n                            # Increment the depth by 1\n                            depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the current depth\n    depth = 0\n    # Iterate through each key-value pair in the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, recursively call the function on it\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value))\n        # Otherwise, increment the depth by 1\n        else:\n            depth += 1\n    # Return the final depth value\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d, current_depth=0, max_depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if max_depth < current_depth:\n        max_depth = current_depth\n    for key, value in d.items():\n        if isinstance(value, dict):\n            dict_depth(value, current_depth + 1, max_depth)\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(k) for k in d])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a given number of rotations.\n    The function takes three parameters:\n    - arr: a list of integers representing the array.\n    - ranges: a list of integers representing the ranges of each element in the array.\n    - rotations: an integer representing the number of rotations required.\n    - index: an integer representing the index of the element to be found.\n    The function returns the element at the given index after the specified number of rotations.\n    '''\n    # Initialize variables to keep track of the current element and its range\n    current_element = arr[index]\n    current_range = ranges[index]\n    \n    # Rotate the array to the right by the number of rotations required\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n    \n    # Find the element after the rotation and its range\n    for i in range(len(arr)):\n        if i!= index:\n            if arr[i] == current_element:\n                current_range += ranges[i]\n                current_element = arr[i]\n    \n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Check if the given index is within the valid range\n    if index < 0 or index >= len(arr):\n        return \"Index out of range\"\n\n    # Initialize the variable to keep track of the element at the given index\n    result = None\n\n    # Calculate the number of rotations required to reach the index\n    rotations = len(arr) - rotations\n\n    # Calculate the number of rotations required to find the element\n    rotations_to_find = index - rotations\n\n    # Calculate the number of rotations required to get to the element\n    rotations_to_element = rotations % len(ranges)\n\n    # Calculate the number of rotations required to get to the end of the array\n    rotations_to_end = rotations - rotations_to_element\n\n    # If the number of rotations required to find the element is greater than the number of rotations to reach the end of the array,\n    # then the element is not in the array\n    if rotations_to_find > rotations_to_end:\n        return \"Element not found\"\n\n    # Calculate the element by performing the required rotations\n    for i in range(rotations_to_element):\n        arr = arr[ranges[i]:ranges[i+1]] + arr[:ranges[i]]\n\n    # Find the element at the given index\n    for i in range(index, len(arr)):\n        if arr[i] == rotations_to_find:\n            result = arr[i]\n            break\n\n    # Return the element at the given index\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, ranges and rotations, and an index.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n\n    # initialize variable to keep track of the index after rotations\n    new_index = index % len(arr)\n\n    # find the rotation ranges for each element in the array\n    rotation_ranges = []\n    for i in range(len(arr)):\n        rotation_ranges.append(rotations[i] % len(arr))\n\n    # find the total rotation range for all elements\n    total_rotation_range = sum(rotation_ranges)\n\n    # calculate the number of rotations to apply\n    num_rotations = (total_rotation_range + index) % total_rotation_range\n\n    # apply the required rotations to the index\n    for i in range(num_rotations):\n        new_index = (new_index - 1 + len(arr)) % len(arr)\n\n    # find the element at the new index\n    element = arr[new_index]\n\n    # return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a number of rotations as input.\n    The function returns the element at the given index after the number of rotations.\n\n    \"\"\"\n    def find_Element_helper(arr, ranges, rotations, index, current_range, current_rotation):\n        \"\"\"\n        Helper function for finding element at a given index after rotations.\n        \"\"\"\n        # Base case: if the current range is empty, return the element at index.\n        if not current_range:\n            return arr[index]\n\n        # If the current index is within the current range, return the element at index.\n        if index >= current_range[0] and index <= current_range[1]:\n            return arr[index]\n\n        # If the current index is not within the current range, check if it should be rotated.\n        for i in range(current_rotation):\n            # Rotate the current range.\n            current_range = (current_range[0] + 1, current_range[1] - 1)\n\n        # Recursive case: find the element at the given index after rotations.\n        return find_Element_helper(arr, ranges, rotations, index, current_range, current_rotation)\n\n    # Helper function to find the element at the given index.\n    return find_Element_helper(arr, ranges, rotations, index, ranges[0], rotations)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after rotating the given array.\n    '''\n    # initialize the index to the given index\n    current_index = index\n    \n    # rotate the array for the specified number of rotations\n    for i in range(rotations):\n        arr = arr[-1:] + arr[:-1]\n    \n    # find the element at the current index after rotating\n    element = arr[current_index]\n    \n    # return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the index of the element to be found\n    for i in range(len(arr)):\n        if arr[i] == ranges[index]:\n            element_index = i\n            break\n\n    # Find the element after rotations\n    rotated_arr = arr.copy()\n    for i in range(rotations):\n        for j in range(len(rotated_arr)-1):\n            if rotated_arr[j] > rotated_arr[j+1]:\n                rotated_arr[j], rotated_arr[j+1] = rotated_arr[j+1], rotated_arr[j]\n\n    # Find the index of the element after rotations\n    for i in range(len(rotated_arr)):\n        if rotated_arr[i] == ranges[index]:\n            rotated_index = i\n            break\n\n    # Calculate the final index\n    final_index = (rotated_index + element_index) % len(rotated_arr)\n\n    # Return the element\n    return rotated_arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if count == index:\n            return arr[i]\n        if count == 0:\n            count += 1\n            continue\n        if i >= 0:\n            if (count % rotations == 0):\n                count += 1\n                continue\n            if count % rotations!= 0 and i in ranges:\n                count += 1\n                continue\n            if count % rotations!= 0 and i not in ranges:\n                count += 1\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    elif rotations < 0:\n        for i in range(abs(rotations)):\n            arr = arr[1:] + arr[:1]\n        return find_Element(arr,ranges,rotations,index)\n    else:\n        for i in range(rotations):\n            arr = arr[1:] + arr[:1]\n        return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, number of rotations and index of element to find.\n    It returns the element at the given index after number of rotations.\n    \"\"\"\n    # Initialize result as None\n    result = None\n\n    # Loop through all the ranges and apply rotations to find the element\n    for i in range(len(ranges)):\n        # Calculate the number of rotations to apply to the range\n        num_rotations = rotations[i]\n\n        # Apply rotations to the range\n        range_array = arr[ranges[i][0]:ranges[i][1]]\n        if num_rotations % 2 == 0:\n            range_array = range_array[::-1]\n        else:\n            range_array = range_array[1:][::-1]\n\n        # Apply remaining rotations to the range\n        for j in range(num_rotations // 2):\n            range_array = range_array[1:] + range_array[:1]\n\n        # Check if the element is at the given index\n        if index < len(range_array):\n            result = range_array[index]\n            break\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize the number of rotations and the current index\n    rotations = rotations\n    current_index = index\n    # Loop through all the ranges and find the index of the element\n    for i in range(len(ranges)):\n        if rotations % ranges[i] == 0:\n            current_index = (rotations // ranges[i]) % len(arr)\n        elif current_index == 0:\n            current_index = len(arr) - 1\n        elif current_index == len(arr) - 1:\n            current_index = 0\n        else:\n            current_index = (current_index - 1) % len(arr)\n    # Return the element at the final index\n    return arr[current_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'p\\w+', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'p\\w+')\n    \n    # Loop through each word in the list and check if it matches the pattern\n    for word in words:\n        if pattern.match(word):\n            # If a match is found, return the two matching words\n            return word, word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p.*')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"No two words starting with letter 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w{1}p\\w{1}$'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return 'No matches found'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    match = pattern.search(words)\n    if match:\n        return match.group(), match.group()[1:]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find all the words starting with 'p'\n    p_words = [word for word in words if re.match(\"^p.*\", word)]\n    \n    # If there are no words starting with 'p', return None\n    if len(p_words) == 0:\n        return None\n    \n    # If there are more than 2 words starting with 'p', return None\n    if len(p_words) > 2:\n        return None\n    \n    # Otherwise, return the two words\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*' # Using regular expression to match words starting with 'p'\n    \n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1] # Return the two words that match the pattern\n        \n    return None # If no word matches the pattern, return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    matches = [word for word in words if re.match(pattern, word)]\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define regex pattern to match words starting with 'p'\n    pattern = re.compile(r'\\b[Pp][a-zA-Z]+\\b')\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word matches the regex pattern\n        if pattern.match(word):\n            # Split the word into words\n            words_list = word.split()\n            # Check if the second word is 'p'\n            if words_list[1] == 'p':\n                # Return the two words\n                return words_list[0], words_list[2]\n    # If no word is found, return None\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # base case\n    if index == 0:\n        if a[index] >= a[k]:\n            return a[index]\n        else:\n            return 0\n    \n    # recursive case\n    max_sum = max_sum_increasing_subseq(a, n, index-1, k)\n    \n    if a[index] > a[k]:\n        max_sum += a[index]\n    else:\n        max_sum = max(max_sum, a[index])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = 0\n    max_sum = float('-inf')\n    \n    # Initialize a list to store the sum of increasing subsequences\n    prefix_sum_list = [0] * n\n    \n    # Traverse through the array\n    for i in range(n):\n        # If the current element is less than or equal to k, update the prefix sum\n        if i < k:\n            prefix_sum += a[i]\n        # If the current element is greater than k, then update the prefix sum by removing the kth element and adding the current element\n        else:\n            prefix_sum -= a[i-k]\n            prefix_sum += a[i]\n        # Update the prefix sum list\n        prefix_sum_list[i] = prefix_sum\n        \n        # If the current prefix sum is greater than max_sum, update max_sum\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n    \n    # Return max_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == k:\n        return a[index]\n    elif index > k:\n        return 0\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k-1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if k > n:\n        return 0\n    if index > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        left = max_sum_increasing_subseq(a, n, index + 1, k)\n        right = max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n        return max(left, right)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence for each index\n    max_sum_list = [-1] * n\n    \n    # Initialize the maximum sum of increasing subsequence starting from the first index\n    max_sum_list[0] = 0\n    \n    # Initialize the maximum sum of increasing subsequence starting from the kth index\n    max_sum_list[k] = a[k]\n    \n    # Iterate through the remaining indices starting from the second index\n    for i in range(1, n):\n        # If the current index is greater than the kth index, update the maximum sum of increasing subsequence starting from the current index\n        if i > k:\n            max_sum_list[i] = max(max_sum_list[i-1], max_sum_list[i-k] + a[i])\n        # If the current index is less than or equal to the kth index, update the maximum sum of increasing subsequence starting from the kth index\n        else:\n            max_sum_list[i] = max_sum_list[i-1] + a[i]\n            \n    # Return the maximum sum of increasing subsequence\n    return max_sum_list[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n + 1)\n    dp[index] = a[index]\n    max_sum = dp[index]\n    for i in range(index + 1, n + 1):\n        if i - index <= k:\n            dp[i] = max(dp[i - index], dp[i] + a[i])\n        else:\n            dp[i] = dp[i - index]\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize maximum sum and current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array from prefix to index\n    for i in range(index):\n        # Add current element to current sum\n        current_sum += a[i]\n        # If the current sum is greater than the maximum sum and the element is smaller than k\n        if current_sum > max_sum and a[i] < k:\n            # Update maximum sum\n            max_sum = current_sum\n        # If the current sum is greater than the maximum sum and the element is greater than or equal to k\n        elif current_sum > max_sum and a[i] >= k:\n            # Reset the current sum to the current element\n            current_sum = a[i]\n\n    # Add the last element of the array to the current sum\n    current_sum += a[index]\n\n    # If the current sum is greater than the maximum sum and the last element is smaller than k\n    if current_sum > max_sum and a[index] < k:\n        # Update maximum sum\n        max_sum = current_sum\n\n    # Return maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum with first element of the sequence\n    max_sum = a[index]\n\n    # Initialize the maximum subsequence with first element of the sequence\n    max_subseq = [a[index]]\n\n    # Traverse through the sequence from index+1 to n-1\n    for i in range(index+1, n):\n\n        # If current element is greater than k, skip it\n        if a[i] > k:\n            continue\n\n        # Check if the current element is already included in the subsequence\n        if i > 0 and a[i] == a[i-1]:\n            continue\n\n        # If the current element is greater than the previous element in the subsequence, update the maximum subsequence and sum\n        if a[i] > max_subseq[-1]:\n            max_subseq.append(a[i])\n            max_sum = max(max_sum, a[i])\n\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return 0 if k > 0 else 10 ** 10\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index - 1, -1, -1):\n        if i >= k:\n            dp[i] = max(dp[i], dp[i + 1] + a[i])\n        else:\n            dp[i] = max(dp[i], dp[i + 1])\n\n    return dp[0]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    # Initialize the maximum sum found so far and the maximum sum ending at index\n    max_ending_here = max_so_far = a[index]\n\n    # Iterate over the previous indices\n    for i in range(index):\n        # Check if the current element is greater than the maximum sum ending at the previous index\n        if a[i] > max_ending_here + a[index] and a[i] >= a[k]:\n            max_ending_here = max(max_ending_here, a[i])\n        else:\n            # Reset the maximum sum ending at the previous index and update the maximum sum found so far\n            max_ending_here = max_so_far = a[i]\n\n    # Return the maximum sum found so far\n    return max_so_far"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    if isinstance(tuplex, tuple):\n        if len(tuplex) == m:\n            return tuplex[:n]\n        elif len(tuplex) > m:\n            return tuplex[:m]\n        else:\n            return deepcopy(tuplex)\n    else:\n        raise TypeError('Input must be a tuple')"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(n):\n        new_tuplex.append(tuplex[i])\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[::m]\n    new_tuplex = tuple(new_tuplex[0:n])\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[:i] + (new_tuplex[i] + new_tuplex[i+1],) + new_tuplex[i+2:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m:\n        return None\n    else:\n        return deepcopy(tuplex[:m]) + deepcopy(tuplex[n:])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = deepcopy(tuplex)\n        for j in range(n):\n            col.append(row[j])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the tuple has enough elements\n    if len(tuplex) < m:\n        raise ValueError(\"The tuple has less than {} elements.\".format(m))\n\n    # Create a copy of the tuple to avoid modifying the original one\n    colontuple = deepcopy(tuplex)\n\n    # Get the indices of the elements to include in the colon\n    colonindices = list(range(m))\n    if n < len(colontuple):\n        colonindices = colonindices[:n]\n\n    # Get the elements to include in the colon\n    colon = tuple([colontuple[i] for i in colonindices])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get a copy of the tuple\n    colontup = deepcopy(tuplex)\n\n    # Get the index of the first element in the column\n    index = m * n\n\n    # Iterate through the tuple and fill the column starting from the second element\n    for i in range(m):\n        colontup[index] = i\n        index += 1\n\n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(tuplex[i])\n        if i % n == 0:\n            result.append(':')\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the input tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n    # Get the number of elements in the tuple\n    num_elements = len(new_tuplex)\n    # Get the number of rows to print\n    num_rows = num_elements // m\n    # Get the number of elements in the last row\n    remainder = num_elements % m\n    # Initialize the empty list to hold the colon\n    colon = []\n    # Loop through each row\n    for i in range(num_rows):\n        # Create a list to hold the row\n        row = []\n        # Loop through each element in the row\n        for j in range(m):\n            # If the index is less than the remainder, add that element to the row\n            if i*m+j < remainder:\n                row.append(new_tuplex[i*m+j])\n            # Otherwise, add None to the row\n            else:\n                row.append(None)\n        # Append the row to the colon list\n        colon.append(row)\n    # Return the colon list\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    products = []\n    for i in range(N):\n        product1 = max(nums1) * min(nums1)\n        product2 = max(nums2) * min(nums2)\n        products.append((product1, product2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    \n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a variable to store the largest products\n    largest_products = []\n\n    # Loop through the specified number of times\n    for i in range(N):\n\n        # Calculate the product of the two largest numbers from each list\n        product = nums1[-1] * nums2[-1]\n\n        # Append the product to the list of largest products\n        largest_products.append(product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(len(nums1)):\n        if nums1[i] * nums2[i] > max_product1:\n            max_product1 = nums1[i] * nums2[i]\n            max_product2 = nums1[i]\n            max_product = max_product1\n\n    for i in range(len(nums2)):\n        if nums1[i] * nums2[i] > max_product2:\n            max_product2 = nums1[i] * nums2[i]\n            max_product1 = nums2[i]\n            max_product = max_product2\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] * nums2[j]) > max_product:\n                max_product = nums1[i] * nums2[j]\n                max_product1 = nums1[i]\n                max_product2 = nums2[j]\n\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product1 = max(nums1)\n    product2 = max(nums2)\n    if N <= len(nums1) and N <= len(nums2):\n        return max(product1*product2, product2*product1)\n    else:\n        if N <= len(nums1):\n            largest_product1 = max(product1*nums2[0], product1*nums1[0])\n            for i in range(1, min(N, len(nums2))):\n                largest_product1 = max(largest_product1, product1*nums2[i])\n            for i in range(min(N, len(nums2))+1, len(nums2)):\n                largest_product1 = max(largest_product1, product1*nums2[i])\n            for i in range(N-min(N, len(nums2))):\n                largest_product1 = max(largest_product1, product1*nums1[i])\n            return largest_product1\n        else:\n            largest_product2 = max(product2*nums1[0], product2*nums2[0])\n            for i in range(1, min(N, len(nums1))):\n                largest_product2 = max(largest_product2, product2*nums1[i])\n            for i in range(min(N, len(nums1))+1, len(nums1)):\n                largest_product2 = max(largest_product2, product2*nums1[i])\n            for i in range(N-min(N, len(nums1))):\n                largest_product2 = max(largest_product2, product2*nums2[i])\n            return largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the product of each factor from each list\n    products = []\n\n    # Loop through each combination of factors to select\n    for i in range(1, N+1):\n        for j in range(i):\n            # Calculate the product of the selected factors\n            product = nums1[i-1] * nums2[j]\n\n            # Add the product to the list of products\n            products.append(product)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the first N products from the sorted list\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the maximum value for the product\n    max_product = 1\n    for num in nums1 + nums2:\n        if num > max_product:\n            max_product = num\n\n    # Calculate the number of factors\n    num_factors = (len(nums1) + len(nums2)) // 2\n    if N > num_factors:\n        N = num_factors\n\n    # Calculate the products of factors from the input lists\n    products = []\n    for i in range(num_factors):\n        product1 = max(nums1)\n        product2 = max(nums2)\n        if i < len(nums1):\n            product1 *= nums1[i]\n        if i < len(nums2):\n            product2 *= nums2[i]\n        products.append(product1 * product2)\n\n    # Sort the products in descending order and return the first N products\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # check if the length of the two input lists is equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both input lists must have the same length\")\n\n    # initialize the maximum product to 0\n    max_product = 0\n    \n    # iterate over the specified number of products\n    for i in range(N):\n        # find the maximum product of a list from nums1 and one from nums2\n        product1 = max(nums1[0] * nums2[i], nums1[i] * nums2[0])\n        \n        # update the maximum product if necessary\n        max_product = max(max_product, product1)\n        \n        # find the maximum product of a list from nums2 and one from nums1\n        product2 = max(nums1[i] * nums2[0], nums1[0] * nums2[i])\n        \n        # update the maximum product if necessary\n        max_product = max(max_product, product2)\n    \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum number in the two lists\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n\n    # Check if the product of the maximum number in the two lists is greater than 1\n    if max_num1 * max_num2 > 1:\n        return -1\n\n    # Initialize variables for the largest products and the index of the largest products\n    largest_product1 = 1\n    index1 = -1\n    largest_product2 = 1\n    index2 = -1\n\n    # Loop through each number in the two lists\n    for i in range(N):\n        # Calculate the product of the current number in the first list with all other numbers in the first list\n        factor1 = 1\n        for j in range(i):\n            factor1 *= nums1[j]\n\n        # Calculate the product of the current number in the second list with all other numbers in the second list\n        factor2 = 1\n        for j in range(i):\n            factor2 *= nums2[j]\n\n        # Update the largest products and the index of the largest products\n        if factor1 * factor2 > largest_product1 * largest_product2:\n            largest_product1 = factor1\n            index1 = i\n            largest_product2 = factor2\n            index2 = i\n        elif factor1 * factor2 == largest_product1 * largest_product2:\n            index1 = i\n            index2 = i\n\n    # Check if the number of products found is equal to N\n    if index1 == -1:\n        return -1\n\n    # Return the largest products and their indices\n    return (largest_product1, index1), (largest_product2, index2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    product = 1\n\n    for i in range(N):\n        product *= max(nums1[i], nums2[i])\n        largest_products.append(product)\n        product //= max(nums1[i], nums2[i])\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product1 = max(nums1) * max(nums2)\n    product2 = min(nums1) * min(nums2)\n\n    result = [product1, product2]\n\n    for i in range(N):\n        product1 = max(nums1) * max(nums2)\n        product2 = min(nums1) * min(nums2)\n\n        if product1 > result[0]:\n            result[0] = product1\n        if product2 > result[1]:\n            result[1] = product2\n\n        nums1 = nums1[1:] + [nums1[0]]\n        nums2 = nums2[1:] + [nums2[0]]\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # create an empty tuple\n    tup = ()\n    \n    # iterate through each character in the string\n    for char in str1:\n        # add each character to the tuple\n        tup += (char,)\n        \n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Initialize an empty list to store the characters of the string\n    char_list = []\n    # Loop through each character in the string\n    for char in str1:\n        # Add the character to the list of characters\n        char_list.append(char)\n    # Convert the list to a tuple and return it\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Split the string into a list of characters\n    char_list = list(str1)\n    \n    # Convert the list of characters into a tuple of characters\n    char_tuple = tuple(char_list)\n    \n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the leftmost unset bit\n    while (n & 1) == 0:\n        n >>= 1\n    # Set the leftmost unset bit\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # get the binary representation of n\n    binary = bin(n)[2:]\n\n    # find the length of the binary string\n    length = len(binary)\n\n    # find the position of the left most unset bit\n    index = length - 1\n    while binary[index] == '0':\n        index -= 1\n\n    # set the left most unset bit to 1\n    n = n | (1 << index)\n\n    # return the modified value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index of the leftmost unset bit to -1\n    index = -1\n\n    # Iterate through all the bits in the binary representation of n\n    for i in range(32): \n        # Check if the ith bit is set to 1\n        if n & (1 << i): \n            # If it is, update the index of the leftmost unset bit to i\n            index = i \n            break\n\n    # If the loop completes without finding any unset bits, return n unchanged\n    if index == -1: \n        return n\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << index\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost unset bit\n    bit_index = 0\n    while n & (1 << bit_index) == 0:\n        bit_index += 1\n    # Set the leftmost unset bit\n    return n | (1 << bit_index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the binary string to a list of digits\n    bits = list(bin(n)[2:])\n\n    # Iterate through the list of digits and set the left most unset bit to 1\n    for i in range(len(bits)):\n        if bits[i] == '0':\n            bits[i] = '1'\n            break\n\n    # Convert the list of digits back to a binary string\n    result = int(''.join(bits), 2)\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the integer to a binary string\n    binary_string = bin(n)[2:]\n    \n    # find the index of the leftmost unset bit\n    leftmost_unset_bit = len(binary_string)\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            leftmost_unset_bit = i\n            break\n    \n    # set the leftmost unset bit to 1\n    new_binary_string = binary_string[:leftmost_unset_bit] + '1' + binary_string[leftmost_unset_bit+1:]\n    \n    # convert the binary string back to an integer\n    new_integer = int(new_binary_string, 2)\n    \n    return new_integer"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the number of unset bits to the left of the leftmost unset bit\n    unset_bits = 0\n    # Iterate through the binary representation of n from left to right\n    for i in range(32): \n        # If the i-th bit of n is 0, increment unset_bits\n        if not (n >> i) & 1: \n            unset_bits += 1\n        # If unset_bits is greater than 0, break from the loop\n        if unset_bits > 0: \n            break\n    # Set the leftmost unset bit to 1\n    n |= 1 << (unset_bits - 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function will set the left most unset bit in a given integer.\n    \"\"\"\n    # Initialize the leftmost unset bit to 1\n    leftmost_unset_bit = 1\n    \n    # Iterate through the bits of the number n\n    while leftmost_unset_bit & n == leftmost_unset_bit:\n        # Left shift the leftmost unset bit by 1\n        leftmost_unset_bit <<= 1\n    \n    # Return the leftmost unset bit after shifting\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the index of the first set bit in n\n    i = 0\n    while n & 1 == 0:\n        i += 1\n        n >>= 1\n    # set the i-th bit to 1\n    n |= 1 << i\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize variables\n    unset_bit = 0\n    unset_bit_position = 0\n    count_unset_bits = 0\n    \n    # Count unset bits in binary representation of n\n    while n > 0:\n        count_unset_bits += n & 1\n        n >>= 1\n    \n    # Calculate position of unset bit in binary representation of n\n    while (unset_bit_position << 1) + 1 <= count_unset_bits:\n        unset_bit = unset_bit_position << 1\n        unset_bit_position += 1\n    \n    # Set the left most unset bit of n\n    n &= ~(1 << unset_bit)\n    \n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the cone\n    h (float): The height of the cone\n\n    Returns:\n    float: The volume of the cone\n\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate volume using formula\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Find the volume of the base\n    vol_base = math.pi * r * r * h\n    \n    # Find the volume of the top\n    vol_top = math.pi * r * r * (h/2)\n    \n    # Combine the volumes and return the result\n    return vol_base + vol_top"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the height of the cone\n    h_prime = 2 * r * math.sin(math.pi/6)\n    # Calculate the volume of the cone\n    volume = math.pi * r**2 * h_prime\n    # Return the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculating the volume of the cone using the formula V = pi * r^2 * h\n    pi = math.pi\n    V = pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    area_cone = math.pi * r**2\n    volume_cone = area_cone * h / 3\n    return volume_cone"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize highest power of 2 found so far\n    highest = 0\n    # loop through all possible powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # check if current power of 2 is greater than highest power of 2 found so far\n        if i > highest:\n            # if it is, update highest power of 2 found so far\n            highest = i\n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # If the current number is a power of 2, set the result to that number\n        if (i & (i-1)) == 0:\n            result = i\n\n    # Return the result\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0: \n        if n & 1 == 1: \n            return power \n        n >>= 1 \n        power += 1\n    return power "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest *= 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    \n    # initialize the first two lucas numbers\n    lucas1 = 2\n    lucas2 = 1\n    \n    # loop n-1 times to find the nth lucas number\n    for i in range(n-2):\n        # calculate the next lucas number using the formula lucas(n+1) = lucas(n) + lucas(n-1)\n        lucas_next = lucas1 + lucas2\n        \n        # update lucas numbers for the next iteration\n        lucas1 = lucas2\n        lucas2 = lucas_next\n    \n    # return the nth lucas number\n    return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        lucas = 2\n        for i in range(2, n+1): \n            lucas = lucas + lucas - 1\n        return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create the nested dictionary\n    nested_dict = {k: {} for k in l1}\n\n    # loop over the lists and populate the nested dictionary\n    for i, k in enumerate(l1):\n        for j, v in enumerate(l2[i]):\n            nested_dict[k][l3[i][j]] = v\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create a dictionary with keys as lists and values as lists\n    nested_dict = {}\n    for i in range(len(l1)):\n        if i < len(l2):\n            if i < len(l3):\n                nested_dict[l1[i]] = [l2[i], l3[i]]\n            else:\n                nested_dict[l1[i]] = [l2[i]]\n        else:\n            nested_dict[l1[i]] = []\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the output\n    output = {}\n    # Iterate through each list in order\n    for i in range(len(l1)):\n        # If the current index is even, append the list's value to the corresponding key in the output dictionary\n        if i % 2 == 0:\n            output[l1[i]] = l2[i]\n        # Otherwise, append the list's value to the corresponding key in the output dictionary as a list\n        else:\n            if l1[i] in output:\n                output[l1[i]].append(l2[i])\n            else:\n                output[l1[i]] = [l2[i]]\n    # Return the output dictionary\n    return output"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for arg in args:\n        for i in range(len(arg)):\n            if i == 0:\n                result[arg[i]] = {}\n            elif i == 1:\n                result[arg[i-1]][arg[i]] = []\n            else:\n                result[arg[i-1]][arg[i]] = arg[i+1]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create a dictionary with three keys and two values each\n    data = {\n        \"key1\": l1,\n        \"key2\": l2,\n        \"key3\": l3\n    }\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_data = {}\n\n    # Loop through the keys in the dictionary\n    for key in data:\n        # If the value is a list, convert it to a nested dictionary\n        if type(data[key]) == list:\n            # Create an empty dictionary to store the nested list\n            nested_list = {}\n\n            # Loop through the items in the list\n            for item in data[key]:\n                # Convert each item to a key-value pair in the nested dictionary\n                nested_list[item] = item\n\n            # Add the nested list to the nested dictionary with the key as the list name\n            nested_data[key] = nested_list\n        # Otherwise, add the value as-is to the nested dictionary with the key as the list name\n        else:\n            nested_data[key] = data[key]\n\n    # Return the nested dictionary\n    return nested_data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        d[str(i)] = {\"name\": l1[i], \"age\": l2[i], \"city\": l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item1 in l1:\n        for item2 in l2:\n            for item3 in l3:\n                key = item1 + item2 + item3\n                value = {'item1': item1, 'item2': item2, 'item3': item3}\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    \n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes any number of lists as arguments and returns a nested dictionary.\n\n    Args:\n        *args (list): A list of lists that will be converted to a nested dictionary.\n\n    Returns:\n        dict: A nested dictionary where each element of the original list is a key and the corresponding value is another dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(args)):\n        for j in range(len(args[i])):\n            result[args[i][j]] = args[i+1][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    nested_dict = {}\n\n    # Iterate through each list\n    for i in range(len(l1)):\n        # Create a new nested dictionary\n        inner_dict = {}\n\n        # Iterate through each element in the current list\n        for j in range(len(l1[i])):\n            # Add the element to the inner dictionary\n            inner_dict[l1[i][j]] = l2[i][j]\n\n        # Add the inner dictionary to the outer dictionary\n        nested_dict[l3[i]] = inner_dict\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    # Calculate the maximum sum for n/2, n/3, n/4, and n/5\n    max_sum = max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))\n\n    # Add the current value of n to the maximum sum\n    max_sum += n\n\n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Define the sequence of Fibonacci numbers\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= n:\n        fib.append(fib[-1] + fib[-2])\n        \n    # Initialize variables for the maximum sum and the current sum\n    max_sum = 0\n    curr_sum = 0\n    \n    # Loop through the sequence of Fibonacci numbers\n    for i in range(len(fib)):\n        # Update the current sum\n        curr_sum += fib[i]\n        \n        # Check if the current sum is greater than the maximum sum so far\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the current sum is greater than the desired sum, stop the loop\n        if curr_sum >= n:\n            break\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(10))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    # Split the number into its factors\n    factors = [2, 3, 4, 5]\n    max_sum = float('-inf')\n    for i in factors:\n        if i <= n:\n            # Calculate the sum of the factors\n            factor_sum = i * (get_max_sum(n // i))\n            # Update the max sum if necessary\n            if factor_sum > max_sum:\n                max_sum = factor_sum\n\n    # Add the original number to the max sum\n    max_sum += n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * get_max_sum(n//2) + n\n    else:\n        return max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n) + n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize variables to keep track of the maximum and minimum lengths\n    max_len = 0\n    min_len = None\n\n    # Iterate through the list to find the maximum and minimum lengths\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n            min_len = None\n        elif len(num) < min_len or min_len is None:\n            min_len = len(num)\n\n    # Check if both max_len and min_len are still None at this point, in which case the list has no repeating elements\n    if min_len is None and max_len == len(input_list):\n        return None\n\n    # Return the list with the maximum length\n    if max_len == len(input_list):\n        return input_list\n    else:\n        return input_list[min_len:]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum length and the list with maximum length\n    max_len = 0\n    max_list = []\n    # Loop through each element of the input list\n    for item in input_list:\n        # If the length of the current item is greater than the maximum length, update the variables\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        # If the length of the current item is equal to the maximum length, append it to the list with maximum length\n        elif len(item) == max_len:\n            max_list.append(item)\n    # Return the list with maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list)\n    max_list = input_list\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if len(input_list[i]) > len(input_list[j]):\n                max_len = len(input_list[i])\n                max_list = [input_list[i]]\n            elif len(input_list[i]) < len(input_list[j]):\n                max_len = len(input_list[j])\n                max_list = [input_list[j]]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # Check if the set is empty (i.e. no duplicates)\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if set has only one element\n    if len(test_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # iterate through each character in the string again\n    for char in str1:\n        # if the character is not in the dictionary, return the character as the first non-repeating character\n        if char not in char_count:\n            return char\n    # if all characters are repeated, return None as there is no first non-repeating character\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of characters in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # iterate through the string and find the first character that appears only once\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return char\n            \n    # if the string has no non-repeating character, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n        \n    # iterate through the dictionary and return the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n        \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that has a count of 1 in the dictionary\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the characters in the string again, starting from the second character\n    for i in range(1, len(str1)):\n        if str1[i] in char_count:\n            # If the character has already been found, return the index of the first occurrence\n            return i\n        else:\n            # If the character has not been found, increment the count of the character in the dictionary\n            char_count[str1[i]] += 1\n\n    # If the loop completes without finding a non-repeating character, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n\n    Args:\n        str1 (str): A string containing alphabets\n\n    Returns:\n        str: The first non-repeated character in the string\n\n    Examples:\n        >>> first_non_repeating_character('hello world')\n        'l'\n\n        >>> first_non_repeating_character('aabbcc')\n        'b'\n\n        >>> first_non_repeating_character('abc')\n        'c'\n    \"\"\"\n\n    # initialize a set to store the characters in the string\n    char_set = set()\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the set, add it\n        if char not in char_set:\n            char_set.add(char)\n        # if the character is already in the set, return that character\n        else:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Initialize the dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Iterate through the string again and return the first character with a frequency of 1\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # If no character with a frequency of 1 is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n\n    # Find the length of the sorted list\n    length = len(sorted_list)\n\n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return sorted_list[length//2]\n\n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (sorted_list[length//2-1] + sorted_list[length//2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the middle element of the sorted numbers\n    middle = len(numbers) // 2\n\n    # Return the median\n    if len(numbers) % 2 == 0:\n        return (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        return numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list to store the numbers\n    numbers = [a, b, c]\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # get the middle number of the sorted list\n    mid = len(numbers) // 2\n\n    # check if the list has an odd or even length\n    if len(numbers) % 2 == 0:\n        # if it has an even length, return the average of the middle two numbers\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        # if it has an odd length, return the middle number\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    numbers = sorted([a, b, c])\n    # calculate the median\n    if len(numbers) % 2 == 0:\n        # if the length of the sorted list is even\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        # if the length of the sorted list is odd\n        median = numbers[len(numbers)//2]\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median of the sorted numbers\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        return sorted_numbers[len(sorted_numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Calculate the median\n    n = len(sorted_nums)\n    median = sorted_nums[n // 2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import random\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    This function takes in three numbers as input and returns their median.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n\n    midpoint = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        return (numbers[midpoint - 1] + numbers[midpoint]) / 2\n    else:\n        return numbers[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the middle number\n    middle_number = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    \n    # Return the middle number\n    return middle_number"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        for digit in str(num):\n            sum += int(digit)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(map(int, str(num)))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits of each number\n    total_sum = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n\n        # Loop through each digit in the list of digits\n        for digit in digits:\n            # Convert the digit to an integer and add it to the total sum\n            total_sum += int(digit)\n\n    # Return the total sum of digits of all numbers in the list\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        while num!= 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    sum_of_digits_list = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits in the list\n        sum_of_digits = sum(digits)\n        # Add the sum of digits to the list\n        sum_of_digits_list.append(sum_of_digits)\n    # Return the list of sum of digits\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits\n    total = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string so we can loop through its digits\n        digits = list(str(num))\n        \n        # loop through each digit and add it to the total sum\n        for digit in digits:\n            total += int(digit)\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits\n    result = []\n\n    # loop through each number in the input list\n    for num in nums:\n        # convert the number to a string and split it into a list of its digits\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of the digits\n        sum_of_digits = sum(digits)\n        # add the sum of digits to the result list\n        result.append(sum_of_digits)\n\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    \n    # initialize the result tuple\n    result_tup = (0,) * len(test_tup1)\n    \n    # perform bitwise xor operation on each element of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to hold the result and carry values\n    result = 0\n    carry = 0\n    \n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the current element and the carry\n        xor_result = test_tup1[i] ^ carry\n        \n        # Calculate the new carry value based on whether the previous xor result was 1 or 0\n        if test_tup1[i] == 1 and carry == 0:\n            carry = 1\n        elif test_tup1[i] == 0 and carry == 1:\n            carry = 0\n        else:\n            carry = 0\n        \n        # Add the xor result to the result\n        result |= xor_result\n        \n    # Add the carry value to the result\n    result |= carry\n    \n    # Return the result as a tuple\n    return (result,)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = test_tup1 ^ test_tup2\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Iterate through each element in the combined list\n    for i in range(len(combined_list)):\n        # Perform the bitwise xor operation on each element\n        combined_list[i] = combined_list[i] ^ combined_list[i+1]\n        # Increment the counter for the second tuple\n        i += 1\n    # Return the combined list as a tuple\n    return tuple(combined_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation and append the result to the result tuple\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for item in test_list:\n        if tuple(sorted(item)) not in unique_tuples:\n            unique_tuples.add(tuple(sorted(item)))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list to a set to get unique elements\n    unique_set = set(test_list)\n    # Extract the length of the set and return it\n    return len(unique_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for i in test_list:\n        for j in i:\n            unique_tuples.add((i,j))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store the unique tuples\n    unique_tuples = set()\n\n    # Iterate through the list and add each unique tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for elem in test_list:\n        unique_tuples.add(elem)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n    \n    # Initialize an empty resultant tuple to store the added elements\n    resultant_tup = ()\n    \n    # Iterate through both tuples and add their elements at each index\n    for i in range(len(test_tup1)):\n        resultant_tup += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the resultant tuple\n    return resultant_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1, test_tup2))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = []\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        result_tuple.append(tup1_elem + tup2_elem)\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_result = 0\n        for j in range(len(test_tup1[i])):\n            temp_result += test_tup1[i][j] + test_tup2[i][j]\n        result.append(temp_result)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a list to store the resultant tuple\n    result = []\n\n    # Iterate through the first nested tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the sum of the corresponding elements in both tuples\n        temp_sum = 0\n\n        # Iterate through the corresponding elements in both tuples\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements in both tuples\n            temp_sum += test_tup1[i][j] + test_tup2[i][j]\n\n        # Append the sum to the resultant list\n        result.append(temp_sum)\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes in two numbers as arguments and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n\n    Parameters:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    int: the minimum of the two numbers\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists within the tuple.\")\n    else: \n        print(f\"{tuplex} does not exist within the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    if tuplex in tuple1:\n        print(\"Element exists in the tuple.\")\n    else:\n        print(\"Element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two tuples and checks whether an element exists within the first tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(f\"{element} exists in the tuple.\")\n            return True\n    print(f\"{tuplex} does not exist in the tuple.\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples, tuplex and tuple1, and checks whether an element exists within tuple1.\n    If the element exists, the function returns True. Otherwise, it returns False.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input: tuplex and tuple1. \n    It then checks whether an element exists within tuple1.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in the tuple.\")\n    else:\n        print(tuplex, \"does not exist in the tuple.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if x is an integer\n    if not isinstance(x, int):\n        raise TypeError('x must be an integer')\n    # Check if x is positive\n    if x <= 0:\n        raise ValueError('x must be positive')\n    # Find the parity of x\n    parity = 1 if x % 2 == 0 else 0\n    # Return the parity as a boolean value\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    # Check if the number is even or odd\n    if x % 2 == 0:\n        # If the number is even, return \"Even\"\n        return \"Even\"\n    else:\n        # If the number is odd, return \"Odd\"\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n        return False\n    else:\n        print(x, \"is odd\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the number is even\" \n    else: \n        return \"The parity of the number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:  # if the number is even, then its parity is even\n        return \"Even\"\n    else:          # if the number is odd, then its parity is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        print(x,\"is even\")\n    else:\n        print(x,\"is odd\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # split the given number into its digits\n    digits = [int(digit) for digit in str(n)]\n\n    # reverse the digits\n    digits.reverse()\n\n    # calculate the sum of the digits\n    sum_of_digits = sum(digits)\n\n    # calculate the new number by adding 1 to the current number\n    next_bigger = n + 1\n\n    # if the sum of digits becomes 9, we need to increment the number by 10\n    while sum_of_digits >= 10:\n        next_bigger += 1\n        sum_of_digits = sum(map(int, str(next_bigger)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes an integer as input and returns the next bigger number by rearranging the digits of the input number.\n\n    Args:\n        n (int): An integer representing a number.\n\n    Returns:\n        int: The next bigger number by rearranging the digits of the input number.\n    \"\"\"\n\n    # Convert the input number to a string\n    input_str = str(n)\n\n    # Convert the first digit to the last position\n    first_digit = int(input_str[0])\n    input_str = input_str[1:] + first_digit * len(input_str)\n\n    # Convert the remaining digits to the last position\n    for i in range(1, len(input_str)):\n        digit = int(input_str[i])\n        input_str = input_str[:i] + digit * (len(input_str) - i) + input_str[i:]\n\n    # Convert the input string to an integer\n    next_bigger = int(input_str)\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the given number to a string\n    num = str(n)\n\n    # Reverse the string\n    num = num[::-1]\n\n    # Convert the reversed string to an integer\n    num = int(num)\n\n    # Create a list of digits from the number\n    digits = [int(digit) for digit in str(num)]\n\n    # Find the first digit that is greater than 9\n    for digit in digits:\n        if digit > 9:\n            break\n\n    # Find the index of the digit in the digits list\n    index = digits.index(digit)\n\n    # Create a list of indices that will be swapped to create the next number\n    indices = []\n    for i in range(len(digits)):\n        if i!= index:\n            indices.append(i)\n\n    # Swap the digits at the index and the first index in the list\n    digits[index], digits[0] = digits[0], digits[index]\n\n    # Convert the list of digits back to a string and return the result\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for i in range(len(digits)):\n        next_bigger += digits[i] * (10 ** i)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # get the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # create a new list that will hold the digits in reverse order\n    reversed_digits = digits[::-1]\n\n    # find the index of the smallest digit in the reversed list\n    smallest_index = min(range(len(reversed_digits)), key=lambda i: reversed_digits[i])\n\n    # create a new list that will hold the digits in the new order\n    new_digits = reversed_digits[smallest_index:] + reversed_digits[:smallest_index]\n\n    # join the new digits back into a string and return it as an integer\n    return int(''.join(str(digit) for digit in new_digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the next bigger number to None\n    next_bigger = None\n\n    # Iterate through each digit of the given number\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Calculate the next bigger number by rearranging the digits\n        if digit == 9:\n            next_bigger = 1\n        elif digit == 0:\n            next_bigger = 9\n        else:\n            next_bigger = digit + 1\n\n        # Check if the next bigger number already exists in the dictionary\n        if next_bigger in rearranged_numbers:\n            # If it does, increment the next bigger number by one\n            while next_bigger in rearranged_numbers:\n                next_bigger += 1\n\n            # Update the dictionary with the new next bigger number\n            rearranged_numbers[next_bigger] = n\n\n            # Break out of the loop because we have found a unique next bigger number\n            break\n\n    # Return the next bigger number if we have found one\n    return next_bigger if next_bigger is not None else None"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))  # convert n to a list of digits\n    digits.sort(reverse=True)  # sort the digits in descending order\n    result = int(''.join(digits))  # join the sorted digits back into a number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the first digit that is smaller than the current number\n    smallest_digit = min(num_str)\n\n    # Find the first digit that is equal to the current number\n    repeated_digit = num_str.count(smallest_digit)\n\n    # Find the last digit that is larger than the current number\n    largest_digit = max(num_str)\n\n    # Create a new string with the repeated digit replaced with the smallest digit\n    new_num_str = num_str.replace(str(smallest_digit), str(repeated_digit))\n\n    # Convert the new string to an integer\n    new_num = int(new_num_str)\n\n    # Return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    next_digit = max_digit\n    for digit in digits:\n        if digit > max_digit and digit < next_digit:\n            next_digit = digit\n    return n * 10 + next_digit"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize a list of digits to be used for rearranging\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Combine the sorted digits into a new number\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n\n    # Increment the result by 1 to move to the next bigger number\n    result += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            if len(pairs) == k:\n                return pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heappush(heap, (-num, 0))\n    for num in nums2:\n        heappush(heap, (num, 1))\n    \n    result = []\n    while k > 0:\n        value, index = heappop(heap)\n        if index == 0:\n            result.append(value)\n            k -= 1\n        else:\n            nums2.remove(-value)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the input arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # create a min heap of size k\n    min_heap = []\n    \n    # iterate through the first array\n    for num1 in nums1:\n        # find the index of the minimum element in the second array greater than or equal to num1\n        index = bisect_left(nums2, num1)\n        \n        # if there are not enough elements in the second array greater than or equal to num1, add all the elements\n        if index == len(nums2):\n            min_heap += nums2\n        # if there are enough elements in the second array greater than or equal to num1, add the elements before and including the minimum element in the second array\n        else:\n            min_heap += nums2[:index]\n        \n        # if the size of the min heap is equal to k, add the minimum pair to the output list\n        if len(min_heap) == k:\n            output.append((heapq.heappop(min_heap), num1))\n    \n    return output\n\n\ndef bisect_left(arr, x):\n    \"\"\"\n    Return the leftmost index where arr[left:right] has an element equal to x.\n    If x is not in arr, return the index where it would be inserted.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap of size k\n    heap = []\n    \n    # iterate over the first array and second array\n    for num1 in nums1:\n        for num2 in nums2:\n            # check if the heap is not full\n            if len(heap) < k:\n                # add the pair to the heap\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            # check if the heap is full and the first element in the heap is smaller than the current pair\n            elif heap[0][0] > (num1 + num2):\n                # remove the smallest element from the heap and add the current pair\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    \n    # extract the k smallest pairs from the heap\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to a set to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    # Combine the two sets to get all possible pairs\n    all_pairs = set(zip(nums1_set, nums2_set))\n    # Use a min heap to store the pairs with the smallest sum\n    min_heap = []\n    for pair in all_pairs:\n        # If the size of the heap is less than k, add the pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, pair)\n        # If the size of the heap is equal to k, compare the sums of the pairs at the top of the heap with the current pair\n        elif len(min_heap) == k:\n            current_sum = sum(pair)\n            if current_sum < min_heap[0][0] + min_heap[0][1]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair)\n        # If the size of the heap is greater than k, compare the sums of the pairs at the bottom of the heap with the current pair\n        elif len(min_heap) > k:\n            current_sum = sum(pair)\n            if current_sum < min_heap[-1][0] + min_heap[-1][1]:\n                heapq.heappush(min_heap, pair)\n    # Return the k smallest pairs\n    return [pair for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Heapify the array\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n\n    # Initialize an empty list to store the pairs\n    pairs = []\n\n    # Iterate over the first k elements of the arrays\n    for i in range(k):\n        # Find the smallest element from the first array and the smallest element from the second array\n        smallest1 = heapq.heappop(nums1)\n        smallest2 = heapq.heappop(nums2)\n\n        # Add the pair to the list\n        pair = (smallest1, smallest2)\n        pairs.append(pair)\n\n        # Add the smallest element from the second array to the heap\n        heapq.heappush(nums2, smallest1)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (nums1[i] + nums2[j]) in min_heap:\n                min_heap.remove((nums1[i] + nums2[j]))\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    return [(nums1[i], nums2[j]) for i, j in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort both arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap of size k\n    min_heap = []\n\n    # Iterate through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair\n            curr_sum = nums1[i] + nums2[j]\n\n            # If the sum is greater than or equal to the current smallest sum in the heap, add the pair to the heap\n            if len(min_heap) < k or curr_sum < min_heap[0][0]:\n                heapq.heappush(min_heap, (curr_sum, (nums1[i], nums2[j])))\n\n            # If the heap size is equal to k, remove the smallest sum from the heap\n            elif len(min_heap) == k:\n                heapq.heappop(min_heap)\n\n            # If the sum is less than the current smallest sum in the heap, remove the pair with the smallest sum and add the new pair to the heap\n            else:\n                smallest_sum = heapq.heappop(min_heap)[0]\n                heapq.heappush(min_heap, (curr_sum, (nums1[i], nums2[j])))\n                heapq.heappush(min_heap, (smallest_sum, (nums1[i], nums2[j])))\n\n    # Extract the k smallest sums from the heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n    for num1 in nums1:\n        heapq.heappush(heap1, -num1)\n    for num2 in nums2:\n        heapq.heappush(heap2, -num2)\n    \n    while len(pairs) < k:\n        if -heap1[0] > -heap2[0]:\n            pair = (-heap1[0], -heap2[0])\n            heap1[0] = -heapq.heappop(heap1)\n            heap2.append(pair)\n            pairs.append(pair)\n        else:\n            pair = (-heap2[0], -heap1[0])\n            heap2[0] = -heapq.heappop(heap2)\n            heap1.append(pair)\n            pairs.append(pair)\n    \n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result.append(list1[i] * list1[i+1])\n    result.sort()\n    return result[0]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] * list1[j] < product:\n                product = list1[i] * list1[j]\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        temp = 1\n        for j in range(len(list1[i])):\n            temp *= list1[i][j]\n        list2.append(temp)\n    min_product = min(list2)\n    list3 = []\n    for i in range(len(list1)):\n        temp = 1\n        for j in range(len(list1[i])):\n            temp *= list1[i][j]\n        if temp == min_product:\n            list3.append(list1[i])\n    return list3"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sorting the list in ascending order of the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n    min_product = float('inf')\n    # Looping through the sorted list and finding the minimum product of two tuples\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][1] * list1[j][1]\n            if prod < min_product:\n                min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n\n    product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pair_product = list1[i] * list1[j]\n            if pair_product < product:\n                product = pair_product\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    # loop through all pairs of tuples within the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # calculate the product of the two tuples and compare to the current minimum product\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # Loop over the remaining elements of the list\n    for val in listval[1:]:\n        # If the current value is smaller than the current minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list.\n\n    Parameters:\n    - lst: a list containing heterogeneous values\n\n    Returns:\n    - the minimum value in the list\n    \"\"\"\n    # Initialize a variable to store the minimum value found so far\n    min_val = None\n\n    # Iterate over the list and check each value to see if it's less than the current minimum\n    for val in lst:\n        if min_val is None or val < min_val:\n            min_val = val\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0] # assume the first element is the minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # create a list of tuples where each tuple contains a value and its type\n    val_types = [(x, type(x)) for x in listval]\n    # sort the list of tuples based on the second element (i.e. the type)\n    sorted_types = sorted(val_types, key=lambda x: x[1])\n    # get the first element (i.e. the minimum value) from the sorted list\n    return sorted_types[0][0]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Use the built-in min() function to find the minimum value\n    min_value = min(listval)\n\n    return min_value"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    pattern = re.compile(r'_(.?)(?=[A-Z])')\n    return pattern.sub(lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n\n    # Convert the first letter of each word to upper case\n    words = [word.capitalize() for word in words]\n\n    # Join the words back into a single string and return it\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # remove all underscores and split the word into a list of words\n    words = re.findall(r'(\\b\\w+\\b)', word)\n    \n    # capitalize the first letter of each word and join them together\n    camel_case = ''.join(w.capitalize() for w in words)\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    Args:\n    word (str): The snake case string to convert to camel case.\n\n    Returns:\n    str: The camel case string.\n\n    \"\"\"\n\n    # Remove underscores and split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words back into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    return re.sub(pattern, lambda match: '_'+match.group(0).lower(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by capitalizing the first letter and\n    # using underscores to separate the words\n    return ''.join(word.capitalize() if i == 0 else '_' + word.capitalize() for i, word in enumerate(word.split('_')))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using snake case pattern\n    words = re.findall(r'[A-Z]+(?=[A-Z][a-z]+[0-9]*|\\b)', word)\n\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n\n    # Join the camel case words back into a string\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = [x for x in l if x % 2!= 0]\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][0]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n\n    Args:\n        list1 (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        tuple: The nth element from the list of tuples.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    for tup in list1:\n        if len(tup) < n:\n            return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element of the list.\n    '''\n    if n > len(list1):\n        return \"The given index is out of bounds.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks if any value in the first sequence exists in the second sequence.\n    It returns True if any value is found, otherwise it returns False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # creating a set from both lists to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # checking if there are any common values in both sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in the first list that is also in the second list, otherwise it returns False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input, checks whether any value in the first list exists in the second list or not,\n    and returns True if such a value exists, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Loop through each element in the first list\n    for item in list1:\n        # Check if the item exists in the second list\n        if item in list2:\n            return True\n    # If we've made it this far, no overlap was found\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for num in arr: \n        if num > max1: \n            max2 = max1\n            max1 = num \n        elif num > max2: \n            max2 = num \n\n        if num < min1: \n            min2 = min1\n            min1 = num \n        elif num < min2: \n            min2 = num \n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    maxProduct = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n        maxProduct = max(maxProduct, max1*max2)\n    \n    return maxProduct"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair of integers with the highest product.\n    \"\"\"\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_product = arr[i] * arr[j]\n\n            if curr_product > max_pair[0]:\n                max_pair = (curr_product, arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1 * max2, max1 * min1"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns a tuple containing the two elements in the array\n    that have the highest product. The function uses a variable to store the maximum product seen so far, and two\n    pointers to iterate through the array. If the current product is greater than the maximum product seen so far,\n    the maximum product is updated. If the current product is less than the maximum product seen so far, the function\n    swaps the elements at the pointers and updates the pointers. The function continues this process until the\n    pointers cross each other.\n    \"\"\"\n    max_product = float('-inf')\n    first = 0\n    second = 1\n    \n    while second < len(arr):\n        current_product = arr[first] * arr[second]\n        if current_product > max_product:\n            max_product = current_product\n            first, second = second, first\n        elif current_product < max_product:\n            first, second = second, first\n            \n    return arr[first], arr[second]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return (max1, max2) if (max1 * max2) > (min1 * min2) else (min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_1 = float('-inf')\n    max_2 = float('-inf')\n    min_1 = float('inf')\n    min_2 = float('inf')\n    for num in arr:\n        if num > max_1:\n            max_2 = max_1\n            max_1 = num\n        elif num > max_2:\n            max_2 = num\n        elif num < min_1:\n            min_2 = min_1\n            min_1 = num\n        elif num < min_2:\n            min_2 = num\n    return max(max_1 * max_2, min_1 * min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n    for i in range(2, len(arr)):\n        temp = arr[i]\n        if temp > max1:\n            max2 = max1\n            max1 = temp\n        elif temp > max2:\n            max2 = temp\n        \n        if temp < min1:\n            min2 = min1\n            min1 = temp\n        elif temp < min2:\n            min2 = temp\n            \n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = [0, 0]\n    min_product = float('inf')\n    min_pair = [0, 0]\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair = [i, 0]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_pair = [i, 0]\n        for j in range(1, len(arr)):\n            if j == i:\n                continue\n            if arr[i] * arr[j] > max_product:\n                max_pair[1] = j\n                max_product = arr[i] * arr[j]\n            elif arr[i] * arr[j] < min_product:\n                min_pair[1] = j\n                min_product = arr[i] * arr[j]\n    return max_pair, min_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements and their counts\n    common_elements = {}\n\n    # loop through the input list of tuples\n    for i in Input:\n        # extract the first element from the tuple\n        first_element = i[0]\n\n        # if the first element is already in the dictionary, increment its count\n        if first_element in common_elements:\n            common_elements[first_element] += 1\n        # if the first element is not in the dictionary, add it with a count of 1\n        else:\n            common_elements[first_element] = 1\n\n    # create an empty list to store the result\n    result = []\n\n    # loop through the dictionary and add common elements with count greater than 1 to the result list\n    for key, value in common_elements.items():\n        if value > 1:\n            result.append(key)\n\n    # return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns the common first element of the tuples.\n    '''\n\n    # create an empty dictionary to store the count of each element in the tuples\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in Input: \n        # get the first element of each tuple\n        first_element = tup[0]\n\n        # check if the element is already in the dictionary\n        if first_element in count_dict: \n            # if it is, increment its count by 1\n            count_dict[first_element] += 1\n        else: \n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[first_element] = 1\n\n    # loop through the dictionary and find the element with the highest count\n    max_count = 0\n    common_element = None\n    for key, value in count_dict.items(): \n        if value > max_count: \n            # if the count is higher than the current max count, update the max count and common element\n            max_count = value\n            common_element = key\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        else:\n            if tup[0] == common_first_element:\n                return common_first_element\n            else:\n                common_first_element = None\n                break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = {}\n    for i in Input:\n        if i[0] in count:\n            count[i[0]].append(i)\n        else:\n            count[i[0]] = [i]\n    common = []\n    for key, value in count.items():\n        if len(value) == len(Input):\n            common.append(value[0][0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    common = set()\n    for item in Input:\n        if item[0] in common:\n            common.add(item[0])\n        else:\n            common.add(item[0])\n            common.add(item[1])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                result.append((i[0], (i[1], j[1])))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns the common first element in those tuples.\n\n    Args:\n        Input (list): List of tuples.\n\n    Returns:\n        int: The common first element in the given list of tuples.\n    \"\"\"\n    # Create a set to store the common first elements in the given list of tuples\n    common_set = set()\n\n    # Iterate over the given list of tuples\n    for i in Input:\n        # Extract the first element of the tuple\n        first_element = i[0]\n        # If the first element is already in the set, update the set with this first element\n        if first_element in common_set:\n            common_set.remove(first_element)\n            common_set.add(first_element)\n\n    # Return the common first element in the given list of tuples\n    if len(common_set) == 0:\n        return None\n    else:\n        return common_set.pop()"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for tup in Input:\n        if len(set([x[0] for x in tup])) == 1:\n            common_first.append(tup)\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_list.append((Input[i][0], (Input[i][1], Input[j][1])))\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples and returns a dictionary where the keys are common elements of the tuples and the values are lists of tuples that have that element as their first element.\n    '''\n\n    # Create an empty dictionary\n    common_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in Input:\n\n        # Check if the tuple has a common element with any other tuple in the list\n        for other_tup in Input:\n            if tup[0] in other_tup:\n                # If it does, add the tuple to the dictionary if it hasn't already been added\n                if tup[0] not in common_dict:\n                    common_dict[tup[0]] = [tup]\n                else:\n                    common_dict[tup[0]].append(tup)\n\n    return common_dict"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_element = item\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for item in lst:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_element = item\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    # initialize variables\n    max_len = 0\n    max_elem = None\n    \n    # loop through the list\n    for elem in lst:\n        # if the length of the element is greater than the current maximum, update both variables\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    # return the maximum element\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total_sum = total * len(list1)\n    print(\"The total sum is:\", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total_sum = sum(map(round, lst))\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n    total *= len(list1)\n    return total"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as an input and rounds every number using the round() function and prints the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum\n\nprint(cube_Sum(10)) # Output: 145"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n        count += 1\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer `n` and returns the sum of the cubes of the first `n` even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(n): \n        sum += i*i*i \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the cube sum of the first n even natural numbers.\n    \"\"\"\n    # initialize the cube sum to 0\n    cube_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the current even natural number\n        cube = i**3\n        \n        # add the cube to the cube sum\n        cube_sum += cube\n        \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    if n % 2!= 0:\n        raise ValueError(\"n must be even.\")\n    elif n < 1:\n        raise ValueError(\"n must be greater than 0.\")\n    else:\n        even_cubes = [i**3 for i in range(2, n+1, 2)]\n        return sum(even_cubes)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of cubes of first n even natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum_of_cubes = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # find cube of i\n        cube_i = i**3\n        # add cube_i to sum_of_cubes\n        sum_of_cubes += cube_i\n        \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer argument n and returns the cube sum of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = \"\"\n    for elem in test_tup:\n        concat_str += str(elem) + \" \"\n    return concat_str.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    for item in test_tup:\n        if isinstance(item, str):\n            delimiter = delimiter + item\n        elif isinstance(item, tuple):\n            delimiter = concatenate_tuple(item)\n    return delimiter"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Initialize an empty string to store the concatenated elements\n    concatenated_str = ''\n    # Loop through each element of the tuple and concatenate it to the concatenated_str\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    # Remove the last delimiter from the concatenated_str\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += element + delimiter\n    return concatenated_string[:-1]  # remove the last delimiter from the concatenated string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of the tuple using the ',' delimiter\n    concatenated_tuple = ', '.join([str(x) for x in test_tup])\n    return concatenated_tuple"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize variable to hold sum of cubes\n    sum_cubes = 0\n\n    # loop through first n numbers and add their cubes to sum_cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate average of cubes and return result\n    average_cubes = sum_cubes/n\n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # loop through first n natural numbers and calculate the cube of each number\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n\n    # calculate the average of cubes of first n natural numbers\n    average_of_cubes = sum_of_cubes / count\n\n    # return the average of cubes of first n natural numbers\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        count += 1\n    average_cubes = sum_cubes / count\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize sum variable to 0\n    sum = 0\n\n    #loop through first n natural numbers\n    for i in range(1,n+1):\n        #calculate cube of the natural number i and add it to the sum variable\n        sum += i**3\n\n    #calculate the average of the cubes and return it\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i ** 3\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n    # Initialize the number of cubes to 0\n    num_of_cubes = 0\n    \n    # Calculate the sum of cubes from 1 to n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        num_of_cubes += 1\n    \n    # Calculate the average of cubes and return it\n    return sum_of_cubes/num_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element_list = []\n    for i in range(len(test_tuple)):\n        rear_element = test_tuple[i][-1]\n        rear_element_list.append(rear_element)\n    return rear_element_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for string in test_tuple:\n        rear_element.append(string[-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_list.append(string)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(test_tuple[i][-1]) for i in range(len(test_tuple)))"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == list:\n            if x in i:\n                count += 1\n        else:\n            if i == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace dashes with slashes in the date string\n    dt = dt.replace('-', '/')\n    \n    # Extract the year, month, and day from the date string\n    match = re.search(r'(\\d{4})/(\\d{2})/(\\d{2})', dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    \n    # Format the date string in the new format\n    formatted_date = '{}-{}-{}'.format(day, month, year)\n    \n    # Return the formatted date string\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError(f'Invalid date format: {dt}')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the input date using the regular expression pattern\n    match = re.match(pattern, dt)\n    # extract the year, month, and day from the matched groups\n    year, month, day = match.groups()\n    # convert the year, month, and day to the desired format using strftime() function\n    desired_format = '%d-%m-%Y'\n    formatted_dt = datetime.datetime.strptime(f'{year}-{month}-{day}', desired_format).strftime(desired_format)\n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.match() function to match the pattern with the date string\n    match = re.match(pattern, dt)\n\n    # If the match is found, extract the groups and join them with the desired format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regex pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n\n    # Check if the number of matches is exactly 1\n    if len(matches)!= 1:\n        print(\"Invalid input format\")\n        return dt\n\n    # Convert each match to the desired format\n    year, month, day = matches[0]\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the format of the input date\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the pattern to match the input date\n    match = re.match(pattern, dt)\n    \n    # If the pattern matches, extract the month, day, and year values and format them as required\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        formatted_date = day + '-' + month + '-' + year\n        return formatted_date\n    \n    # If the pattern does not match, return the input date unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the pattern to search for the date in the string\n    match = re.search(pattern, dt)\n    # if the date is found, extract the day, month, and year\n    if match:\n        day = match.group(3)\n        month = match.group(2)\n        year = match.group(1)\n        # use a format string to create a new date in dd-mm-yyyy format\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        # if the date is not found, return the original string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'([0-9]{4})-([0-9]{2})-([0-9]{2})'\n    new_format = r'\\2-\\1-\\3'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    \n    # Step 1\n    gap = n//2\n    while gap > 0:\n        # Step 2\n        for i in range(gap, n):\n            # Step 3\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                # Step 4\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Step 5\n            my_list[j] = temp\n        # Step 6\n        gap = gap//2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array by using shell sort.\n    \"\"\"\n    # get the length of the list\n    n = len(my_list)\n    \n    # set the increment value for the sorting\n    inc = n // 2\n    \n    # repeat the following until the increment is 1\n    while inc > 0:\n        # iterate over the array and sort the elements in chunks of size inc\n        for i in range(inc, n):\n            # get the current element\n            curr = my_list[i]\n            \n            # compare the current element with the elements in the sorted chunk\n            j = i - inc\n            \n            while j >= 0 and my_list[j] > curr:\n                # shift the elements that are greater than the current element\n                my_list[j + inc] = my_list[j]\n                j -= inc\n            \n            # put the current element in its correct position\n            my_list[j + inc] = curr\n        \n        # reduce the increment size to half\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple([x & y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # Iterate over each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the two elements at index i from each tuple\n        el1 = test_tup1[i]\n        el2 = test_tup2[i]\n        # Calculate the elementwise and of the two elements\n        and_el = el1 & el2\n        # Add the elementwise and tuple to the list\n        and_tup_list.append(and_el)\n    # Return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples have different lengths'\n    \n    # Iterate over the tuples and extract the elementwise and tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # check if the corresponding elements are both True\n        if test_tup1[i] and test_tup2[i]:\n            # if both are True, add the element to the result tuple\n            result_tup += (test_tup1[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the tuples.\n    '''\n    and_tuple = []\n    for i in range(len(test_tup1)):\n        and_tuple.append(test_tup1[i] & test_tup2[i])\n    return and_tuple"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b/(2*a)\n    x2 = (-b + (c**2-4*a*b)/(4*a**2))/(2*a)\n    x3 = (-b - (c**2-4*a*b)/(4*a**2))/(2*a)\n    print(\"The directrix of the parabola is: x1 =\",x1,\"x2 =\",x2,\"x3 =\",x3)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The parabola is not defined.\")\n    elif delta == 0:\n        x = (-b)/(2*a)\n        print(\"The directrix is x = {:.2f}\".format(x))\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is x1 = {:.2f} and x2 = {:.2f}\".format(x1, x2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola using the formula:\n        x = (-b \u00b1 sqrt(b^2-4ac))/(2a)\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**(1/2))/(2*a)\n    elif discriminant == 0:\n        x = (-b + discriminant**(1/2))/(2*a)\n    else:\n        x = (-b - discriminant**(1/2))/(2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n    elif discriminant == 0: \n        x1 = -b / (2*a)\n        x2 = -b / (2*a)\n    else: \n        print(\"The discriminant is zero. Therefore, the directrix cannot be found.\")\n        return None\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculating the discriminant\n    discriminant = b ** 2 - 4 * a * c\n    \n    # Check if the discriminant is real or complex\n    if discriminant > 0:\n        # Calculating the root of the discriminant\n        root = (-b + discriminant ** 0.5) / (2 * a)\n        \n        # Returning the directrix\n        return root\n    else:\n        # Returning an error message\n        return \"The discriminant is complex.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    # Check if the discriminant is real\n    if disc < 0:\n        print(\"The parabola is not defined for this value of a, b, and c.\")\n    else:\n        # Find the roots of the discriminant\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        # Find the directrix\n        directrix = roots[1]\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the two roots\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n\n        # Sort the roots in ascending order\n        roots = [root1, root2]\n        roots.sort()\n\n        # Return the directrix\n        return roots[0]\n    else:\n        # Return an error message\n        return \"The discriminant is negative.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "Therefore, the directrix of the parabola is the point on the y-axis where the parabola crosses the x-axis."
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D > 0:\n        return (-b + (b**2 - 4*a*c)**0.5)/2/a\n    elif D < 0:\n        return (-b - (b**2 - 4*a*c)**0.5)/2/a\n    else:\n        return 'There are no real roots of this equation'"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Loop through the first list\n    for item in list1:\n        # If the item is in the second list, add it to the set of common elements\n        if item in list2:\n            common_set.add(item)\n\n    # Check if there are any common elements in the set\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # check if any of the lists is empty\n    if not list1 or not list2:\n        return False\n\n    # create a set of the elements in the first list\n    set1 = set(list1)\n\n    # iterate over the elements in the second list\n    for elem in list2:\n        # if the element is in the set, it's a common element\n        if elem in set1:\n            return True\n\n    # if we make it here, there were no common elements\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of the elements in the first list\n    set1 = set(list1)\n    # create a set of the elements in the second list\n    set2 = set(list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # check if the intersection is not empty\n    if not intersection:\n        return False\n    # if we get here, there is a common element\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for element in list1:\n        if element in list2:\n            common.append(element)\n    if len(common) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2 and element not in common:\n            common = True\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n\n    # calculate the length of the trapezium base\n    trapezium_base = math.sqrt(area / (perimeter - area))\n\n    # calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + trapezium_base)\n\n    # calculate the difference between the area of the trapezium and its perimeter\n    difference = area - perimeter\n\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_length + base1 + base2)\n\n    # return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area_sum = area1 + area2\n    \n    if area_sum > 0:\n        area_diff = abs(area_sum - (0.5 * base1 * half_height + 0.5 * base2 * half_height))\n        area_diff_per_height = area_diff / half_height\n        median_length = abs(area1 * half_height - area2 * half_height) + area_diff_per_height\n        if area1 > area2:\n            median_length = abs(area1 * half_height - area2 * half_height) + area_diff_per_height\n        else:\n            median_length = abs(area1 * half_height - area2 * half_height) - area_diff_per_height\n            \n        return median_length\n    else:\n        return None"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the base1 and base2\n    length1 = 0.5 * base1\n    length2 = 0.5 * base2\n    # Calculate the sum of the lengths of the sides\n    total_length = length1 + length2\n    # Calculate the sum of the areas of the trapeziums\n    sum_area1 = 0.5 * (area - length1)\n    sum_area2 = 0.5 * (area - length2)\n    # Calculate the median area\n    median_area = (sum_area1 + sum_area2) / 2\n    # Calculate the median length\n    median_length = total_length / 2\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = base1 + base2 + height\n    median_length = (trapezium_length / 2) + ((height % 2) * base1)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # calculate the length of the trapezium base\n    trapezium_base = math.sqrt(2 * area / perimeter)\n\n    # find the area of the trapezium base\n    trapezium_area = 0.5 * trapezium_base * height\n\n    # calculate the length of the trapezium top\n    trapezium_top = trapezium_base * 0.5\n\n    # return the median of the two trapezium bases\n    return trapezium_base - trapezium_top"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Find the length of the trapezium using the trapezoidal rule\n    trapezium_length = 0.5*(base1 + base2 + height)\n\n    # Sort the lengths of both sides of the trapezium in ascending order\n    side_lengths = sorted([base1, base2, height])\n\n    # Calculate the median length of the trapezium\n    median_length = (side_lengths[2] + side_lengths[0])\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the base of the trapezium\n    b = 0.5 * (base1 + base2)\n\n    # Calculate the height of the trapezium\n    h = height\n\n    # Calculate the area of the trapezium\n    area = 0.5 * b * h\n\n    # Calculate the length of the half of the base\n    l_half = 0.5 * b\n\n    # Calculate the area of the half of the trapezium\n    area_half = 0.5 * b * l_half\n\n    # Calculate the length of the longest side of the trapezium\n    l_longest = 0.5 * (b + l_half)\n\n    # Calculate the area of the longest side of the trapezium\n    area_longest = 0.5 * b * l_longest\n\n    # Calculate the length of the shortest side of the trapezium\n    l_shortest = 0.5 * (b - l_half)\n\n    # Calculate the area of the shortest side of the trapezium\n    area_shortest = 0.5 * b * l_shortest\n\n    # Sort the sides of the trapezium\n    sides = [area_half, area_longest, area_shortest, area]\n    sides.sort()\n\n    # Calculate the median\n    median = 0.5 * (sides[1] + sides[2])\n\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * area / (0.5 * base1 + 0.5 * base2)\n\n    # Calculate the median of the trapezium\n    median_trapezium = 0.5 * (base1 + base2 + height + trapezium_length)\n\n    return median_trapezium\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    a = base1 + base2\n    b = a * (2 * half_height)\n    c = (a + base1) * half_height\n    d = (a + base2) * half_height\n    e = a * half_height\n    f = (base1 + a) * half_height\n    g = (base2 + a) * half_height\n    h = half_height * (d - b + c + e + f + g)\n    i = max(b, h, c, d)\n    j = min(b, h, c, d)\n    return (i + j) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    half_area = area / 2\n\n    # Use the inverse quadratic formula to find the area of the trapezium\n    top_area = half_area * (math.sqrt(3) - 1) / 6\n    bottom_area = half_area * (1 + math.sqrt(3)) / 6\n\n    # Use the Pythagorean theorem to find the length of the trapezium\n    trapezium_length = math.sqrt(top_area + bottom_area)\n\n    # Use the Pythagorean theorem to find the length of the base of the trapezium\n    base_length = math.sqrt(half_area * (top_area + bottom_area))\n\n    # Calculate the median length of the trapezium\n    median_length = (base_length + trapezium_length) / 2\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.{0,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n\n    if result:\n        print(f\"The pattern '{pattern.pattern}' matched the string '{text}' at position {result.start()}.\")\n        print(f\"The matched text is: '{result.group()}'.\")\n    else:\n        print(f\"The pattern '{pattern.pattern}' did not match the string '{text}'.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a\\w*b\\w*')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a[b]*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,}b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer `n` as input and returns the last digit of `n`.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Remove the decimal part of the number and take the last digit\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Extract the last digit of the number\n    digit = n % 10\n    # Return the last digit\n    return digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # create an empty list to store the negative numbers\n    neg_list = []\n    # loop through each element in the list\n    for num in list1:\n        # if the element is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # create an empty list to store the negative numbers\n    neg_list = []\n    # iterate through the list and append the negative numbers to the list\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    # return the list of negative numbers\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list containing the negative numbers in the input list.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters from a string.\n    \"\"\"\n    return ''.join(char for char in string if char.isdigit() or (char.isalpha() and int(char) % 2 == 0))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = set(['a', 'e', 'i', 'o', 'u'])\n    new_str = ''.join([char for char in str1 if char.lower() not in odd_chars])\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(s):\n    \"\"\"\n    Remove odd characters from a string.\n\n    :param s: the input string\n    :return: the modified string without odd characters\n    \"\"\"\n    return ''.join([c for c in s if c.isalnum()])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    \n    # loop through the test list and for each tuple pair\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # if the tuple pairs are equal, increment the count\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if not L:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        single = multiple_to_single(L[1:])\n        return L[0] + single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num += num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string\n    single_str = ''\n    # Iterate over the list of integers\n    for num in L:\n        # Convert the integer to a string and append to the single_str\n        single_str += str(num)\n    # Convert the single_str to an integer and return it\n    return int(single_str)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if num % 2 == 0:\n            total += num\n        else:\n            total -= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single = single * num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in a given sentence, and returns the position of that adverb.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:(?:[a-z]+\\s*)?[a-z]+)\\b'\n    \n    # Use the pattern to find all occurrences of adverbs in the text\n    matches = re.finditer(pattern, text)\n    \n    # Check if any adverbs were found\n    if matches:\n        # Find the first adverb and its position\n        adverb_match = next(matches)\n        position = adverb_match.start()\n    else:\n        # If no adverbs were found, return None\n        position = None\n        \n    # Return the position of the first adverb\n    return position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b\\w+\\s+(?:to|during|after|before|than|except|since|until|while|when|where|how|whereas|whenever|as|at|with|among|amongst|over|against|between|through|throughout|besides|beside|besides|beside|as|on|at|during|with|among|amongst|over|against|between|through|throughout|besides|beside|besides|beside)\\b'\n\n    # Find all matches in the text using the pattern\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # If matches are found, return the adverb and its position\n    if matches:\n        first_match = matches[0]\n        first_adverb = first_match.split()[0]\n        pos = text.lower().find(first_match.lower())\n        return first_adverb, pos\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = r'\\b\\w*[AEIOUaeiou]\\w*[aeiou]\\w*\\b'\n    \n    # Find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Iterate over the matches and extract the adverbs and their positions\n    for match in matches:\n        # Extract the adverb from the match\n        adverb = match.split()[0]\n        \n        # Find the position of the adverb in the sentence\n        start = text.find(match)\n        end = start + len(match)\n        \n        # Add the adverb and its position to the adverbs list\n        adverbs.append((adverb, start, end))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Use regular expressions to find all adverbs and their positions in the sentence\n    pattern = r\"\\b([a-zA-Z]+)(\\s[a-zA-Z]+)*\\b\"\n    matches = re.findall(pattern, text)\n    print(matches)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all instances of an adverb in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-z]*\\b\\w*\\b\\w*[a-z]*\\b\\w*\\b', text)\n\n    # If there are no adverbs in the sentence, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    position = text.index(adverbs[0])\n\n    # Return a list of tuples containing the adverb and its position in the sentence\n    return [(adverb, position) for adverb in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for matching adverbs\n    pattern = r'\\b(a|an|the)\\s+[a-z]+\\b'\n\n    # Use the re.findall() function to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        print(f\"{adv} appears at position {i+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # regular expression to find adverb\n    pattern = r'\\b(\\w+)(\\w*)\\b\\w*(\\w*)\\b\\w*(\\w*)\\b\\w*(\\w*)\\b\\w*(\\w*)\\b'\n\n    # find all matches\n    matches = re.findall(pattern, text)\n\n    # check if any match is found\n    if not matches:\n        return None\n\n    # initialize result\n    result = {}\n\n    # iterate over matches\n    for match in matches:\n        # get adverb and positions\n        adverb = match[0]\n        pos1 = len(match[0])\n        pos2 = pos1 + len(match[1])\n        pos3 = pos2 + len(match[2])\n        pos4 = pos3 + len(match[3])\n        pos5 = pos4 + len(match[4])\n        pos6 = pos5 + len(match[5])\n        pos7 = pos6 + len(match[6])\n\n        # add adverb to result dictionary with positions\n        if adverb not in result:\n            result[adverb] = [match.start()]\n        result[adverb].append(match.end())\n\n    # return result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'(\\w+)(\\s+(is|are|am|was|were|be|being|been|has|have|had|do|does|did|will|would|should|shall|shouldn\\'t|shouldn\\'t|could|could\\'ve|couldnt|couldn\\'t|shouldn\\'t|couldnt|shan\\'t|shouldn\\'t|shouldn\\'t))'\n    \n    # Use the re.findall() method to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # If there are adverbs, loop through them and print their positions\n    if adverbs:\n        for i, adverb in enumerate(adverbs):\n            print(f\"Adverb: {adverb[0]}, Position: {i}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b(?:[a-z]+[.]?)+\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Use the min() function to find the index of the first adverb\n    first_index = min(range(len(adverbs)), key=lambda i: adverbs[i].split('.')[-1])\n\n    # Return a dictionary with the adverb and its position\n    return {adverbs[first_index]: first_index}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expressions to find the first adverb in each sentence\n    adverbs = ['well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', 'well', '"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area using the formula: (2 x l x w) + (2 x w x h) + (2 x h x l)\n    surface_area = 2 * l * l + 2 * l * l * l + 2 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    print(surface_area)\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l * l * l\n    return 6 * s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Find the surface area of a square cube with side length l\n    surface_area = 6 * (l**2)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i', [0] * len(nums))\n    neg_arr = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num > 0:\n            pos_arr.itemset(pos_arr.index(num), pos_arr[pos_arr.index(num)] + 1)\n        else:\n            neg_arr.itemset(neg_arr.index(num), neg_arr[neg_arr.index(num)] + 1)\n\n    pos_sum = sum(pos_arr)\n    neg_sum = sum(neg_arr)\n\n    pos_ratio = pos_sum / (pos_sum + neg_sum)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        if num > 0:\n            count.append(1)\n        else:\n            count.append(0)\n    positive_num = sum(count)\n    total_num = len(count)\n    return positive_num/total_num"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n\n    n = len(nums)\n    positive_count = 0\n    positive_sum = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            positive_sum += num\n\n    return positive_count / n if positive_count > 0 else 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i')\n    for num in nums:\n        if num > 0:\n            positive_array.append(num)\n    return len(positive_array) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_sum += num\n    positive_ratio = positive_sum / total_count\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize an empty array to store the positive numbers\n    positives = []\n\n    # iterate through the array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # if it is, add it to the positives array\n            positives.append(num)\n\n    # calculate the ration of positive numbers\n    pos_count = len(positives)\n    total_count = len(nums)\n    ration = pos_count / total_count\n\n    # return the ration\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [num for num in nums if num > 0])\n    num_pos = len(pos_nums)\n    num_neg = len(nums) - num_pos\n    num_zero = len([num for num in nums if num == 0])\n    return (num_pos / num_neg), num_pos, num_neg, num_zero"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n    \n    # Initialize two variables to store the count of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    \n    # Loop through the list of numbers\n    for num in nums_list:\n        # Check if the number is positive or negative\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n    \n    # Return the result as a tuple\n    return (pos_ratio, neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0\n    else:\n        return (neg_count / pos_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n    max_neg = float('-inf') # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0: # check if number is negative\n            if num > max_neg: # if number is greater than max_neg, update max_neg\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    # initialize a variable to keep track of the largest negative number\n    largest = float('-inf')\n    # iterate over the list and check if each element is negative\n    for num in lst:\n        if num < 0:\n            # if the current element is negative, compare it to the current largest\n            if num > largest:\n                largest = num\n    # return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as an input and returns the largest negative number from the list.\n    \"\"\"\n    largest = list1[0]  # initialize largest to the first element of the list\n    \n    for num in list1:\n        if num < 0 and num > largest:  # if a number is negative and greater than largest, update largest\n            largest = num\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf') # initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0 and num > largest: # check if current number is negative and larger than largest\n            largest = num # update largest variable if current number is larger\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    # Initialize largest negative number to be a very large number\n    largest = float('-inf')\n    # Iterate through the list\n    for num in lst:\n        # If the current number is negative and greater than the largest negative number, update largest\n        if num < 0 and num > largest:\n            largest = num\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # get the current tuple\n        current_tuple = test_list[i]\n        # trim the tuple by k elements\n        trimmed_tuple = current_tuple[:K]\n        # replace the current tuple with the trimmed tuple\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][-K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tuple(tup)  # convert the tuple to a list and then back to a tuple\n        tup = tup[:K]  # trim the tuple by K\n        test_list.remove(tup)  # remove the trimmed tuple from the list\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j+K >= len(test_list[i]):\n                del test_list[i][j:]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[:K] + tuple[-K:]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than K\n        if len(tup) > K:\n            # Trim the tuple by k elements and add it to the trimmed list\n            trimmed_list.append(tup[:K])\n        else:\n            # If the length of the tuple is less than or equal to K, add it to the trimmed list as it is\n            trimmed_list.append(tup)\n\n    # Return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: The tuples should have the same length.'\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i]*test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples and append the result to the result list\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n\n    Args:\n    tup: tuple of elements to count\n    lst: list of elements to count in the tuple\n\n    Returns:\n    A dictionary where the keys are the unique elements in the list and the values are their respective counts in the tuple.\n    \"\"\"\n    counts = Counter(tup)\n    return dict(counts)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a Counter object from the list\n    count = Counter(lst)\n\n    # create a dictionary to store the count of each element\n    d = {}\n\n    # loop through the tuple and count the occurrence of each element in the list\n    for elem in tup:\n        if elem in count:\n            d[elem] = count[elem]\n\n    # return the dictionary containing the count of each element in the tuple\n    return d"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    \n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # Convert the tuple to a set so that we can use the Counter method.\n    set_tup = set(tup)\n    \n    # Create a Counter object from the set.\n    counter = Counter(set_tup)\n    \n    # Create an empty dictionary to store the count of each element of the list.\n    count_dict = {}\n    \n    # Iterate through the list and update the count of each element in the count_dict.\n    for elem in lst:\n        if elem in counter:\n            count_dict[elem] = counter[elem]\n    \n    # Return the count_dict.\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup) \n    count = [counter[i] for i in lst] \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple into a set to remove duplicates\n    tup_set = set(tup)\n\n    # Counter function to count the occurrences of each element in the set\n    counter = Counter(tup_set)\n\n    # Count the occurrences of each element in the list\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Combine the count_dict and counter into a single dictionary\n    result = {}\n    for key, value in count_dict.items():\n        result[key] = value + counter[key]\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for item in tup:\n        if item in count:\n            count[item] += 1\n    return count.items()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Using Counter class to count the occurence of elements in the tuple\n    count_dict = Counter(tup)\n\n    # Initialize a list to store the count of each element in the tuple\n    count_lst = []\n\n    # Iterate over the count_dict and count the occurence of each element in the list\n    for key, value in count_dict.items():\n        if key in lst:\n            count_lst.append(value)\n\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input.\n    It returns a dictionary that contains the counts of each element in the list in the tuple.\n    '''\n    count_dict = Counter(tup)\n    return {k: count_dict[k] for k in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = {}\n    for key, value in count.items():\n        if key in lst:\n            count_dict[key] = value\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n        if total_sum > n:\n            break\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    else:\n        p = 1\n        sum = 0\n        for i in range(1, n + 1):\n            sum += p\n            p += 2\n        return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += i**2\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sum(perrin[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    total_sum = 0\n    for num in perrin_nums:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    i = 1 \n    while i <= n: \n        sum += i \n        i += 1 \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** i\n    return sum\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p += 1 / (i * (i + 1))\n    return p\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to calculate.\n\n    Returns:\n    (int): The sum of Perrin numbers.\n    \"\"\"\n\n    # Initialize the sum of Perrin numbers to 0\n    total_sum = 0\n\n    # Calculate the sum of Perrin numbers\n    for i in range(1, n+1):\n        total_sum += i * (2*i - 1)\n\n    # Return the total sum of Perrin numbers\n    return total_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The size of the string to extract.\n\n    Returns:\n        list: A list of extracted string values.\n    \"\"\"\n    extracted_str = []\n    for string in str_list:\n        extracted_str.append(string[:size])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    str_list_new = []\n    for i in range(0, len(str_list), l):\n        str_list_new.append(\" \".join(str_list[i:i+l]))\n    return str_list_new"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the desired strings as inputs\n    and returns a list of the desired size strings extracted from the given list.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer representing the desired size of extracted strings.\n    It returns a list of strings of the specified size extracted from the input list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if i >= l:\n            break\n        extracted_list.append(str_list[i])\n    return extracted_list\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified number of strings from a list of strings.\n\n    Parameters:\n    str_list (list of str): A list of strings.\n    size (int): The number of strings to extract.\n\n    Returns:\n    list of str: A list of strings of length \"size\".\n    \"\"\"\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_strings.append(l[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer value for the size of string to be extracted.\n    It returns a list of strings with the specified size extracted from the original list.\n    '''\n    return [s[i:i+size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to search for all whitespace characters in the given string\n    whitespace_list = pattern.findall(text1)\n    # Remove all whitespace characters from the string using the whitespace_list\n    text2 = ''.join(whitespace_list)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove all newlines using regex\n    text3 = re.sub(r'\\n+','', text2)\n    # Remove all tabs using regex\n    text4 = re.sub(r'\\t+','', text3)\n    # Remove all extra whitespaces using regex\n    text5 = re.sub(r'\\s+','', text4)\n    # Return the final string\n    return text5"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove whitespaces from the given string\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove any leading or trailing whitespaces\n    text1 = text1.strip()\n    # Return the modified string\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount) / sale_amount\n    if loss_percentage > 0.05:\n        return (actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 10 # Change this to your desired loss percentage\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost * (loss_percent/100)\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    #initialize a variable to store the sum of even factors\n    sumOfFactors = 0\n    \n    #iterate through the numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        \n        #if the number is divisible by i and i is even, add it to the sum of factors\n        if n % i == 0 and i % 2 == 0:\n            sumOfFactors += i\n    \n    return sumOfFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_sum = 0\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n\n    return even_sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n // i!= i:\n                sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, n+1): \n        if n % i == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0:\n        return 'Enter a positive integer'\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    if n % i == 0 and i % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define the regular expression pattern\n    pattern = r'\\w*[zZ]\\w*'\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched text\n    if match:\n        return match.group()\n    # If no match is found, return None\n    return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Regular expression pattern for finding words containing 'z'\n    pattern = r'\\b[a-z]*z\\b'\n    \n    # Use re.findall() to find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b' # match a word containing at least one letter\n    matches = re.findall(pattern, text) # find all matches of pattern in text\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    word_pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    result = re.findall(word_pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[A-Za-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 == 12 or monthnum2 == 1:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum in ['04', '06', '09', '11']:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return 'The month number is divisible by 2, hence it does not contain 31 days'\n    else:\n        if monthnum2 % 4 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 400 == 0:\n                    return 'The month number is divisible by 400, hence it contains 31 days'\n                else:\n                    return 'The month number is divisible by 4, but not by 100, hence it does not contain 31 days'\n            else:\n                return 'The month number is divisible by 4, hence it contains 31 days'\n        else:\n            return 'The month number is not divisible by 2, hence it does not contain 31 days'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        if monthnum == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[1] = 29\n        return days_in_month[monthnum-1]\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month_num = int(monthnum2)\n    \n    if month_num < 1 or month_num > 12:\n        return \"Invalid month number!\"\n    \n    if month_num in [2, 4, 6, 9, 11]:\n        return \"31 days\"\n    elif month_num == 1 or month_num == 3 or month_num == 5 or month_num == 7 or month_num == 8 or month_num == 10 or month_num == 12:\n        return \"30 days\"\n    else:\n        return \"28 or 29 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    # return the reversed list of strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_sublist = lst[i:j+1]\n            if len(current_sublist) < min_length:\n                min_length = len(current_sublist)\n                min_sublist = current_sublist\n                \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize the minimum length and index of the sublist\n    min_len = lst[0]\n    min_index = 0\n    \n    # Loop through the list and update the minimum length and index if a sublist is found with a smaller length\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    \n    # Return the sublist with the minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    # Find the length of the smallest sublist\n    min_length = len(lst)\n    # Initialize the variable to store the sublist with minimum length\n    min_sublist = []\n    # Iterate over the sorted list and check if the current sublist has a smaller length\n    for i in range(1, len(lst)+1):\n        if len(lst[i:]) < min_length:\n            min_length = len(lst[i:])\n            min_sublist = lst[i-1:]\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the sublist\n    with the minimum length.\n    \"\"\"\n    # initialize min_len as the length of the first sublist\n    min_len = len(lst[0])\n    \n    # loop through all sublists\n    for i in range(len(lst)):\n        # check if the length of the sublist is less than min_len\n        if len(lst[i]) < min_len:\n            # update min_len to the length of the current sublist\n            min_len = len(lst[i])\n    \n    # create an empty list to store the sublist with minimum length\n    min_list = []\n    \n    # loop through all sublists again and add the sublist with min_len to min_list\n    for i in range(len(lst)):\n        if len(lst[i]) == min_len:\n            min_list.append(lst[i])\n    \n    # return min_list\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove uppercase substrings from the string\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression to match uppercase substrings\n    uppercase_pattern = re.compile('[A-Z].*')\n    # Use the pattern to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(uppercase_pattern, str1)\n    # Loop through the uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use the re.findall() function to find all uppercase substrings in the string\n    upper_substrings = re.findall(r'[A-Z]', str1)\n\n    # Use the re.sub() function to replace the uppercase substrings with an empty string\n    str2 = re.sub(r'[A-Z]', '', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    # Using the findall() method to get all the substrings that match the pattern\n    result = pattern.findall(str1)\n    # Using a loop to remove the matched substrings from the original string\n    for substring in result:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # iterate over each uppercase substring and remove it from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    # return the modified string without uppercase substrings\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # Define a regular expression to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Split the string into a list of words\n    words = string.split()\n\n    # Iterate over each word and check if it contains an uppercase substring\n    for i, word in enumerate(words):\n        if pattern.search(word):\n            # If it does, remove it from the list of words and add it to the list of uppercase words\n            words.pop(i)\n            uppercase_words.append(word)\n\n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]{2,}\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if sublist:\n            new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            print(\" \".join(map(str, list1[i:j])))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        return [lst[0]] + combinations_list(lst[1:])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    Find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combinations.append(lst[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Define the empty list to store the combinations\n    combinations = []\n\n    # Define a recursive function to generate all combinations\n    def generate_combinations(lst, combination):\n        if len(lst) == 0:\n            combinations.append(combination)\n            return\n        for i in range(len(lst)):\n            generate_combinations(lst[:i] + lst[i+1:], combination + [lst[i]])\n\n    # Call the recursive function with the original list as argument\n    generate_combinations(list1, [])\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    comb_list = []\n\n    # Loop through the list\n    for i in range(len(list1)):\n\n        # Initialize an empty list to store the rest of the elements\n        rest_list = []\n\n        # Loop through the remaining elements\n        for j in range(len(list1)):\n\n            # If the current element is not equal to the i-th element, add it to the rest list\n            if j!= i:\n\n                # Add the j-th element to the rest list\n                rest_list.append(list1[j])\n\n        # Add the i-th element to the comb_list and the rest list to a new list\n        new_list = [list1[i]] + rest_list\n        comb_list.append(new_list)\n\n    # Return the final list of combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n\n        # Create a list to store the remaining elements\n        remaining = list1[:i] + list1[i+1:]\n\n        # Loop through each element in the remaining list\n        for j in range(len(remaining)):\n\n            # Add the combination to the combinations list\n            combinations.append([list1[i], remaining[j]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Parameters:\n    list1 (list): The list of elements for which to generate combinations.\n\n    Returns:\n    A list of all possible combinations of the elements of the input list.\n\n    Example:\n    >>> combinations_list(['a', 'b', 'c'])\n    ['a', 'b', 'c']\n    >>> combinations_list(['a', 'b', 'c', 'd', 'e'])\n    ['a', 'b', 'c', 'd', 'e']\n    >>> combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    \"\"\"\n\n    # Use a nested loop to generate all possible combinations of the list elements.\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            yield lst[i:j]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    max_so_far = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array, find the maximum product subarray.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    int: maximum product subarray\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        else:\n            curr_product *= num\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = max_ending_here\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(max_ending_here * num, num)\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables for the maximum subarray found so far and its value\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Iterate over the array and update the maximum subarray found so far and its value\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if current_product < 0:\n            current_product = 1\n        current_product *= num\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The given array.\n\n    Returns:\n    int: The maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    return all(dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input, where n is the number of keys in the dictionary.\n    It returns True if all the values of the dictionary are the same as the first value, else False.\n    '''\n    for i in range(1, n):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        for i in range(len(dict)):\n            if i == len(dict)-1:\n                if dict[i] == dict[0]:\n                    return True\n            else:\n                if dict[i]!= dict[i+1]:\n                    return False\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # loop through the dictionary\n    for value in dict.values():\n        # check if all values are same\n        if value!= dict.values()[0]:\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get all the values of the dictionary\n    values = list(dict.values())\n    # Check if all the values are same\n    if all(values[0] == val for val in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for key in dict:\n        if value is None:\n            value = dict[key]\n        elif dict[key]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through all the values in the dictionary\n    for value in dict.values():\n        # Check if all values are same\n        if len(set(value))!= 1:\n            return False\n    # If all values are same, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {key: value for key, value in dict1.items() if value is not None and value!= \"\"}\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    # Initialize variables\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here and min_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # create an array to store the maximum product of increasing subsequences\n    max_product_arr = [0] * (n+1)\n    \n    # initialize the maximum product of an increasing subsequence to be 1\n    max_product_arr[1] = 1\n    \n    # iterate through the array from 2 to n\n    for i in range(2, n+1):\n        \n        # if the current element is greater than the previous element, update the max_product_arr\n        if arr[i-1] > arr[i-2]:\n            max_product_arr[i] = arr[i-1] * max_product_arr[i-1]\n        else:\n            max_product_arr[i] = arr[i-2] * max_product_arr[i-2]\n            \n    # return the maximum product of an increasing subsequence\n    return max_product_arr[-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    max_so_far = max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first row\n    for i in range(n):\n        dp[0][i] = arr[i]\n\n    # Initialize the first column\n    for i in range(1, n):\n        dp[i][0] = max(arr[0], arr[i])\n\n    # Fill the rest of the table\n    for i in range(1, n):\n        for j in range(1, n):\n            if arr[j] > arr[i-1]:\n                dp[i][j] = max(dp[i-1][j], arr[i] * dp[i][j-1])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Find the maximum product in the last column\n    max_product = 0\n    for i in range(1, n):\n        max_product = max(max_product, arr[i-1] * dp[i][n-1])\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    n = len(arr)\n    max_ending_here = 1\n    max_so_far = 1\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            max_ending_here *= arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        else:\n            max_ending_here = 1\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return 1\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * min_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * max_ending_here)\n\n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            if max_ending_here < min_ending_here:\n                max_ending_here = min_ending_here\n        else:\n            max_ending_here = max_so_far\n\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            if max_ending_here < min_ending_here:\n                min_ending_here = max_ending_here\n        else:\n            min_ending_here = max_so_far\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    max_product_so_far = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # If the current number is greater than the previous number, multiply the current product and the number and update the variables\n        if num > arr[max_product_so_far]:\n            current_product *= num\n            max_product_so_far = max_product_so_far if num > max_product_so_far else num\n        # If the current number is less than the previous number, multiply the current product by 1 and update the variables\n        else:\n            current_product = 1\n            max_product_so_far = max_product_so_far if num > max_product_so_far else num\n        \n        # Update the maximum product if the current product is greater\n        max_product = current_product if current_product > max_product else max_product\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1]*n\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1]*(arr[i])\n        else:\n            dp[i] = dp[i-1]*(arr[i])\n    \n    max_product = max(dp)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_ending_here *= arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        else:\n            max_ending_here = 1\n            \n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable to 0\n    sum_pairwise = 0\n    # Loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup) - 1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    # Return the sum of the pairwise additions\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if input is a tuple\n    if type(test_tup)!= tuple:\n        print(\"Input must be a tuple\")\n        return\n    \n    # check if input is of length 2\n    if len(test_tup)!= 2:\n        print(\"Input tuple must have length 2\")\n        return\n    \n    # initialize variables for the pairwise addition\n    result = 0\n    count = 0\n    \n    # iterate through the tuple and add the pairwise elements\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result += test_tup[i] + test_tup[j]\n            count += 1\n    \n    # print the result and the number of pairwise additions performed\n    print(\"The pairwise addition of the neighboring elements of the tuple is:\", result)\n    print(\"Number of pairwise additions:\", count)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the variables for the current and previous elements\n    current = test_tup[0]\n    prev = test_tup[0]\n    # initialize the sum to 0\n    total_sum = 0\n    # loop through the tuple and add the pairwise sums\n    for i in range(1, len(test_tup)):\n        next = test_tup[i]\n        # add the current and next elements together\n        total_sum += current + next\n        # set the previous element as the current element\n        current = next\n        # set the previous element as the next element\n        prev = next\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)-1):\n        result += test_tup[i] + test_tup[i-1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        test_tup[i] += test_tup[i+1]\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None # check if the tuple has at least 2 elements\n    \n    # initialize the result and the pointers to the first and second elements of the tuple\n    result = test_tup[0]\n    first = test_tup[0]\n    second = test_tup[1]\n    \n    # iterate over the tuple and calculate the sum of the neighboring elements\n    for i in range(2, len(test_tup)):\n        result += second\n        # update the pointers to the next pair of elements\n        first = second\n        second = test_tup[i]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Get the length of the tuple and the index of the first element\n    tup_len = len(test_tup)\n    first_index = 0\n    \n    # Initialize an empty list to store the pairwise sums\n    pairwise_sum_list = []\n    \n    # Loop through the tuple and calculate the pairwise sums\n    for i in range(1, tup_len):\n        # Calculate the pairwise sum and append it to the list\n        pairwise_sum = test_tup[i] + test_tup[i-1]\n        pairwise_sum_list.append(pairwise_sum)\n    \n    # Return the list of pairwise sums\n    return pairwise_sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(x + y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments, arr and n, and finds the product of their array \n    multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in an array `arr` and an integer `n`.\n    The function finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        if product >= n:\n            product -= n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Multiply all elements of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments:\n    arr: list of integers, the array to find the product of\n    n: integer, the modulo value to use\n\n    The function returns the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array arr and the value n, and returns the remainder of the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize the variables\n    consecutive = True\n    prev_num = l[0]\n\n    # Loop through the list\n    for num in l:\n        # Check if the number is consecutive\n        if num == prev_num + 1:\n            prev_num = num\n        else:\n            consecutive = False\n            break\n\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an argument and returns True if all the numbers in the list are consecutive, and False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize variables to store the last two numbers of the list\n    prev_num = 0\n    curr_num = 0\n    \n    # Iterate through the list\n    for num in l:\n        # If the current number is less than the previous number, then the list contains consecutive numbers\n        if num < prev_num:\n            return True\n        # Update the previous and current numbers\n        prev_num = curr_num\n        curr_num = num\n    \n    # If the end of the loop is reached, then the list does not contain consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks if a list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0]!= l[1]:\n        return True\n    else:\n        for i in range(2, len(l)):\n            if l[i]!= l[i-1] + 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all the numbers in the list are consecutive, \n    else it returns False.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if not l:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] + 1 == l[1]:\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] + 1 == l[i+1]:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection between the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection back to a list and return\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Loop through each tuple in the first list\n    for tup1 in test_list1:\n        # Loop through each tuple in the second list\n        for tup2 in test_list2:\n            # Check if each tuple is a subset of the other\n            if tup1 <= tup2 and tup2 <= tup1:\n                # If it is, add the tuple to the common set\n                common_elements.add(tup1)\n                break  # Only need to compare one tuple to the second list\n        \n    # Convert the set to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a dictionary to store unique elements of list1\n    unique_list1 = {}\n    for item in test_list1:\n        if item in unique_list1:\n            unique_list1[item] += 1\n        else:\n            unique_list1[item] = 1\n    \n    # create a dictionary to store unique elements of list2\n    unique_list2 = {}\n    for item in test_list2:\n        if item in unique_list2:\n            unique_list2[item] += 1\n        else:\n            unique_list2[item] = 1\n    \n    # find the intersection of unique elements from both lists\n    intersection = {}\n    for key in unique_list1:\n        if key in unique_list2:\n            intersection[key] = min(unique_list1[key], unique_list2[key])\n    \n    # return the intersection of unique elements\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create empty set to store unique elements of both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find intersection of sets\n    intersection_set = set1.intersection(set2)\n\n    # create a new list to store the intersection\n    intersection_list = []\n\n    # convert the intersection set to a list and store it in the new list\n    for element in intersection_set:\n        intersection_list.append(element)\n\n    # return the new list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples into a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    common_set = set1.intersection(set2)\n\n    # Convert the common set back into a list of tuples\n    result_list = list(common_set)\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2 and (i not in [j for j in range(len(test_list1)) if test_list1[i] == test_list2[j]]):\n            intersection_list.append(test_list1[i])\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    test_intersection = test_set1.intersection(test_set2)\n    return list(test_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Use a set to remove duplicates from test_list1 and test_list2\n    unique_elements = set(test_list1 + test_list2)\n\n    # Use a list comprehension to find the intersection of unique_elements\n    intersection = [elem for elem in unique_elements if elem in test_list1 and elem in test_list2]\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2 and i not in result:\n            result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Loop through each element in the first list\n    for item1 in test_list1:\n        # Loop through each element in the second list\n        for item2 in test_list2:\n            # Check if the intersection is a tuple\n            if isinstance(item1, tuple) and isinstance(item2, tuple):\n                # Check if both tuples contain the same elements in any order\n                if item1 == item2:\n                    # Add the tuple to the intersection set\n                    intersection.add(item1)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a specified character with a new character in a given string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = ''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            modified_str += newch\n        # otherwise, add the current character to the modified string\n        else:\n            modified_str += str1[i]\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a given string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a given string with a new character.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is equal to the given character to be replaced\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Use a loop to iterate over each character in the string\n    for i in range(len(str1)):\n        # If the current character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter class to count the frequency of values in the dictionary\n    count_dict = Counter(dict1.values())\n\n    # Sort the counter dictionary by values\n    sorted_count_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary from the sorted counter dictionary\n    sorted_dict = {k: v for k, v in sorted_count_dict}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value in ascending order.\n    '''\n\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in ascending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    sorted_dict = {k: v for k, v in sorted_dict}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Count the frequency of each value in the dictionary\n    count = Counter(dict1)\n    \n    # Sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1]))\n    \n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n\n    # initialize variables for largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # loop through the array and update largest and smallest values\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Get the sum of the first and last elements\n    sum1 = nums[0] + nums[-1]\n\n    # Get the sum of the second to last and second-to-last elements\n    sum2 = nums[1] + nums[-2]\n\n    # Return the sum of the two sums\n    return sum1 + sum2"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize the maximum and minimum values to the first and last element of the array\n    max_val = nums[0]\n    min_val = nums[-1]\n\n    # Iterate through the array from the second element to the second-to-last element\n    for i in range(1, len(nums)-1):\n        # Update the maximum and minimum values if a number is greater than or equal to the maximum value\n        if nums[i] >= max_val:\n            max_val = nums[i]\n\n        # Update the minimum value if a number is less than the minimum value\n        if nums[i] < min_val:\n            min_val = nums[i]\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the smallest value in the array\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # Find the largest value in the array\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # Return the sum of the largest and smallest values in the array\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Finding the maximum value in the array\n    max_val = max(nums)\n    # Finding the minimum value in the array\n    min_val = min(nums)\n    # Calculating the sum of the maximum and minimum value\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Given a list of numbers, returns the sum of the largest and smallest values.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b') # regular expression pattern to match lowercase substrings\n    return re.sub(pattern, '', str1) # remove all matches using the're.sub' function"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert all the characters to lowercase\n    str2 = str1.lower()\n    # Remove any substring starting with a lowercase letter\n    pattern = re.compile(r'^[a-z]')\n    str2 = pattern.sub('', str2)\n    # Remove any substring ending with a lowercase letter\n    pattern = re.compile(r'(?<=\\b)[a-z]$')\n    str2 = pattern.sub('', str2)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Using re.findall() method to find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(pattern, str1)\n    # Using list comprehension to remove all the lowercase substrings from the given string\n    new_str = ''.join([char for char in str1 if char.isupper() or char.isspace() or char in lowercase_substrings])\n    # Return the new string without lowercase substrings\n    return new_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings using regular expression\n    pattern = r'[a-z]+'\n    cleaned_string = re.sub(pattern, '', string)\n    return cleaned_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function will remove all lowercase substrings from a given string.\n    '''\n    # create a pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # use re.findall() to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(pattern, string)\n    # loop over the lowercase substrings and remove them from the string\n    for substring in lowercase_substrings:\n        string = re.sub(substring, '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define the pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]')\n    # find all lowercase substrings in the string\n    lower_substrings = pattern.findall(str1)\n    # remove the lowercase substrings from the original string\n    return ''.join([char for char in str1 if char.isupper()])"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'[a-z]+', re.IGNORECASE)\n    return lowercase.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Use the findall() method to find all the substrings in the string that match the pattern\n    substrings = pattern.findall(str1)\n    # Use the join() method to join all the substrings into a single string\n    str2 = pattern.sub('', str1)\n    # Return the modified string without any lowercase substrings\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first = 0\n    while n >= 10:\n        first += n % 10\n        n //= 10\n    first += n\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the number to a string\n    num = str(n)\n    # finding the length of the string\n    length = len(num)\n    # returning the first character of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # To get the first digit, we divide the number by 10, and then take the integer part.\n    first_digit = int(n/10)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 1000 % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    s = str(n)\n    # Convert the string to a list of characters\n    digits = list(s)\n    # Return the first character of the list\n    return digits[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0: # check if the number is odd\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing the variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculating the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculating the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # finding the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    # returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = sum(range(1, n+1))\n\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize variables\n    sum_cubes = 0\n    sum_nums = 0\n    \n    # calculate sum of cubes of natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # calculate sum of natural numbers\n    for i in range(1, n+1):\n        sum_nums += i\n    \n    # find the difference\n    difference = sum_cubes - sum_nums\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of cubes of the first n natural numbers\n    cubes = sum(x**3 for x in range(1, n+1))\n    \n    # Compute the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    \n    # Compute the difference between the two sums\n    difference = cubes - sum_of_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N as input, and returns the number of odd pairs in A.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of size N and returns the count of odd pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes two arrays A and N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    # initialize count variable\n    count = 0\n    \n    # iterate through the arrays and compare each element in A with each element in N\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    \n    # return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_list = []\n    for i in range(N):\n        xor_list.append(A[i] ^ A[(i+1) % N])\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if xor_list[i] % 2!= xor_list[j] % 2:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum += A[i]\n        count += 1\n    odd_pair_count = 0\n    for i in range(N):\n        xor_sum -= A[i]\n        if xor_sum % 2 == 1:\n            odd_pair_count += 1\n    return odd_pair_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    odd_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 1 and (A[i] ^ A[j]) in A:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N): \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(len(N)): \n            if A[i] ^ N[j] % 2 == 1: \n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty list to store the new string\n    new_string = []\n    # loop through each character in the original string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            new_string.append(char.lower())\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            new_string.append(char.upper())\n        # otherwise, leave it as is\n        else:\n            new_string.append(char)\n    # convert the new string back to a string and return it\n    return ''.join(new_string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is a lowercase letter, convert it to uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # if the character is an uppercase letter, convert it to lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the input integers to lists of digits\n    digit_list1 = list(map(int, list(str(n1))))\n    digit_list2 = list(map(int, list(str(n2))))\n    \n    # Calculate the per-digit difference between the two lists\n    diff = [abs(digit_list1[i]-digit_list2[i]) for i in range(len(digit_list1))]\n    \n    # Sum the per-digit differences to get the overall sum of differences\n    total_diff = sum(diff)\n    \n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(10):\n        # Calculate the difference between the two numbers\n        diff = abs(n1 % 10 - n2 % 10)\n        # Add the difference to the distance\n        distance += diff\n        # Divide both numbers by 10 to remove the last digit\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1_digits = list(map(int, str(n1)))\n    num2_digits = list(map(int, str(n2)))\n\n    # Initialize the sum of the per-digit differences\n    diff_sum = 0\n\n    # Loop through each digit in the two lists of digits\n    for i in range(len(num1_digits)):\n        # Subtract the corresponding digits and take the absolute value\n        diff = abs(num1_digits[i] - num2_digits[i])\n        # Add the difference to the sum\n        diff_sum += diff\n\n    # Return the sum of the per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Get the length of the largest number\n    max_length = max(len(str(n1)), len(str(n2)))\n\n    # Create two arrays to store the digits of each number\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the per-digit differences\n    total_sum = 0\n    for i in range(max_length):\n        total_sum += abs(n1_digits[i] - n2_digits[i])\n\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to strings and split into lists of digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = list(map(int, num1_str))\n    num2_list = list(map(int, num2_str))\n    \n    # Calculate the absolute difference between the two numbers\n    abs_diff = abs(num1_list[0] - num2_list[0])\n    \n    # Add up the differences for each digit\n    sum_diff = 0\n    for i in range(1, len(num1_list)):\n        sum_diff += abs(num1_list[i] - num2_list[i])\n        \n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    :param n1: The first integer.\n    :param n2: The second integer.\n    :return: The sum of the per-digit difference between the two integers.\n    \"\"\"\n\n    # Convert the integers to a list of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference between the two integers\n    diff = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    sum_of_differences = 0\n    while difference > 0:\n        sum_of_differences += difference % 10\n        difference //= 10\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    n1_digits = list(map(int, list(str(n1))))\n    n2_digits = list(map(int, list(str(n2))))\n    distance = 0\n    for i in range(1, 10):\n        n1_digit = n1_digits[i-1]\n        n2_digit = n2_digits[i-1]\n        distance += abs(n1_digit - n2_digit)\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Find the number of digits in each integer\n    num1_len = len(str(n1))\n    num2_len = len(str(n2))\n    \n    # Calculate the sum of the absolute differences for each digit in each integer\n    sum_abs_diff = 0\n    for i in range(min(num1_len, num2_len)):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_abs_diff += diff\n        n1 //= 10\n        n2 //= 10\n    \n    # Add up the final absolute differences for the smaller number of digits\n    if num1_len < num2_len:\n        for i in range(num2_len - num1_len):\n            diff = abs(n1 % 10)\n            sum_abs_diff += diff\n            n1 //= 10\n    elif num2_len < num1_len:\n        for i in range(num1_len - num2_len):\n            diff = abs(n2 % 10)\n            sum_abs_diff += diff\n            n2 //= 10\n    \n    return sum_abs_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize variables to hold the digits of the two numbers\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Compute the per-digit difference between the two numbers\n    per_digit_diff = [abs(num1_digits[i] - num2_digits[i]) for i in range(len(num1_digits))]\n\n    # Compute the sum of the per-digit differences\n    total_diff = sum(per_digit_diff)\n\n    return total_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return None\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list of integers and an integer representing the size of the subarray.\n    It finds the maximum sum of a subarray of the given size that starts from the beginning of the list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Iterate over the list\n    for end in range(size):\n        # If the end is the maximum possible, update the maximum sum and reset the start\n        if end == size - 1:\n            if a[end] > 0:\n                max_sum = a[end]\n            else:\n                max_sum = max(max_sum, a[end])\n            start = end + 1\n            current_sum = 0\n        # If the end is not the maximum possible, add the element to the current sum and continue\n        else:\n            current_sum += a[end]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                start = end\n\n    # Return the maximum sum of the contiguous sublist\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum subarray sum and its starting and ending indices\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n\n    # Iterate over the list\n    for i in range(len(a) - size + 1):\n        # Add the current sublist to the current sum\n        current_sum += a[i:i+size]\n\n        # Update the maximum subarray sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n            end_index = i + size - 1\n\n    # Return the maximum subarray sum and its starting and ending indices\n    return max_sum, start_index, end_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size < 1:\n        return 0\n\n    if size == 1:\n        return max(a)\n\n    max_ending_here = max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() to create a set of unique elements from both tuples\n    unique_elements = set(test_tup1) | set(test_tup2)\n    \n    # Converting the set to a list and sorting it\n    sorted_list = sorted(list(unique_elements))\n    \n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(set(test_tup2))\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a new set to store the union of the two input tuples\n    union = set(test_tup1)\n    union.update(test_tup2)\n    \n    # Convert the set back to a sorted list and print it\n    result = sorted(list(union))\n    print(result)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, find the union of the given tuples\n    union = set(test_tup1) | set(test_tup2)\n    # Sort the union in ascending order\n    union = sorted(union)\n    # Return the union\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # remove duplicates\n    unique_tup = list(set(combined_tup))\n\n    # sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n\n    # print the sorted tuple\n    print(\"The union of elements of the two tuples is:\", sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    # Sort the union in ascending order\n    union.sort()\n    # Return the sorted union\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_set = sorted(list(union_set))\n    return union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Step 1: Create a set of elements from both tuples\n    unique_elements = set(test_tup1) | set(test_tup2)\n\n    # Step 2: Convert set to a list and sort it\n    sorted_list = sorted(list(unique_elements))\n\n    # Step 3: Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_len = max(max_len, len(lst[i:j+1]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        sublist = lst[i:]  \n        for j in range(i, len(lst)):  \n            max_length = max(max_length, j-i+1)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        if i > 0 and i % 2 == 0:\n            if len(lst[i]) > longest:\n                longest = len(lst[i])\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of sublists and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            sub_list = lst[i:j+1]  \n            max_length = max(max_length, len(sub_list))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as an input and returns the length of the longest sublist.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        sublist = lst[i]\n\n        # Loop through each element in the sublist\n        for j in range(i, len(lst)):\n            sublist.append(lst[j])\n            max_length = max(max_length, len(sublist))\n            sublist.pop()\n\n    # Return the length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    return max(max_length, current_length)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if j > i+max_length:  \n                max_length = j-i+1  \n            if lst[j] > lst[i]:  \n                print(\"Longest sublist is:\", lst[i:j+1])  \n                return max_length  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  # initialize max_length variable to zero\n    for sublist in lst:  # iterate over each sublist in the list\n        if len(sublist) > max_length:  # if length of current sublist is greater than max_length\n            max_length = len(sublist)  # update max_length to length of current sublist\n    return max_length  # return max_length as output"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list and finds the length of the longest sublists.\n\n    Args:\n        lst (list): The list to find the longest sublists in.\n\n    Returns:\n        int: The length of the longest sublists in the given list.\n    \"\"\"\n\n    # Initialize variables to store the current sublist and its length\n    curr_sublist = []\n    curr_length = 0\n\n    # Iterate through the list\n    for item in lst:\n        # If the item is not in the current sublist, add it to the sublist\n        if item not in curr_sublist:\n            curr_sublist.append(item)\n            curr_length += 1\n        # If the item is already in the current sublist, update its length\n        else:\n            # While the item is still in the sublist, continue iterating\n            while item in curr_sublist:\n                curr_length += 1\n                item = lst.pop(lst.index(item))\n            # After iterating, update the sublist to the current item\n            curr_sublist = [item]\n\n    # Return the maximum length\n    return curr_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?:(?!\\1).)*?(?=\\1)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of values that are between quotation marks.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # matches double quotes and captures the value between them\n    matches = re.findall(pattern, text) # find all occurrences of pattern in text\n    return matches # return all matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\s)\".*?(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    # creating a dictionary to store the frequency of elements in the list\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    # calculating the number of pairs by iterating through all possible pairs of elements\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += freq[arr[i]] * freq[arr[j]]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Loop through each character in the string\n    for char in word:\n        # Print the character\n        print(char)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to zero\n    total = 0\n    # Loop through the list of digits and add them to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each character in the string\n    for c in s:\n        # Convert each character to an integer and add it to the sum\n        sum += int(c)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Loop through each character of the string\n    for digit in num_str:\n        # Convert the character to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and then split it into a list of digits\n    digits_list = [int(d) for d in str(n)]\n    # use the built-in sum() function to get the sum of the digits in the list\n    return sum(digits_list)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    # initialize the sum variable\n    sum = 0\n\n    # loop through each digit of the input number\n    while n > 0:\n        # extract the last digit from the input number\n        digit = n % 10\n\n        # add the digit to the sum\n        sum += digit\n\n        # remove the last digit from the input number\n        n = n // 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string and then iterate over each character and add it to a running total\n    total = 0\n    while n > 0:\n        total += int(n % 10)\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and iterate over each character\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Sum the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize a variable to hold the sum of the digits\n    sum = 0\n    # Loop through each digit and add it to the sum\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    if len(lst) <= 1:\n        return True\n    if lst[0] < lst[1]:\n        return False\n    for i in range(1, len(lst) - 1):\n        if lst[i] < lst[i - 1] or lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted in ascending order, False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted or not.\n\n    Args:\n    lst (list): The list to check for sorting.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    if len(lst) > 1:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the given list of lists\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # loop through each list in the input list of lists\n    result = []\n    for lst in nums:\n        # convert the sublist to a set to remove duplicates\n        unique_set = set(lst)\n        # convert the set back to a list\n        unique_list = list(unique_set)\n        # append the unique list to the result list\n        result.append(unique_list)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Parameters:\n        nums (list): a list of lists of integers\n\n    Returns:\n        list: a list of unique integers from all lists\n    \"\"\"\n\n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in nums for num in sublist]\n\n    # Remove duplicates from the flat list\n    unique_nums = list(set(all_nums))\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    \n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n            if len(unique_nums) > 2:\n                break\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Remove duplicates from the lists using set() function\n    unique_nums = set(nums)\n\n    # Convert the set back to a list\n    unique_nums_list = list(unique_nums)\n\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each list in the input list\n    for lst in nums:\n        # Add each number in the list to the set\n        unique_nums.update(lst)\n\n    # Convert the set back to a list\n    unique_nums_list = list(unique_nums)\n\n    # Sort the list in ascending order\n    unique_nums_list.sort()\n\n    # Return the sorted list\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store unique numbers and their counts\n    unique_dict = {}\n    # loop through each list in the nums list\n    for num_list in nums:\n        # loop through each number in the list and add it to the dictionary if it is not already there\n        for num in num_list:\n            if num not in unique_dict:\n                unique_dict[num] = 1\n            else:\n                # if the number is already in the dictionary, increment its count\n                unique_dict[num] += 1\n    # create a new list to store the unique numbers\n    unique_list = []\n    # loop through the dictionary and add the unique numbers to the new list\n    for num in unique_dict:\n        if unique_dict[num] == 1:\n            unique_list.append(num)\n    # return the new list of unique numbers\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_duplicates(nums):\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique values\n    unique_set = set()\n    # iterate through each list in the input list\n    for num_list in nums:\n        # iterate through each value in the current list\n        for value in num_list:\n            # add the value to the set if it is not already in the set\n            if value not in unique_set:\n                unique_set.add(value)\n    # create a new list with the unique values\n    result_list = []\n    for value in unique_set:\n        result_list.append(value)\n    return result_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # create a set of unique numbers\n    product = 1 # initialize the product to 1\n    \n    for num in unique_numbers:\n        product *= num # multiply the product by each unique number\n        \n    return product # return the product of unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a set to store unique numbers from the input list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # convert list to set to get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n\n    Parameters:\n    list_data (list): The list of numbers to be processed.\n\n    Returns:\n    float: The product of the unique numbers in the list.\n    \"\"\"\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    # create a set to remove duplicates\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    \n    # Calculating the surface area of the cylinder using the formula A = \u03c0r\u00b2h\n    A = math.pi * (r ** 2) * h\n    \n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # A = \u03c0r\u00b2 + 2\u03c0rh\n    # where A is the surface area of the cylinder, r is the radius of the cylinder,\n    # and h is the height of the cylinder.\n    # Import the math module to use the mathematical constant pi.\n    import math\n    pi = math.pi\n    area = pi * r**2 + 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    #   S = 2*pi*r*h\n    # Using radii and heights in inches\n    area = 2 * 3.14159 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Radius of cylinder\n    r = float(r)\n    # Height of cylinder\n    h = float(h)\n    # Calculate volume of cylinder\n    vol = (1/3) * math.pi * r**2 * h\n    # Calculate surface area of cylinder\n    area = 2 * math.pi * r**2 + 2 * math.pi * r * h\n    # Return surface area of cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # SA = 2*pi*r*h\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the base\n    surface_area_base = 2 * r * h\n\n    # Calculate the surface area of the top\n    surface_area_top = 2 * r * r * 3.14159\n\n    # Return the sum of the two surface areas\n    return surface_area_base + surface_area_top"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    :param r: radius of the cylinder\n    :type r: float\n    :param h: height of the cylinder\n    :type h: float\n    :return: surface area of the cylinder\n    :rtype: float\n    \"\"\"\n    # formula for the surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    volume = math.pi * r**2 * h\n    surface_area = 2 * area\n    volume_of_cylinder = volume\n    return surface_area, volume_of_cylinder"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if B.count(A[i]) > 0:\n            j = 0\n            for k in range(i, len(A) - len(B) + i):\n                if A[k] == B[j]:\n                    j += 1\n                if j == len(B):\n                    return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    else: \n        for i in range(len(A)): \n            if A[i] not in B: \n                return False \n        return True "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    if A.count(B[0]) >= B.count(A[0]) and A.count(B[-1]) >= B.count(A[-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if not isinstance(A, list):\n        raise TypeError(\"Input A must be a list.\")\n    if not isinstance(B, list):\n        raise TypeError(\"Input B must be a list.\")\n\n    for x in B:\n        if x not in A:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists as input and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if len(A) >= len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    elif len(A) == 0:\n        return True\n    else:\n        for i in range(len(B)):\n            if A[0] == B[i]:\n                if is_Sub_Array(A[1:], B[i:]) == True:\n                    return True\n                else:\n                    return False\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    for i in range(len(B)):\n        if B[i] in A:\n            if A.count(B[i]) == B.count(B[i]):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list.\n    '''\n    # check if the first list is a sublist of the second list or not\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of its factorial.\n    \"\"\"\n    # Convert integer to string\n    str_n = str(n)\n    # Find the length of the string\n    length = len(str_n)\n    # Convert the first digit to integer\n    first_digit = int(str_n[0])\n    # Calculate the last digit of factorial\n    last_digit = first_digit**(length-1)\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # Find the factorial of the number\n    while n > 0:\n        factorial *= n\n        n -= 1\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # convert the number to a string\n    n = str(n)\n\n    # initialize the last digit as 0\n    last_digit = 0\n\n    # loop through the string from right to left\n    for i in range(len(n)-1, -1, -1):\n        # convert the current digit to integer and add it to the last digit\n        last_digit += int(n[i])\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit in the factorial of that number.\n    \"\"\"\n    # initialize the result variable to store the last digit of the factorial\n    result = 0\n    \n    # loop through the digits of the input number until we reach the last digit\n    for i in str(n):\n        result = int(i)\n        \n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Get the last digit of the factorial\n    factorial = [i for i in range(1, n+1)]\n    last_digit = factorial[-1] % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of its factorial.\n\n    Examples:\n    >>> last_Digit_Factorial(5)\n    5\n    >>> last_Digit_Factorial(12345)\n    5\n    \"\"\"\n    # Initializing the variable to store the last digit of factorial\n    last_digit = 0\n    # Initializing the variable to store the factorial of the input number\n    factorial = 1\n    \n    # Looping through each digit of the input number\n    while n > 0:\n        # Extracting the last digit of the factorial\n        last_digit = n % 10\n        # Adding the last digit to the factorial\n        factorial = factorial * last_digit\n        # Removing the last digit from the input number\n        n = n // 10\n    \n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n    \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate through the lists and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    \n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        result.append(list1[index1])\n        result.append(list2[index2])\n        result.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    \n    if index1 < len(list1):\n        result.extend(list1[index1:])\n    if index2 < len(list2):\n        result.extend(list2[index2:])\n    if index3 < len(list3):\n        result.extend(list3[index3:])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to hold the resulting interleaved list\n    interleaved_list = []\n    # Loop through each item in each list and append them to the interleaved list in the order specified\n    for item in list1:\n        interleaved_list.append(item)\n    for item in list2:\n        interleaved_list.append(item)\n    for item in list3:\n        interleaved_list.append(item)\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single flat list with all elements interleaved.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # concatenate the lists\n    flat_list = list1 + list2 + list3\n    \n    # remove duplicates\n    return list(set(flat_list))"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the final result\n    result = []\n    \n    # Initialize two pointers for each list\n    i, j, k = 0, 0, 0\n    \n    # Loop through each element in the lists and append to the result list\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        i += 1\n        result.append(list2[j])\n        j += 1\n        result.append(list3[k])\n        k += 1\n    \n    # If the last list is shorter than the remaining elements, append its elements to the result list\n    if i < len(list1):\n        result.extend(list1[i:])\n    elif j < len(list2):\n        result.extend(list2[j:])\n    else:\n        result.extend(list3[k:])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of equal length and returns a single flat list that contains all the elements of all three lists.\n    \"\"\"\n    # create an empty list to hold the interleaved elements\n    interleaved_list = []\n    \n    # iterate through each list, adding its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements between the two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a list of all the elements in the first tuple\n    all_elements = list(test_tup1)\n    \n    # Remove all the elements in the second tuple that are also in the first tuple\n    for element in test_tup2:\n        if element in test_tup1:\n            all_elements.remove(element)\n    \n    # Return the list of dissimilar elements\n    return all_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # iterate through the first tuple\n    for item1 in test_tup1:\n        # check if the item is present in the second tuple\n        if item1 not in test_tup2:\n            # if not, add it to the dissimilar list\n            dissimilar_list.append(item1)\n\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a set to store the dissimilar elements\n    dissimilar = set()\n    \n    # Loop through the items in both tuples\n    for item in test_tup1 + test_tup2:\n        # If the item is already in the dissimilar set, add it to the result set\n        if item in dissimilar:\n            dissimilar.add(item)\n        # If the item is not in the dissimilar set, add it to the set\n        else:\n            dissimilar.add(item)\n    \n    # Return the dissimilar set as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_tuple.extend(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.append(even_fnc(i))\n        else:\n            result.append(i)\n    return result\n\ndef remove_uneven_in_tuple(test_tuple):\n    return even_ele(test_tuple, remove_uneven_in_tuple)\n\ndef remove_even(test_tuple):\n    return even_ele(test_tuple, lambda x: x % 2 == 0)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def remove_uneven(lst):\n        return [x for x in lst if even_fnc(x)]\n\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = remove_uneven(test_tuple[i])\n\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(item) for item in test_tuple if type(item) == tuple]\n\ndef is_even(item):\n    '''\n    Create a helper function to check if an element is even or not.\n    '''\n    return item % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n\ndef even_fnc(x):\n    '''\n    Define a function to check if a number is even.\n    '''\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for i in test_tuple:\n        if type(i) in [list, tuple]:\n            even_tuple.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_tuple.append(i)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for item in test_tuple:\n        if not even_fnc(item):\n            uneven_list.append(item)\n    return uneven_list\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface = 0.5 * base * height\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b*s)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2 # calculating the area of the pyramid\n    return area # returning the calculated surface area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s * 2\n    print(\"Surface Area:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the area of each triangle\n    area_t1 = b*b\n    area_t2 = b*s\n    area_t3 = s*s\n\n    # Adding the areas of the three triangles to get the total area of the pyramid\n    surface_area = area_t1 + area_t2 + area_t3\n\n    # Returning the total surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the area of a square by multiplying its sides\n    area = b * b\n\n    # Find the area of the pyramid by adding the area of the base and the height times the area of a square\n    pyramid_area = area + s * b * b\n\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n\n    # Calculate the length of the base of the pyramid\n    base_len = 2 * b\n\n    # Calculate the height of the pyramid\n    pyramid_height = 2 * s - b\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = (base_len * pyramid_height) / 2\n\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes in a dictionary and returns True if it is empty and False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if dict1 == {}:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an input parameter and returns True if the dictionary is empty, False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    def catalan(n):\n        \"\"\"\n        Helper function to calculate catalan number using recursion.\n        \"\"\"\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return catalan(n//2) * 4\n        else:\n            return (2*catalan(n//2) + 1) / 2\n\n    return catalan(n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan_numbers = [0] * (num + 1)\n    catalan_numbers[0], catalan_numbers[1] = 1, 1\n    for i in range(2, num + 1):\n        catalan_numbers[i] = (i * catalan_numbers[i - 1]) // (i - 1)\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula: C(n,k) = binomial(n,k) * C(n-1,k-1)\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 1\n        for k in range(2, n+1):\n            c *= (k * (n-k+1)) // k\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n\n    :param n: Integer, the position of the Catalan number to be returned.\n    :return: Integer, the nth Catalan number.\n    \"\"\"\n    # Initialize the factorials array\n    factorials = [1] * (n + 1)\n    factorials[0] = 1\n    factorials[1] = 1\n\n    # Calculate the factorials\n    for i in range(2, n + 1):\n        factorials[i] = factorials[i - 1] * i\n\n    # Calculate the nth Catalan number\n    return factorials[n] // (factorials[n - 1] * factorials[n - 2])"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (factorial(2*n) // factorial(n) // factorial(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = 0\n    for i in range(n+1):\n        catalan += (1/(2*i+1)) * (1/(2*i))\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(catalan[-1] + catalan[-2])\n    return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(2, num+1):\n            result += ((2*num-1) * i) // i\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * 2 * (n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b\\s+'\n    \n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return a list of tuples containing the adverb and its positions in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = re.compile(r'\\b\\w+ly\\b')\n\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples with the adverb and its position in the input string\n    if matches:\n        return [(match, text.index(match)) for match in matches]\n\n    # If there are no matches, return None\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(pattern, text)\n    \n    for match in matches:\n        print(match.start(), match.end())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Use a loop to print the matches and their positions in the text\n    for match in matches:\n        print(f\"{match} found at position {text.find(match)}\")\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[lL]y\\b', text)\n    return adverbs, [m.start() for m in re.finditer(r'\\b[lL]y\\b', text)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.start(), match.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples, where each tuple contains the adverb and its positions in the input string.\n    '''\n    # define regex pattern to find adverbs ending with 'ly'\n    pattern = r'\\b(ly)\\b'\n\n    # use regex to find all occurrences of adverbs in the input string\n    matches = re.findall(pattern, text)\n\n    # iterate over matches and append tuples with adverb and positions to a list\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb: {match.group()}\\nPositions: {match.span()}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(er|est|ing|ly|s|t)\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Create a dictionary to store the positions of each adverb found\n    adverbs = {}\n    \n    # Loop through the matches and add the positions to the dictionary\n    for match in matches:\n        index = text.index(match)\n        adverbs[index] = match\n    \n    # Return the dictionary of adverb positions\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and an integer n and returns a list of the n most expensive items.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_items = set(items)\n\n    # Use a max heap to keep track of the n most expensive items\n    max_heap = []\n    for item in unique_items:\n        heapq.heappush(max_heap, item)\n\n    # Get the n most expensive items from the max heap\n    n_most_expensive = []\n    for i in range(n):\n        n_most_expensive.append(heapq.heappop(max_heap))\n\n    return n_most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items list to a heap (priority queue)\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)  # Push the negative price of the item onto the heap\n    \n    # Extract the top n items from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items: a list of dictionaries representing items in the dataset. Each dictionary should have two keys: \"price\" and \"item\".\n    - n: an integer indicating the number of most expensive items to find.\n\n    Returns:\n    - A list of dictionaries representing the n most expensive items in the dataset. Each dictionary should have two keys: \"price\" and \"item\".\n    \"\"\"\n\n    # Sort the items by price in descending order\n    items.sort(key=lambda x: x['price'], reverse=True)\n\n    # Return the first n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items into a min heap (which will automatically sort it)\n    heap = [(-item[1], item[0]) for item in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items and return them as a list\n    return [item[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the dataset based on their value in ascending order\n    sorted_items = sorted(items, key=lambda x: x[1])\n\n    # Create a min-heap of size n and add the first n elements of the sorted dataset\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, sorted_items[i])\n\n    # Extract the n-1 elements from the heap and add them to the min-heap\n    for i in range(n, len(sorted_items)):\n        heapq.heappush(heap, sorted_items[i])\n\n    # Extract the n most expensive items from the heap and return them\n    return [heapq.heappop(heap)[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min-heap to store the n most expensive items\n    min_heap = []\n    # Iterate over the items and add them to the heap if they are cheaper than the last item in the heap\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        elif len(min_heap) < n:\n            heapq.heappushpop(min_heap, item)\n        # If the heap is full, take the top item and add it to the min_heap again\n        if len(min_heap) == n:\n            min_heap[0] = heapq.heappop(min_heap)\n    # Return the n most expensive items in the heap\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    \n    # Loop through the items and add each item to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the size of the min heap exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items in a list\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and an integer n, find the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # Remove the least expensive item from the heap and add the next n items\n    for i in range(n, len(items)):\n        # Check if the next item is cheaper than the least expensive item in the heap\n        if items[i] < heap[0]:\n            # If it is, update the least expensive item and remove the next least expensive item from the heap\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items: A list of tuples, where each tuple contains the value of an item\n            and its corresponding price. The items should be sorted by price in\n            descending order.\n        n: An integer, specifying the number of items to be returned.\n\n    Returns:\n        A list of the n most expensive items in the dataset, sorted in descending order\n        by price.\n    \"\"\"\n    # Create a min heap with the first n elements from the sorted dataset\n    min_heap = []\n    for i in range(n):\n        min_heap.append(heapq.heappop(items))\n\n    # Build the heap by inserting the remaining elements from the sorted dataset\n    for item in items:\n        if item[1] > min_heap[0][1]:\n            heapq.heappushpop(min_heap, item)\n\n    # Return the n most expensive items\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    heap = []\n    # Iterate over the items and push them into the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # If the heap size exceeds n, pop the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        raise ValueError(\"n should be positive\")\n    if n >= len(l):\n        return [l]\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return \"Error: n is out of range.\"\n    elif n == 0:\n        return [l[n:]]\n    else:\n        return [l[0]] + split_Arr(l[1:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is a valid index in the list\n    if n > len(l) or n < 0:\n        return \"Invalid index\"\n    \n    # Split the list at index n\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Concatenate the first part and second part to create a new list\n    result = first_part + second_part\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.append(l[n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l\n    else:\n        new_list = l[:n]\n        new_list.extend(split_Arr(l[n:], n))\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return [l[0]]\n    elif n == len(l):\n        return [x for x in l]\n    else:\n        mid = n // 2\n        left = split_Arr(l[:mid], n)\n        right = split_Arr(l[mid:], n)\n        return left + [l[mid]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: list length is less than n.\"\n    else:\n        l.insert(n, l[:n])\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        return [l[0]]\n    else:\n        return [l[0]] + split_Arr(l[n:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError(\"Index out of range\")\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the difference between largest and smallest values\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n\n    min_val = nums[0]\n    max_val = nums[0]\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least 2 elements.\"\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Calculate the difference between the second last element and the last element\n    return nums[-2] - nums[-1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 'Empty list'\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the minimum value in the list\n    min_num = min(nums)\n\n    # Finding the maximum value in the list\n    max_num = max(nums)\n\n    # Finding the difference between minimum and maximum values in the list\n    diff = max_num - min_num\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    if len(nums) < 2:\n        return \"The list must contain at least two numbers.\"\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return abs(largest - smallest)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i):\n            if i**2 == j**2:\n                print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a and b are valid input values\n    if a <= 0 or b <= 0:\n        return \"Invalid input value. Please enter positive integers.\"\n    # check if a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # initialize a and b as 1 since we want to start with the square of 1\n    a, b = 1, 1\n    \n    # initialize sum and count\n    sum = 0\n    count = 0\n    \n    # check if a is less than b\n    while a < b:\n        # check if the sum of squares of a and b is greater than b\n        if a + b > b:\n            # add a to the sum and increment count\n            sum += a\n            count += 1\n            # set a as the square of b\n            a = b * b\n        else:\n            # add the sum of squares of a and b to the sum and increment count\n            sum += a + b\n            count += 2\n            # set b as the square of a\n            b = a * a\n    \n    # return the count of perfect squares in the given range\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num = i * i\n        print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Iterate through all numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        sqrt_num = int(num**0.5)\n        if sqrt_num**2 == num:\n            # Append the perfect square to the list\n            perfect_squares_list.append(sqrt_num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n\n        # Check if the number is a perfect square\n        square = num ** 0.5\n        if int(square) ** 2 == num:\n\n            # If it is a perfect square, add it to the list\n            perfect_squares_list.append(int(square))\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i*i\n        if i+square == b:\n            return square\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_square_list = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_square_list.append(i)\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initializing variables\n    x = a\n    y = b\n    max_x = a\n    max_y = b\n    \n    # finding maximum possible square\n    while max_x < b:\n        max_x = max_x + max_x\n    \n    # finding the maximum square that is less than or equal to max_x and greater than or equal to x\n    while max_x > x:\n        max_y = max_x - x\n        if perfect_square(max_y):\n            return max_y\n        max_x = max_x - 1\n        \n    # if no perfect squares are found, return None\n    return None\n\ndef perfect_square(n):\n    '''\n    Check if a number is a perfect square.\n    '''\n    # initializing variables\n    a = n\n    b = 0\n    c = 0\n    \n    # finding the square root of a using Newton's method\n    while abs(b - a) > 1:\n        c = (a + b) / 2\n        b = c\n        if c*c == a:\n            return True\n        if c*c > a:\n            a = c\n        else:\n            b = c\n    return False"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a list to store the perfect squares between a and b\n    perfect_squares_list = []\n\n    # loop through the range of b-a+1\n    for i in range(b-a+1):\n        # calculate the square of the current number\n        square = i*i\n        # check if the square is between a and b\n        if square >= a and square <= b:\n            # add the square to the list if it is within the range\n            perfect_squares_list.append(square)\n\n    # return the list of perfect squares between a and b\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \n    Args:\n    - r (float): radial component of the vector\n    - theta (float): angle of the vector (in radians)\n    \n    Returns:\n    - x (float): rectangular x component\n    - y (float): rectangular y component\n    \"\"\"\n    \n    # Convert angle to radians\n    theta = theta * cmath.pi / 180.0\n    \n    # Calculate rectangular components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle to radians\n    angle = x*cmath.pi/180.0\n    \n    # Calculate rectangular coordinates\n    r = abs(y)\n    theta = angle\n    \n    # Return rectangular coordinates as a tuple\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    # Return rectangular coordinates\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the circle in the x-direction.\n    y (float): The radius of the circle in the y-direction.\n\n    Returns:\n    (float, float): A tuple containing the x and y coordinates of the point.\n    \"\"\"\n\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return x_rect.real, y_rect.real"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radial distance from the origin.\n    theta (float): The angle in radians.\n    \n    Returns:\n    x (float): The rectangular x-coordinate.\n    y (float): The rectangular y-coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n\nr = float(input(\"Enter the radius: \"))\ntheta = float(input(\"Enter the angle in radians: \"))\n\nx, y = polar_rect(r, theta)\nprint(\"The x coordinate is\", x)\nprint(\"The y coordinate is\", y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return None\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements\"\n    \n    # Swapping the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Access the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Swap the first and last elements of the list\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    # if the list has less than two elements, return the original list\n    if len(newList) < 2:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two parameters n and k, which are integers, representing the number of terms and the starting term of the series, respectively. It then returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to zero\n    sum_term = 0\n\n    # Iterate through each term of the series\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient\n        coeff = (n-i+1) * (i) // (i-k+1)\n\n        # Add the product of the consecutive binomial co-efficients to the sum\n        sum_term += coeff\n\n    return sum_term"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_product = 0\n    \n    # Loop through the range of k values from 0 to n-k\n    for i in range(k, n+1):\n        \n        # Compute the binomial coefficient using the formula n! / (k! * (n-k)!)\n        coeff = (n-k+i) * binomial_Coeff(n-1,i-1)\n        \n        # Add the coefficient to the sum\n        sum_product += coeff\n        \n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize variables\n    sum_product = 0\n    coeff_product = 1\n\n    # Calculate the first binomial coefficient\n    if k > 0:\n        coeff_product = 1\n        for i in range(1, k+1):\n            coeff_product *= (n-i+1)\n            coeff_product //= i\n        sum_product += coeff_product\n\n    # Calculate the remaining binomial coefficients\n    if n > 0:\n        for i in range(1, n-k+1):\n            coeff_product = 1\n            for j in range(1, k+1):\n                coeff_product *= (n-i+1)\n                coeff_product //= i\n                coeff_product *= j\n                coeff_product //= (i-j+1)\n            sum_product += coeff_product\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return \"n must be a positive integer\"\n\n    # Check if k is less than or equal to 0\n    if k <= 0:\n        return \"k must be a positive integer\"\n\n    # Check if k is greater than n\n    if k > n:\n        return \"k must be less than or equal to n\"\n\n    # Initialize the sum variable\n    sum_product = 0\n\n    # Loop through the range of k+1 values of binomial coefficient\n    for i in range(k + 1):\n        # Calculate the binomial coefficient\n        b = math.comb(n, i)\n\n        # Calculate the product of the i-th binomial coefficient and the previous k-i+1 binomial coefficients\n        product = b * binomial_Coeff(n - 1, k - i)\n\n        # Add the product to the sum\n        sum_product += product\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function calculates the sum of the product of consecutive binomial coefficients.\n    '''\n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k > n:\n        return 0\n    else:\n        return (binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    :param n: integer, the value of n in the binomial formula\n    :param k: integer, the value of k in the binomial formula\n    :return: float, the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if n == 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_of_products = 0\n    for i in range(k, n + 1):\n        term1 = 1\n        term2 = 1\n        for j in range(1, i + 1):\n            term1 *= (i - j + 1)\n            term2 *= j\n        sum_of_products += term1 * term2\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_product = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i >= j:\n                sum_product += i // j * (j ** (i - j))\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize a variable to store the sum of products of consecutive binomial co-efficients\n    sum_of_products = 0\n\n    # Initialize a variable to store the product of binomial co-efficients\n    product_of_binomial_coeffs = 1\n\n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # Calculate the factorial of n-k\n    factorial_n_k = 1\n    for i in range(1, n-k+1):\n        factorial_n_k *= i\n\n    # Calculate the product of binomial co-efficients\n    product_of_binomial_coeffs = factorial_n_k // factorial_k * factorial_n // factorial_n_k\n\n    # Calculate the sum of products of consecutive binomial co-efficients\n    for i in range(k, n+1):\n        sum_of_products += product_of_binomial_coeffs\n        product_of_binomial_coeffs *= factorial_n // (factorial_n - i)\n\n    return sum_of_products"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the IP address\n    ip = re.sub('^0+', '', ip)\n    # If the IP address is empty, return None\n    if not ip:\n        return None\n    # Return the cleaned up IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and returns the IP address with leading zeroes removed.\n    '''\n\n    # Remove leading zeroes from IP address\n    ip = re.sub(r'^0+', '', ip)\n    \n    # Return the modified IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address\n    ip = re.sub(r'^\\d+\\.?\\d*\\.\\d+\\.?\\d*\\Z', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and returns the IP address with leading zeroes removed.\n    '''\n\n    # Remove leading zeros from each octet\n    ip = re.sub('^0+', '', ip)\n\n    # Remove leading zeros from the entire IP address\n    ip = re.sub('^0+', '', ip, flags=re.IGNORECASE)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|\\s+$', '', ip) # remove leading and trailing spaces\n    ip = re.sub(r'(\\d)\\.(\\d)\\.(\\d)\\.(\\d)', r'\\1.\\2.\\3.\\4', ip) # replace consecutive zeros with single zeros\n    ip = re.sub(r'(\\.0\\.){3}\\.0', r'', ip) # remove trailing zeros\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0)+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    if not re.match(ip_pattern, ip):\n        raise ValueError(\"Invalid IP address\")\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            ip_list[i] = ''\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'(\\d+)', ip)\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0' and i!= 0:\n            ip_list.pop(i)\n    ip_str = '.'.join(ip_list)\n    return ip_str"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r\"^0*(?:\\d+\\.\\d+){3}$\", \"\", ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = []\n    odd_first = []\n    for i in list1:\n        if i % 2 == 0:\n            even_first.append(i)\n        else:\n            odd_first.append(i)\n    diff = abs(even_first[0] - odd_first[0])\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_num is None:\n                even_num = list1[i]\n            else:\n                break\n        elif list1[i] % 2 == 1:\n            if odd_num is None:\n                odd_num = list1[i]\n            else:\n                break\n    if even_num is None or odd_num is None:\n        return None\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return odd_num - even_num\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - first_odd\n        \n        elif first_odd is None:\n            first_odd = num\n        else:\n            return first_odd - first_even\n    \n    return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the length of the list is greater than or equal to 2\n    if len(list1) < 2:\n        return \"List must have at least 2 elements to calculate the difference.\"\n    else:\n        # Loop through the list and find the first even and first odd numbers\n        even_num = None\n        odd_num = None\n        for num in list1:\n            if num % 2 == 0:\n                if even_num is None:\n                    even_num = num\n                else:\n                    return \"The difference of the first even and first odd numbers cannot be calculated.\"\n            else:\n                if odd_num is None:\n                    odd_num = num\n                else:\n                    return \"The difference of the first even and first odd numbers cannot be calculated.\"\n        # Return the difference between the first even and first odd numbers\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes in a list of integers and returns the difference of the first even and first odd number.\n    '''\n    even_number = list1[0]\n    odd_number = list1[1]\n    diff = even_number - odd_number\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    if even_num > odd_num:\n        return even_num - odd_num\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even number\n    even_index = 0\n    while list1[even_index] % 2!= 0:\n        even_index += 1\n    if even_index == len(list1):\n        return \"There is no even number in the list.\"\n    else:\n        first_even = list1[even_index]\n\n    # Find the first odd number\n    odd_index = 0\n    while list1[odd_index] % 2 == 0:\n        odd_index += 1\n    if odd_index == len(list1):\n        return \"There is no odd number in the list.\"\n    else:\n        first_odd = list1[odd_index]\n\n    # Calculate the difference\n    diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    # Find the first even number\n    even_idx = next((i for i, x in enumerate(lst) if x % 2 == 0), None)\n    if even_idx is None:\n        return None\n    \n    # Find the first odd number\n    odd_idx = next((i for i, x in enumerate(lst) if x % 2!= 0), None)\n    if odd_idx is None:\n        return None\n    \n    # Return the difference\n    return lst[even_idx] - lst[odd_idx]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list contains at least two numbers\n    if len(list1) < 2:\n        return \"List should contain at least two numbers.\"\n    \n    # Check if all the numbers in the list are integers\n    for num in list1:\n        if not isinstance(num, int):\n            return \"All the numbers in the list should be integers.\"\n    \n    # Find the first even number\n    even_found = False\n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_num = num\n            even_found = True\n    \n    # Find the first odd number\n    odd_found = False\n    for num in list1:\n        if num % 2!= 0 and not odd_found:\n            odd_num = num\n            odd_found = True\n    \n    # Return the difference if both numbers are found\n    if even_found and odd_found:\n        return even_num - odd_num\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Make the two binary strings with leading zeros in case they are different lengths\n    if len(str1) < len(str2) : \n        str2 = '0'*(len(str2)-len(str1))+str2\n    else:\n        str1 = '0'*(len(str1)-len(str2))+str1\n\n    # Convert the strings to integers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate through the digits of the two binary strings\n    for i in range(len(str1)):\n        \n        # If the digits are different, swap them\n        if num1 % 2!= num2 % 2:\n            min_swaps += 1\n\n        # Shift the digits to the left\n        num1 //= 2\n        num2 //= 2\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the two binary numbers to decimal numbers \n    num1 = int(str1, 2) \n    num2 = int(str2, 2) \n\n    # calculate the difference between the two numbers \n    diff = num1 - num2 \n\n    # count the number of swaps required to convert the two numbers \n    swaps = 0 \n    while diff!= 0: \n        if diff & 1 == 1: \n            diff = (diff - 1) >> 1\n            swaps += 1\n        else: \n            diff = diff >> 1\n\n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert both strings to integers\n    n1, n2 = map(int, str1), map(int, str2)\n    \n    # initialize variables to keep track of the minimum swaps and the count of swaps made\n    min_swaps = float('inf')\n    count = 0\n    \n    # iterate through the binary strings\n    for i in range(len(n1)):\n        # if the digits are different, swap the digits and continue to the next iteration\n        if n1[i]!= n2[i]:\n            # calculate the number of swaps required\n            num_swaps = abs(n1[i] - n2[i])\n            \n            # update the minimum number of swaps if necessary\n            if num_swaps < min_swaps:\n                min_swaps = num_swaps\n            \n            # add the number of swaps to the count\n            count += num_swaps\n            \n            # if the count becomes negative, break out of the loop\n            if count < 0:\n                break\n    \n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # swap the two numbers until they become the same\n    count = 0\n    while num1!= num2:\n        if num1 < num2:\n            num1 = (num1 << 1) + 1\n            count += 1\n        else:\n            num2 = (num2 << 1) + 1\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # convert both integers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    # initialize variables for counting swaps\n    count1, count2 = 0, 0\n    # loop through the binary strings and count swaps\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            if bin1[i] == '0' and bin2[i] == '1':\n                count1 += 1\n            elif bin1[i] == '1' and bin2[i] == '0':\n                count2 += 1\n    # return the minimum number of swaps\n    return min(count1, count2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary strings to binary lists\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n\n    # Initialize variables\n    n1 = len(list1)\n    n2 = len(list2)\n    swaps = 0\n    i = 0\n    j = 0\n\n    # Compare binary lists and count number of swaps required\n    while i < n1 and j < n2:\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        else:\n            j += 1\n            swaps += 1\n\n    # Return number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one to the other.\n    '''\n    # initialize a dictionary to store the count of 1's in each binary number\n    count1 = {}\n    count2 = {}\n\n    # iterate through the characters in each binary number\n    for char in str1:\n        # if the character is 1, increment the count of 1's in count1 dictionary\n        if char == '1':\n            count1[str1.count(char)] = count1.get(str1.count(char), 0) + 1\n        # if the character is 0, increment the count of 0's in count2 dictionary\n        else:\n            count2[str2.count(char)] = count2.get(str2.count(char), 0) + 1\n\n    # find the minimum number of swaps required to convert count1 to count2\n    min_swaps = 0\n    for i in range(1, len(str1) + 1):\n        if count1[i] > count2[i]:\n            min_swaps += count1[i] - count2[i]\n        elif count1[i] < count2[i]:\n            min_swaps += count2[i] - count1[i]\n        else:\n            min_swaps += 0\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # convert strings to lists of bits\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # initialize variables to keep track of swaps\n    swap_count = 0\n    i = 0\n    \n    while i < len(list1) and i < len(list2):\n        if list1[i]!= list2[i]:\n            # swap characters at positions i and i+1\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n            list2[i], list2[i+1] = list2[i+1], list2[i]\n            swap_count += 1\n        i += 1\n    \n    # initialize variables to keep track of remaining bits\n    remain_bits = 0\n    if i < len(list1):\n        remain_bits = len(list1) - i\n    if i < len(list2):\n        remain_bits = min(remain_bits, len(list2) - i)\n    \n    # check if there are any remaining bits in the strings\n    if remain_bits > 0:\n        # perform a total of ceil(remain_bits/2) swaps\n        swap_count += ceil(remain_bits/2)\n    \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Check if both strings have the same length\n    if len(str1)!= len(str2):\n        return \"Strings must have the same length.\"\n    # Initialize a dictionary to store the frequency of each digit in str1\n    freq = {}\n    for digit in str1:\n        freq[digit] = freq.get(digit, 0) + 1\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n    # Iterate through each pair of digits in the strings\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Check if the frequency of the first digit in str1 is greater than the frequency of the second digit in str2\n            if freq.get(str1[i], 0) > freq.get(str2[i], 0):\n                # Decrement the frequency of the second digit in str2 by 1\n                freq[str2[i]] -= 1\n                # Increment the frequency of the first digit in str1 by 1\n                freq[str1[i]] += 1\n            else:\n                # Increment the frequency of the first digit in str1 by 1\n                freq[str1[i]] += 1\n    # Check if the frequency of any digit in str1 is greater than 0\n    for digit in freq:\n        if freq[digit] > 0:\n            # Check if the frequency of the digit in str1 is 1\n            if freq[digit] == 1:\n                # Check if the digit in str1 is less than the digit in str2\n                if str1[digit] < str2[digit]:\n                    # Increment the minimum number of swaps required\n                    min_swaps = 0\n            else:\n                # Increment the minimum number of swaps required by the number of times the digit in str1 is greater than 1\n                min_swaps += freq[digit] - 1\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert both strings into binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Swap the bits of the numbers\n    swaps = 0\n    while num1!= num2:\n        if num1 < num2:\n            num1 = (num1 << 1) ^ 0x37\n        else:\n            num2 = (num2 << 1) ^ 0x37\n        swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setcheckinterval(10**6)  # Set a small check interval to avoid infinite recursion\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            size += tuple_size(item)\n        else:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple_obj in tuple_list:\n        for item in tuple_obj:\n            total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size += sys.getsizeof(elem)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to hold the size of the tuple\n    size = 0\n    \n    # Loop through each element in the tuple\n    for element in tuple_list:\n        # Add the size of the element to the total size\n        size += sys.getsizeof(element)\n    \n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        k -= 1\n    else:\n        if k == 1:\n            return arr2[j]\n        k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1 # Swap arrays to make sure arr1 is longer\n    low = 0\n    high = len(arr1) - 1\n    while low <= high and k > 0:\n        mid = (low + high) // 2\n        if arr1[mid] < arr2[mid]:\n            if k == mid + 1:\n                return arr2[mid]\n            else:\n                high = mid - 1\n        else:\n            if k == mid + 1:\n                return arr1[mid]\n            else:\n                low = mid + 1\n        k -= 1\n    return None # If k is out of bounds"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the length of the two arrays\n    m = len(arr1)\n    n = len(arr2)\n\n    # initialize two pointers, one for each array\n    i = j = 0\n\n    # while both pointers are less than k, compare the elements at the pointers\n    while i < m and j < n and k > 0:\n        if arr1[i] < arr2[j]:\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            i += 1\n            j += 1\n\n    # if there are still elements left in one of the arrays, return the remaining elements\n    if i < m:\n        return arr1[i:]\n    else:\n        return arr2[j:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Find the length of the smallest array\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    # Initialize variables for finding kth element\n    left, right = 0, len(arr1) - 1\n    kth_index = k - 1\n\n    # Iterate through the smaller array\n    while left <= right:\n        # Calculate the midpoint of the current subarray\n        mid = (left + right) // 2\n\n        # If the midpoint element is in the first array,\n        # update the left index\n        if arr1[mid] < arr2[0]:\n            left = mid + 1\n\n        # If the midpoint element is in the second array,\n        # update the right index\n        elif arr1[mid] > arr2[0]:\n            right = mid - 1\n\n        # If the midpoint element is in both arrays,\n        # check if its the kth element\n        else:\n            # If k is 1, return the midpoint element\n            if k == 1:\n                return arr1[mid]\n\n            # If k is greater than 1, recursively find the kth element\n            # in the subarrays to the left and right of the midpoint\n            else:\n                # Find the index of the kth element in the left subarray\n                left_kth = find_kth(arr1[mid:], arr2, k)\n\n                # If the kth element is found, return the kth element\n                if left_kth is not None:\n                    return arr1[mid - len(arr2) + 1 + left_kth]\n\n                # If the kth element is not found, update the right index\n                else:\n                    right = mid - 1\n\n    # If k is greater than the length of the first array,\n    # return None\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length.\")\n    if k < 1 or k > len(arr1):\n        raise ValueError(\"k must be between 1 and the length of the first array.\")\n    \n    i = 0\n    j = 0\n    kth_index = -1\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            kth_index = i\n            i += 1\n        elif arr1[i] > arr2[j]:\n            kth_index = j\n            j += 1\n        else:\n            kth_index = i\n            i += 1\n            j += 1\n            \n    if kth_index == -1:\n        raise ValueError(\"kth element not found.\")\n    \n    return arr1[kth_index]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    \n    if k == 1:\n        return arr1[i]\n    elif k == len(arr2):\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    # convert the number to a string\n    num_str = str(num)\n    # initialize the sum to 0\n    sum_of_powers = 0\n    # loop through each digit of the number\n    for digit in num_str:\n        # add the power of the digit to the sum\n        sum_of_powers += int(digit) ** len(num_str)\n    # check if the sum of powers equals the original number\n    return num == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    total = 0\n    temp = num\n    \n    while num > 0:\n        digit = num % 10\n        total += digit ** 3\n        num //= 10\n    \n    if total == num:\n        print(f'{num} is an Armstrong Number.')\n    else:\n        print(f'{num} is not an Armstrong Number.')"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    if n < 10:\n        return False\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return s == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(d) for d in str(number)]\n\n    # Calculate the sum of the cube of each digit\n    cube_sum = sum([d**3 for d in digits])\n\n    # Compare the sum with the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = n\n    sum = 0\n    power = len(str(num))\n    \n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num //= 10\n        \n    if n == sum:\n        return True\n    else:\n        return False\n    \nnum = int(input(\"Enter a number: \"))\nif is_armstrong(num):\n    print(num, \"is an Armstrong number.\")\nelse:\n    print(num, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function returns True if the given number is an armstrong number, and False otherwise.\n    \"\"\"\n    # convert the number to a string and reverse it\n    reversed_number = str(n)[::-1]\n\n    # initialize variables for sum of digits, sum of squares of digits, and the length of the number\n    sum_of_digits = 0\n    sum_of_squares = 0\n    length = len(reversed_number)\n\n    # loop through each digit in the number\n    for digit in reversed_number:\n        # convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n\n        # calculate the square of the digit and add it to the sum of squares of digits\n        square_of_digit = int(digit) ** 2\n        sum_of_squares += square_of_digit\n\n    # check if the sum of digits is equal to the sum of squares of digits\n    if sum_of_digits == sum_of_squares:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** len(number_str)\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the given number to a string and calculate the sum of the squares of its digits\n    digits_sum = sum([int(digit) ** len(str(number)) for digit in str(number)])\n\n    # Check whether the sum is equal to the original number\n    if digits_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n //= 10\n    return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(n):\n    # Convert the number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the sum of the cubes of the individual digits\n    sum_of_cubes = sum([digit ** 3 for digit in digits])\n\n    # Return True if the sum of cubes is equal to the original number, otherwise False\n    return sum_of_cubes == n\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n and returns a tuple containing the sum of the first n natural numbers and the average.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    sum_of_numbers = sum(sum_list)\n    average = sum_of_numbers / len(sum_list)\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_val = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_val += i\n        count += 1\n    average = sum_val / count\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum_val)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    return total, count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer number as input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first character with a frequency of 2\n    for char, freq in char_freq.items():\n        if freq == 2:\n            return char\n    \n    # if no character has a frequency of 2, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = {}\n    for char in str1:\n        if char in seen:\n            return char\n        seen[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in that string.\n\n    Parameters:\n    str1 (str): A string containing characters.\n\n    Returns:\n    str: The first repeated character in the input string.\n\n    \"\"\"\n    # create a dictionary to store the count of each character in the input string\n    char_count = {}\n\n    # loop through the characters in the input string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if the character is already in the dictionary, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # loop through the characters in the input string again\n    for char in str1:\n        # check if the character is in the dictionary and its count is greater than 1\n        if char in char_count and char_count[char] > 1:\n            # if the character is in the dictionary and its count is greater than 1, return the character\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through each character in the string again and check if the count is greater than 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # initialize an empty dictionary to store the frequency of each character\n    freq = {}\n    \n    # loop through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # loop through the string again and find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n            \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given integer is a lucid number or not.\n    \"\"\"\n    return is_prime(n) and is_prime(sum_of_digits(n))\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given integer is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"\n    Calculate the sum of digits of a given integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(2, n+1):\n        if i in lucid_set:\n            continue\n        for j in range(i+1, n+1):\n            if j in lucid_set:\n                continue\n            if i*j > n:\n                break\n            lucid_set.add(i*j)\n    return list(lucid_set)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while True:\n        if i*i > n:\n            break\n        if i > 1:\n            j = i\n            while j*j <= n:\n                if j > 1:\n                    if i*j*j <= n:\n                        lucid_numbers.append(i*j*j)\n                j += 1\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if all(int(str(j)[i-1]) == int(str(j)[i-1]) for j in range(2, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if len(str(i)) == 1 or (len(str(i)) == 2 and i!= 7):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i**2 + j**2 == k**2:\n                    lucid_numbers.append(i**2 + j**2 + k**2)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store lucid numbers\n    lucid_nums = []\n\n    # Loop through all numbers from 1 to n-1\n    for num in range(1, n):\n\n        # Check if the number is a lucid number\n        lucid_num = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                lucid_num = False\n                break\n\n        # If the number is a lucid number, append it to the list\n        if lucid_num:\n            lucid_nums.append(num)\n\n    # Return the list of lucid numbers\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    current_num = 1\n\n    while current_num <= n:\n        if is_lucid(current_num):\n            lucid_numbers.append(current_num)\n        current_num += 1\n\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Return True if a given integer is a lucid number, False otherwise.\n    \"\"\"\n    return sum([int(digit) ** 3 for digit in str(num)]) == num"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a number is a lucid number.\n    '''\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string with spaces separating them\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words = words[::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # convert the string to a list of words\n    words = s.split()\n    # reverse the list of words\n    reversed_words = words[::-1]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list and join them back into a string\n    reversed_words =''.join(reversed(word) for word in words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    \n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # join the reversed words back into a string\n    result =''.join(words)\n    \n    # return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2.\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number.\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the above condition is not satisfied, then the number is a prime number.\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the given integer is a prime number,\n    otherwise, it returns False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    '''\n    Check if a given integer n is a prime number or not.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is 2\n    if num == 2:\n        return True\n\n    # check for factors between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # if the loop completes without finding any factors, the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Found literal: {literal}, start index: {start_index}, end index: {end_index}\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        \n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there are any matches\n    if not matches:\n        return None, None, None\n    # Find the start and end indices of the first match\n    start = matches[0].start()\n    end = matches[-1].end()\n    # Extract the substring containing the match\n    substring = text[start:end]\n    # Return the substring, start and end indices\n    return substring, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.findall to search for all occurrences of the pattern in the text and return a list of tuples containing the substring, start index, and end index\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        # Extract the first match and return it as a tuple of the matching substring, start index, and end index\n        match = matches[0]\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # loop through all matches and return the substrings, start indices and end indices\n    for match in matches:\n        match_str = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        yield match_str, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern = re.compile(pattern)\n    \n    # Find all matches in the text\n    matches = pattern.finditer(text)\n    \n    # Iterate over the matches and return the matching substrings, start indices, and end indices\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        literal = match.group()\n        yield literal, start_index, end_index"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = (1 + 1/(12*n-1))**n\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return (2 ** n) * (n * bell_Number(n - 1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        bell_num = 0\n        for i in range(1, n+1):\n            bell_num = bell_num + 1 / math.factorial(i)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n*(n-1)*(2*n-1)/6)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(list1[L-1])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    elif L < 1 or L > len(list1):\n        return []\n    else:\n        k = L\n        while k < len(list1):\n            list1.pop(k)\n            k += 1\n        return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Check if the length of the list is less than or equal to the k'th element index\n    if len(list1) <= L:\n        return []\n\n    # Create a new list with the elements from the first k elements to the last element\n    new_list = list1[:L]\n\n    # Create a new list with the elements from the k+1'th element to the last element\n    rest_of_list = list1[L:]\n\n    # Concatenate the two new lists to get the desired result\n    return new_list + rest_of_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create an empty list to store the output\n    output = []\n    \n    # Loop through the input list\n    for i in range(len(list1)):\n        # If the current index is not equal to L, add the element to the output list\n        if i!= L:\n            output.append(list1[i])\n            \n    return output"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[0])\n    for i in range(1, len(L)):\n        list1.remove(L[i])\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list of lists is a valid matrix\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"The input is not a valid matrix\")\n    \n    # Check if N is valid\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"N is not a valid value\")\n    \n    # Initialize the max value to zero\n    max_value = 0\n    \n    # Iterate over each row in the matrix\n    for row in test_list:\n        # Get then'th value from the row\n        nth_value = row[N-1]\n        \n        # Update the max value if the nth value is greater\n        if nth_value > max_value:\n            max_value = nth_value\n            \n    # Return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        for j in range(len(test_list[i])):\n            if j!= N-1:\n                test_list[i][j] = 0\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the matrix\n    num_rows = len(test_list)\n    \n    # Get the length of the second list in the matrix\n    num_cols = len(test_list[0])\n    \n    # Check if N is valid\n    if N > num_cols:\n        print(\"Error: N is greater than the number of columns in the matrix.\")\n        return None\n    \n    # Find then'th column\n    column = [row[N-1] for row in test_list]\n    \n    # Find the maximum value in the column\n    max_val = max(column)\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the maximum value and the index of the maximum value\n    max_val = float('-inf')\n    max_idx = -1\n    \n    # loop through each row in the matrix and calculate the value of then'th column\n    for row in test_list:\n        if N-1 < len(row) and N-1 < max_idx or N-1 > max_idx:\n            max_val = max(max_val, row[N-1])\n            max_idx = N-1\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N - 1:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()  # Sort the list in ascending order\n    max_num = 0  # Initialize max_num with 0\n    for i in range(len(test_list)):\n        max_num = max(max_num, test_list[i][N-1])  # Calculate max of nth column\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    This function takes a matrix as input and returns the maximum value of the Nth column.\n\n    Args:\n        matrix: A list of lists containing the matrix.\n        N: An integer representing the Nth column.\n\n    Returns:\n        The maximum value of the Nth column.\n    '''\n    # Get the length of the first row of the matrix\n    m = len(matrix)\n    # Initialize an empty list to store the maximum value of each column\n    max_col = []\n    # Loop through each row of the matrix\n    for i in range(m):\n        # Get the value of the Nth column\n        col_val = matrix[i][N-1]\n        # Append the maximum value to the list of maximum values of each column\n        max_col.append(col_val)\n    # Return the maximum value of the Nth column\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    # Get the length of the first row in the matrix\n    first_row_len = len(test_list[0])\n    # Check if N is valid\n    if N > first_row_len:\n        return None\n    # Initialize the max value to be the first element of the first row\n    max_val = test_list[0][N - 1]\n    # Loop through the remaining rows and columns\n    for i in range(1, num_rows):\n        for j in range(N - 1):\n            # Check if the current element is greater than the max value so far\n            if test_list[i][j] > max_val:\n                max_val = test_list[i][j]\n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        test_list[i][N-1] = max_val\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the length of the row is equal to the given Nth column index\n        if len(row) == N:\n            # Find the maximum value in the Nth column of the row\n            max_val = max(row[N-1])\n            # Return the maximum value\n            return max_val\n    # If no maximum value is found, return None\n    return None"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for i in lst:\n        if len(i) == 2:\n            result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    \"\"\"\n    # Creating empty lists to store the merged lists\n    merged_lists = []\n    \n    # Looping through the given list of lists\n    for i in range(len(lst)):\n        # Looping through the first element of each sublist\n        for j in range(len(lst[i])):\n            # If the first element of the sublist is smaller than the current merged list,\n            # appending the current sublist and the first element to the merged list\n            if lst[i][j] < merged_lists[len(merged_lists)-1][0]:\n                merged_lists.append([lst[i][j], lst[i][j+1]])\n            # If the current merged list is empty or the first element of the sublist is greater than the current merged list's second element,\n            # appending the current sublist and the first element to the merged list\n            elif len(merged_lists) == 0 or lst[i][j] > merged_lists[len(merged_lists)-1][1]:\n                merged_lists.append([lst[i][j], lst[i][j+1]])\n    \n    # Returning the merged lists\n    return merged_lists"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the cumulative sum\n    cumsum_list = []\n\n    # Iterate through the given tuple list\n    for item in test_list:\n        # If the current item is an integer, add it to the cumulative sum list\n        if isinstance(item, int):\n            cumsum_list.append(item)\n        # If the current item is a tuple, recursively call the cummulative_sum() function on the tuple\n        elif isinstance(item, tuple):\n            cumsum_list.append(cummulative_sum(item))\n        # If the current item is a list, recursively call the cummulative_sum() function on the list\n        elif isinstance(item, list):\n            cumsum_list.append(cummulative_sum(item))\n\n    # Return the cumulative sum list\n    return cumsum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        # append the current value to the cumulative sum\n        cum_sum += test_list[i][1]\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Iterate through the tuple list\n    for num in test_list:\n\n        # Add the current number to the cumulative sum\n        cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    \n    # Iterate through the tuple list\n    for tup in test_list:\n        # Add the first element of the tuple to the cumulative sum\n        cumulative_sum += tup[0]\n        \n        # Iterate through the remaining elements of the tuple and add each one to the cumulative sum\n        for i in range(1, len(tup)):\n            cumulative_sum += tup[i]\n            \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i, value in enumerate(test_list):\n        cumulative_sum += value\n        if i!= len(test_list) - 1:\n            cumulative_sum += test_list[i+1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for element in test_list:\n        cumulative_sum += element\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the average values\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for num_tuple in nums:\n        # Initialize a variable to hold the sum of all values in the tuple\n        total = 0\n        # Loop through each value in the tuple and add it to the total\n        for value in num_tuple:\n            total += value\n        # Calculate the average of the values in the tuple and append it to the average list\n        avg_list.append(total/len(num_tuple))\n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values for each tuple\n    avg_list = []\n\n    # iterate over each tuple in the input tuple\n    for tup in nums:\n        # calculate the sum of the values in the tuple\n        total = sum(tup)\n        # calculate the average value for the tuple\n        avg = total / len(tup)\n        # add the average value to the list of average values\n        avg_list.append(avg)\n\n    # return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averaged_list.append(avg)\n    return averaged_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num in nums:\n        sum_num = sum(num)\n        averages.append(sum_num / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple using the sum function and the len function\n        avg = sum(tup)/len(tup)\n        # Append the average to the avg_list\n        avg_list.append(avg)\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # convert the input tuple into a list of lists\n    num_list = list(nums)\n\n    # calculate the average for each sublist\n    avg_list = []\n    for sublist in num_list:\n        avg = sum(sublist) / len(sublist)\n        avg_list.append(avg)\n\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the list\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup)/len(tup)\n        # Add the average to the list\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        num_list = list(num_tuple)\n        sum = 0\n        for num in num_list:\n            sum += num\n        avg = sum/len(num_list)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum_num = sum(num)\n        average = sum_num/len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of the same length.\")\n        return None\n    else:\n        return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    \n    Args:\n        test_tup1 (tuple): The first tuple to perform the modulo operation on.\n        test_tup2 (tuple): The second tuple to perform the modulo operation on.\n    \n    Returns:\n        tuple: The result of the modulo operation on the input tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"Error: The types of the elements in the two tuples are not the same.\")\n            return\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] % test_tup2[i]),)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match.\")\n        return None\n    else:\n        return tuple(tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    left, right = 0, steps - 1\n    \n    while left <= right:\n        if left + d <= right:\n            left += d\n            count += 1\n        elif left < right:\n            right -= 1\n            count += 1\n            \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Number of possible directions to reach (d, 0) from origin\n    directions = [(0, -1), (-1, 0), (0, 1), (1, 0)]\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = steps\n    prev_i, prev_j = 0, 0\n\n    # Check all possible directions\n    while i < j:\n        for direction in directions:\n            new_i = i + direction[0]\n            new_j = j + direction[1]\n\n            if new_i >= 0 and new_i < steps and new_j == 0:\n                # Update count if new point is closer to (d, 0)\n                if abs(new_i) + abs(new_j) < abs(prev_i) + abs(prev_j):\n                    count += 1\n\n                # Update previous coordinates\n                prev_i, prev_j = new_i, new_j\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n\n    if d > steps:\n        return -1\n\n    jumps = 0\n    temp_steps = steps\n    while temp_steps > 0:\n        if temp_steps >= d:\n            jumps += 1\n            temp_steps -= d\n        else:\n            jumps += 1\n            temp_steps -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0 or d <= 0:\n        return -1\n\n    # Create a list to store the minimum jumps required for each step\n    jumps = [0] * (steps+1)\n\n    # Start with first step\n    jumps[0] = 0\n\n    # Fill the remaining steps\n    for i in range(1, steps+1):\n        # Calculate the minimum jumps required for the next step\n        min_j = d * jumps[i-1] + 1\n        if min_j <= steps:\n            jumps[i] = min_j\n        else:\n            break\n\n    # Return the minimum jumps required\n    return jumps[steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i][0] < d:\n            d -= steps[i][0]\n            jumps += 1\n        else:\n            d = 0\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps_taken = 0\n    prev_x = 0\n    prev_y = 0\n    \n    # Loop until all steps have been taken\n    while steps_taken < steps:\n        # Check if current position is reachable with current steps\n        if steps_taken + prev_x >= d:\n            # Reach destination, update variables and break out of loop\n            steps_taken += d\n            prev_x = d\n            prev_y = 0\n            break\n        \n        # Calculate number of steps required to reach destination\n        steps_required = d - steps_taken - prev_x\n        \n        # Check if it is possible to reach destination with current steps\n        if steps_taken + steps_required >= d:\n            # Reach destination, update variables and break out of loop\n            steps_taken += steps_required\n            prev_x = steps_required\n            prev_y = 0\n            break\n        \n        # Calculate number of steps required to reach destination with current steps\n        steps_required = d - steps_taken - prev_x\n        \n        # Check if it is possible to reach destination with current steps\n        if steps_required <= 0:\n            # Reach destination, update variables and break out of loop\n            steps_taken += d\n            prev_x = d\n            prev_y = 0\n            break\n        \n        # If it is not possible to reach destination with current steps, move to next position\n        prev_x += 1\n        prev_y += 1\n    \n    # Return number of jumps required\n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    j = 0\n    num_jumps = 0\n\n    while j < steps:\n        num_jumps += 1\n        if j == steps - 1:\n            break\n        if i == 0:\n            j += 1\n        else:\n            i -= 1\n            j += 1\n\n    return num_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reachable(x, y, d):\n    return abs(x) + abs(y) <= d"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments, steps and d.\n    steps: The number of steps required to reach the point of form (d, 0) from origin\n    d: The distance from the origin to the point of form (d, 0)\n    \n    This function returns the minimum number of jumps required to reach the point of form (d, 0) from origin.\n    \n    The function first calculates the number of jumps required to reach the point (d+1, 0) from the origin.\n    It then checks if the remaining number of steps is greater than or equal to the number of jumps required to reach the point (d+1, 0).\n    If it is, then it returns the minimum of the number of jumps required to reach the point (d, 0) from the origin and the number of jumps required to reach the point (d+1, 0) from the origin.\n    If not, then the function returns the number of jumps required to reach the point (d, 0) from the origin.\n    \n    The base case is when the remaining number of steps is less than or equal to zero. In this case, the function returns zero.\n    \"\"\"\n    \n    # Base case\n    if steps <= 0:\n        return 0\n    \n    # Calculate number of jumps required to reach (d+1, 0) from origin\n    jumps_to_point_d_plus_one = min_Jumps(steps-1, d+1)\n    \n    # Check if remaining number of steps is greater than or equal to number of jumps required to reach (d+1, 0) from origin\n    if steps >= jumps_to_point_d_plus_one:\n        return min(jumps_to_point_d_plus_one, min_Jumps(steps, d))\n    else:\n        return jumps_to_point_d_plus_one"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    jumps = 0\n    start = (0, 0)\n    end = (d, 0)\n    \n    # check if the start point is valid\n    if steps > 0 and end[0] > 0 and end[1] <= 0:\n        # check if the end point is valid\n        if end[0] >= 0 and end[1] >= 0:\n            # if both start and end points are valid, start checking for jumps\n            i = 0\n            while i < steps:\n                # move the start point\n                start = (start[0] + 1, start[1])\n                i += 1\n                # check if the end point is reached\n                if start == end:\n                    jumps += 1\n                    break\n        else:\n            print(\"Invalid end point.\")\n    else:\n        print(\"Invalid start point.\")\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    # Divide each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        if isinstance(nums2[i], (int, float)):\n            result.append(nums1[i] / nums2[i])\n        else:\n            raise ValueError(\"Lists must contain only numbers or floats\")\n            \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    for num1, num2 in zip(nums1, nums2):\n        yield num1 / num2"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with the element-wise division of the lists.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        nums1[nums1.index(num1)] = num1 / num2\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Divide each element of the lists element wise\n    result = [num1/num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n\n    # loop through each word in the list\n    for i in range(len(words)):\n        # if the word is a number, move it to the end of the list\n        if words[i].isdigit():\n            words.pop(i)\n            words.append(words[i])\n\n    # join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # list of all the numbers in the given string\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    # reverse the list to get the numbers in reverse order\n    num_list.reverse()\n    # join the numbers to form the new string\n    new_str = \"\".join(num_list)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize two empty lists\n    num_list = []\n    non_num_list = []\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, add it to the non_num_list\n        else:\n            non_num_list.append(char)\n    \n    # join the two lists into a single string\n    result = ''.join(non_num_list) + ''.join(num_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store numbers and non-numbers\n    num_list = []\n    non_num_list = []\n    # split the string into two lists\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    # join the two lists together and return the final result\n    return ''.join(num_list + non_num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string by characters and store in a list\n    num_list = [char for char in test_str if char.isdigit()]\n    # join the list back into a string and return\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Use a regular expression to find all the numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n\n    # Remove all the numbers from the original string\n    test_str = re.sub(r'\\d+', '', test_str)\n\n    # Add all the numbers to the end of the string\n    test_str += ''.join(nums)\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_list = []\n    new_str = \"\"\n    i = 0\n    \n    # Loop through each character of the string\n    while i < len(test_str):\n        # If the character is a number, add it to the num_list\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        # If the character is not a number, add it to the new_str\n        else:\n            new_str += test_str[i]\n        i += 1\n    \n    # Add all the numbers from the num_list to the end of the new_str\n    for num in num_list:\n        new_str += num\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the list of numbers\n        if char.isdigit():\n            nums.append(char)\n    # reverse the list of numbers to move them to the end\n    nums.reverse()\n    # join the list of numbers into a string and return the result\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_str = ''.join(num_list)\n        test_str = test_str.replace(num_str, '')\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    largest_size = 0\n    current_size = 0\n    subset = []\n\n    # Loop through the list\n    for num in a:\n        # If the current number is already in the subset, increment the current size\n        if num in subset:\n            current_size += 1\n        else:\n            # If the current number is not in the subset, add it and reset the current size to 1\n            subset.append(num)\n            current_size = 1\n\n        # If the current size is greater than the largest size found so far, update the largest size\n        if current_size > largest_size:\n            largest_size = current_size\n\n    # Return the largest size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    i, j = 0, len(a) - 1 # initialize two pointers i and j\n    max_length = 0 # initialize the maximum length to zero\n    while i < j: # loop until pointers meet at the beginning of the list\n        if a[i] % a[j] == 0: # if current element of the list is divisible by the next element\n            max_length += 1 # increment the length of the largest subset\n            i += 1 # move i pointer to the next element\n            j -= 1 # move j pointer to the previous element\n        else: # if current element of the list is not divisible by the next element\n            if max_length > 0: # if the length of the largest subset is greater than zero\n                max_length -= 1 # decrement the length of the largest subset\n            j -= 1 # move j pointer to the previous element\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create an empty dictionary to store the count of each number\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Create an empty list to store the current subset\n    subset = []\n    \n    # Loop through each number in the list\n    for num in a:\n        # If the number is divisible by 2, add it to the subset and continue\n        if count[num] % 2 == 0:\n            subset.append(num)\n            count[num] -= 1\n            \n            # Check if we have found the largest subset so far\n            if len(subset) > len(largest_subset):\n                largest_subset = subset\n    \n    # Return the length of the largest subset\n    return len(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    subset_size = 0\n    current_subset = []\n\n    # iterate through the list\n    for num in a:\n        # add the current number to the current subset\n        current_subset.append(num)\n\n        # check if the current subset is divisible by every other number\n        if all(num % divisor == 0 for divisor in current_subset):\n            # update the subset size if it is greater than the previous one\n            if len(current_subset) > subset_size:\n                subset_size = len(current_subset)\n\n        # remove the first number from the current subset\n        current_subset.pop(0)\n\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize a set to store the divisors of every number in the list\n    divisors = set()\n    # Initialize a list to store the size of the largest subset\n    max_subset_size = []\n    # Iterate over each number in the list\n    for num in a:\n        # Calculate the divisors of the current number\n        current_divisors = set()\n        for i in range(1, num + 1):\n            if num % i == 0:\n                current_divisors.add(i)\n        # Remove the current number from the divisors of the other numbers\n        remaining_divisors = divisors.difference(set([num]))\n        # Add the divisors of the current number to the divisors of the remaining numbers\n        divisors = divisors.union(current_divisors)\n        # Check if the current number is the largest subset so far\n        current_size = len(current_divisors)\n        if current_size > max(max_subset_size):\n            max_subset_size = [current_size]\n        else:\n            max_subset_size.append(current_size)\n    # Return the size of the largest subset\n    return max(max_subset_size)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    largest = 0\n    current = 0\n    count = 0\n    i = 0\n\n    # iterate through the list\n    while i < len(a):\n        # if the current number is divisible by the next number\n        if a[i] % a[i+1] == 0:\n            # add the current number to the count\n            count += 1\n\n            # if the count is greater than the largest count found so far\n            if count > largest:\n                largest = count\n\n            # move the current pointer to the right\n            current = i+1\n\n        # move the pointer to the right\n        i += 1\n\n    # if the count is greater than the largest count found so far\n    if count > largest:\n        largest = count\n\n    # return the largest count found\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize two pointers, left and right, to 0\n    left = 0\n    right = 0\n    \n    # Initialize the maximum size of the largest subset as 0\n    max_size = 0\n    \n    # Loop through the sorted list\n    while right < len(a):\n        \n        # Increment the right pointer\n        right += 1\n        \n        # Check if the current pair is divisible by the next number to the right\n        while right < len(a) and a[right] % a[right-1]!= 0:\n            \n            # If it's not divisible, decrement the right pointer and decrement the size of the largest subset\n            right -= 1\n            max_size -= 1\n            \n        # If the current pair is divisible, increment the size of the largest subset and increment the right pointer\n        else:\n            max_size += 1\n            right += 1\n    \n    # Return the maximum size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0]*(2*n)\n    max_size = 0\n    start = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if a[i]%a[j] == 0 and a[i]!= a[j]:\n                dp[i+j] = dp[i] + 1\n                if dp[i+j] > max_size:\n                    max_size = dp[i+j]\n                    start = i\n    \n    return max_size, start"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    max_size = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, i - j + 1)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # merge the two sorted lists\n    merged = merge_lists(arr1, arr2)\n\n    # get the length of the merged list\n    m = len(merged)\n\n    # find the middle index of the merged list\n    mid = int(m / 2)\n\n    # check if the length of the merged list is odd or even\n    if m % 2 == 1:\n        # find the median of the merged list\n        median = merged[mid]\n    else:\n        # find the two middle elements of the merged list\n        median = (merged[mid - 1] + merged[mid]) / 2\n\n    return median\n\n\ndef merge_lists(arr1, arr2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n\n    # create an empty merged list\n    merged = []\n\n    # iterate over the elements of each list\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # add any remaining elements of arr1 or arr2\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n\n    return merged\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Arrays should have same size\")\n\n    merged = arr1 + arr2\n\n    merged.sort()\n\n    median = None\n    if n % 2 == 0:\n        median = (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        median = merged[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the sizes of the two arrays are equal\n    if n!= len(arr1) or n!= len(arr2):\n        return \"The two lists must have the same size.\"\n\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the median index\n    mid_index = n // 2\n\n    # Check if the median is even or odd\n    if n % 2 == 0:\n        # Return the average of the middle two elements\n        return (merged_arr[mid_index - 1] + merged_arr[mid_index]) / 2\n    else:\n        # Return the middle element\n        return merged_arr[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Find the median based on the number of elements\n    if n % 2 == 0:\n        # If the number of elements is even, take the average of the two middle elements\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        # If the number of elements is odd, take the middle element\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = merge_lists(arr1, arr2)\n\n    # Find the median of the merged list\n    median = find_median(merged_list, n)\n\n    return median\n\n\ndef merge_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    return merged_list\n\n\ndef find_median(merged_list, n):\n    '''\n    Find the median of the merged list.\n    '''\n    # Find the median based on the length of the merged list\n    if n % 2 == 0:\n        # If the length of the merged list is even,\n        # take the average of the two middle numbers\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        # If the length of the merged list is odd,\n        # take the middle number\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    median = (arr1[n//2] + arr2[n//2]) / 2\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): list of integers.\n    arr2 (list): list of integers.\n    n (int): number of elements in both lists.\n\n    Returns:\n    float: median of the two sorted lists.\n    \"\"\"\n\n    # Find the median of the two arrays by sorting them and finding the middle element\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    median = sorted_arr1[n//2]\n\n    # If there are an odd number of elements in the lists, find the median between the two middle elements\n    if n % 2 == 1:\n        median = (sorted_arr1[n//2-1] + sorted_arr1[n//2]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    # Check if the sizes of the two arrays are same\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The two arrays must be of same size!\")\n    \n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Calculate the median\n    median = (arr1[n-1] + arr2[n-1]) / 2\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    # convert the string to uppercase and return the result\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    return string == string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    else:\n        print(\"List should have at least two elements\")\n        return []"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the input list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: Input list must have at least 2 elements.\")\n        return\n    \n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the new list\n    print(\"New List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    \n    # Swap first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Recursively call the function for the remaining elements of the list\n    newList[1:-1] = swap_List(newList[1:-1])\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the length of the list is greater than or equal to 2\n    if len(newList) >= 2:\n        # swapping the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        print(\"List is empty\")\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"After swapping the first and last elements of the list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements\"\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Get the first and last elements of the list\n        firstElement = newList[0]\n        lastElement = newList[-1]\n        # Swap the first and last elements\n        newList[0] = lastElement\n        newList[-1] = firstElement\n        # Print the new list after swapping\n        print(newList)\n    else:\n        print(\"The list must have at least two elements.\")"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # find the length of one side of the triangle\n    side_length = 2 * r\n\n    # find the area of the triangle using Heron's formula\n    area = (3 * r ** 2) / (4 * (side_length ** 2))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of the triangle using Heron's formula\n    s = (semi_perimeter**2) ** 0.5\n    area = (1/2) * r * s\n\n    # Find the length of the longest side of the triangle\n    longest_side = 2 * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = area + (longest_side ** 2)\n\n    # Return the largest area\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    # Calculate the length of the semi-circle\n    s = 2*r*math.sqrt(3)\n    # Calculate the area of the largest triangle\n    A = (s**2)/3\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    pi = 3.14159265358979323846  # pi value\n    area = 0.5 * pi * r ** 2  # area of the smallest triangle (largest side = 2 * r)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the semi-circle\n    area = math.pi * r**2\n    \n    # calculate the sides of the largest triangle\n    a = r**2\n    b = 2 * math.sqrt(area / math.pi)\n    c = r**2 - (2 * math.sqrt(area / math.pi))**2\n    \n    # find the largest triangle\n    max_triangle = max(a, b, c)\n    \n    # calculate the area of the largest triangle\n    largest_area = math.sqrt(max_triangle * (max_triangle - a) * (max_triangle - b) * (max_triangle - c))\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of the triangle using Heron's formula\n    area = (semi_perimeter ** 2) / (4 * (1 - r ** 2))\n\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Constants\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    pi = 3.14\n    A = pi * r ** 2\n    return A\n\nNow, let's test this function using some sample inputs:\n\nprint(triangle_area(1)) # Output: 3.141592653589793\nprint(triangle_area(2)) # Output: 6.283185307179586\nprint(triangle_area(3)) # Output: 9.424777960769379\nprint(triangle_area(4)) # Output: 12.566370614359172\n\nAs we can see, the function returns the correct area for the given inputs."
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Returns the smallest missing number in a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n    If start and end are provided, the function will search for the missing number in a range of the array.\n    \"\"\"\n    # if start and end are not provided, we start from the first element of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # loop through the array from the start to the end\n    for i in range(start, end + 1):\n        # check if the current element is equal to the next element in the array\n        if array[i]!= array[i + 1]:\n            # if it is not, we return the current element as the missing number\n            return array[i]\n    \n    # if we reach this point, it means all elements in the array have been checked and we have found the missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if no end index is provided, find the end index of the list\n    if end is None:\n        end = len(array)-1\n\n    # loop through the list and find the first missing number\n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    :param array: A sorted list of natural numbers.\n    :param start: The start index of the array. Default is 0.\n    :param end: The end index of the array. Default is the last index of the array.\n    :return: The first missing number in the sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing all even numbers from the original list.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] # creating an empty list to store even numbers\n    for num in list: # iterating over each number in the list\n        if num % 2 == 0: # checking if the number is even\n            even_list.append(num) # adding the even number to the list\n    return even_list # returning the even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of even numbers.\n    \"\"\"\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the adjacent coordinates using the list comprehension method.\n    adjacs = [(x,y) for x,y in sub if x+1<len(ele) and y+1<len(ele[x+1]) and (x,y)<ele] + [(x-1,y) for x,y in sub if x>0 and y+1<len(ele[x-1]) and (x,y)<ele] + [(x,y-1) for x,y in sub if x+1<len(ele) and y>0 and (x,y)<ele] + [(x+1,y) for x,y in sub if x<len(ele)-1 and y+1<len(ele[x+2]) and (x,y)<ele]\n    return adjacs"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    if sub:\n        return [adj for adj in adjacent if adj not in sub]\n    else:\n        return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create a list to store the adjacent coordinates\n    adj = []\n    # get the first element of the tuple\n    x, y = ele\n    # add the first element to the list of adjacent coordinates\n    adj.append((x, y))\n    # iterate through the list of coordinates\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            # check if the coordinate is within the boundaries of the grid and if it's not the same as the current element\n            if 0 <= i < 10 and 0 <= j < 10 and (i, j)!= ele:\n                # add the adjacent coordinate to the list of adjacent coordinates\n                adj.append((i, j))\n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i!= j:\n                adj.append((ele[0] + i, ele[1] + j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n    \n    # Extract the coordinates of the given element\n    x, y = ele\n    \n    # Extract all the adjacent elements that are within the boundaries of the grid\n    if x > 0:\n        adj.append((x-1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if x < 9:\n        adj.append((x+1, y))\n    if y < 9:\n        adj.append((x, y+1))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # initialize an empty list to store the adjacent coordinates\n    adjacent = []\n\n    # extract the x and y coordinates of the given element\n    x, y = ele\n\n    # loop through the rows and columns of the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # check if the adjacent element is within the grid boundaries and not the same as the current element\n            if 0 <= x+i < len(sub) and 0 <= y+j < len(sub[0]) and (x+i, y+j)!= ele:\n                adjacent.append((x+i, y+j))\n\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            x_adj = x + i\n            y_adj = y + j\n            if 0 <= x_adj < 10 and 0 <= y_adj < 10:\n                sub.append((x_adj, y_adj))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    if len(sub) < 3:\n        return sub\n    elif sub[0] == sub[-1]:\n        return adjac((sub[0][0]+sub[-1][0])/2, sub)\n    else:\n        return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # loop through each character in the string\n    for i in range(len(text)):\n        # check if the current character is a whitespace character\n        if text[i].isspace():\n            # replace the whitespace character with an underscore\n            text = text[:i] + '_' + text[i+1:]\n        else:\n            # replace the underscore character with a whitespace\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize empty string to store the modified string\n    modified_string = ''\n    # iterate through each character in the input string\n    for char in text:\n        # check if the character is a whitespace\n        if char.isspace():\n            # replace the whitespace with an underscore\n            modified_string += '_'\n        else:\n            # append the character to the modified string unchanged\n            modified_string += char\n    # return the modified string\n    return modified_string"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i, char in enumerate(text):\n        if char.isspace():\n            text = text[:i] + '_' + text[i+1:]\n        elif char == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n\n    Parameters:\n    text (str): The string to be modified.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n\n    # Define a regular expression pattern for whitespaces\n    pattern = re.compile(r'\\s+')\n\n    # Replace whitespaces with underscores\n    modified_text = pattern.sub('_', text)\n\n    # Replace underscores with whitespaces\n    modified_text = modified_text.replace('_','')\n\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    non_zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n        else:\n            non_zero_index.append(i)\n    \n    zero_index.sort(reverse=True)\n    for i in zero_index:\n        num_list[i], num_list[non_zero_index.pop(0)] = num_list[non_zero_index.pop(0)], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a new list to store non-zero elements\n    non_zero_list = []\n    # iterate through the original list\n    for num in num_list:\n        # check if the element is not zero\n        if num!= 0:\n            non_zero_list.append(num)\n    # append the remaining zeroes to the end of the non-zero list\n    num_list.extend(non_zero_list)\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n        elif num_list[i]!= 0:\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # initialize two pointers, one for the non-zero elements and the other for the zero elements\n    non_zero = 0\n    zero = len(num_list) - 1\n\n    # move the non-zero elements to their final positions\n    while non_zero < len(num_list):\n        if num_list[non_zero]!= 0:\n            num_list[non_zero], num_list[zero] = num_list[zero], num_list[non_zero]\n            non_zero += 1\n            zero -= 1\n        else:\n            non_zero += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # Loop through the list until the start pointer is less than the end pointer\n    while start < end:\n        # If the current element is zero, swap it with the element at the end of the list\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n        # If the current element is not zero, move the start pointer to the right\n        else:\n            start += 1\n        # If the current element is zero, move the end pointer to the left\n        if num_list[end] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n        # If the current element is not zero, move the end pointer to the right\n        else:\n            end -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    non_zero_index = 0\n\n    while non_zero_index < len(num_list):\n        if num_list[non_zero_index]!= 0:\n            if zero_index == -1:\n                zero_index = non_zero_index\n            num_list[zero_index], num_list[non_zero_index] = num_list[non_zero_index], num_list[zero_index]\n        non_zero_index += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with all the zeroes moved to the end.\n    \"\"\"\n\n    # Initialize two pointers, one for the start of the list and one for the end of the list.\n    start = 0\n    end = len(num_list) - 1\n\n    # Loop through the list until the start pointer reaches the end of the list.\n    while start < end:\n\n        # If the element at the start pointer is zero, swap it with the element at the end pointer.\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n\n        # Move the start pointer to the next index.\n        start += 1\n\n        # Move the end pointer to the previous index.\n        end -= 1\n\n    # Return the list with all the zeroes moved to the end.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for j in range(len(num_list)-1, zero_index, -1):\n            num_list[j+1] = num_list[j]\n        num_list[zero_index] = 0\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < n:\n        return \"List must have at least {} elements\".format(n)\n\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = arr[i] ^ arr[j]\n            sum += xor_sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_value = arr[i] ^ arr[j]\n            sum_xor += xor_value\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes two parameters, the list of numbers and the length of the list.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pair = arr[i] ^ arr[j]\n            total_sum += xor_pair\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all numbers in the list\n    xor = 0\n    for i in range(n) : \n        xor ^= arr[i]\n\n    # XOR of all pairs of numbers in the list\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum ^= arr[i] ^ arr[j]\n\n    return xor ^ sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all elements in the list\n    xor = sum(arr)\n\n    # XOR of all pairs of elements in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the sum of XOR of all pairs of elements in the list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            total_sum += xor\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the given iterable\n    heap = hq.heapify(iterable)\n    # sort the heap in ascending order\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    hq.heapify(iterable)\n\n    # Extract elements from the min-heap one by one and add them to a new list\n    sorted_list = []\n    while hq.heappop(iterable) is not None:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while len(iterable) > 1:\n        iterable.pop()\n        hq.heappush(iterable, iterable[0])\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a min-heap.\n    '''\n    # Convert the iterable to a list, since we'll be modifying it\n    # (and we don't want to modify the original iterable)\n    iterable = list(iterable)\n\n    # Build a min-heap of the given list using a heapify function\n    def build_heap(lst):\n        for i in range(len(lst) // 2 - 1, -1, -1):\n            heapify(lst, i, len(lst))\n\n    def heapify(lst, index, size):\n        smallest = index\n        left = 2 * index + 1\n        right = 2 * index + 2\n\n        if left < size and lst[left] < lst[smallest]:\n            smallest = left\n\n        if right < size and lst[right] < lst[smallest]:\n            smallest = right\n\n        if smallest!= index:\n            lst[index], lst[smallest] = lst[smallest], lst[index]\n            heapify(lst, smallest, size)\n\n    build_heap(iterable)\n\n    # Pop the elements from the heap in sorted order\n    for i in range(len(iterable) - 1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heapify(heap)\n\n    # Build the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # Sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # create a max heap from the iterable\n    hq.heapify(iterable)\n    \n    # extract the max element from the heap and insert it at the end of the sorted list\n    sorted_list = []\n    while iterable:\n        max_element = hq.heappop(iterable)\n        sorted_list.append(max_element)\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    while len(heap) > 1:\n        heapq.heappop(heap)\n        hq.heapify(heap)\n    \n    return heap[0]"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function will check whether the given amount has no profit and no loss.\n    \"\"\"\n\n    if actual_cost == 0:\n        return False\n\n    profit = sale_amount - actual_cost\n\n    if profit == 0:\n        return True\n\n    loss = actual_cost - sale_amount\n\n    if loss == 0:\n        return True\n\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n\n    # If the sale amount is greater than the actual cost, then there is a profit\n    if sale_amount > actual_cost:\n        return False\n\n    # If the sale amount is equal to the actual cost, then there is no profit\n    elif sale_amount == actual_cost:\n        return True\n\n    # If the sale amount is less than the actual cost, then there is a loss\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \n    :param actual_cost: The actual cost of the sale.\n    :param sale_amount: The amount of the sale.\n    :return: True if the sale has no profit and no loss, False otherwise.\n    \"\"\"\n    return actual_cost - sale_amount >= 0"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True, \"Profit is possible\"\n    elif actual_cost > sale_amount:\n        return False, \"Profit is not possible\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check if profit and loss are both positive or both negative\n    if profit > 0 or loss < 0:\n        return False\n    \n    # check if profit and loss are both zero\n    if profit == 0 and loss == 0:\n        return False\n    \n    # if no profit and no loss, then it's a no-loss situation\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the wind velocity and temperature from celsius to fahrenheit\n    v = (v * 9/5) + 32\n    t = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    if v <= 0:\n        wci = 0\n    else:\n        wci = 13.12 + 0.6215 * (t - 32) - 11.37 * math.log(v) + 0.3965 * (t - 32) * math.log(v)\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill index\n    wc = math.fround(459.67*(t-273.15)/(v+44.37*(t-273.15)**1.5+0.114*t**1.5-35.75))\n    \n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 2.0 and t >= 15.0:\n        wci = (1.34*t - 0.114*t*t + 0.00226*v*t - 0.0000755*v*v + 1.0)*2.0\n        wci = int(math.ceil(wci))\n        return wci\n    else:\n        print(\"Invalid input. Please provide a wind velocity of 2.0 km/h or a temperature of 15.0 degrees Celsius.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n\n    # calculate the heat index\n    h = 0.5 * (v ** 2 + 10 ** ((t - 32) / 10))\n\n    # calculate the wind chill index\n    wci = math.floor(h - 11.37 * math.log(v) - 0.6215 * t)\n\n    # return the wind chill index rounded to the nearest integer\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return None\n    else:\n        # calculate the wind chill\n        wc = 35.74 + 0.6215 * v - 35.75 * (t - 23.15) + 0.4275 * (t - 23.15) ** 2\n        # round the wind chill to the nearest integer\n        wc_int = round(wc)\n        # return the wind chill index\n        return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in celsius\n    wc_t = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.00037 * t * t * math.log(v)\n    \n    # Convert the wind chill temperature to an integer\n    wc_t_int = round(wc_t)\n    \n    # Return the wind chill index rounded to the next integer\n    return wc_t_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = (v * 1.609344) / (0.621971 + 0.480422 * math.log10(t))\n    if c < -40:\n        return -40\n    else:\n        return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 2.0 * math.pi * 6.112 * math.pow(math.radians(t), 0.16)\n    return int(math.ceil(v / c))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n    \n    Returns:\n    float: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index using the following formula:\n    # WC = 13.12 + 0.6215*v + 11.37*t_f - 0.3965*t_f**2\n    wc = 13.12 + (0.6215 * v) + (11.37 * t_f) - (0.3965 * t_f**2)\n    \n    # Round the wind chill index to the nearest integer\n    wc = math.floor(wc)\n    \n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name.lower() for name in sample_names]\n    filtered_names = [name for name in names if name[0].isupper()]\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    # Removing names starting with a lowercase letter\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    # Calculating the sum of lengths of filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if not name[0].islower():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern for finding parenthesis\n    pattern = r'\\([^)]*\\)'\n    # Use the pattern to replace the parenthesis with an empty string\n    items = re.sub(pattern, '', items)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\([^)]*\\)\"\n    items = re.sub(pattern, \"\", items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    # Use regular expressions to remove the parenthesis and what is inbetween them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub('(\\([^\\)]+\\))', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'(\\(|\\))', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis from the string\n    items = items.strip('()')\n    # Splitting the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', items)\n    # Joining the words into a new string\n    new_items =''.join(words)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression to match all parenthesis and what is inbetween them\n    pattern = re.compile(r'\\((.*?)\\)')\n    \n    # Iterate through all items in the list and find all parenthesis and what is inbetween them\n    for item in items:\n        # Remove all parenthesis from the item and find what is inbetween them\n        sub_item = pattern.sub('', item)\n        \n        # Add the sub_item back to the list\n        items.append(sub_item)\n    \n    # Remove all empty strings from the list and return it\n    return [item for item in items if item]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    nonagonal = 1\n    side = 1\n    # Loop through the even numbers\n    for i in range(n):\n        # Increment the side\n        side += 1\n        # Calculate the nonagonal number\n        nonagonal = (side * (side + 1)) // 2\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            # Increment the nonagonal number\n            num += 1\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n\n    # Calculate the nth nonagonal number\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def helper(i, j):\n        if j > i:\n            if j < n - i + 1:\n                return j * (j - 1) // 2\n            else:\n                return helper(j - 1, n - i + 1)\n        else:\n            return 0\n\n    return helper(1, n)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            for j in range(1, n+1):\n                if i**2 + j**2 == n**2:\n                    return i**2 + j**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        result = 1\n        for i in range(1, n):\n            result += 2 * (n - i)\n        return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "Here's the code for the same:"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function calculates the nth nonagonal number.\n\n    Args:\n        n (int): The index of the nonagonal number.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n\n    # Initialize the sum of the first n terms to 0\n    sum_of_terms = 0\n\n    # Iterate through the first n-1 terms\n    for i in range(1, n):\n        # Add the sum of the first i terms to the current term\n        sum_of_terms += i\n\n    # Return the sum of the first n terms\n    return sum_of_terms"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nonagonal(n):\n        if n == 1:\n            return 1\n        else:\n            return n*(n-1)\n\n    return nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of the first and last numbers as 1\n    nonagonal_sum = 1\n\n    # Iterate from the second number to the nth number (inclusive)\n    for i in range(2, n+1):\n        # Add the sum of the previous two numbers to the current number\n        nonagonal_sum += i\n\n    # Return the nth nonagonal number\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' in the middle of a word\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, text)\n    # Check if the match was found\n    if match:\n        # Return True if the match was found\n        return True\n    # Otherwise, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n\n    # Remove special characters and convert to lowercase\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text).lower()\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through the words and check if 'z' is present except at the start and end of the word\n    for i in range(len(words)):\n        if i == 0:\n            if words[i]!= 'z':\n                return False\n        elif i == len(words) - 1:\n            if words[i]!= 'z':\n                return False\n        elif words[i] == 'z':\n            return False\n\n    # If we make it through the loop without returning False, it means 'z' was found in the middle of the text\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any punctuation from the string\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the string into words\n    words = text.split()\n    \n    # Check each word for 'z' except at the start and end\n    for i in range(len(words)):\n        if i == 0 or i == len(words)-1: # check only the first and last word\n            if words[i] == 'z':\n                continue\n        else:\n            if words[i] == 'z':\n                words[i] = '' # replace 'z' with an empty string\n        \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Replace all non-word characters with spaces\n    text = re.sub('[^a-zA-Z]','', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the word ends with 'z' and if it is not at the start or end of the word\n        if words[i][-1] == 'z' and i > 0 and i < len(words) - 1:\n            # If the word ends with 'z' and is not at the start or end of the word, return True\n            return True\n\n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define a regular expression pattern to match word boundaries\n    word_boundaries = re.compile(r'\\b')\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through each word and check if it contains 'z'\n    for word in words:\n        if 'z' in word and (word_boundaries.search(word) is None or word_boundaries.search(word, word_end=True) is None):\n            return True\n\n    # If no words contain 'z' within the text, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Regular expression pattern to match words containing 'z'\n    pattern = r'\\b[zZ]\\w*\\b'\n    # Find all matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[Zz][^z]*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize variables\n    left = 0\n    right = k-1\n    \n    # swap elements from left to right\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the input array\n    n = len(input)\n\n    # If k is greater than n, no need to reverse the array\n    if k > n:\n        return input\n\n    # Create a new array to store the reversed array\n    reverse_array = [0] * n\n\n    # Copy the first k elements to the reverse array\n    for i in range(k):\n        reverse_array[i] = input[i]\n\n    # Copy the remaining elements to the reverse array from the end to the middle\n    for i in range(k, n-k):\n        reverse_array[i - k] = input[i]\n\n    # Copy the last k elements to the reverse array from the middle to the end\n    for i in range(n - k, n):\n        reverse_array[i - k] = input[i]\n\n    # Return the reverse array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the position is valid or not\n    if k > len(input):\n        return \"Invalid position\"\n\n    # Reverse the array upto the given position\n    input[:k] = reversed(input[:k])\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input = input[::-1][:k]\n    # Reverse the array from k to end\n    input[::-1] = input[::-1][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Get the length of the input array\n    length = len(input)\n    # Check if the position k is valid\n    if k > length:\n        return \"Invalid position\"\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[length-i-1] = input[length-i-1], input[i]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    reverse_range = range(n-k, n)\n\n    for i in reverse_range:\n        input[i], input[n-1] = input[n-1], input[i]\n        n -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses the array from the first index to k-1 index.\n    \"\"\"\n    temp = []\n    for i in range(k):\n        temp.append(input[i])\n    for i in range(k, len(input)):\n        temp.append(input[i])\n    return temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the array\n    n = len(input)\n    \n    # Check if k is greater than n/2\n    if k > n//2:\n        # If k is greater than n/2, return the input array\n        return input\n    \n    # Initialize two pointers, one at the start of the array and the other at the end\n    start = 0\n    end = n-1\n    \n    # Reverse the array using a while loop\n    while start < end:\n        # Swap the elements at start and k\n        input[start], input[k] = input[k], input[start]\n        # Move the pointers to the next position\n        start += 1\n        k -= 1\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the input array up to k-1\n    input[:k-1] = input[:k-1][::-1]\n    \n    # Reverse the input array from k to end\n    input[k-1:] = input[k-1:][::-1]\n    \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the values from the input tuple\n    new_dict = {i: test_tup[i] for i in range(len(test_tup))}\n    # Merge the two dictionaries\n    merged_dict = {**test_dict, **new_dict}\n    # Return the merged dictionary as a tuple\n    return tuple(merged_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # check if the dictionary is a dictionary\n    if isinstance(test_dict, dict):\n        # create a new dictionary with the key-value pairs of test_dict and test_tup\n        new_dict = {**test_dict, **test_tup}\n        # convert the new dictionary to a tuple\n        result_tup = tuple(new_dict.items())\n    else:\n        raise TypeError(\"The second argument must be a dictionary\")\n    return result_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Concatenate the tuple and the dictionary\n    new_tuple = tuple(test_tup + tuple(test_dict.items()))\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the keys and values from the original tuple\n    new_dict = {key: test_tup[key] for key in test_tup}\n    # Update the original tuple with the new dictionary\n    new_tup = tuple(test_tup.items() + new_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create an empty dictionary to store the new key-value pairs\n    new_dict = {}\n    \n    # Iterate through the dictionary keys and values and add them to the new dictionary\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    \n    # Add the new dictionary to the tuple\n    test_tup += (new_dict,)\n    \n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that contains the keys and values of the original tuple\n    new_dict = {key: test_tup[key] for key in test_tup.keys()}\n    # Merge the new dictionary with the original dictionary\n    test_dict.update(new_dict)\n    # Create a new tuple from the updated dictionary\n    new_tup = tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    # Initialize variables for the maximum average and the current path\n    max_avg = float('-inf')\n    path = []\n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if we can move to the next cell\n            if i < N-1 and cost[i+1][j] == 0:\n                # Add the next cell to the path and update the maximum average\n                path.append((i+1, j))\n                avg = sum(cost[i+1][j] for j in range(N)) / N\n                max_avg = max(max_avg, avg)\n            if j < N-1 and cost[i][j+1] == 0:\n                # Add the next cell to the path and update the maximum average\n                path.append((i, j+1))\n                avg = sum(cost[i][j+1] for i in range(N)) / N\n                max_avg = max(max_avg, avg)\n    # Remove the starting and ending cells from the path\n    path.pop(0)\n    path.pop()\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    \n    # initialize base case\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n    \n    # fill rest of dp array\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    # print max_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, total_cost, visited_cells, path):\n        if i == n - 1 and j == m - 1:\n            max_cost = max(max_cost, total_cost)\n            return\n\n        if i < n and i >= 0 and j < m and j >= 0:\n            if not visited_cells[i][j]:\n                visited_cells[i][j] = True\n                dfs(i + 1, j, total_cost + cost[i][j], visited_cells, path + [1])\n                dfs(i, j + 1, total_cost + cost[i][j], visited_cells, path + [2])\n                visited_cells[i][j] = False\n\n    n = len(cost)\n    m = len(cost[0])\n    max_cost = float('-inf')\n    visited_cells = [[False for _ in range(m)] for _ in range(n)]\n\n    for i in range(n):\n        dfs(i, 0, 0, visited_cells, [])\n\n    for j in range(m):\n        dfs(0, j, 0, visited_cells, [])\n\n    return max_cost / (n * m)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    total_cells = 0\n\n    # Traverse the matrix and find the maximum path with the maximum average\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if this cell is a valid starting cell\n            if i == 0 and j == 0:\n                # If this is the starting cell, add its cost and move on\n                total_cost += cost[i][j]\n                total_cells += 1\n                continue\n\n            # Check if this cell is a valid ending cell\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                # If this is the ending cell, add its cost and move on\n                total_cost += cost[i][j]\n                total_cells += 1\n                continue\n\n            # Calculate the total cost of the path from the starting cell to this cell\n            current_cost = cost[i][j] + min(cost[i-1][j], cost[i][j-1])\n\n            # Update the maximum average if the current path is better than the previous maximum\n            if current_cost > max_avg:\n                max_avg = current_cost\n\n    # Return the maximum average of all existing paths\n    return max_avg / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == 1 and j == 1:\n                dp[i][j] = cost[0][0]\n            elif i == 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1]) + cost[i - 1][j]\n            elif j == 1:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + cost[i][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1], dp[i][j - 1], dp[i - 1][j - 1]) + cost[i - 1][j]\n    \n    max_avg = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == n and j == n:\n                avg = dp[i][j] / (n * n)\n                if avg > max_avg:\n                    max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    start = (0,0)\n    end = (N-1,N-1)\n    queue = [(start, [0])]\n    \n    while queue:\n        curr_pos, curr_path = queue.pop(0)\n        if curr_pos == end:\n            path_cost = sum(cost[i][j] for i,j in curr_path)\n            avg_cost = path_cost / len(curr_path)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n            return max_avg\n        \n        for next_pos in [(curr_pos[0]+1, curr_pos[1]), (curr_pos[0], curr_pos[1]+1)]:\n            if 0 <= next_pos[0] < N and 0 <= next_pos[1] < N and not visited[next_pos[0]][next_pos[1]]:\n                visited[next_pos[0]][next_pos[1]] = 1\n                new_path = curr_path + [(next_pos[0], next_pos[1])]\n                queue.append((next_pos, new_path))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    path_count = [[0 for _ in range(N)] for _ in range(N)]\n    path_sum = [[0 for _ in range(N)] for _ in range(N)]\n    max_path = -1\n    max_average = float('-inf')\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                path_sum[i][j] = cost[i][j]\n                path_count[i][j] = 1\n            elif i == 0 and j < N-1:\n                path_sum[i][j] = path_sum[i][j+1] + cost[i][j]\n                path_count[i][j] = path_count[i][j+1] + 1\n            elif i < N-1 and j == 0:\n                path_sum[i][j] = path_sum[i+1][j] + cost[i][j]\n                path_count[i][j] = path_count[i+1][j] + 1\n            elif i < N-1 and j < N-1:\n                path_sum[i][j] = max(path_sum[i][j+1], path_sum[i+1][j]) + cost[i][j]\n                path_count[i][j] = max(path_count[i][j+1], path_count[i+1][j]) + 1\n            if path_sum[i][j] > max_path:\n                max_path = path_sum[i][j]\n            if path_sum[i][j] == max_path:\n                max_average = max(max_average, path_sum[i][j]/path_count[i][j])\n                \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n\n    # Fill dp[0][0] and dp[0][j] with the minimum cost in the first row or column\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n        if j > 0:\n            dp[0][j] = min(dp[0][j], dp[0][j - 1])\n\n    # Fill dp[i][0] and dp[i][j] with the minimum cost in the first row or column\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        if i > 0:\n            dp[i][0] = min(dp[i][0], dp[i - 1][0])\n\n    # Fill dp[i][j] with the minimum cost in the sub-matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # Initialize the matrix to store the maximum average of each path\n    max_avg = [[0] * N for _ in range(N)]\n\n    # Initialize the first row and column with the maximum value\n    for i in range(N):\n        max_avg[0][i] = cost[0][i]\n        max_avg[i][0] = cost[i][0]\n\n    # Fill in the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            max_avg[i][j] = max(max_avg[i - 1][j], max_avg[i][j - 1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_avg_path = max(max_avg[0][-1], max_avg[-1][0])\n\n    return max_avg_path\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize the visited array\n    visited = [[False]*N for i in range(N)]\n    # Initialize the maximum average and the path with maximum average\n    max_avg = 0\n    max_path = []\n    # For each cell, mark it as visited\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n    # For each cell, check if it is the starting point of a path\n    for i in range(N):\n        for j in range(N):\n            if cost[i][j] > 0 and not visited[i][j] and (i == 0 or j == 0) and (i == N-1 or j == N-1):\n                # Create a new path by expanding from this cell\n                path = [[i, j]]\n                # Traverse the path and update the maximum average and path\n                while True:\n                    i += 1\n                    j += 1\n                    if not visited[i][j]:\n                        visited[i][j] = True\n                        path.append([i, j])\n                    elif i == N-1 and j == N-1:\n                        # If we reach the bottom right cell, add this path to the list of paths with maximum average\n                        if sum([cost[x][y] for x, y in path]) > max_avg:\n                            max_avg = sum([cost[x][y] for x, y in path])\n                            max_path = path\n                        break\n                    elif i == N-1 or j == N-1:\n                        # If we reach the bottom right cell, add this path to the list of paths with maximum average\n                        if sum([cost[x][y] for x, y in path]) > max_avg:\n                            max_avg = sum([cost[x][y] for x, y in path])\n                            max_path = path\n                        # Backtrack and add the path with the current cell to the list of paths with maximum average\n                        path.pop()\n                        visited[path[-1][0]][path[-1][1]] = False\n                        break\n    # Return the maximum average and the path with maximum average\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, min_height, min_weight):\n    # Filter students whose height and weight are above the minimum\n    filtered_students = {k: v for k, v in students.items() if v[0] > min_height and v[1] > min_weight}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    return {key: value for key, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and remove any leading zeros\n    base_str = str(base)[1:]\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base and add it to the sum the specified number of times\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each digit of the base string\n    for digit in base_str:\n        # Convert digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the power\n        power_sum = digit_int ** power\n        # Add the power sum to the sum\n        sum += power_sum\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and then split it into a list of digits\n    base_str = str(base)\n    base_digits = list(base_str)\n\n    # Initialize the sum to zero\n    sum_digits = 0\n\n    # Iterate over each digit in the list of digits and add it to the sum\n    for digit in base_digits:\n        sum_digits += int(digit)\n\n    # Calculate the sum of all digits raised to the power\n    sum_power = sum([int(digit)**power for digit in base_digits])\n\n    # Return the sum of all digits raised to the power\n    return sum_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    base_str = str(base)\n    power_int = int(power)\n\n    for i in range(power_int):\n        total_sum += int(base_str[-1])\n        base_str = base_str[:-1]\n\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n    \n    # convert the base to a string to iterate over its digits\n    base_str = str(base)\n    \n    # iterate over the digits of the base string\n    for digit in base_str:\n        # convert each digit to an integer and add it to the total sum\n        digit_int = int(digit)\n        total_sum += digit_int ** power\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Iterate through each digit in the base string\n    for digit in base_str:\n        # Convert each digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the sum of the digits raised to the power\n        sum += digit_int ** power\n\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base = base // 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += sum([int(digit) for digit in str(base)])\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    # pattern = r'\".*?\"' # this will also work but will return all matches of the pattern\n\n    # using re.findall() method to get all matches of pattern in text\n    result = re.findall(pattern, text1)\n\n    # printing the list of matches\n    print(result)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define regex pattern for extracting values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # use re.findall() method to extract all values between quotation marks\n    matches = re.findall(pattern, text1)\n    # return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n\n    Args:\n        text (str): A string containing quotation marks.\n\n    Returns:\n        list: A list of all the values between the quotation marks.\n    \"\"\"\n    # Use regular expressions to extract all values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n\n    # Remove the quotation marks from each match\n    values = [match.strip('\"') for match in matches]\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n\n    Parameters:\n    - text1 (str): The string to be searched.\n\n    Returns:\n    - list: A list of all the values between quotation marks.\n    '''\n\n    # Define a regular expression pattern to match quotation marks.\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to extract all values between quotation marks.\n    matches = re.findall(pattern, text1)\n\n    # Return the list of all values between quotation marks.\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through the tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # append the last element to the result tuple\n    result_tup += (test_tup[-1],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i]*test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1  # number of elements in the tuple\n    new_tup = (test_tup[0] * test_tup[1],)  # first element is already multiplied by second element\n    for i in range(2, N+1):  # iterate over remaining elements\n        new_tup += (test_tup[i] * test_tup[i+1],)  # add the next element multiplied by the next element\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return \"Invalid input tuple\"\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    return tuple(t1 * t2 for t1, t2 in zip(test_tup[:N], test_tup[N:]))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # create a new list to store the sum of the two input lists\n    result = []\n    # iterate through the first input list\n    for i in range(len(lst1)):\n        # append the sum of the current element of the first list and the current element of the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes as input two lists and returns the sum of the two lists.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through both lists and add the sum of elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the final result\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group consecutive duplicates\n    consecutive_groups = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n    # Create a new list to store unique values\n    unique_nums = []\n    # Iterate over the consecutive groups and append unique values to the new list\n    for group in consecutive_groups:\n        if group[1][0][0]!= 0:\n            unique_nums.append(group[1][0][0])\n    # Return the unique values list\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, group in groupby(nums):\n        if i!= len(nums) - 1:\n            if next(group) == next(group, None):\n                result.extend(group)\n            else:\n                result.append(next(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if not k.startswith('0') and len(list(g)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, group in groupby(sorted(nums)):\n        if i == len(nums)-1 or group[-1]!= nums[i+1]:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(sorted(nums))\n    return [list(group) for key, group in groups if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(sorted(nums)):\n        if not group:\n            continue\n        if group[0] == group[-1]:\n            continue\n        result.append(group[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and the height h of a cone as input and returns the lateral surface area of the cone.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculating the height of the base\n    base_height = math.sqrt(r**2 - h**2)\n\n    # Calculating the lateral surface area of the cone\n    lateral_surface_area = 2 * math.pi * (r**2 + base_height**2) - (2 * math.pi * r * base_height)\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the surface area of the base of the cone\n    base_area = math.pi * r**2\n\n    # Calculate the surface area of the top surface of the cone\n    top_area = (1/3) * (math.pi * r**2) + h * math.tan(math.pi/3) * r**2\n\n    # Calculate the surface area of the bottom surface of the cone\n    bottom_area = math.pi * r**2\n\n    # Calculate the total surface area of the cone\n    cone_area = base_area + top_area + bottom_area\n\n    # Return the lateral surface area\n    return cone_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the base area of the cone\n    base_area = math.pi * r**2\n    # Calculate the lateral surface area of the cone\n    lateral_surface = math.pi * r**2 * h\n    # Return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h\n    print(\"The lateral surface area of the cone is:\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using the formula for the lateral surface area of a cone\n    # S = pi * r^2 * h\n    S = math.pi * (r ** 2) * h\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone: A = pi*r^2*h/3\n    A = math.pi * r**2 * h / 3\n    \n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match special characters\n    pattern = r'[\\s.,]'\n    # Use the re.sub() function to replace the special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r\"[\\s,\\.]\")\n    return pattern.sub(\":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[\\s,\\.]\"\n    return re.sub(pattern, \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern for replacing spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n    # replace special characters with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s.,]')\n    # replace all occurrences of spaces, commas, or dots with a colon\n    new_text = pattern.sub(':', text)\n    # return the modified text\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s.,;]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'(\\s+|,|\\.)+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s\\d]', '', text)\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[^\\w\\s]|[-/_,.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    elif A[-1] == x:\n        return len(A) - 1\n    else:\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                if mid == 0 or A[mid - 1] < x:\n                    return mid\n                else:\n                    right = mid - 1\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array and a number x as input and returns the index of the first occurrence of x in the array.\n    If x is not present in the array, the function returns -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0  # initialize the index variable\n    n = len(A)  # get the length of the array\n\n    # loop through the array until the index is out of range or we find the x\n    while i < n and A[i]!= x:\n        i += 1\n\n    # if the index is still within the range, return the index\n    if i < n:\n        return i\n\n    # if the x is not in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # loop through the array and check if the current element is equal to x\n    for i in range(len(A)):\n        if A[i] == x:\n            # if x is found, return its index\n            return i\n    # if x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    else:\n        mid = len(A) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            if A[mid+1] == x:\n                return mid+1\n            else:\n                return find_first_occurrence(A[mid+1:], x)\n        else:\n            if A[mid-1] == x:\n                return mid-1\n            else:\n                return find_first_occurrence(A[:mid], x)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Returns the index of the first occurrence of x in A, or None if x is not in A.\n\n    Args:\n        A (list): A sorted array of integers.\n        x (int): The number to search for.\n\n    Returns:\n        int: The index of the first occurrence of x in A, or None if x is not in A.\n    \"\"\"\n    # Binary search for first occurrence\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index where x is present in A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            # If x is present at mid, then there must be a smaller element to the left of mid\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            # If x is present at the rightmost index, then it is the first occurrence\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x is not present in A"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    # calculate the cumulative sum array\n    cum_sum = [0] * (n + 1)\n    for i in range(n):\n        cum_sum[i+1] = cum_sum[i] + arr[i]\n    # calculate the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + cum_sum[i+1]\n    # calculate the product of all subarrays\n    prod_arr = [0] * (n + 1)\n    for i in range(1, n+1):\n        prod_arr[i] = prefix_sum[i] * prefix_sum[n]\n    # calculate the sum of products of all subarrays\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sublist_sum = prefix_sum[j] - prefix_sum[i-1]\n            sublist_prod = prod_arr[j] - prod_arr[i-1]\n            result += sublist_prod * sublist_sum\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    sum_arr = [0] * n\n    \n    # Calculate the sum of products of all possible sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_arr[i] += arr[j] * (n-j)\n            sum_arr[j] += arr[i] * (n-i)\n            \n    # Calculate the sum of products of all possible subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += sum_arr[i]\n    \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables to store sum of products of subarrays and the current subarray products\n    subarray_product = [1] * n\n    sum_of_subarray_products = 0\n    # Iterate through the array and calculate the sum of products of subarrays\n    for i in range(1, n):\n        subarray_product[i] = subarray_product[i-1] * arr[i]\n    # Iterate through the array again and add the products of all subarrays\n    for i in range(n):\n        sum_of_subarray_products += subarray_product[i]\n    # Return the sum of all subarray products\n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    \n    for i in range(n):\n        prod *= arr[i]\n    \n    for i in range(n):\n        sum_prod += prod\n        \n        for j in range(i+1, n):\n            prod *= arr[j]\n            \n            for k in range(j+1, n):\n                prod *= arr[k]\n                sum_prod -= arr[i]*arr[j]*arr[k]\n                prod //= arr[k]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_prod = float('-inf')\n    for i in range(1, n):\n        for j in range(i, n):\n            sublist = arr[j]\n            prod = 1\n            for k in range(i, j):\n                prod *= sublist[k]\n            max_prod = max(max_prod, prod)\n    return max_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            total_sum += arr[i]*arr[j]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Get the length of the array\n    n = len(arr)\n    # Initialize variables to keep track of running sum and products of subarrays\n    running_sum = 0\n    running_prod = 1\n    # Initialize an array to store the sum of products of subarrays\n    subarray_prod_sum = [0] * (n+1)\n    # Loop through all possible subarrays\n    for i in range(n):\n        # Compute the sum of products of the subarray ending at index i\n        for j in range(i, n):\n            # If the subarray has at least 2 elements, add its sum to the running sum\n            if j-i+1 >= 2:\n                running_sum += arr[j]\n            # If the subarray has at least 2 elements, multiply its product with the current running product\n            if j-i+1 >= 2:\n                running_prod *= arr[j]\n            # Update the sum of products of the subarray ending at index j\n            subarray_prod_sum[j+1] += running_prod\n            # If the sum of products of the subarray ending at index j is greater than the current maximum, update the maximum\n            if j+1 <= n and subarray_prod_sum[j+1] > subarray_prod_sum[subarray_prod_sum.index(max(subarray_prod_sum))]:\n                subarray_prod_sum.index(max(subarray_prod_sum)) = j+1\n    # Return the sum of products of all subarrays\n    return running_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + arr[i-1]*dp[i-2]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initialize result\n    result = 0\n\n    # loop through all possible subarrays of length i\n    for i in range(1, len(arr) + 1):\n\n        # loop through all possible subarrays of length i+1\n        for j in range(len(arr) - i + 1):\n\n            # calculate the product of the subarray\n            product = 1\n            for k in range(i):\n                product *= arr[j+k]\n\n            # add the product to the result\n            result += product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        sub_sum = 1\n        for j in range(i, n):\n            sub_sum *= arr[j]\n            result += sub_sum\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Mask for the first bit\n    first_bit_mask = 1 << (n.bit_length() - 1)\n\n    # Mask for the last bit\n    last_bit_mask = 1 << (n.bit_length() - 2)\n\n    # Clear the first and last bits\n    n = n & ~(first_bit_mask | last_bit_mask)\n\n    # Toggle each bit except the first and the last bit\n    for i in range(1, n.bit_length() - 1):\n        n = n ^ (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the given number\n    binary_num = bin(n)[2:]\n    \n    # Toggle the bits of the number except the first and the last bit\n    middle_bits = binary_num[1:-1]\n    toggled_bits = [1 if bit == '0' else 0 for bit in middle_bits]\n    final_num = int(''.join(str(bit) for bit in toggled_bits), 2)\n    \n    # Return the final number\n    return final_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit_position = 0\n    last_bit_position = 0\n    for i in range(1, len(bin(n)[2:])):\n        if bin(n)[2:].count('1') % 2 == 1:\n            first_bit_position = i\n        if bin(n)[2:].count('1') % 2 == 0:\n            last_bit_position = i\n    \n    for i in range(first_bit_position, last_bit_position):\n        n ^= 1 << i\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    n = bin(n)[2:] # Converting decimal to binary\n    n = n[1:-1] # Removing first and last bit\n    n = n[::-1] # Reversing the order of bits\n    n = bin(int(n, 2))[2:] # Converting binary back to decimal\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the input is a binary number\n    if not n.isdigit() or len(n) % 2!= 0:\n        return \"Not a binary number\"\n    \n    # Convert binary number to decimal number\n    num = int(n, 2)\n    \n    # Set the middle two bits to opposite values\n    num ^= (1 << 1) | (1 << 2)\n    \n    # Convert the decimal number back to binary number\n    binary_num = format(num, '032b')\n    \n    return binary_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    This function will toggle bits of the number except the first and the last bit. \n    The first and last bits are always 1 in a binary number, so we don't need to handle them separately.\n    \"\"\"\n    # Convert the binary number to an integer\n    n = int(n, 2)\n\n    # Calculate the index of the middle bit\n    middle_bit_index = len(bin(n)) - 2\n\n    # Toggle the middle bit\n    n ^= (1 << middle_bit_index)\n\n    # Convert the integer back to a binary number and return it\n    return bin(n)[2:].zfill(len(bin(n)) - 1)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the first and last bits\n    first_bit = (n & 1) ^ 1\n    last_bit = (n >> 31) & 1\n    \n    # Toggle the middle bits\n    middle_bits = (n & 0x3FFFFFFF) ^ 0x3FFFFFFF\n    \n    # Combine the first and last bits\n    new_n = first_bit << 31 | last_bit | middle_bits\n    \n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n    # Find the middle position of the binary representation\n    middle = length // 2\n    # Get the first and last bits of n\n    first = n & 1\n    last = n & (2 ** length - 1)\n    # Create a mask for first and last bits\n    mask_first = 1 << middle\n    mask_last = 2 ** middle - 1\n    # Clear the first and last bits and set the middle bits\n    n = (n & ~mask_first) | (first << middle)\n    n = (n & ~mask_last) | (last >> middle)\n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n >> 31 & 1\n    middle_bit = ~(first_bit ^ last_bit) & 1\n    return n ^ middle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Convert the number to a string\n    n = bin(n)[2:]\n    # Set the first and last bits to 1\n    n = n[:1] + '1' + n[2:]\n    # Reverse the string\n    n = n[::-1]\n    # Convert the string back to an integer\n    n = int(n, 2)\n    # Return the number\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return None"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    # Using binary search to find the index of the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # Check if the index is the leftmost element in the array\n    if index == 0:\n        return 0\n    # Check if the value at the index is less than x\n    elif a[index - 1] < x:\n        return index\n    # If the value at the index is greater than x, it can be the leftmost insertion point\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect to find the left insertion point for the value x in sorted list a.\n    i = bisect.bisect_left(a, x)\n    # If the value x is found in the list, return the index i.\n    if i!= len(a) and a[i] == x:\n        return i\n    # If the value x is not found in the list, return -1.\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        i -= 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): sorted list\n    x (int): value to be searched for\n\n    Returns:\n    int: index of left insertion point\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return -1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(string, \"starts with a vowel.\")\n    else:\n        print(string, \"does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(\"Valid string\")\n    else:\n        print(\"Invalid string\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function takes a string as an input and returns a boolean value. \n    It checks whether the string starts with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Input:\n    n - an integer\n\n    Returns:\n    The geometric sum of n-1.\n    \"\"\"\n\n    if n == 1:\n        return 0\n\n    else:\n        return (1 + 1/geometric_sum(n-1))**(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1 + geometric_sum(n-1)) ** (1 / n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_tri = math.floor(math.sqrt(5 * n + 1))\n    max_tri = n\n    index = 1\n\n    while True:\n        tri = (min_tri + max_tri) // 2\n        tri_digits = len(str(tri))\n\n        if tri_digits == n:\n            return index\n        elif tri_digits < n:\n            min_tri = tri + 1\n        else:\n            max_tri = tri - 1\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    triangular = 10**(n-1)\n    triangular_square = triangular**2\n    while True:\n        triangular += 1\n        triangular_square = triangular**2\n        if triangular_square == 20:\n            return triangular - 10**(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 0\n    for i in range(1, n+1):\n        triangular_number += (math.factorial(n)) // (math.factorial(i)*math.factorial(n-i))\n    return triangular_number - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_first_n_natural_numbers(n):\n    return (n * (n+1) * (2 * n + 1)) // 6"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # find the first triangular number with n digits\n    num = 5 * (2 ** n) - 1\n    \n    # initialize the index variable\n    index = 0\n    \n    # loop till the triangular number is greater than or equal to n digits\n    while num >= n:\n        # increment the index variable\n        index += 1\n        \n        # find the next triangular number with the same number of digits\n        num = (num * 5) // 2\n    \n    # return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # find the sum of n digits\n    sum_of_n_digits = math.factorial(n)\n\n    # initialize index to zero\n    index = 0\n\n    # calculate the sum of triangular numbers up to sum_of_n_digits\n    triangular_sum = (n*(n+1))//2\n\n    # if the sum of n digits is a perfect square, then there exists a triangular number with n digits\n    if triangular_sum**2 == sum_of_n_digits: \n        # find the index of the smallest triangular number with n digits\n        while triangular_sum <= sum_of_n_digits: \n            index += 1\n            triangular_sum += (n*(n+1))//2\n            \n    # if the sum of n digits is not a perfect square, then there does not exist a triangular number with n digits\n    else: \n        print(\"There does not exist a triangular number with\", n, \"digits.\")\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    \n    # Function to generate n digit triangular number \n    def generate_triangular(n): \n        triangular = [0] * (n + 1)\n        triangular[0] = 1\n        triangular[1] = 1\n        for i in range(2, n + 1): \n            triangular[i] = (triangular[i - 1] + triangular[i - 2]) % (10 ** 9 + 7)\n        return triangular\n    \n    # Generating n digit triangular number \n    triangular = generate_triangular(n)\n    \n    # Function to find the index of smallest triangular number \n    def find_index(triangular): \n        index = 0\n        smallest = triangular[0]\n        for i in range(1, len(triangular)): \n            if triangular[i] < smallest: \n                smallest = triangular[i] \n                index = i\n        return index\n    \n    # Finding the index of smallest triangular number \n    index = find_index(triangular)\n    \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Find the smallest triangular number with n digits\n    triangular = 10**(n-1)\n\n    # Find the smallest power of 10 with n digits\n    power = int(math.log10(triangular))\n\n    # Create a dictionary to store the corresponding triangular numbers\n    triangular_dict = {}\n    triangular_dict[0] = 0\n\n    # Start from 2 and add the triangular numbers to the dictionary\n    for i in range(2, triangular):\n        triangular_dict[i] = triangular_dict[i-1] + triangular_dict[i-2]\n\n    # Find the index of the smallest triangular number with n digits\n    result = -1\n    for i in range(1, triangular_dict[triangular-1]):\n        if triangular_dict[triangular-1] - i >= triangular:\n            if triangular_dict[triangular-1] - i - triangular_dict[i] >= triangular:\n                result = i\n            else:\n                result = triangular_dict[triangular-1] - i - triangular_dict[i]\n                break\n\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(10**n):\n        triangular_numbers.append(i*(10**n))\n    min_triangular = min(triangular_numbers)\n    index = triangular_numbers.index(min_triangular)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    while len(str(max(triangular_numbers))) < n:\n        max_triangular_number = max(triangular_numbers)\n        triangular_numbers.append(max_triangular_number + math.sqrt(max_triangular_number**2 + 2 * max_triangular_number))\n    \n    index = triangular_numbers.index(max(triangular_numbers))\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = test_tup[i-1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    new_dict = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        new_dict[key] = value\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    \"\"\"\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Create a dictionary to store key-value pairs\n    my_dict = {}\n    # Iterate over the elements of the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the current element as a key and the next element as a value in the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return {i: test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The tuple should have an even number of elements.\")\n    else:\n        return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[:-1]) and s[-1] == s[-1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # get the first character of the string\n    first_char = s[0]\n    # loop through the string and check if all characters are the same\n    for char in s:\n        if char!= first_char:\n            return False\n    # if the loop completes without returning False, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(len(s)):\n        if char!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, else False.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        first_char = s[0]\n        for char in s[1:]:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as an input and checks whether all the characters are the same or not.\n\n    Args:\n        s (str): The string to be checked for all characters being the same.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Loop through the string and compare each character with the first character\n    for char in s:\n        if char!= first_char:\n            # If a different character is found, return False\n            return False\n\n    # If all characters match, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (s**2 * (math.sqrt(2)/2))**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 1/3 * (side * (side + math.sqrt(3)) + math.sqrt(3) * side)\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 * (1 + math.cos(math.acos(1/3))))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2/4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)\n    area = (s**0.5)*0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (s * (side ** 2)) / 5\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a new list with the elements of the original list rotated to the right by n items.\n    \"\"\"\n    # Convert the input list to a list of tuples\n    lst = [(i, x) for i, x in enumerate(lst)]\n    # Get the last n items of the list\n    last_n_items = lst[-n:]\n    # Reverse the order of the last n items\n    lst = lst[:-n]\n    # Reverse the order of the entire list\n    lst = lst[::-1]\n    # Combine the last n items with the reversed list\n    lst += last_n_items\n    # Convert the list of tuples back to a list\n    lst = [x[1] for x in lst]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    if m == 0:\n        return list\n    for i in range(m):\n        last = list[n-1]\n        for j in range(n-2, -1, -1):\n            list[j+1] = list[j]\n        list[0] = last\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(m % n):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If m is greater than n, rotate m % n times\n    while m > n:\n        m = m % n\n    # Perform the rotation\n    for i in range(n-m):\n        list[i], list[i+m] = list[i+m], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list.reverse()\n    list[0:m] = list[m:] + list[0:m]\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    # reverse list from 0 to n-m-1\n    list[:n-m] = list[:n-m][::-1]\n    # reverse list from n-m to n-1\n    list[n-m:n] = list[n-m:n][::-1]\n    # reverse list from 0 to n-1\n    list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # find the length of the list\n    n = len(list)\n\n    # rotate the list by m items\n    for i in range(m % n):\n        list.append(list.pop(0))\n\n    # return the rotated list\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): the lower bound of the range\n        endnum (int): the upper bound of the range\n\n    Returns:\n        list: a list of numbers that meet the requirements\n    \"\"\"\n    # Convert the numbers to strings\n    startstr = str(startnum)\n    endstr = str(endnum)\n\n    # Calculate the digits of each number as a set of characters\n    start_digits = set(str(startnum))\n    end_digits = set(str(endnum))\n\n    # Generate a list of digits to check against\n    digits = set('0123456789')\n\n    # Define a lambda function to check if a number is divisible by a digit\n    divisible_by = lambda x, d: x % d == 0\n\n    # Filter the list of numbers to find those that are divisible by all digits\n    divisible_nums = [num for num in range(int(startstr), int(endstr)+1) if all(divisible_by(num, d) for d in digits)]\n\n    # Filter the list of numbers to find those that are divisible by at least one digit\n    divisible_by_at_least_one = [num for num in divisible_nums if any(d in str(num) for d in digits)]\n\n    return divisible_by_at_least_one"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Returns a list of numbers from startnum to endnum that are divisible by every digit in their string representation.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        if lambda_func(str(num)):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        return all(d in str(num) for d in str(num))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    # using map() function to iterate through range of numbers\n    # and filter() function to filter out numbers that are not divisible by every digit it contains\n    divisible_numbers = list(filter(lambda x: all(d in str(x) for d in set(str(x))), range(startnum, endnum+1)))\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(i) % int(digit) == 0 for i in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = lambda num: sorted(set(str(num)))\n    filtered_nums = [num for num in range(startnum, endnum + 1) if all(int(digit) % 2!= 0 for digit in digits(num))]\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within 0 to 360 degrees range\n    if not (-math.pi <= a <= math.pi):\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    \"\"\"\n    \n    # check if angle is within limits\n    if a > 360:\n        return None\n    \n    # calculate area of sector using formulas\n    area = math.pi * (r ** 2) * (a / 360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    s = 2 * r * math.sin(math.radians(a/2))\n    area = math.pi * r**2\n    return area - s"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * math.sin(a/180*math.pi)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within acceptable range\n    if a > 360:\n        return None\n    \n    # calculate area using formula for sector\n    area = math.pi * r**2 * a / 360\n    \n    # return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should be less than or equal to 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r ** 2 * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within the valid range (0 to 360 degrees)\n    if a < 0 or a > 360:\n        print(\"Angle must be between 0 and 360 degrees.\")\n        return None\n    \n    # Convert angle from degrees to radians\n    angle = math.radians(a)\n    \n    # Calculate area of sector using Heron's formula\n    area = (3/2) * r * r * angle\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Step 2\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Step 3\n    lcs = []\n    i = m\n    j = n\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1: Create a table to store lengths of longest common subsequences of prefixes of X[0..m-1], Y[0..n-1] and Z[0..p-1]\n    L = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    # Step 2: Fill table L[][] in bottom up manner. Note that L[i][j][k] will store length of LCS of X[0..i-1], Y[0..j-1], and Z[0..k-1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Step 3: Now fill LCS[] in top down manner\n    LCS = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            LCS.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i - 1][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    LCS.reverse()\n    return ''.join(LCS)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0 for j in range(m + 1)] for i in range(n + 1)] \n  \n    # Step 1: Compute LCS length in p[][] using dynamic programming \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 2: Build LCS string \n    lcs = \"\" \n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        L = [[0] * (o + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                        L[i][j] = L[i - 1][j - 1] + 1\n                    else:\n                        L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n        return L[m][n]\n\n    return lcs(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][k] = dp[i - 1][j] + 1\n                else:\n                    dp[i][k] = max(dp[i - 1][k], dp[i][k - 1], dp[i - 1][j])\n\n    return dp[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n    lcs_length = p[n][m]\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find the length of the three strings\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store the lengths of LCS for all possible\n    # substrings of the three strings\n    table = [[0 for j in range(p+1)] for i in range(n+1)]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Initialize the variables to store the LCS\n    lcs = \"\"\n    i = n\n    j = p\n\n    # Backtrack to get the LCS\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a 2D matrix to store the length of LCS for all prefixes of X, Y, and Z\n    LCS = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the matrix in bottom up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n    # Traverse the matrix to find the LCS\n    i, j = len(X), len(Y)\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif LCS[i - 1][j] > LCS[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS\n    lcs = lcs[::-1]\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dictionary to store the length of the longest common subsequences for all possible substrings of each string\n    dp = {}\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store the lengths of the longest common subsequences for all possible substrings of each string\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[(i, j, k)] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1\n                else:\n                    dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)])\n\n    # Create a 3D table to store the common subsequences\n    lcs_table = [[['' for j in range(o+1)] for k in range(o+1)] for i in range(m+1)]\n\n    # Fill the 3D table with the longest common subsequences\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_table[i][j][k] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[(i-1, j, k)] == dp[(i, j-1, k)]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join([row[j][k] for j in range(o+1) for k in range(o+1)])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store the length of LCS for all possible prefixes of X,Y and Z\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j][k-1]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # store the LCS from the bottom-up table\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif X[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_str =''.join([word.capitalize() for word in words])\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all the words in the string to lower case\n    str1 = str1.lower()\n\n    # Use regular expressions to match all the capital letters followed by a space\n    pattern = re.compile(r'([A-Z][a-z]+)')\n\n    # Split the string based on the pattern\n    words = pattern.split(str1)\n\n    # Join the words with spaces\n    str1 =''.join(words)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    \n    # Join the words with spaces and capitalize the first letter of each word\n    result =''.join([word.capitalize() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # replace the words starting with capital letters with spaces\n    result = re.sub(pattern, r' \\1', str1)\n    # remove leading and trailing spaces\n    result = result.strip()\n    # return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    This function takes a string as input and returns a modified string where spaces are inserted between words starting with capital letters.\n    \"\"\"\n    pattern = r\"\\b[A-Z][a-z]*\\b\"\n    result = re.sub(pattern, r\"\\1 \", string)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # split the string into words\n    words = str1.split()\n    # join the words with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all the capital words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Use list comprehension to add spaces between the words and return the final string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r\"(?<=[a-z])[A-Z](?=[a-z])\", r\" \\1\", str1)\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for s in nums_str:\n        if s.isdigit():\n            nums.append(int(s))\n        else:\n            nums.append(s)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers numerically\n    nums.sort()\n    # convert the sorted list of integers back to a list of strings\n    sorted_nums = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the integers\n    nums.sort()\n    # Convert the integers back to strings\n    nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = sorted(nums_str, key=lambda x: [int(y) for y in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and sorts them numerically using the Python sort() method.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Use the built-in `sorted` function to sort the list\n    sorted_nums = sorted(nums)\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Splitting the list into a list of numbers\n    nums = [int(num) for num in nums_str]\n    # Sorting the list of numbers in ascending order\n    nums.sort()\n    # Joining the sorted numbers back into a list of strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    # convert all the strings in the list to integers and add them to a list\n    for num_str in nums_str:\n        try:\n            num_list.append(int(num_str))\n        except ValueError:\n            continue\n    # sort the list numerically\n    num_list.sort()\n    # convert the sorted list back to strings and return it\n    return [str(num) for num in num_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Use the sorted() function to sort the list numerically\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [int(num_str) for num_str in nums_str]  # convert strings to integers\n    nums.sort()  # sort the list\n    return nums  # return the sorted list of integers"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the list and the tuple into a new list\n    new_list = test_list + test_tup\n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through the list and add each element to the tuple\n    for element in test_list:\n        test_tup += (element,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] >= arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    if i < 0:\n        return True\n    \n    if arr[i] < arr[parent(i)]:\n        return False\n    \n    return check_min_heap_helper(arr, parent(i))\n\ndef parent(i):\n    \"\"\"\n    Return the index of the parent node of node i.\n    \"\"\"\n    return (i - 1) // 2\n\ndef is_min_heap(arr):\n    \"\"\"\n    Return True if the given array represents a min heap, False otherwise.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2)\n\narr = [4, 2, 1, 3, 5, 6, 7]\nprint(is_min_heap(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i == 0:\n        return True\n    \n    # Compare with parent node\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # Check left child node\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    \n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Check the base case\n    if len(arr) == 1:\n        return True\n    \n    # Check the middle node\n    if arr[len(arr)//2] < arr[0]:\n        return False\n    \n    # Check the left and right child nodes recursively\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n\n    if i >= len(arr):\n        return True\n\n    if arr[i] >= arr[i+1]:\n        return False\n\n    return check_min_heap_helper(arr, i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if the root node is greater than or equal to the left child\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    # check if the left child is greater than or equal to the right child\n    if i*2+1 < len(arr) and arr[i] < arr[i*2+1]:\n        return False\n    # recursively call the helper function for the left and right children\n    return check_min_heap_helper(arr, i*2) and check_min_heap_helper(arr, i*2+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # return True if the array represents a min heap, else False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] > arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        left = 2 * i\n        right = 2 * i + 1\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        elif right < len(arr) and arr[right] < arr[i]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i // 2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [1]\n    for i in range(2, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    # initialize the jacobsthal number to 0\n    jacobsthal_num = 0\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # multiply the jacobsthal number by 2\n        jacobsthal_num *= 2\n\n        # check if the jacobsthal number is a jacobsthal lucas number\n        if is_jacobsthal_lucas_num(jacobsthal_num):\n            return jacobsthal_num\n\ndef is_jacobsthal_lucas_num(num):\n    \"\"\"\n    Check if the given number is a jacobsthal lucas number.\n    \"\"\"\n    # initialize the previous number to 1\n    prev_num = 1\n\n    # loop through the range of numbers from 1 to half of the given number\n    for i in range(1, num//2+1):\n        # multiply the previous number by 2\n        prev_num *= 2\n\n        # check if the previous number is equal to the given number\n        if prev_num == num:\n            return True\n\n    # if the loop completes without finding a match, then the number is not a jacobsthal lucas number\n    return False"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (1 + (2*n-1)) * jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sieve_of_eratosthenes(n):\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Create an array to store the Jacobsthal numbers\n    jacobsthal_numbers = []\n    # Initialize the first 5 Jacobsthal numbers\n    jacobsthal_numbers.append(0)\n    jacobsthal_numbers.append(1)\n    jacobsthal_numbers.append(1)\n    jacobsthal_numbers.append(3)\n    jacobsthal_numbers.append(5)\n\n    # Iterate through all Jacobsthal numbers and append to the array if prime\n    for i in range(5, n+1):\n        if prime[i]:\n            jacobsthal_numbers.append(i)\n\n    return jacobsthal_numbers\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    # Initialize the first two values of the jacobsthal number series\n    jacobsthal1 = 0\n    jacobsthal2 = 1\n    \n    # Loop through the range of n and update the values of jacobsthal1 and jacobsthal2\n    for i in range(2, n+1):\n        # Compute the next value of jacobsthal1 as the sum of jacobsthal2 and the previous value of jacobsthal1\n        jacobsthal1 = jacobsthal2 + jacobsthal1\n        \n        # Update jacobsthal2 to the current value of jacobsthal1\n        jacobsthal2 = jacobsthal1\n    \n    # Return the value of jacobsthal2 as the nth jacobsthal number\n    return jacobsthal2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_nums = [0, 1]  # initialize the list with 0 and 1\n\n    for i in range(2, n+1):  # iterate over the range from 2 to n\n        next_num = (jac_nums[i-1] * (3*jac_nums[i-2] + 1)) // (2*i-1)  # calculate the next jacobsthal number\n        jacob_nums.append(next_num)  # append the next jacobsthal number to the list\n\n    return jacob_nums"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*(jacobsthal_num(n-1) + jacobsthal_num(n-2))"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup[0] not in freq_dict:\n            freq_dict[tup[0]] = 1\n        else:\n            freq_dict[tup[0]] += 1\n\n    # Create a list to store the frequency tuples in descending order\n    freq_list = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # Find the minimum k frequency tuples\n    min_k_freq_list = freq_list[:K]\n\n    # Create a list to store the minimum k frequency tuples in ascending order\n    min_k_list = [tup for tup in test_list if tup[0] in [tup_freq[0] for tup_freq in min_k_freq_list]]\n\n    # Return the minimum k frequency tuples\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return None\n    min_records = sorted(test_list, key=lambda x: x[1])\n    return min_records[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create an empty dictionary to store frequency of each element in the list\n    freq = {}\n\n    # Loop through each element in the list\n    for i in test_list:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if i not in freq:\n            freq[i] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[i] += 1\n\n    # Initialize a variable to store the minimum frequency seen so far\n    min_freq = float('inf')\n\n    # Create an empty list to store the elements with minimum frequency\n    min_list = []\n\n    # Loop through each element in the dictionary\n    for i in freq:\n        # If the frequency of the element is less than the minimum frequency seen so far, update the minimum frequency and the list of elements with that frequency\n        if freq[i] < min_freq:\n            min_freq = freq[i]\n            min_list = [i]\n        # If the frequency of the element is equal to the minimum frequency seen so far, add it to the list of elements with that frequency\n        elif freq[i] == min_freq:\n            min_list.append(i)\n\n    # If K is greater than the length of the list, return all elements with frequency equal to the minimum frequency seen so far\n    if K > len(min_list):\n        return min_list\n\n    # Sort the list of elements with the minimum frequency in descending order\n    min_list.sort(reverse=True)\n\n    # Return the first K elements of the list of elements with the minimum frequency in descending order\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_value = float('inf')\n    min_count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                min_value = min(min_value, test_list[i][1])\n                min_count += 1\n            elif test_list[i][1] < test_list[j][1]:\n                min_value = min(min_value, test_list[j][1])\n                min_count += 1\n            else:\n                min_value = min(min_value, test_list[i][1])\n                min_count += 1\n                if min_count == K:\n                    return test_list[i]\n\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # create a list to store the minimum k records\n    min_list = []\n    # create a dictionary to store the frequency of each record\n    freq_dict = {}\n    \n    # iterate through the tuple list\n    for i in test_list:\n        # if the record is already in the dictionary, increment its frequency\n        if i in freq_dict:\n            freq_dict[i] += 1\n        # if the record is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[i] = 1\n            \n    # iterate through the dictionary to find the minimum k records\n    for i in freq_dict:\n        # if the length of the list of minimum k records is less than K, add the current record to the list\n        if len(min_list) < K:\n            min_list.append(i)\n        # if the length of the list of minimum k records is equal to K, compare the frequency of the current record with the frequency of the minimum record in the list\n        elif freq_dict[i] < freq_dict[min_list[0]]:\n            min_list[0] = i\n            \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Initialize variables to store minimum values and their indices\n    min_values = {}\n    min_indices = {}\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Check if the current tuple is in the min_values dictionary\n        if test_list[i] in min_values:\n            # If it is, compare the value of the current tuple with the current minimum value\n            if test_list[i][1] < min_values[test_list[i]]:\n                # If the current value is smaller, update the minimum value and its index\n                min_values[test_list[i]] = test_list[i][1]\n                min_indices[test_list[i]] = i\n        else:\n            # If the current tuple is not in the min_values dictionary, add it with its value and index\n            min_values[test_list[i]] = test_list[i][1]\n            min_indices[test_list[i]] = i\n            # If the number of tuples in the min_values dictionary is greater than K, remove the minimum value and its index from the dictionary\n            if len(min_values) > K:\n                # Get the keys of the min_values dictionary\n                keys = list(min_values.keys())\n                # Sort the keys in ascending order\n                keys.sort()\n                # Remove the last key from the sorted list\n                del keys[-1]\n                # Remove the corresponding value from the min_values dictionary\n                for key in keys:\n                    if min_values[key] == min_values[keys[-1]]:\n                        del min_values[key]\n                        del min_indices[key]\n                # Continue looping until the length of the min_values dictionary is less than or equal to K\n                if len(min_values) > K:\n                    continue\n    # Create a list to store the minimum k records\n    min_k_records = []\n    # Loop through the keys of the min_indices dictionary\n    for key in min_indices.keys():\n        # Add the minimum k records to the min_k_records list\n        if len(min_k_records) < K:\n            min_k_records.append(key)\n        # If the number of tuples in the min_k_records list is greater than K, remove the minimum record and its index from the dictionary\n        elif len(min_k_records) == K:\n            # Get the keys of the min_values dictionary\n            keys = list(min_values.keys())\n            # Sort the keys in ascending order\n            keys.sort()\n            # Remove the last key from the sorted list\n            del keys[-1]\n            # Remove the corresponding value from the min_values dictionary\n            for key in keys:\n                if min_values[key] == min_values[keys[-1]]:\n                    del min_values[key]\n                    del min_indices[key]\n            # If the number of tuples in the min_values dictionary is greater than K, remove the minimum value and its index from the dictionary\n            if len(min_values) > K:\n                # Get the keys of the min_values dictionary\n                keys = list(min_values.keys())\n                # Sort the keys in ascending order\n                keys.sort()\n                # Remove the last key from the sorted list\n                del keys[-1]\n                # Remove the corresponding value from the min_values dictionary\n                for key in keys:\n                    if min_values[key] == min_values[keys[-1]]:\n                        del min_values[key]\n                        del min_indices[key]\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(None)\n    # Sort the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Iterate over the sorted tuple list and append the minimum values to the min_list\n    for i in range(K):\n        if min_list[i] is None:\n            min_list[i] = test_list[i]\n        else:\n            min_list[i] = min(min_list[i], test_list[i])\n    # Return the minimum k values from min_list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(min(test_list, key=lambda x: x[i]))\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case, modified for test cases\n    '''\n    min_k_value = None\n    min_k_records = []\n\n    for record in test_list:\n        if len(min_k_records) < K:\n            min_k_records.append(record)\n            if min_k_value is None or record[1] < min_k_value[1]:\n                min_k_value = record\n        elif len(min_k_records) == K:\n            if record[1] < min_k_value[1]:\n                min_k_value = record\n                min_k_records.remove(min_k_records[0])\n                min_k_records.append(record)\n\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is also in all the other lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # Loop through each index of l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at that index is present in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to hold common elements\n    common_elements = []\n    \n    # loop through each element in list l1\n    for i in range(len(l1)):\n        # check if the element exists in list l2 and list l3\n        if l1[i] in l2 and l1[i] in l3:\n            # if the element exists in both lists, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common = []\n    \n    # loop through each index of each list\n    for i in range(len(l1)):\n        # check if the element at the current index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # if it is, add it to the common list\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # create an empty list to store the common elements\n    common_elements = []\n    \n    # loop through each element in l1\n    for i in range(len(l1)):\n        # check if the element is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # add the element to the common elements list\n            common_elements.append(l1[i])\n    \n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = min(numbers)\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    # initialize variables\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    # iterate over the list and update smallest and second_smallest\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    # return the second smallest value\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')  # initialize the smallest variable to infinity\n    second_smallest = float('inf')  # initialize the second smallest variable to infinity\n\n    # iterate through the numbers list and update the smallest and second smallest variables\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n\n    # return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"Not enough elements in the list.\"\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return \"Match found\"\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    return re.match(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    return pattern.search(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize two empty dictionaries to store the frequency of characters and the count of pairs\n    freq = {}\n    pair_count = {}\n    # Loop through the list of strings\n    for string in test_list:\n        # Reverse the string\n        reverse_string = string[::-1]\n        # Check if the reverse string is already in the dictionary\n        if reverse_string in freq:\n            # Increment the count of the pair\n            pair_count[reverse_string] = pair_count.get(reverse_string, 0) + 1\n        # If the reverse string is not in the dictionary, increment the frequency of each character in the string\n        else:\n            # Increment the frequency of each character in the string\n            for char in string:\n                freq[char] = freq.get(char, 0) + 1\n    # Return the count of pairs\n    return len(pair_count)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # initialize a dictionary to store the count of pairs of reverse strings\n    count_dict = {}\n\n    # iterate through the list of strings\n    for string in test_list:\n        # convert the string to a list of characters\n        string_list = list(string)\n\n        # reverse the string\n        reversed_string = string_list[::-1]\n\n        # convert the reversed string back to a string\n        reversed_string = ''.join(reversed_string)\n\n        # check if the reversed string is already in the dictionary\n        if reversed_string in count_dict:\n            # increment the count for this string in the dictionary\n            count_dict[reversed_string] += 1\n        else:\n            # add the string to the dictionary with a count of 1\n            count_dict[reversed_string] = 1\n\n    # return the count of pairs of reverse strings in the dictionary\n    return sum(count_dict.values()) // 2"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(j+1, len(test_list[i])):\n                if test_list[i][j:k+1] == test_list[i][k:j:-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    # Initialize variables\n    count = 0\n    n = len(test_list)\n    \n    # Iterate through the list\n    for i in range(n):\n        # Initialize two pointers\n        left = i + 1\n        right = n - 1\n        \n        # Traverse the list and check for reverse pairs\n        while left < right:\n            # Check if the strings are reversed\n            if test_list[left] == test_list[right][::-1]:\n                count += 1\n                left += 1\n                right -= 1\n            elif test_list[left] < test_list[right]:\n                left += 1\n            else:\n                right -= 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                if count % 100000 == 0:\n                    print(\"Processed {} pairs\".format(count))\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of each sublist\n    sublist_count = {}\n\n    # Iterate through each element of the list1\n    for item in list1:\n\n        # Convert the list to a tuple and check if it exists in the sublist_count dictionary\n        if tuple(item) in sublist_count:\n\n            # Increment the count of the sublist in the dictionary\n            sublist_count[tuple(item)] += 1\n\n        else:\n\n            # Add the sublist to the dictionary with count 1\n            sublist_count[tuple(item)] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_dict = {}\n    \n    for sublist in list1:\n        # Convert sublist to tuple and count its occurrences\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    \n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list.\n    The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the list to a set to get unique elements\n    unique_lst = set(lst)\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    # Iterate over the unique elements in the list\n    for i, lst_elem in enumerate(unique_lst):\n        # Create a tuple of the unique element and its index in the list\n        tup = (lst_elem, i)\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Define an empty dictionary to store the unique lists and their count\n    unique_dict = {}\n\n    # Loop through the original list\n    for item in list1:\n\n        # Convert the list to a tuple to check for uniqueness\n        tuple_item = tuple(item)\n\n        # Check if the tuple exists in the dictionary\n        if tuple_item not in unique_dict:\n\n            # If it doesn't, add it and its count to the dictionary\n            unique_dict[tuple_item] = 1\n\n        # If the tuple already exists in the dictionary, increment its count\n        else:\n            unique_dict[tuple_item] += 1\n\n    # Return the dictionary with the unique lists and their count\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert all lists to tuples and remove duplicates\n    list1 = list(set([tuple(x) for x in list1]))\n\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Iterate through each tuple in the list\n    for tuple_list in list1:\n        # Check if the tuple is already in the dictionary\n        if tuple_list in count_dict:\n            # If it is, increment its count by 1\n            count_dict[tuple_list] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tuple_list] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = list1[i:i+10] # extract a sublist of size 10 starting from the ith element\n        sublist = tuple(sublist) # convert the sublist to a tuple\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of sublists\n    counts = {}\n    # iterate over all lists in the first list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's in the counts dictionary\n        count = counts.get(tuple(sublist), 0) + 1\n        counts[tuple(sublist)] = count\n    # return the counts dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        for subitem in item:\n            sublists[tuple(subitem)] = sublists.get(tuple(subitem), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sorted(sublist)) not in sublist_count:\n            sublist_count[tuple(sorted(sublist))] = 1\n        else:\n            sublist_count[tuple(sorted(sublist))]+=1\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the given string is a decimal number\n    if num.replace('.', '', 1).isdigit() and num.replace('.', '', 1).count('.') <= 1:\n        # Check if the decimal part of the number has a precision of 2\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) <= 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        # check if the string can be converted to a float with a precision of 2\n        if num.split('.')[1].isdigit() and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string cannot be converted to a float, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if num.count('.') == 1 and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    \n    # remove non-numeric characters and convert to string\n    clean_num = ''.join(c for c in num if c.isdigit())\n    \n    # check if the length of the clean number is less than 2\n    if len(clean_num) < 2:\n        return False\n    \n    # check if the clean number is a decimal number with a precision of 2\n    try:\n        decimal.Decimal(clean_num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the input string has exactly 2 digits after the decimal point\n    if len(num)!= 3 or '.' not in num:\n        return False\n    \n    # Extract the integer and fractional parts of the input string\n    integer_part, fractional_part = num.split('.')\n    \n    # Check if the integer part has a precision of 2\n    if len(integer_part) > 2:\n        return False\n    \n    # Check if the fractional part has a precision of 2\n    if len(fractional_part) > 2:\n        return False\n    \n    # If all checks pass, the input string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # convert the string to a float\n    num = float(num)\n\n    # determine if the float has 2 decimal places\n    if num % 1 == 0.0:\n        if '.' in str(num):\n            # if there is a decimal point, then we need to check for 2 decimal places\n            decimal_places = str(num)[::-1].index('.')\n            if decimal_places < 2:\n                return True\n            else:\n                return False\n        else:\n            # if there is no decimal point, we need to check for a whole number\n            if num > 0 and num % 1 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True if len(str(num).split('.')[1]) <= 2 else False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    decimal_count = 0\n    for digit in num:\n        if digit == '.':\n            decimal_count += 1\n            if decimal_count > 1:\n                return False\n        elif not digit.isdigit():\n            return False\n        elif decimal_count == 1 and not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_list = num.split('.')\n    if len(num_list)!= 2:\n        return False\n    for digit in num_list[0]:\n        if digit.isdigit() and int(digit) > 9:\n            return False\n    for digit in num_list[1]:\n        if digit.isdigit() and int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list has only one element\n    if len(arr) == 1:\n        return True\n\n    # Initialize a dictionary to store the unique elements of the list\n    unique_dict = {}\n\n    # Iterate through the list and add each element to the dictionary\n    for element in arr:\n        unique_dict[element] = True\n\n    # Check if there are any elements in the dictionary\n    if len(unique_dict) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_set = set(arr)  # create a set of the array elements\n    if len(unique_set) == 1:  # check if the set has only one element\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr) # converting the list to a set to remove duplicates\n    if len(unique) == 1: # checking if the length of the set is equal to 1\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the list is 0\n    if len(arr) == 0:\n        return True\n\n    # Initialize the unique element count to 0\n    unique_count = 0\n\n    # Iterate through the list\n    for num in arr:\n\n        # If the current element is not equal to the previous unique element, increment the unique element count\n        if num!= arr[unique_count]:\n            unique_count += 1\n\n        # If the unique element count is greater than the length of the list, the list contains more than one unique element\n        if unique_count > len(arr):\n            return False\n\n    # If the unique element count is equal to the length of the list, the list contains only one unique element\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100!= 0:\n            if monthnum3 % 4 == 0:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 in range(4,7) and monthnum3%4 == 0:\n            days_in_months[1] = 29\n        elif monthnum3 in range(1,4):\n            days_in_months[1] = 28\n        if days_in_months[monthnum3-1] == 28 and monthnum3 in range(4,12):\n            return True\n        elif days_in_months[monthnum3-1] == 29 and monthnum3 in range(4,7):\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 % 2 == 0:\n        return (monthnum3//2)*30 + 29\n    else:\n        return (monthnum3//2)*30\n\nyear = int(input(\"Enter the year: \"))\nmonthnum3 = int(input(\"Enter the month number (starting from 1): \"))\n\nif monthnum3 < 1 or monthnum3 > 12:\n    print(\"Invalid month number!\")\nelse:\n    if check_monthnumber_number(monthnum3) <= 30:\n        print(monthnum3, \"has 30 days.\")\n    else:\n        print(monthnum3, \"has\", check_monthnumber_number(monthnum3), \"days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        # Even months have 30 days\n        return True\n    elif monthnum3 % 4 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        # Leap years have 29 days\n        return True\n    else:\n        # Non-leap years have 28 days\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum3 in range(1,13) and monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            if year.is_leap(year.today().year):\n                days[1] = 29\n            else:\n                days[1] = 28\n        return days[monthnum3-1]\n    else:\n        print(\"Invalid Month Number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n    if monthnum3 in range(1, 13):\n        if months[monthnum3-1].endswith(\"uary\"):\n            return True\n        elif months[monthnum3-1].endswith(\"ober\") or months[monthnum3-1].endswith(\"non\"):\n            return True\n        elif months[monthnum3-1].endswith(\"march\"):\n            return True\n        elif months[monthnum3-1].endswith(\"may\") or months[monthnum3-1].endswith(\"june\"):\n            return True\n        elif months[monthnum3-1].endswith(\"july\") or months[monthnum3-1].endswith(\"august\"):\n            return True\n        elif months[monthnum3-1].endswith(\"september\") or months[monthnum3-1].endswith(\"october\"):\n            return True\n        elif months[monthnum3-1].endswith(\"november\") or months[monthnum3-1].endswith(\"december\"):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # list of days in months\n    \n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0):\n                days_in_months[1] = 29\n            else:\n                days_in_months[1] = 28\n        return days_in_months[monthnum3-1]\n    else:\n        print(\"Invalid month number!\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array\n    arr.sort()\n\n    # Finding the minimum difference\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Checking for smaller differences in adjacent pairs\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[n] - arr[0]\n    for i in range(n-1):\n        if arr[i+1]-arr[i] < diff:\n            diff = arr[i+1]-arr[i]\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n-1] - arr[n-2]\n\n    # Loop through the sorted array\n    for i in range(1, n-1):\n        # If the current element is greater than the next element, then the minimum difference is the difference between the current element and the next element\n        if arr[i] > arr[i+1]:\n            min_diff = arr[i+1] - arr[i]\n        # If the current element is less than the previous element, then the maximum difference is the difference between the current element and the previous element\n        elif arr[i] < arr[i-1]:\n            max_diff = arr[i] - arr[i-1]\n        # If the current element is between the previous and the next elements, then find the minimum and maximum difference\n        else:\n            min_diff = min(min_diff, arr[i+1] - arr[i])\n            max_diff = max(max_diff, arr[i] - arr[i-1])\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the current difference\n    min_diff = arr[1] - arr[0]\n    curr_diff = abs(arr[0] - arr[1])\n\n    # Traverse through the array\n    for i in range(2, n):\n        # Calculate the current difference\n        curr_diff = abs(arr[i] - arr[i - 1])\n\n        # Update the minimum difference if necessary\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = [arr[i], arr[j]]\n    return min_diff, min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array\n    :param arr: list of integers\n    :param n: size of the array\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    The function iterates over the array and finds the minimum difference between any two elements.\n    '''\n    min_diff = float('inf')  # initialize minimum difference variable to infinity\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])  # find the absolute difference between the two elements\n            if diff < min_diff:\n                min_diff = diff  # update minimum difference if current difference is smaller\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array in non-decreasing order\n    arr.sort()\n\n    # Initialize variables for minimum difference and two indices for first and second element\n    min_diff = arr[1] - arr[0]\n    i = 1\n    j = 2\n\n    # Loop until the end of the array is reached\n    while j < n:\n        # Calculate the difference between the current elements and the next element in the array\n        diff = arr[j] - arr[i]\n\n        # Check if the current difference is smaller than the minimum difference found so far\n        if diff < min_diff:\n            # Update the minimum difference\n            min_diff = diff\n\n        # Move the indices to find the next pair of elements\n        i += 1\n        j += 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array must have at least 2 elements\"\n\n    min_diff = float('inf')\n    min_pair = (float('inf'), float('inf'))\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_diff, min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_nth_polite_num(start, end):\n        polite_num = start\n        while polite_num <= end:\n            if is_prime(polite_num):\n                return polite_num\n            polite_num += 1\n\n    polite_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n    nth_polite_num = get_nth_polite_num(1, 10000)\n    return nth_polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 2*is_polite(n-1) + 1\n\ndef nth_polite(n):\n    \"\"\"\n    Write a function to find nth polite number using the previous function.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        return is_polite(n)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th polite number is:\", nth_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function determines if a number is a polite number or not.\n    A polite number is a positive integer whose first digit is not 0.\n    '''\n    # Check if the number is a positive integer\n    if n <= 0:\n        return False\n\n    # Check if the first digit is not 0\n    if str(n)[0] == '0':\n        return False\n\n    # Calculate the nth polite number\n    nth_polite = 10**int(math.log10(n)) * (n + 1)\n\n    # Check if the nth polite number is greater than the original number\n    if nth_polite > n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Define a function to check if a number is polite or not\n    def is_polite_helper(num, i):\n        if num == 0:\n            return True\n        elif num == 1:\n            return False\n        else:\n            for j in range(2, int(math.sqrt(num))+1):\n                if num % j == 0:\n                    return False\n            return True\n    \n    # Find the nth polite number\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        count += is_polite_helper(i, 0)\n    \n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # find the nth polite number\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        for i in range(5, n+1):\n            if (2*i**2 - 1) % 4 == 0 and (2*i**2 - 1)!= 2*i**2:\n                return 2*i**2 - 1\n        return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Maximum polite number is 10^6\n    if n > 600000: \n        return -1\n    # Initial values for nth polite number\n    a = 1\n    b = 2\n    count = 0\n    # Iterate through the sequence of polite numbers\n    while count < n: \n        # If a is not prime, increment b and continue\n        if not is_prime(a): \n            b += 1\n            continue\n        # If a is prime, check if it is polite\n        else: \n            # If b is a prime number, return a as nth polite number\n            if is_prime(b): \n                return a\n            # If b is not a prime number, increment b and continue\n            else: \n                b += 1\n    return -1\n\ndef is_prime(n): \n    '''\n    Function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return None\n    polite_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n in polite_numbers:\n        return n\n    elif n % 2 == 0:\n        return is_polite(n // 2)\n    else:\n        return is_polite((n * 3) + 1)\n\nif __name__ == \"__main__\":\n    n = 50\n    print(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    # Initialize the sieve to mark all numbers as composite\n    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n\n    # Mark the numbers that are not composite\n    for i in range(2, int(math.sqrt(n))+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n\n    # Iterate through the sieve to find the nth polite number\n    for i in range(2, n+1):\n        if sieve[i]:\n            return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def count_primes(limit):\n        count = 0\n        for i in range(2, limit+1):\n            if all(i % j!= 0 for j in range(2, int(math.sqrt(i))+1)):\n                count += 1\n        return count\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_nth_polite(n):\n        count = count_primes(n)\n        for i in range(2, n+1):\n            count += 1\n            if count_primes(i) == count:\n                return i\n\n    return get_nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Function to check if a number is a polite number \n    def is_polite_num(num):\n        if num < 10:\n            return False\n        elif 20 <= num < 100:\n            if num % 10 == 0:\n                return True\n            else:\n                return False\n        elif num >= 100:\n            return True\n\n    # Initialize the variable to store the nth polite number\n    nth_polite = 0\n\n    # Loop through all numbers from 1 to n \n    for i in range(1, n+1):\n\n        # Check if the number is a polite number \n        if is_polite_num(i):\n\n            # If it is, increment the variable \n            nth_polite += 1\n\n        # If the nth polite number has been found, exit the loop \n        if nth_polite == n:\n            return i\n\n    # If the nth polite number has not been found, return -1 \n    return -1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    # initialize an empty list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(lst)-1):\n        # check if the current and the next item are consecutive\n        if lst[i] + 1 == lst[i+1]:\n            # if they are, add them to the pairs list\n            pairs.append((lst[i], lst[i+1]))\n    # return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    # Initialize an empty list to store the pairs\n    pairs = []\n    # Iterate through the list\n    for i in range(len(l1)-1):\n        # Append the current item and the next item in the list to the pairs list\n        pairs.append([l1[i], l1[i+1]])\n    # Return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the input list.\n    \"\"\"\n    n = len(lst)\n    res = []\n    for i in range(n-1):\n        res.append((lst[i], lst[i+1]))\n    return res"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    return li_diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a set of items from both lists\n    s = set(li1 + li2)\n    # convert the set back to a list\n    return list(s)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the elements that are present only in one of the lists.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return set1.symmetric_difference(set2)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements in list1 that are not present in list2.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Create a set to store the elements of the first list\n    set1 = set(li1)\n    # Create a set to store the elements of the second list\n    set2 = set(li2)\n    # Find the elements in the first set that are not in the second set\n    diff = set1 - set2\n    # Convert the set to a list and return it\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Initialize a new empty list to store the difference\n    diff_list = []\n\n    # Loop through the first list and compare each element with the second list\n    for elem in li1:\n        # If the element is not present in the second list, add it to the diff_list\n        if elem not in li2:\n            diff_list.append(elem)\n\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the elements that are present in li1 but not in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_fourth_pow = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_fourth_pow += i**4\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    for i in range(2, n, 2):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of the number\n        power = i**4\n        # Add the fourth power to the sum\n        total_sum += power\n\n    # Return the total sum of fourth powers of odd natural numbers\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    \n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n            \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum and count\n    sum_of_fourth_powers = 0\n    count = 0\n\n    # Loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the number\n        fourth_power = i ** 4\n\n        # Add the fourth power to the sum of fourth powers\n        sum_of_fourth_powers += fourth_power\n\n        # Increment the count\n        count += 1\n\n    # Return the sum of fourth powers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            sum += i**4\n            count += 1\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            right_paren = stack.pop()\n            if i - right_paren!= 1:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    # Create a stack to store the opening parentheses\n    stack = deque()\n    \n    # Traverse through the expression from right to left\n    for i in range(len(exp)-1, -1, -1):\n        # If the current character is an opening parenthesis, push it onto the stack\n        if exp[i] == '(':\n            stack.append(exp[i])\n        # If the current character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif exp[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    \n    # If the stack is empty, then the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '[', '{'}\n    close_parentheses = {')', ']', '}'}\n\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if close_parentheses[char] == stack.pop():\n                continue\n            else:\n                return False\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack for storing opening brackets\n    stack = deque()\n\n    # iterate through the expression\n    for char in exp:\n        # if the character is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # if the character is a closing bracket, check if it matches the top of the stack\n        elif char in [')', '}', ']']:\n            # if it does not match, return False\n            if not stack:\n                return False\n            # if it does match, pop the top of the stack and continue\n            else:\n                if char == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif char == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif char == ']' and stack[-1] == '[':\n                    stack.pop()\n\n    # if the stack is empty, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create an empty stack\n    stack = deque()\n\n    # Traverse through each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it into the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the opening parenthesis from the stack and continue checking the expression until all opening parenthesis have been popped\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    # If all characters have been processed and there are no more opening parenthesis left in the stack, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"Not balanced\"\n            if stack.pop()!= '(':\n                return \"Not balanced\"\n    return \"Balanced\" if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store the opening parenthesis\n    stack = deque()\n\n    # loop through the expression\n    for i in range(len(exp)):\n        # if the character is an opening parenthesis\n        if exp[i] == '(':\n            stack.append(i)\n        # if the character is a closing parenthesis\n        elif exp[i] == ')':\n            # if the stack is empty, return False\n            if not stack:\n                return False\n            # if the top element of the stack is less than the index of the current closing parenthesis, return False\n            elif stack[-1] < i:\n                return False\n            # if the top element of the stack is greater than or equal to the index of the current closing parenthesis, remove it from the stack\n            else:\n                stack.pop()\n\n    # if the stack is not empty, return False\n    if stack:\n        return False\n    # otherwise, return True\n    else:\n        return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a list to store the words with k length\n    words_k = []\n    \n    # Loop through all words and check if the length of the word is equal to K\n    for word in words:\n        if len(word) == K:\n            # If the length is equal to K, add the word to the list of words with k length\n            words_k.append(word)\n    \n    # Join the list of words with k length into a string and return it\n    return''.join(words_k)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    \n    # Remove the words with length equal to K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Loop through each word in the list of words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not K, add it to the filtered_words list\n            filtered_words.append(word)\n    \n    # Join the filtered_words list of words into a string\n    filtered_str = \" \".join(filtered_words)\n    \n    # Return the filtered_str\n    return filtered_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words without length K\n    words_without_K = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length of the word is not K, append it to the list of words without length K\n            words_without_K.append(word)\n    \n    # Join the list of words without length K into a string and return it\n    return \" \".join(words_without_K)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        print(f\"The pattern {pattern} found {len(result)} times in the string {text}.\")\n        for match in result:\n            print(f\"Match found at position {text.index(match)}: {match}\")\n    else:\n        print(f\"The pattern {pattern} not found in the string {text}.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    for match in matches:\n        start_index = text.index(match)\n        end_index = start_index + len(match)\n        print(\"Occurrences of '{}' in the string: {}\".format(match, matches.count(match)))\n        print(\"Position of the first occurrence: {}\".format(start_index))\n        print(\"Position of the last occurrence: {}\".format(end_index))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            index = text.find(match)\n            print(\"Match: {}, Index: {}\".format(match, index))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use regex to find all substrings that match the pattern\n    matches = re.finditer(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Iterate over the matches and store the position and occurrence\n    occurrences = []\n    for match in matches:\n        occurrences.append((match.start(), match.end(), match.group()))\n\n    # Return the list of occurrences\n    return occurrences"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use regex to search for pattern in text\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if not matches:\n        return None\n\n    # Return the first match and its position in the text\n    else:\n        return matches[0], matches.index(matches[0])"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern not in text:\n        return None\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"Match found at position {start}: '{match.group()}'\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a counter for odd numbers in each odd position\n    odd_count = [0] * len(nums)\n\n    # Iterate through the list and count the odd numbers in each position\n    for num in nums:\n        if num % 2 == 0:\n            odd_count[num // 2] += 1\n\n    # Check if every odd position has an odd number\n    return all(odd_count[i] % 2 == 1 for i in range(len(nums)))"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2!= 0:\n                return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # checks if the index is odd\n            if sum(nums[i:]) % 2!= 0: # checks if the sum of odd numbers after the current index is odd\n                return False # returns False if any odd index fails the condition\n    return True # returns True if all odd indices pass the condition"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i-1] in vowels) or (i < len(test_str)-1 and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # create a set of the elements in the list\n    unique_elements = set(arr)\n    # use the set to count the frequency of each element\n    frequency_dict = {}\n    for elem in unique_elements:\n        frequency_dict[elem] = arr.count(elem)\n    # find the sum of the elements with frequency 1\n    sum_of_ones = sum([elem for elem, freq in frequency_dict.items() if freq == 1])\n    # return the sum of all elements\n    return sum_of_ones"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize the sum variable\n    sum_variable = 0\n    # Iterate through the set and add each element to the sum variable\n    for element in unique_set:\n        sum_variable += element\n    # Return the sum variable\n    return sum_variable"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to keep track of the non-repeated elements\n    unique_set = set(arr)\n    # calculate the sum of the unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    # initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    # iterate over the sorted list\n    for num in sorted_list:\n        # add the current number to the sum\n        sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through each element in the list\n    for num in arr:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # Otherwise, increment the frequency of the element\n        else:\n            freq[num] += 1\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Loop through the dictionary and add up the non-repeated elements\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Initialize the sum variable to 0\n    sum_non_repeating = 0\n    \n    # Iterate through the dictionary and add the elements whose count is 1 to the sum\n    for key, value in count_dict.items():\n        if value == 1:\n            sum_non_repeating += int(key)\n    \n    # Return the sum of non-repeating elements\n    return sum_non_repeating"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_list = list(set(arr))\n    sum_of_unique = sum(unique_list)\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # sum up all the unique elements\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped_list = groupby(list1)\n    consecutive_duplicates = []\n\n    for key, group in grouped_list:\n        if key!= list1[0]:\n            consecutive_duplicates.append(list(group))\n\n    return consecutive_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pack_consecutive_duplicates(lst):\n    grouped = groupby(enumerate(lst), lambda x: x[0] - x[1])\n    return [list(group) for key, group in grouped if key == 0]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = sorted(list1, key=lambda x: (len(list(g)), x))\n    packed_list = [list(group) for key, group in groupby(grouped_list, key=lambda x: (len(list(g)), x)) if not key]\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use itertools.groupby() to group consecutive elements of the list\n    grouped_list = groupby(list1)\n\n    # Define a list to store the packed sublists\n    packed_list = []\n\n    # Loop through the grouped_list and extract consecutive duplicates\n    for key, group in grouped_list:\n        # If the first element of the group is the same as the current element, add the current element to the current sublist\n        if key == next(group)[0]:\n            packed_list[-1].append(next(group)[0])\n        # If the first element of the group is different from the current element, create a new sublist with the current element\n        else:\n            packed_list.append([next(group)[0]])\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(enumerate(list1), lambda i: i[1] == i[0] + 1)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique lists\n    unique_lists = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Turn each list to a tuple and add it to the unique_lists dictionary\n        unique_lists[tuple(sublist)] = unique_lists.get(tuple(sublist), 0) + 1\n\n    # Return the unique_lists dictionary\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary to store the sublist occurrences\n    sublist_occurrences = {}\n\n    # Iterate over each element in the input list\n    for element in list1:\n        # If the element is a list, convert it to a tuple and count its occurrences in the sublist_occurrences dictionary\n        if type(element) == list:\n            for sublist in element:\n                sublist_occurrences[sublist] = sublist_occurrences.get(sublist, 0) + 1\n\n    return sublist_occurrences"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    # loop through each element in the list\n    for i in list1:\n        # if the element is not a list, create a tuple with the element and a count of 1\n        if not isinstance(i, list):\n            count_dict[tuple([i])] = 1\n        # if the element is a list, convert it to a tuple and add it to the dictionary with a count of 1\n        else:\n            count_dict[tuple(i)] = 1\n    # return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    \n    # Loop through each element of the list1\n    for item in list1:\n        # Convert the item to a tuple\n        sublist = tuple(item)\n        # Check if the tuple is already in the dictionary\n        if sublist in sublist_counts:\n            # If it is, increment its count by 1\n            sublist_counts[sublist] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublist_counts[sublist] = 1\n    \n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the number of occurrences of each sublist\n    counts = {}\n    # Loop through each sublist in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the given list\n    for sublist in list1:\n\n        # Check if the sublist is already in the dictionary\n        if sublist in counts:\n\n            # Increment the count for this sublist in the dictionary\n            counts[sublist] += 1\n\n        # If the sublist is not in the dictionary, add it with a count of 1\n        else:\n\n            counts[sublist] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_counts[tuple(sublist)] = sublist_counts.get(tuple(sublist), 0) + 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_dict:\n            sublist_dict[tuple_sublist] += 1\n        else:\n            sublist_dict[tuple_sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples of tuples\n    tuples_list = [tuple(combination) for combination in combinations(test_list, 2)]\n    # create a list of tuples of sums\n    sums_list = [(sum(combination)) for combination in tuples_list]\n    # create a dictionary to store the combinations and their sums\n    combinations_dict = dict(zip(tuples_list, sums_list))\n    # return the dictionary\n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    n = len(test_list)\n    res = []\n    for i in range(1, n+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == total_sum:\n                res.append(combo)\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all possible combinations of sums \n    with tuples in the given tuple list.\n    '''\n    \n    # Find the total sum of all tuples in the list\n    total_sum = sum(sum(t) for t in test_list)\n    \n    # Use itertools.combinations() to generate all combinations of sums with tuples in the list\n    for combination in combinations(test_list, r=2):\n        # Extract the two tuples from the combination and calculate their sum\n        tuple1 = combination[0]\n        tuple2 = combination[1]\n        sum1 = sum(sum(t) for t in tuple1)\n        sum2 = sum(sum(t) for t in tuple2)\n        \n        # Check if the sum of the two tuples is equal to the total sum of the list\n        if sum1 + sum2 == total_sum:\n            # If the sum is equal, add the two tuples to the result list\n            result.append((tuple1, tuple2))\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # create a list of tuples with the sum of the elements in the list\n    sums = [(x, y) for x in test_list for y in test_list if x+y not in test_list]\n\n    # find the combinations of sums with tuples\n    result = [combination for combination in combinations(sums, 2)]\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    # Find all combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                all_combinations.append((test_list[i], test_list[j], test_list[k]))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize variables\n    count = 0\n    result = []\n\n    # Iterate through the list of tuples and find the combinations with sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the current pair of tuples\n            current_sum = test_list[i][0] + test_list[j][0]\n\n            # Check if the current sum is present in the list of tuples\n            if current_sum in test_list:\n                # Check if the current pair of tuples has already been added to the result\n                if (test_list[i][0], test_list[j][0]) not in result:\n                    count += 1\n                    result.append((test_list[i][0], test_list[j][0]))\n\n    # Return the number of combinations and the list of combinations\n    return count, result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list of tuples in non-decreasing order\n    test_list.sort()\n\n    # generate all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            yield test_list[i], test_list[j]"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                result.append(tuple(sorted([test_list[i][0], test_list[j][1]])))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # To store the combinations of sums with tuples\n    result = []\n\n    # Sort the given tuple list in ascending order\n    test_list.sort()\n\n    # Loop through all possible tuples in the tuple list\n    for i in range(len(test_list)):\n        # Loop through all possible tuples that can be formed by excluding the first element of the current tuple\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the two tuples\n            sum_of_tuple = test_list[i][0] + test_list[j][0]\n\n            # Check if the sum is present in the tuple list\n            if sum_of_tuple in test_list:\n                # If it is, add the combination to the result list\n                result.append((test_list[i], test_list[j]))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    all_tuples = combinations(test_list, len(test_list))\n    for combination in all_tuples:\n        if sum(combination) == total_sum:\n            print(combination)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # Function to calculate the count of divisors of a number\n    def count_div(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        return count\n    \n    # Calculate the count of divisors of n\n    count = count_div(n)\n    \n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a positive integer n as input and returns True if the count of divisors is even, else False.\n    '''\n    # Check for even count of divisors\n    if len(set(divisors(n))) % 2 == 0:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    This function returns a list of all the divisors of a given number n.\n    '''\n    # Base case for 1 and n\n    if n == 1 or n == n:\n        return []\n    # Base case for n-1\n    if n == n-1:\n        return [n]\n    # Recursive case\n    return [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, otherwise it returns False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the count of divisors of a given number n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1:\n        return 0\n    \n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 1\n    \n    if divisor_count == 0:\n        return 0\n    else:\n        return 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return \"The count of divisors is odd.\"\n    if count == 0:\n        return \"The count of divisors is even.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    # Using the Euclidean algorithm to calculate the number of divisors\n    def euclidean_algorithm(n):\n        # Initialize the divisor to 2\n        divisor = 2\n        # Initialize the count of divisors to 0\n        count = 0\n        # Calculate the remainder of the division of n by divisor\n        while n % divisor == 0:\n            # Increment the count of divisors\n            count += 1\n            # Divide n by the divisor\n            n //= divisor\n        return count\n    \n    # Calculate the number of divisors of n\n    count = euclidean_algorithm(n)\n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_length = 0\n    sum_odd_subarrays = 0\n\n    for i in range(1, n):\n        if i > max_length:\n            max_length = i\n\n        if i % 2 == 1:\n            sum_odd_subarrays += arr[i - max_length]\n\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. \n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0: # if i is even, it will not be a valid subarray\n            continue\n        subarray_sum = sum(arr[i:i+2])\n        total_sum += subarray_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, min(i+5, n)):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n//2+1):\n        for j in range(i, n-i+1, i):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n-2):\n        if i%2 == 0:\n            continue\n        curr_sum = arr[i]\n        for j in range(i+1, n-1):\n            curr_sum += arr[j]\n            if j%2 == 1:\n                sum_odd += curr_sum\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of odd length subarrays\n    sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Loop through each element in the array from the current index\n        for j in range(i+1, len(arr)):\n            # Check if the length of the subarray is odd\n            if j-i+1 % 2!= 0:\n                # If the length is odd, add the elements in the subarray to the sum\n                sum += arr[i] + arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total_sum += arr[j-2]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initialize a variable to store the sum of all odd length subarrays\n    total_sum = 0\n\n    # iterate over each subarray in the input array\n    for i in range(1, len(arr)):\n        # check if the length of the current subarray is odd\n        if len(arr[i]) % 2 == 1:\n            # check if the current subarray ends at the end of the array\n            if i == len(arr) - 1:\n                # add the sum of the current subarray to the total sum\n                total_sum += sum(arr[i])\n            else:\n                # add the sum of the current subarray to the total sum\n                total_sum += sum(arr[i]) + odd_length_sum(arr[i+1:])\n\n    # return the total sum of all odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr) - 1):\n        total += sum(arr[i:i+2])\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to keep track of the sum of odd length subarrays\n    sum_of_odd_subarrays = 0\n\n    # Loop through the array and check each subarray of odd length\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            # Add the current odd length subarray to the sum\n            sum_of_odd_subarrays += arr[j]\n\n    # Return the sum of odd length subarrays\n    return sum_of_odd_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    Args:\n        r (int): Red value between 0 and 255.\n        g (int): Green value between 0 and 255.\n        b (int): Blue value between 0 and 255.\n\n    Returns:\n        h (float): Hue value between 0 and 360.\n        s (float): Saturation value between 0 and 1.\n        v (float): Value value between 0 and 1.\n    \"\"\"\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        h = 60 * (((cmax - b) / delta) % 6) if delta == cmax else 60 * (((cmax - r) / delta) + 2)\n\n        if h < 0:\n            h += 360\n\n    if cmax == r:\n        v = (g - b) / delta\n    elif cmax == g:\n        v = (b - r) / delta + 2\n    else:\n        v = (r - g) / delta + 4\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    \n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = 60 * ((g - b) / delta)\n        elif max_value == g:\n            h = 60 * ((b - r) / delta + 2)\n        else:\n            h = 60 * ((r - g) / delta + 4)\n        \n        if h < 0:\n            h += 360\n        \n        s = delta / max_value\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes the RGB color values and returns the HSV color values\n    H - Hue: 0 to 360 degrees\n    S - Saturation: 0 to 1\n    V - Value: 0 to 1\n    '''\n\n    r, g, b = r/255, g/255, b/255 # Scale the values to the range 0 to 1\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n\n    if max_rgb == min_rgb: # If the color is grey\n        h = 0\n        s = 0\n    elif max_rgb == r: # If the color is dominantly red\n        h = (g - b) / delta_rgb\n        if h < 0:\n            h += 6\n        h = h * 60\n    elif max_rgb == g: # If the color is dominantly green\n        h = (b - r) / delta_rgb + 120\n    elif max_rgb == b: # If the color is dominantly blue\n        h = (r - g) / delta_rgb + 240\n\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb / max_rgb\n\n    v = max_rgb\n\n    hsv_color = [int(h), int(s*255), int(v*255)]\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert the input rgb color to the hsv color model\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_color / 255\n\n    if max_color == min_color:\n        h = 0\n    else:\n        delta = max_color - min_color\n        s = delta / max_color\n\n        if r == max_color:\n            h = (g - b) / delta\n        elif g == max_color:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n    # Convert the hsv color model to the output hsv color\n    if s == 0:\n        hsv = (h, 0, v * 100)\n    else:\n        hsv = (h, s * 100, v * 100)\n\n    return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to HSV color model.\n    '''\n\n    # Convert RGB to R,G,B intensities\n    r, g, b = int(r), int(g), int(b)\n\n    # Find minimum and maximum intensities\n    min_int, max_int = min(r, g, b), max(r, g, b)\n\n    # Find the delta between the maximum and minimum intensities\n    delta = max_int - min_int\n\n    # Find the hue, saturation, and value of the color\n    if max_int == r:\n        h = (g - b) / delta\n    elif max_int == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h % 6\n\n    if h < 0:\n        h += 6\n\n    s = delta / max_int\n\n    if s == 0:\n        v = 0\n    else:\n        v = max_int / 255\n\n    # Convert h,s,v to HSV format\n    hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes the RGB values of a color and converts them to HSV color model.\n    \"\"\"\n    # Find the max and min values in the RGB color model\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between the max and min values\n    delta = max_val - min_val\n\n    # Find the saturation and value of the color\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    else:\n        if max_val == r:\n            hue = ((g - b) / delta) % 6\n        elif max_val == g:\n            hue = (b - r) / delta + 2\n        elif max_val == b:\n            hue = (r - g) / delta + 4\n\n        if hue < 0:\n            hue += 6\n\n        saturation = delta / max_val\n\n    # Return the HSV values of the color\n    return (hue, saturation, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0  # scale to [0, 1]\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    if h < 0:\n        h += 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert R, G and B to their respective values in the range of [0, 255]\n    r, g, b = r/255, g/255, b/255\n\n    # Calculate the minimum and maximum values in the RGB color space\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the delta between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the hue in the HSV color model\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # Calculate the saturation and value in the HSV color model\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    value = max_val\n\n    # Return the converted values in a dictionary\n    return {'hue': hue*360,'saturation': saturation, 'value': value}"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integers representing red, green, and blue values of an rgb color and returns a tuple of \n    three floating point values representing the hue, saturation, and value of the color.\n    \n    Example usage:\n    hsv_color = rgb_to_hsv(255, 0, 0)\n    print(hsv_color) # Output: (0.0, 1.0, 1.0)\n    \"\"\"\n    \n    # Convert rgb to rbg values (0-255) to 0-1 range\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find the minimum and maximum values of the rgb values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the hue value\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Convert the hue value to the range of 0 to 1\n    hue = hue / 6\n    \n    # Calculate the saturation and value values\n    saturation = delta / max_val\n    \n    # If the saturation is 0, set the value to 1\n    if saturation == 0:\n        value = max_val\n    else:\n        value = delta / saturation\n    \n    # Return the tuple of hsv values\n    return (hue, saturation, value)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    # Initialize the variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # Iterate over the list\n    for i in range(len(lst)):\n        # Check if the number is even or odd\n        if lst[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # Multiply the products if both even and odd numbers are present\n        if even_count > 0 and odd_count > 0:\n            product *= lst[i]\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= num\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    \n    return \"The given list does not contain even and odd numbers\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    if even_count!= 0 and odd_count!= 0:\n        return even_sum * odd_sum\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    \n    if even_sum == 0 and odd_sum == 0:\n        return 0\n    else:\n        return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        product *= even * odd\n    \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n            \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by space\n    str_split = test_str.split()\n    \n    # Initialize the integer list and the tuple list\n    int_list = []\n    tup_list = []\n    \n    # Loop through each string in the list\n    for string in str_split:\n        # If the string is an integer, add it to the integer list\n        if string.isdigit():\n            int_list.append(int(string))\n        # If the string is a tuple, convert it to a tuple and add it to the tuple list\n        elif len(string.strip('(').strip(')').split(',')) == 2:\n            tup_list.append(tuple(map(int, string.strip('(').strip(')').split(','))))\n    \n    # Return the tuple list\n    return tup_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(s):\n        '''\n        Convert string to integer.\n        '''\n        try:\n            return int(s)\n        except ValueError:\n            return None\n    \n    def str_to_tuple(s):\n        '''\n        Convert string to tuple of integers.\n        '''\n        int_list = s.replace('(', '').replace(')', '').replace(',','').split()\n        int_tuple = tuple(int_list)\n        return int_tuple\n    \n    # convert string to tuple of integers\n    int_tuple = str_to_tuple(test_str)\n    \n    # convert tuple of integers to string\n    int_str = str(int_tuple)\n    \n    # convert string back to tuple of integers\n    int_tuple = str_to_tuple(int_str)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple\n        test_tup = tuple(test_str.split(','))\n        # Convert tuple to integer tuple\n        test_int_tup = tuple(int(i) for i in test_tup)\n        # Return the integer tuple\n        return test_int_tup\n    except ValueError:\n        print(\"Invalid input. Please provide a valid tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    list_of_tuples = test_str.split('(')\n    \n    # Remove the last element from the list\n    list_of_tuples = list_of_tuples[:-1]\n    \n    # Convert the list of tuples into a list of integers\n    int_list = [int(x) for x in list_of_tuples]\n    \n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string by spaces\n    split_str = test_str.split()\n    # Create an empty list to hold the converted integers\n    int_list = []\n    # Loop through each element in the split string\n    for element in split_str:\n        # Check if the element is a number\n        try:\n            # Convert the element to an integer and add it to the list\n            int_list.append(int(element))\n        except ValueError:\n            # If the element is not a number, add it to the list as a string\n            int_list.append(element)\n    # Convert the list of integers back to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of strings\n    str_list = [x.strip() for x in test_str.split(',')]\n    # Convert the list of strings to a list of integers\n    int_list = [int(x) for x in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n\n    # Initialize an empty integer list\n    int_list = []\n\n    # Iterate through the list and convert each string to an integer\n    for str_num in str_list:\n        int_num = int(str_num)\n        int_list.append(int_num)\n\n    # Convert the integer list into a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of tuples\n    tuple_list = test_str.split('(')\n\n    # Initialize an empty integer tuple\n    result = ()\n\n    # Loop through each tuple in the list\n    for tup in tuple_list:\n        # Split the tuple into a list of integers\n        int_list = tup.split(',')\n\n        # Loop through each integer in the list\n        for int in int_list:\n            # Convert the integer to an integer and add it to the result tuple\n            result += (int,)\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    string_list = test_str.split(',')\n\n    # Convert each string to an integer and add it to a list\n    int_list = []\n    for string in string_list:\n        int_list.append(int(string))\n\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A sorted list of numbers.\n    x (int): A number to search for in the list.\n\n    Returns:\n    int: The index of the right insertion point.\n\n    \"\"\"\n    # Use binary search to find the index of the right insertion point\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx if idx < len(a) and a[idx] == x else idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i += 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the rightmost index i such that a[i] < x\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # If x is not in a, append it at the end of the list\n        a.append(x)\n        i = len(a) - 1\n    elif a[i] < x:\n        # If x is greater than all the elements to its right, append it at the end of the list\n        a.append(x)\n        i = len(a) - 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    elif a[i-1] > x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index - 1] + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{3}b')\n    matches = pattern.findall(text)\n    if matches:\n        print(\"The string '{}' contains three 'a's followed by three 'b's\".format(text))\n    else:\n        print(\"The string '{}' does not contain three 'a's followed by three 'b's\".format(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\bb'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b{3})')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b{3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the two lists into a single list\n    combined_list = test_list + [test_str]\n    # convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the string and the tuple\n    new_tuple = (test_str + str(test_tuple))\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string\n    combined_str = test_str + str(test_list)\n    # Convert the combined string into a tuple\n    new_tuple = tuple(combined_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list to be included in the new tuple.\n    test_str (str): A string to be included in the new tuple.\n\n    Returns:\n    A new tuple created from the given list and string.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.extend(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_found = True\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 0:\n            even_found = False\n            break\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if not any(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through the list and check if the number at each even index is even\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue  # Move to the next even index if the number at that index is even\n        else:\n            return False  # If the number at the even index is odd, return False because the even indices don't contain even numbers\n\n    return True  # If all even indices contain even numbers, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count == 0:\n                return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n    if even_count == sum(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(filter(lambda x: x % 2 == 0, nums[i:i+2])))!= len(set(nums[i:i+2])):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist if isinstance(item, tuple) == False]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define a list to store the flattened tuple\n    flattened_tup = []\n    # Use recursion to flatten the tuple\n    flatten_helper(test_tup, flattened_tup)\n    # Return the flattened tuple\n    return flattened_tup\n\ndef flatten_helper(tup, flattened_tup):\n    '''\n    A helper function to flatten a tuple recursively.\n    '''\n    # If the tuple is not a tuple, append it to the flattened list\n    if not isinstance(tup, tuple):\n        flattened_tup.append(tup)\n        return\n    # Recursively call the flatten_helper function on each element of the tuple\n    for elem in tup:\n        flatten_helper(elem, flattened_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_helper(test_tup):\n        if isinstance(test_tup, tuple):\n            for i in range(len(test_tup)):\n                test_tup[i] = remove_nested_helper(test_tup[i])\n        else:\n            return test_tup\n    return remove_nested_helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup if isinstance(i, str)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    if type(input_list) == list:\n        count = 1\n        for sublist in input_list:\n            count += count_list(sublist)\n        return count\n    else:\n        return 0"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    if isinstance(input_list, list):\n        count = 1\n        for item in input_list:\n            count += count_list(item)\n        return count\n    else:\n        return 0"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in arr, or None if x is not in arr.\n    \"\"\"\n    # Initialize the left and right indices\n    left = 0\n    right = len(arr) - 1\n\n    # Loop until the left index is less than or equal to the right index\n    while left <= right:\n        # Find the midpoint of the current window\n        mid = (left + right) // 2\n\n        # If the element at the midpoint is greater than x, update the left index\n        if arr[mid] > x:\n            right = mid - 1\n        # If the element at the midpoint is less than or equal to x, update the right index\n        else:\n            left = mid + 1\n\n    # If x is not in arr, return None\n    if left > len(arr) - 1:\n        return None\n\n    # Otherwise, return the left index\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two parameters: an array and a value to find the last position of.\n    It returns the index of the last occurrence of the value in the array, or -1 if the value is not found in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Given a sorted array and an element x, return the index of the last occurrence of x in the array.\n    If x is not in the array, return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1  # Move left pointer to the left of mid\n        elif arr[mid] < x:\n            left = mid + 1  # Move right pointer to the right of mid\n        else:\n            return -1  # x is not in the array\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # find the middle index of the current range\n        mid = (left + right) // 2\n        \n        # if the middle element is equal to x, return its index\n        if arr[mid] == x:\n            return mid\n        \n        # if the middle element is greater than x, search the right half of the range\n        elif arr[mid] < x:\n            left = mid + 1\n            \n        # if the middle element is less than x, search the left half of the range\n        else:\n            right = mid - 1\n    \n    # if the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    # Traverse the array from the first element to the last element\n    for i in range(len(arr)):\n        # If the current element is equal to the target element, update the last index\n        if arr[i] == x:\n            last_index = i\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # find the first index of the element x in the array\n    first_index = arr.index(x)\n    # find the last index of the element x in the array\n    last_index = arr.index(x, first_index + 1)\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, arr (a sorted array) and x (an element to be searched in the array).\n    It returns the last index of the element in the array, if it is present in the array.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize two pointers - left and right - to the first and last indices of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array until we find the last occurrence of the element x\n    while arr[left]!= x and left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        else:\n            left = mid + 1\n\n    # If the element x is not found, return -1\n    if arr[left]!= x:\n        return -1\n\n    # Otherwise, return the index of the last occurrence of x in the array\n    return left"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z])[a-zA-Z]+(?![a-zA-Z])b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"(?<![a-z])a[a-zA-Z]*b(?![a-z])\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for value in dict.values():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odds = 0\n    for i in range(1, n+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the range of numbers from l to r (inclusive)\n    for num in range(l, r+1):\n        # If the number is odd, add it to the sum\n        if num % 2!= 0:\n            sum += num\n    # Return the sum of odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Given the lower and upper limit of a range of natural numbers,\n    this function calculates the sum of all odd natural numbers within that range.\n\n    Parameters:\n    l (int): lower limit of the range of natural numbers\n    r (int): upper limit of the range of natural numbers\n\n    Returns:\n    int: sum of all odd natural numbers within the given range\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # set lower and upper bounds for the range\n    l = 1\n    r = n\n\n    # initialize the sum to 0\n    sum = 0\n\n    # iterate through the range and add the odd numbers to the sum\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    # return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # get the lower and upper limit of the range\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize the sum to zero\n    sum_odd = 0\n\n    # loop through all the odd natural numbers between l and r\n    for i in range(l, r+1, 2):\n        # add the current odd natural number to the sum\n        sum_odd += i\n\n    # return the sum of all odd natural numbers between l and r\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range [1, n].\n    '''\n    # initialize a variable to store the sum of odd natural numbers\n    sum_odd = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add it to the sum of odd natural numbers\n            sum_odd += i\n    # return the sum of odd natural numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for num in arr:  \n        sum += num  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): A list of integers\n\n    Returns:\n    int: The sum of all elements in the list\n    \"\"\"\n\n    # Initialize a variable to hold the sum\n    total = 0\n\n    # Loop through each element in the list\n    for num in arr:\n        # Add the element to the total\n        total += num\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    # loop through each element in the array\n    for num in arr:\n        # add the current element to the total\n        total += num\n    # return the total\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert number to binary string\n    num_bin = bin(n)[2:]\n\n    # calculate number of zeros at the beginning of binary string\n    zeros = len(num_bin) - d\n\n    # if there are not enough zeros, add more zeros\n    if zeros < 0:\n        num_bin = '0' * (-zeros) + num_bin\n        zeros = 0\n\n    # rotate the binary string to the left by d bits\n    rotated_bin = num_bin[-d:] + num_bin[:-d]\n\n    # convert the rotated binary string back to an integer\n    rotated_int = int(rotated_bin, 2)\n\n    # return the rotated integer\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary to integer\n    n = int(n, 2)\n    \n    # Rotate left by d bits\n    n = (n << d) | (n >> (32 - d))\n    \n    # Convert integer back to binary\n    return bin(n)[2:].zfill(32)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask # Mask out the upper 32 bits\n    n = (n << d) | (n >> (32 - d)) # Rotate left by d bits\n    n = n & mask # Mask out the lower 32 bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary format\n    binary_str = bin(n)[2:]\n    # Pad the binary string with zeros\n    binary_str = '0'*(32 - len(binary_str)) + binary_str\n    # Find the position of the most significant bit (MSB)\n    MSB_index = binary_str.index('1')\n    # Find the position of the least significant bit (LSB)\n    LSB_index = 31\n    # Calculate the new MSB index\n    new_MSB_index = MSB_index - d % 32\n    # Calculate the new LSB index\n    new_LSB_index = LSB_index - (d % 32)\n    # Check if the new MSB index is less than 0\n    if new_MSB_index < 0:\n        new_MSB_index = 31\n    # Check if the new LSB index is less than 0\n    if new_LSB_index < 0:\n        new_LSB_index = 31\n    # Reverse the binary string\n    binary_str = binary_str[::-1]\n    # Extract the MSB and LSB parts of the binary string\n    MSB_part = binary_str[:new_MSB_index + 1]\n    LSB_part = binary_str[new_MSB_index + 1:new_LSB_index - 1:-1]\n    # Reverse the MSB and LSB parts of the binary string\n    MSB_part = MSB_part[::-1]\n    LSB_part = LSB_part[::-1]\n    # Extract the carry part of the binary string\n    carry_part = binary_str[new_LSB_index - 1]\n    # Reverse the carry part of the binary string\n    carry_part = carry_part[::-1]\n    # Combine the MSB and LSB parts with the carry part\n    new_binary_str = MSB_part + LSB_part + carry_part\n    # Convert the binary string back to a decimal integer\n    new_num = int(new_binary_str, 2)\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string\n    bin_str = format(n, '032b')\n\n    # Reverse the binary string\n    bin_str_rev = bin_str[::-1]\n\n    # Calculate the number of zeros to be shifted\n    num_zeros = 32 - d\n\n    # Concatenate the number of zeros to the binary string\n    bin_str_padded = bin_str_rev[:d] + '0' * num_zeros + bin_str_rev[d:]\n\n    # Convert the binary string back to an integer\n    result = int(bin_str_padded, 2)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the integer n to a string and reverse its order\n    n_str = bin(n)[::-1]\n    # Find the length of the binary representation of n\n    n_len = len(n_str)\n    # Find the number of bits to rotate left\n    rot_len = n_len - d\n    # Pad the binary representation of n with zeros to the desired length\n    n_str = n_str.zfill(n_len)\n    # Find the first d bits to rotate and reverse them\n    rot_bits = n_str[:rot_len][::-1]\n    # Rotate the remaining bits to the left by d positions\n    new_n = int(rot_bits + n_str[rot_len:], 2)\n    # Convert the integer to its original binary representation\n    new_n_str = bin(new_n)[2:][::-1]\n    # Convert the binary representation back to an integer and return it\n    return int(new_n_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Pad the binary string with zeros to make it d bits long\n    padded_binary = binary.zfill(d)\n    # Convert the padded binary string back to decimal\n    rotated_number = int(padded_binary, 2)\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary and add zeroes until it has d bits\n    binary_n = bin(n)[2:].zfill(d)\n\n    # Convert the binary string to decimal and perform the rotation\n    rotated_n = int(binary_n[:d], 2) + int(binary_n[d:], 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    Assumes that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a 32-bit binary string\n    bin_str = format(n, '032b')\n\n    # Reverse the binary string\n    rev_bin_str = bin_str[::-1]\n\n    # Calculate the number of bits to rotate\n    num_bits = len(bin_str)\n    shift = d % num_bits\n\n    # Rotate the binary string\n    rotated_bin_str = rev_bin_str[shift:] + rev_bin_str[:shift]\n\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated_bin_str, 2)\n\n    return rotated_int"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all spaces from a string.\n    '''\n    # Remove all spaces using regular expressions\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    # Remove all whitespaces from the string using regular expressions\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string using regular expressions.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if x == y == z == num:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    # Check if all three integers are equal\n    if x == y == z:\n        # Count the number of equal integers\n        count = 0\n        for num in (x, y, z):\n            if num == x:\n                count += 1\n        return count\n    else:\n        return None"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # Initialize variables to store the count of equal numbers\n    count = 0\n    # Iterate over the list of numbers\n    for num in [x, y, z]:\n        # If the number is equal to the current number, increment the count\n        if num == x:\n            count += 1\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    n = len(arr)   \n    # Create a list of indices for sorting   \n    indices = list(range(n))   \n    # Create a list of lists where each inner list represents a rotation   \n    rotations = []   \n    # Traverse through all possible rotations and count the number of swaps required   \n    for i in range(n):   \n        j = i   \n        while j < n-1 and arr[j] > arr[j+1]:   \n            arr[j], arr[j+1] = arr[j+1], arr[j]   \n            j += 1   \n        # Append the rotation to the list of rotations   \n        rotations.append(arr[:j+1])   \n        # Reverse the first i elements of the array   \n        arr[:i] = arr[:i][::-1]   \n    # Count the number of rotations required   \n    count = 0   \n    for rotation in rotations:   \n        if rotation == sorted(rotation):   \n            count += 1   \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Initialize the count variable to zero\n    count = 0\n\n    # Initialize the left pointer to the first element of the array\n    left = 0\n\n    # Initialize the right pointer to the last element of the array\n    right = len(arr) - 1\n\n    # Initialize the current element to the second element of the array\n    current = arr[1]\n\n    # Perform binary search to find the pivot element\n    while left <= right:\n        mid = (left + right) // 2\n        if current <= arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # The pivot element is the last element of the array\n    pivot = right\n\n    # Initialize the current pointer to the second element of the array\n    current = arr[1]\n\n    # Perform binary search to find the leftmost element of the sorted array\n    while left <= right:\n        mid = (left + right) // 2\n        if current >= arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # The leftmost element of the sorted array is the first element of the array\n    leftmost = left\n\n    # Calculate the number of rotations required to generate the sorted array\n    if leftmost < pivot:\n        count += pivot - leftmost\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Check if the element is already at the end of the array\n        if i == n-1:\n            return count\n        # Check if the element is already at its correct position\n        if arr[i] < arr[i+1]:\n            return count\n        # Check if the element needs to be moved to its correct position\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the count and start index of the current sorted sub-array\n    count = 0\n    start = 0\n    # Iterate through the array\n    for end in range(n):\n        # If the current element is greater than the next element, swap the current element and the next element\n        if arr[end] > arr[end+1]:\n            arr[end], arr[end+1] = arr[end+1], arr[end]\n            # Increment the count and reset the start index to end+1\n            count += 1\n            start = end+1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    \n    # Check if array is sorted or not\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the first element which is greater than the second element\n    i = 1\n    while i < n and arr[i] <= arr[0]:\n        i += 1\n    \n    # Find the last element which is greater than the second last element\n    j = n-2\n    while j >= 0 and arr[j] <= arr[n-1]:\n        j -= 1\n    \n    # Find the minimum element which is greater than the second last element\n    k = i-1\n    while k >= 0 and arr[k] <= arr[j]:\n        k -= 1\n    \n    # Calculate the number of rotations required to sort the array\n    num_rotations = j - i + 1\n    \n    return num_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0  # no rotation required\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # swap adjacent elements\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n    \n    return count_rotation(arr) + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is sorted or not\n    if n == 1 or arr[0] <= arr[n-1]:\n        return 0\n    # loop through the array and count the number of inversions\n    count = 0\n    for i in range(n):\n        j = i+1\n        while j < n and arr[i] > arr[j]:\n            j += 1\n        count += n - j\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n\n    while left < right:\n        if arr[right] > arr[left]:\n            count += 1\n            right -= 1\n        left += 1\n        right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the index of the smallest element in the array\n    min_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n    # Calculate the count of rotations required\n    count = n - min_idx\n    # Reverse the array to get the required sorted array\n    arr.reverse()\n    # Count the number of rotations required to sort the array\n    count += count_sort(arr)\n    return count\n\n\ndef count_sort(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the maximum element in the array\n    max_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_elem:\n            max_elem = arr[i]\n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    # Initialize the count of rotations required\n    count = 0\n    # If both the minimum and maximum elements are same, then there is no rotation required\n    if max_elem == min_elem:\n        return count\n    # If the minimum element is greater than the maximum element, then rotate the array to make the maximum element the smallest\n    if min_elem > max_elem:\n        arr.reverse()\n        count += 1\n    # Create a temporary array to store the sorted array\n    temp_arr = [None] * n\n    # Traverse the array and count the number of rotations required\n    for i in range(n):\n        # Check if the element is already present in the temporary array\n        for j in range(n):\n            if temp_arr[j] == arr[i]:\n                count += n - j\n        # Insert the element in the temporary array\n        if temp_arr[count] == None:\n            temp_arr[count] = arr[i]\n        else:\n            count += 1\n            temp_arr[count] = arr[i]\n    # Reverse the temporary array to get the required sorted array\n    temp_arr.reverse()\n    # Replace the original array with the temporary array\n    arr[:] = temp_arr\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Finding the maximum element in the array\n    max_num = max(arr)\n    # Finding the minimum element in the array\n    min_num = min(arr)\n    # If both minimum and maximum elements are same, then there is only one rotation\n    if min_num == max_num:\n        return 1\n    # Initialize a variable to count the number of rotations\n    count = 0\n    # Loop through all possible rotations of the array\n    for i in range(1, n):\n        # Finding the sum of all elements in the current rotation\n        sum_current_rotation = sum(arr[i:])\n        # Finding the sum of all elements in the previous rotation\n        sum_previous_rotation = sum(arr[:i])\n        # If the sum of the current rotation is greater than the sum of the previous rotation, then there is a rotation\n        if sum_current_rotation > sum_previous_rotation:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # initialize variable to store square root\n    sqrt_n = 0\n\n    # calculate square root of given number\n    while n > 0:\n        n = n / 2\n        sqrt_n += 1\n\n    # check whether square root is an integer\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # Find the square root of the number\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 0\n    square = 0\n    while square <= n:\n        square += i**2\n        i += 1\n    if square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the given number is negative\n    if n < 0:\n        return False\n\n    # Find the square root of the given number using the math module\n    sqrt_n = round(n ** 0.5)\n\n    # Check if the square root of the given number is an integer\n    if sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is already a perfect square\n    if n == int(n**0.5 + 0.5)**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(n**0.5)\n    for i in range(sqrt_n, 0, -1):\n        if i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # initialize the square root of the number and the difference between it and the actual square root\n    square_root = n ** 0.5\n    difference = square_root - int(square_root)\n    # if the difference is less than or equal to 0.0001, then the number is a perfect square\n    if difference <= 0.0001:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a perfect square and False otherwise.\n    A perfect square is a number that is the square of an integer, i.e., it is equal to the square of its\n    square root.\n    \"\"\"\n    import math\n    \n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n*sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Check if n is a square number or not\n    for i in range(int(n ** 0.5) + 1):\n        if n ** 0.5 ** i == i:\n            return True\n    \n    # If n is not a square number, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n\n    sqrt_n = int(math.sqrt(n))\n\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[0] == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    if arr[0] % 2 == 0:\n        return is_product_even(arr[1:]) and arr[0] % 2 == 0\n    return is_product_even(arr[1:]) and arr[0] % 2!= 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as input and returns a boolean value indicating whether the product of numbers in the list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    # Initialize variables\n    product = 1\n    even_product = 1\n    \n    # Iterate through the list\n    for num in arr:\n        # Multiply the product and current number\n        product *= num\n        \n        # Check if the product is even or odd\n        if product % 2 == 0:\n            # If even, add it to the even_product\n            even_product += product\n            \n        # Reset the product\n        product = 1\n        \n    # Check if the even_product is even or odd\n    if even_product % 2 == 0:\n        # If even, return True\n        return True\n    else:\n        # If odd, return False\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    best_list = []\n    for lst in lists:\n        if lst == []:\n            continue\n        # calculate the sum of all elements in lst\n        sum_lst = sum(lst)\n        # if this sum is greater than the current max sum, update max_sum and best_list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            best_list = lst\n    return best_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum to be the first element of the first list\n    max_sum = lists[0][0]\n    # Initialize a list to store the indices of the best sublists\n    best_indices = []\n    # Iterate over all pairs of sublists\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            # Calculate the sum of the two sublists and check if it is greater than the maximum sum\n            sublist_sum = sum(lists[i]) + sum(lists[j])\n            if sublist_sum > max_sum:\n                # If it is, update the maximum sum and the indices of the best sublists\n                max_sum = sublist_sum\n                best_indices = [i, j]\n    # Return the sublist with the maximum sum\n    return lists[best_indices[0]], lists[best_indices[1]]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Iterate over all possible combinations of lists\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            # Calculate the sum of the two sublists\n            sublist1 = lists[i]\n            sublist2 = lists[j]\n            sublist_sum = sum(sublist1 + sublist2)\n            # Update the maximum sum and list if the new sum is greater than the current maximum\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_list = [sublist1, sublist2]\n                \n    # Return the maximum sum and list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = 0\n    current_sum = 0\n\n    # Loop through the lists\n    for i in range(len(lists)):\n        # Add the elements of the current list to the current sum\n        current_sum += lists[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        elif current_sum < 0:\n            current_sum = 0\n\n    # Create a list of tuples containing the maximum sum and the list itself\n    max_list = [(max_sum, i) for i in lists]\n\n    # Sort the list of tuples by the maximum sum and return the second element (the list)\n    return sorted(max_list, key=lambda x: x[0])[0][1]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                if lists[i][j][k] > max_sum:\n                    max_sum = lists[i][j][k]\n                    max_list = [[lists[i][j][k]]]\n                elif lists[i][j][k] == max_sum:\n                    max_list.append(lists[i][j][k])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Sort the lists based on their sum of elements in descending order\n    sorted_lists = sorted(lists, key=lambda x: sum(map(int, x)), reverse=True)\n\n    # Return the first list in the sorted list\n    return sorted_lists[0]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize maximum sum to negative infinity\n    max_sum = float('-inf')\n    # initialize current sum to zero\n    curr_sum = 0\n    # loop through each list in the input lists\n    for lst in lists:\n        # loop through each element in the list and add it to the current sum\n        for num in lst:\n            curr_sum += num\n        # if the current sum is greater than the maximum sum, update the maximum sum and the list with the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_lst = lst\n    # return the list with the maximum sum\n    return max_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # find the maximum sum in the list\n    max_sum = 0\n    for list in lists:\n        sum_list = sum(list)\n        if sum_list > max_sum:\n            max_sum = sum_list\n    # find the list with the maximum sum\n    max_list = []\n    for list in lists:\n        sum_list = sum(list)\n        if sum_list == max_sum:\n            max_list = list\n            break\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the current run and the start index of the run\n    current_run = 0\n    start_index = 0\n    # Iterate over the characters in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and not a space, increment the current run\n        if test_str[i].isupper() and test_str[i]!='':\n            current_run += 1\n        # If the current character is not uppercase or is a space, reset the current run and start index\n        else:\n            if current_run > current_run_previous:\n                max_run = current_run_previous\n            else:\n                max_run = current_run\n            # Update the maximum run and start index for the previous iteration of the loop\n            current_run_previous = current_run\n            start_index_previous = start_index\n            current_run = 0\n            start_index = i + 1\n    # If there is a longer run at the end of the string, update the maximum run and start index\n    if current_run > current_run_previous:\n        max_run = current_run_previous\n    else:\n        max_run = current_run\n    # Return the maximum run and start index\n    return max_run, start_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize max_run as 0\n    max_run = 0\n\n    # Loop through each character of the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase and its next character is also uppercase, increment max_run\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            max_run += 1\n\n        # If the current character is not uppercase and its next character is uppercase, update max_run to 1\n        elif not test_str[i].isupper() and test_str[i+1].isupper():\n            max_run = 1\n\n        # If the current character is uppercase and its next character is not uppercase, update max_run to 0\n        elif test_str[i].isupper() and not test_str[i+1].isupper():\n            max_run = 0\n\n        # If the current character is not uppercase and its next character is not uppercase, decrement max_run\n        elif not test_str[i].isupper() and not test_str[i+1].isupper():\n            max_run -= 1\n\n        # If the current character is not uppercase and its next character is not uppercase, decrement max_run\n        elif test_str[i].isupper() and test_str[i+1].isupper():\n            max_run -= 2\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Time Complexity: O(n)\n\n    Algorithm:\n\n    - Initialize two pointers, start and end, to 0.\n    - Initialize a variable max_run to 1.\n    - Initialize a variable current_run to 1.\n    - Traverse the string character by character.\n    - If the current character is uppercase, increase current_run by 1.\n    - If the current character is not uppercase, reset current_run to 1.\n    - If current_run is greater than max_run, update max_run to current_run.\n    - If max_run is greater than 1, return max_run as the maximum run of uppercase characters.\n    - If max_run is 1, return an empty string as there is no run of uppercase characters.\n\n    Example:\n\n    Test_string = \"Hello World\"\n    max_run_uppercase(Test_string) # Output: \"llo\"\n    '''\n\n    start = 0\n    end = 0\n    max_run = 1\n    current_run = 1\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n\n        if current_run > max_run:\n            max_run = current_run\n            start = i - max_run + 1\n            end = i\n        elif max_run > 1 and start == i - 1:\n            break\n\n    if max_run > 1:\n        return test_str[start:end+1]\n    else:\n        return \"\""
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run_length = 0\n    current_run_length = 0\n    last_upper_case = False\n    \n    # Loop through the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run length\n        if char.isupper():\n            current_run_length += 1\n            last_upper_case = True\n        else:\n            # If the current character is not uppercase, reset the current run length\n            if last_upper_case:\n                max_run_length = max(max_run_length, current_run_length)\n                current_run_length = 0\n            last_upper_case = False\n    \n    # If the string ends with an uppercase run, update the maximum run length\n    if last_upper_case:\n        max_run_length = max(max_run_length, current_run_length)\n    \n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    count = 0\n    max_count = 0\n    current_count = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_count += 1\n        else:\n            if current_count > max_count:\n                max_count = current_count\n                start_index = i - max_count + 1\n            current_count = 0\n\n    if current_count > max_count:\n        max_count = current_count\n        start_index = len(test_str) - max_count\n\n    return test_str[start_index:start_index+max_count]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    current_run_start = 0\n    current_run_end = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > current_run_end - current_run_start + 1:\n                current_run_start = i - uppercase_count + 1\n                current_run_end = i\n            else:\n                current_run_start = i\n            uppercase_count = 0\n\n    if uppercase_count > current_run_end - current_run_start + 1:\n        current_run_end = len(test_str) - 1\n\n    return test_str[current_run_start:current_run_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    current_run = []\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run.append(char)\n        else:\n            if len(current_run) > max_run:\n                max_run = len(current_run)\n                uppercase_run = current_run\n            current_run = []\n    \n    if len(current_run) > max_run:\n        max_run = len(current_run)\n        uppercase_run = current_run\n    \n    return max_run, uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    start_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n                start_index = i - max_run + 1\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n        start_index = i - max_run + 1\n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    # create an empty list to store the run lengths of uppercase characters\n    run_lengths = []\n    \n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the character is uppercase, check if it is the start of a run\n        if test_str[i].isupper():\n            # if it is the start of a run, start a new run with length 1\n            run_lengths.append(1)\n        # if the character is not uppercase, check if it is the end of the current run\n        elif len(run_lengths) > 0 and test_str[i].islower():\n            # if it is the end of the current run, increase the length of the run\n            run_lengths[-1] += 1\n        # if the character is not uppercase or the end of the current run is not found, reset the run length to 0\n        else:\n            run_lengths = []\n    \n    # find the maximum run length among the run lengths in the list\n    max_run_length = max(run_lengths)\n    \n    # loop through each run length in the list to find the maximum run of uppercase characters\n    max_run = ''\n    for i in range(len(run_lengths)):\n        if run_lengths[i] == max_run_length:\n            max_run += test_str[i-max_run_length:i]\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            return num  # return the number if it is odd\n    return None  # if no odd numbers are found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # if no odd number is found in the list\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        if test_tup[1] in K:\n            return True\n        else:\n            return False\n    else:\n        if test_tup[1] in K:\n            return False\n        else:\n            return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n\n    if count == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_set = set(K)\n    for tup in test_tup:\n        if set(tup) == k_set:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i]!= K:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(K)) == len(K):\n        return all(elem in test_tup for elem in K)\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # Compare the two elements\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Length of both tuples should be equal.\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return \"The element in the first tuple is greater than the corresponding element in the second tuple.\"\n        return \"All elements are smaller or equal.\"\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length!\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n            \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The first tuple must be smaller than or equal to the second tuple.\")\n            return\n\n    print(\"The two tuples are smaller than each other.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n\n    # loop through the two tuples\n    for i in range(len(test_tup1)):\n        # check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # if no false values are returned, then all elements in the second tuple are smaller than their corresponding elements in the first tuple\n    return True"
    }
]